
#include "GroundControl.hpp"
#include <string.h>
#include <stdio.h>
#include <assert.h>

using namespace com::company::demo;


namespace org {
	namespace unirail {
		namespace test {

			struct ATTITUDE_TARGET {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				int8_t type_mask() const { return static_cast<int8_t>((&data_)[4]); }

				void type_mask(int8_t src) const { (&data_)[4] = (uint8_t)(src); }

				struct q_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, q_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, q_> end() const { return { *this, 4 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 4;

				};

				struct q_ q() const {
					struct q_ ret { &data_ + 5 };
					return ret;
				}

				template<typename float_src_container>
				q_ q(const float_src_container& src) const {
					auto        first = src.begin();
					struct q_   ret { &data_ + 5 };
					for (size_t i = 0; i < 4; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				q_ q(float* const src) const { return q(static_cast<float const*>(src)); }

				q_ q(float const* const src) const {
					struct q_       ret { &data_ + 5 };
					if (src)
						for (size_t i = 0; i < 4; i++)
							ret.set(src[i], i);
					return ret;
				}

				float body_roll_rate() const { return (intBitsToFloat(get_bytes(&data_, 21, 4))); }

				void body_roll_rate(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 21); }

				float body_pitch_rate() const { return (intBitsToFloat(get_bytes(&data_, 25, 4))); }

				void body_pitch_rate(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 25); }

				float body_yaw_rate() const { return (intBitsToFloat(get_bytes(&data_, 29, 4))); }

				void body_yaw_rate(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 29); }

				float thrust() const { return (intBitsToFloat(get_bytes(&data_, 33, 4))); }

				void thrust(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 33); }

			};

			struct MISSION_COUNT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t count() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void count(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void target_system(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[3]); }

				void target_component(int8_t src) const { (data_.base.bytes)[3] = (uint8_t)(src); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 32 && !set_field(&data_, 32, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 32) set_field(&data_, 32, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct GLOBAL_POSITION_INT_COV {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 0); }

				int32_t lat() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 8, 4))); }

				void lat(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 8); }

				int32_t lon() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 12, 4))); }

				void lon(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 12); }

				int32_t alt() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 16, 4))); }

				void alt(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 16); }

				int32_t relative_alt() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 20, 4))); }

				void relative_alt(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 20); }

				float vx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 24, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 24); }

				float vy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 28, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 28); }

				float vz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 32, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 32); }

				struct covariance_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, covariance_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, covariance_> end() const { return { *this, 36 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 36;

				};

				struct covariance_ covariance() const {
					struct covariance_ ret { data_.base.bytes + 36 };
					return ret;
				}

				template<typename float_src_container>
				covariance_ covariance(const float_src_container& src) const {
					auto               first = src.begin();
					struct covariance_ ret { data_.base.bytes + 36 };
					for (size_t i = 0; i < 36; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				covariance_ covariance(float* const src) const { return covariance(static_cast<float const*>(src)); }

				covariance_ covariance(float const* const src) const {
					struct covariance_ ret { data_.base.bytes + 36 };
					if (src)
						for (size_t i = 0; i < 36; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct estimator_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_ESTIMATOR_TYPE value;

						} EXISTS;
					}          CASE;

				};


				estimator_type_ estimator_type() const {
					if (data_.base.field_bit != 1440 && !set_field(&data_, 1440, -1)) return { 0, 0 };
					estimator_type_ ret{ true, static_cast<enum MAV_ESTIMATOR_TYPE> (static_cast<enum MAV_ESTIMATOR_TYPE>(1 + get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void estimator_type(enum MAV_ESTIMATOR_TYPE src) const {

					if (data_.base.field_bit != 1440) set_field(&data_, 1440, 0);

					set_bits(static_cast<uintptr_t>(-1
						src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct SAFETY_SET_ALLOWED_AREA {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				float p1x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 2, 4))); }

				void p1x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 2); }

				float p1y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 6, 4))); }

				void p1y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 6); }

				float p1z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 10, 4))); }

				void p1z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 10); }

				float p2x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 14, 4))); }

				void p2x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 14); }

				float p2y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 18, 4))); }

				void p2y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 18); }

				float p2z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 22, 4))); }

				void p2z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 22); }

				struct frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				frame_ frame() const {
					if (data_.base.field_bit != 208 && !set_field(&data_, 208, -1)) return { 0, 0 };
					frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 208) set_field(&data_, 208, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct GPS_STATUS {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int8_t satellites_visible() const { return static_cast<int8_t>((&data_)[0]); }

				void satellites_visible(int8_t src) const { (&data_)[0] = (uint8_t)(src); }

				struct satellite_prn_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<int8_t, satellite_prn_> begin() const { return { *this }; }

					org::unirail::utils::iterator<int8_t, satellite_prn_> end() const { return { *this, 20 }; }

					int8_t get(size_t index) const { return static_cast<int8_t>((bytes)[index]); }


					void set(int8_t src, size_t index) const {

						(bytes)[index] = (uint8_t)(src);
					}

					static constexpr size_t len = 20;

				};

				struct satellite_prn_ satellite_prn() const {
					struct satellite_prn_ ret { &data_ + 1 };
					return ret;
				}

				template<typename int8_src_container>
				satellite_prn_ satellite_prn(const int8_src_container& src) const {
					auto                  first = src.begin();
					struct satellite_prn_ ret { &data_ + 1 };
					for (size_t i = 0; i < 20; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				satellite_prn_ satellite_prn(int8_t* const src) const { return satellite_prn(static_cast<int8_t const*>(src)); }

				satellite_prn_ satellite_prn(int8_t const* const src) const {
					struct satellite_prn_ ret { &data_ + 1 };
					if (src)
						for (size_t i = 0; i < 20; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct satellite_used_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<int8_t, satellite_used_> begin() const { return { *this }; }

					org::unirail::utils::iterator<int8_t, satellite_used_> end() const { return { *this, 20 }; }

					int8_t get(size_t index) const { return static_cast<int8_t>((bytes)[index]); }


					void set(int8_t src, size_t index) const {

						(bytes)[index] = (uint8_t)(src);
					}

					static constexpr size_t len = 20;

				};

				struct satellite_used_ satellite_used() const {
					struct satellite_used_ ret { &data_ + 21 };
					return ret;
				}

				template<typename int8_src_container>
				satellite_used_ satellite_used(const int8_src_container& src) const {
					auto                   first = src.begin();
					struct satellite_used_ ret { &data_ + 21 };
					for (size_t i = 0; i < 20; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				satellite_used_ satellite_used(int8_t* const src) const { return satellite_used(static_cast<int8_t const*>(src)); }

				satellite_used_ satellite_used(int8_t const* const src) const {
					struct satellite_used_ ret { &data_ + 21 };
					if (src)
						for (size_t i = 0; i < 20; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct satellite_elevation_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<int8_t, satellite_elevation_> begin() const { return { *this }; }

					org::unirail::utils::iterator<int8_t, satellite_elevation_> end() const { return { *this, 20 }; }

					int8_t get(size_t index) const { return static_cast<int8_t>((bytes)[index]); }


					void set(int8_t src, size_t index) const {

						(bytes)[index] = (uint8_t)(src);
					}

					static constexpr size_t len = 20;

				};

				struct satellite_elevation_ satellite_elevation() const {
					struct satellite_elevation_ ret { &data_ + 41 };
					return ret;
				}

				template<typename int8_src_container>
				satellite_elevation_ satellite_elevation(const int8_src_container& src) const {
					auto                        first = src.begin();
					struct satellite_elevation_ ret { &data_ + 41 };
					for (size_t i = 0; i < 20; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				satellite_elevation_ satellite_elevation(int8_t* const src) const { return satellite_elevation(static_cast<int8_t const*>(src)); }

				satellite_elevation_ satellite_elevation(int8_t const* const src) const {
					struct satellite_elevation_ ret { &data_ + 41 };
					if (src)
						for (size_t i = 0; i < 20; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct satellite_azimuth_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<int8_t, satellite_azimuth_> begin() const { return { *this }; }

					org::unirail::utils::iterator<int8_t, satellite_azimuth_> end() const { return { *this, 20 }; }

					int8_t get(size_t index) const { return static_cast<int8_t>((bytes)[index]); }


					void set(int8_t src, size_t index) const {

						(bytes)[index] = (uint8_t)(src);
					}

					static constexpr size_t len = 20;

				};

				struct satellite_azimuth_ satellite_azimuth() const {
					struct satellite_azimuth_ ret { &data_ + 61 };
					return ret;
				}

				template<typename int8_src_container>
				satellite_azimuth_ satellite_azimuth(const int8_src_container& src) const {
					auto                      first = src.begin();
					struct satellite_azimuth_ ret { &data_ + 61 };
					for (size_t i = 0; i < 20; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				satellite_azimuth_ satellite_azimuth(int8_t* const src) const { return satellite_azimuth(static_cast<int8_t const*>(src)); }

				satellite_azimuth_ satellite_azimuth(int8_t const* const src) const {
					struct satellite_azimuth_ ret { &data_ + 61 };
					if (src)
						for (size_t i = 0; i < 20; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct satellite_snr_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<int8_t, satellite_snr_> begin() const { return { *this }; }

					org::unirail::utils::iterator<int8_t, satellite_snr_> end() const { return { *this, 20 }; }

					int8_t get(size_t index) const { return static_cast<int8_t>((bytes)[index]); }


					void set(int8_t src, size_t index) const {

						(bytes)[index] = (uint8_t)(src);
					}

					static constexpr size_t len = 20;

				};

				struct satellite_snr_ satellite_snr() const {
					struct satellite_snr_ ret { &data_ + 81 };
					return ret;
				}

				template<typename int8_src_container>
				satellite_snr_ satellite_snr(const int8_src_container& src) const {
					auto                  first = src.begin();
					struct satellite_snr_ ret { &data_ + 81 };
					for (size_t i = 0; i < 20; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				satellite_snr_ satellite_snr(int8_t* const src) const { return satellite_snr(static_cast<int8_t const*>(src)); }

				satellite_snr_ satellite_snr(int8_t const* const src) const {
					struct satellite_snr_ ret { &data_ + 81 };
					if (src)
						for (size_t i = 0; i < 20; i++)
							ret.set(src[i], i);
					return ret;
				}

			};

			struct PARAM_SET {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				float param_value() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 2, 4))); }

				void param_value(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 2); }

				struct param_id_ {
					const bool              IS_EXISTS;
					union CASE {
						struct EXISTS {
							uint8_t* const bytes;
							const size_t length;

							org::unirail::utils::iterator<char, EXISTS> begin() const { return { *this }; }

							org::unirail::utils::iterator<char, EXISTS> end() const { return { *this, length }; }

							char get(size_t index) const { return static_cast<char>((bytes)[index]); }

							void set(char src, size_t index) const { (bytes)[index] = (uint8_t)(src); }
						} EXISTS;
					}                       CASE;
					static constexpr size_t len_max = 255;

				};


				param_id_ param_id() const {
					if (data_.base.field_bit != 50 && !set_field(&data_, 50, -1)) return { 0, 0, 0 };

					param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					return ret;
				}

				template<typename char_src_container>
				param_id_ param_id(const char_src_container& src) const {
					auto first = src.begin();
					auto last = src.end();

					auto len = std::distance(first, last);
					len = 255 < len ? 255 : len;

					if (data_.base.field_bit != 50) set_field(&data_, 50, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					std::copy(first, last, data_.base.bytes + data_.BYTE);
					return ret;
				}

				param_id_ param_id(const char src[], size_t len) const {
					len = 255 < len ? 255 : len;
					if (data_.base.field_bit != 50) set_field(&data_, 50, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					if (src)
						for (size_t i = 0; i < len; i++)
							ret.CASE.EXISTS.set(src[i], i);
					return ret;
				}


				struct param_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_PARAM_TYPE value;

						} EXISTS;
					}          CASE;

				};


				param_type_ param_type() const {
					if (data_.base.field_bit != 51 && !set_field(&data_, 51, -1)) return { 0, 0 };
					param_type_ ret{ true, static_cast<enum MAV_PARAM_TYPE> (static_cast<enum MAV_PARAM_TYPE>(1 + get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void param_type(enum MAV_PARAM_TYPE src) const {

					if (data_.base.field_bit != 51) set_field(&data_, 51, 0);

					set_bits(static_cast<uintptr_t>(-1
						src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct RC_CHANNELS_OVERRIDE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t chan1_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void chan1_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int16_t chan2_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 2, 2))); }

				void chan2_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 2); }

				int16_t chan3_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 4, 2))); }

				void chan3_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 4); }

				int16_t chan4_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 6, 2))); }

				void chan4_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 6); }

				int16_t chan5_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void chan5_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t chan6_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void chan6_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t chan7_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void chan7_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t chan8_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void chan8_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

				int8_t target_system() const { return static_cast<int8_t>((&data_)[16]); }

				void target_system(int8_t src) const { (&data_)[16] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((&data_)[17]); }

				void target_component(int8_t src) const { (&data_)[17] = (uint8_t)(src); }

			};

			struct SCALED_IMU {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				int16_t xacc() const { return (static_cast<int16_t> (get_bytes(&data_, 4, 2))); }

				void xacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 4); }

				int16_t yacc() const { return (static_cast<int16_t> (get_bytes(&data_, 6, 2))); }

				void yacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 6); }

				int16_t zacc() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void zacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t xgyro() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void xgyro(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t ygyro() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void ygyro(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t zgyro() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void zgyro(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

				int16_t xmag() const { return (static_cast<int16_t> (get_bytes(&data_, 16, 2))); }

				void xmag(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 16); }

				int16_t ymag() const { return (static_cast<int16_t> (get_bytes(&data_, 18, 2))); }

				void ymag(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 18); }

				int16_t zmag() const { return (static_cast<int16_t> (get_bytes(&data_, 20, 2))); }

				void zmag(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 20); }

			};

			struct PARAM_REQUEST_READ {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int16_t param_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void param_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				struct param_id_ {
					const bool              IS_EXISTS;
					union CASE {
						struct EXISTS {
							uint8_t* const bytes;
							const size_t length;

							org::unirail::utils::iterator<char, EXISTS> begin() const { return { *this }; }

							org::unirail::utils::iterator<char, EXISTS> end() const { return { *this, length }; }

							char get(size_t index) const { return static_cast<char>((bytes)[index]); }

							void set(char src, size_t index) const { (bytes)[index] = (uint8_t)(src); }
						} EXISTS;
					}                       CASE;
					static constexpr size_t len_max = 255;

				};


				param_id_ param_id() const {
					if (data_.base.field_bit != 34 && !set_field(&data_, 34, -1)) return { 0, 0, 0 };

					param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					return ret;
				}

				template<typename char_src_container>
				param_id_ param_id(const char_src_container& src) const {
					auto first = src.begin();
					auto last = src.end();

					auto len = std::distance(first, last);
					len = 255 < len ? 255 : len;

					if (data_.base.field_bit != 34) set_field(&data_, 34, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					std::copy(first, last, data_.base.bytes + data_.BYTE);
					return ret;
				}

				param_id_ param_id(const char src[], size_t len) const {
					len = 255 < len ? 255 : len;
					if (data_.base.field_bit != 34) set_field(&data_, 34, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					if (src)
						for (size_t i = 0; i < len; i++)
							ret.CASE.EXISTS.set(src[i], i);
					return ret;
				}


			};

			struct SET_ATTITUDE_TARGET {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				int8_t target_system() const { return static_cast<int8_t>((&data_)[4]); }

				void target_system(int8_t src) const { (&data_)[4] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((&data_)[5]); }

				void target_component(int8_t src) const { (&data_)[5] = (uint8_t)(src); }

				int8_t type_mask() const { return static_cast<int8_t>((&data_)[6]); }

				void type_mask(int8_t src) const { (&data_)[6] = (uint8_t)(src); }

				struct q_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, q_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, q_> end() const { return { *this, 4 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 4;

				};

				struct q_ q() const {
					struct q_ ret { &data_ + 7 };
					return ret;
				}

				template<typename float_src_container>
				q_ q(const float_src_container& src) const {
					auto        first = src.begin();
					struct q_   ret { &data_ + 7 };
					for (size_t i = 0; i < 4; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				q_ q(float* const src) const { return q(static_cast<float const*>(src)); }

				q_ q(float const* const src) const {
					struct q_       ret { &data_ + 7 };
					if (src)
						for (size_t i = 0; i < 4; i++)
							ret.set(src[i], i);
					return ret;
				}

				float body_roll_rate() const { return (intBitsToFloat(get_bytes(&data_, 23, 4))); }

				void body_roll_rate(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 23); }

				float body_pitch_rate() const { return (intBitsToFloat(get_bytes(&data_, 27, 4))); }

				void body_pitch_rate(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 27); }

				float body_yaw_rate() const { return (intBitsToFloat(get_bytes(&data_, 31, 4))); }

				void body_yaw_rate(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 31); }

				float thrust() const { return (intBitsToFloat(get_bytes(&data_, 35, 4))); }

				void thrust(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 35); }

			};

			struct HIL_STATE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, &data_, 0); }

				float roll() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float pitch() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float yaw() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float rollspeed() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void rollspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float pitchspeed() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void pitchspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

				float yawspeed() const { return (intBitsToFloat(get_bytes(&data_, 28, 4))); }

				void yawspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 28); }

				int32_t lat() const { return (static_cast<int32_t> (get_bytes(&data_, 32, 4))); }

				void lat(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 32); }

				int32_t lon() const { return (static_cast<int32_t> (get_bytes(&data_, 36, 4))); }

				void lon(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 36); }

				int32_t alt() const { return (static_cast<int32_t> (get_bytes(&data_, 40, 4))); }

				void alt(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 40); }

				int16_t vx() const { return (static_cast<int16_t> (get_bytes(&data_, 44, 2))); }

				void vx(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 44); }

				int16_t vy() const { return (static_cast<int16_t> (get_bytes(&data_, 46, 2))); }

				void vy(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 46); }

				int16_t vz() const { return (static_cast<int16_t> (get_bytes(&data_, 48, 2))); }

				void vz(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 48); }

				int16_t xacc() const { return (static_cast<int16_t> (get_bytes(&data_, 50, 2))); }

				void xacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 50); }

				int16_t yacc() const { return (static_cast<int16_t> (get_bytes(&data_, 52, 2))); }

				void yacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 52); }

				int16_t zacc() const { return (static_cast<int16_t> (get_bytes(&data_, 54, 2))); }

				void zacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 54); }

			};

			struct REQUEST_DATA_STREAM {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t req_message_rate() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void req_message_rate(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int8_t target_system() const { return static_cast<int8_t>((&data_)[2]); }

				void target_system(int8_t src) const { (&data_)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((&data_)[3]); }

				void target_component(int8_t src) const { (&data_)[3] = (uint8_t)(src); }

				int8_t req_stream_id() const { return static_cast<int8_t>((&data_)[4]); }

				void req_stream_id(int8_t src) const { (&data_)[4] = (uint8_t)(src); }

				int8_t start_stop() const { return static_cast<int8_t>((&data_)[5]); }

				void start_stop(int8_t src) const { (&data_)[5] = (uint8_t)(src); }

			};

			struct HIL_CONTROLS {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 0); }

				float roll_ailerons() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 8, 4))); }

				void roll_ailerons(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 8); }

				float pitch_elevator() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 12, 4))); }

				void pitch_elevator(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 12); }

				float yaw_rudder() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 16, 4))); }

				void yaw_rudder(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 16); }

				float throttle() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 20, 4))); }

				void throttle(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 20); }

				float aux1() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 24, 4))); }

				void aux1(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 24); }

				float aux2() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 28, 4))); }

				void aux2(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 28); }

				float aux3() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 32, 4))); }

				void aux3(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 32); }

				float aux4() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 36, 4))); }

				void aux4(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 36); }

				int8_t nav_mode() const { return static_cast<int8_t>((data_.base.bytes)[40]); }

				void nav_mode(int8_t src) const { (data_.base.bytes)[40] = (uint8_t)(src); }

				struct mode_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MODE value;

						} EXISTS;
					}          CASE;

				};


				mode_ mode() const {
					if (data_.base.field_bit != 328 && !set_field(&data_, 328, -1)) return { 0, 0 };
					mode_ ret{ true, static_cast<enum MAV_MODE> (MAV_MODE_from(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void mode(enum MAV_MODE src) const {

					if (data_.base.field_bit != 328) set_field(&data_, 328, 0);

					set_bits(MAV_MODE_into(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct PARAM_REQUEST_LIST {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int8_t target_system() const { return static_cast<int8_t>((&data_)[0]); }

				void target_system(int8_t src) const { (&data_)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((&data_)[1]); }

				void target_component(int8_t src) const { (&data_)[1] = (uint8_t)(src); }

			};

			struct SET_POSITION_TARGET_GLOBAL_INT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t type_mask() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void type_mask(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 2, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 2); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[6]); }

				void target_system(int8_t src) const { (data_.base.bytes)[6] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[7]); }

				void target_component(int8_t src) const { (data_.base.bytes)[7] = (uint8_t)(src); }

				int32_t lat_int() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 8, 4))); }

				void lat_int(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 8); }

				int32_t lon_int() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 12, 4))); }

				void lon_int(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 12); }

				float alt() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 16, 4))); }

				void alt(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 16); }

				float vx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 20, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 20); }

				float vy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 24, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 24); }

				float vz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 28, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 28); }

				float afx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 32, 4))); }

				void afx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 32); }

				float afy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 36, 4))); }

				void afy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 36); }

				float afz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 40, 4))); }

				void afz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 40); }

				float yaw() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 44, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 44); }

				float yaw_rate() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 48, 4))); }

				void yaw_rate(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 48); }

				struct coordinate_frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				coordinate_frame_ coordinate_frame() const {
					if (data_.base.field_bit != 416 && !set_field(&data_, 416, -1)) return { 0, 0 };
					coordinate_frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void coordinate_frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 416) set_field(&data_, 416, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct VFR_HUD {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t throttle() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void throttle(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				float airspeed() const { return (intBitsToFloat(get_bytes(&data_, 2, 4))); }

				void airspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 2); }

				float groundspeed() const { return (intBitsToFloat(get_bytes(&data_, 6, 4))); }

				void groundspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 6); }

				int16_t heading() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void heading(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				float alt() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void alt(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float climb() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void climb(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

			};

			struct MISSION_SET_CURRENT {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int8_t target_system() const { return static_cast<int8_t>((&data_)[2]); }

				void target_system(int8_t src) const { (&data_)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((&data_)[3]); }

				void target_component(int8_t src) const { (&data_)[3] = (uint8_t)(src); }

			};

			struct NAV_CONTROLLER_OUTPUT {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t wp_dist() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void wp_dist(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				float nav_roll() const { return (intBitsToFloat(get_bytes(&data_, 2, 4))); }

				void nav_roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 2); }

				float nav_pitch() const { return (intBitsToFloat(get_bytes(&data_, 6, 4))); }

				void nav_pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 6); }

				int16_t nav_bearing() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void nav_bearing(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t target_bearing() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void target_bearing(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				float alt_error() const { return (intBitsToFloat(get_bytes(&data_, 14, 4))); }

				void alt_error(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 14); }

				float aspd_error() const { return (intBitsToFloat(get_bytes(&data_, 18, 4))); }

				void aspd_error(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 18); }

				float xtrack_error() const { return (intBitsToFloat(get_bytes(&data_, 22, 4))); }

				void xtrack_error(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 22); }

			};

			struct AUTH_KEY {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}


				struct key_ {
					const bool              IS_EXISTS;
					union CASE {
						struct EXISTS {
							uint8_t* const bytes;
							const size_t length;

							org::unirail::utils::iterator<char, EXISTS> begin() const { return { *this }; }

							org::unirail::utils::iterator<char, EXISTS> end() const { return { *this, length }; }

							char get(size_t index) const { return static_cast<char>((bytes)[index]); }

							void set(char src, size_t index) const { (bytes)[index] = (uint8_t)(src); }
						} EXISTS;
					}                       CASE;
					static constexpr size_t len_max = 255;

				};


				key_ key() const {
					if (data_.base.field_bit != 2 && !set_field(&data_, 2, -1)) return { 0, 0, 0 };

					key_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					return ret;
				}

				template<typename char_src_container>
				key_ key(const char_src_container& src) const {
					auto first = src.begin();
					auto last = src.end();

					auto len = std::distance(first, last);
					len = 255 < len ? 255 : len;

					if (data_.base.field_bit != 2) set_field(&data_, 2, len);
					const key_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					std::copy(first, last, data_.base.bytes + data_.BYTE);
					return ret;
				}

				key_ key(const char src[], size_t len) const {
					len = 255 < len ? 255 : len;
					if (data_.base.field_bit != 2) set_field(&data_, 2, len);
					const key_      ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					if (src)
						for (size_t i = 0; i < len; i++)
							ret.CASE.EXISTS.set(src[i], i);
					return ret;
				}


			};

			struct LOCAL_POSITION_NED_COV {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 0); }

				float x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 8, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 8); }

				float y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 12, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 12); }

				float z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 16, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 16); }

				float vx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 20, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 20); }

				float vy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 24, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 24); }

				float vz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 28, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 28); }

				float ax() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 32, 4))); }

				void ax(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 32); }

				float ay() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 36, 4))); }

				void ay(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 36); }

				float az() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 40, 4))); }

				void az(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 40); }

				struct covariance_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, covariance_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, covariance_> end() const { return { *this, 45 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 45;

				};

				struct covariance_ covariance() const {
					struct covariance_ ret { data_.base.bytes + 44 };
					return ret;
				}

				template<typename float_src_container>
				covariance_ covariance(const float_src_container& src) const {
					auto               first = src.begin();
					struct covariance_ ret { data_.base.bytes + 44 };
					for (size_t i = 0; i < 45; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				covariance_ covariance(float* const src) const { return covariance(static_cast<float const*>(src)); }

				covariance_ covariance(float const* const src) const {
					struct covariance_ ret { data_.base.bytes + 44 };
					if (src)
						for (size_t i = 0; i < 45; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct estimator_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_ESTIMATOR_TYPE value;

						} EXISTS;
					}          CASE;

				};


				estimator_type_ estimator_type() const {
					if (data_.base.field_bit != 1792 && !set_field(&data_, 1792, -1)) return { 0, 0 };
					estimator_type_ ret{ true, static_cast<enum MAV_ESTIMATOR_TYPE> (static_cast<enum MAV_ESTIMATOR_TYPE>(1 + get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void estimator_type(enum MAV_ESTIMATOR_TYPE src) const {

					if (data_.base.field_bit != 1792) set_field(&data_, 1792, 0);

					set_bits(static_cast<uintptr_t>(-1
						src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct PING {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t seq() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void seq(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 4, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, &data_, 4); }

				int8_t target_system() const { return static_cast<int8_t>((&data_)[12]); }

				void target_system(int8_t src) const { (&data_)[12] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((&data_)[13]); }

				void target_component(int8_t src) const { (&data_)[13] = (uint8_t)(src); }

			};

			struct GLOBAL_POSITION_INT {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t hdg() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void hdg(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 2, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 2); }

				int32_t lat() const { return (static_cast<int32_t> (get_bytes(&data_, 6, 4))); }

				void lat(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 6); }

				int32_t lon() const { return (static_cast<int32_t> (get_bytes(&data_, 10, 4))); }

				void lon(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 10); }

				int32_t alt() const { return (static_cast<int32_t> (get_bytes(&data_, 14, 4))); }

				void alt(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 14); }

				int32_t relative_alt() const { return (static_cast<int32_t> (get_bytes(&data_, 18, 4))); }

				void relative_alt(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 18); }

				int16_t vx() const { return (static_cast<int16_t> (get_bytes(&data_, 22, 2))); }

				void vx(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 22); }

				int16_t vy() const { return (static_cast<int16_t> (get_bytes(&data_, 24, 2))); }

				void vy(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 24); }

				int16_t vz() const { return (static_cast<int16_t> (get_bytes(&data_, 26, 2))); }

				void vz(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 26); }

			};

			struct COMMAND_LONG {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int8_t confirmation() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void confirmation(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				float param1() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 3, 4))); }

				void param1(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 3); }

				float param2() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 7, 4))); }

				void param2(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 7); }

				float param3() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 11, 4))); }

				void param3(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 11); }

				float param4() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 15, 4))); }

				void param4(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 15); }

				float param5() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 19, 4))); }

				void param5(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 19); }

				float param6() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 23, 4))); }

				void param6(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 23); }

				float param7() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 27, 4))); }

				void param7(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 27); }

				struct command_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_CMD value;

						} EXISTS;
					}          CASE;

				};


				command_ command() const {
					if (data_.base.field_bit != 250 && !set_field(&data_, 250, -1)) return { 0, 0 };
					command_ ret{ true, static_cast<enum MAV_CMD> (MAV_CMD_from(get_bits(data_.base.bytes, data_.BIT, 8))) };
					return ret;
				}


				void command(enum MAV_CMD src) const {

					if (data_.base.field_bit != 250) set_field(&data_, 250, 0);

					set_bits(MAV_CMD_into(src), 8, data_.base.bytes, data_.BIT);
				}


			};

			struct GPS_RAW_INT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t eph() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void eph(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int16_t epv() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void epv(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				int16_t vel() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 4, 2))); }

				void vel(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 4); }

				int16_t cog() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 6, 2))); }

				void cog(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 6); }

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 8, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 8); }

				int32_t lat() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 16, 4))); }

				void lat(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 16); }

				int32_t lon() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 20, 4))); }

				void lon(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 20); }

				int32_t alt() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 24, 4))); }

				void alt(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 24); }

				int8_t satellites_visible() const { return static_cast<int8_t>((data_.base.bytes)[28]); }

				void satellites_visible(int8_t src) const { (data_.base.bytes)[28] = (uint8_t)(src); }

				struct fix_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum GPS_FIX_TYPE value;

						} EXISTS;
					}          CASE;

				};


				fix_type_ fix_type() const {
					if (data_.base.field_bit != 234 && !set_field(&data_, 234, -1)) return { 0, 0 };
					fix_type_ ret{ true, static_cast<enum GPS_FIX_TYPE> (static_cast<enum GPS_FIX_TYPE>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void fix_type(enum GPS_FIX_TYPE src) const {

					if (data_.base.field_bit != 234) set_field(&data_, 234, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


				struct alt_ellipsoid_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int32_t value;

						} EXISTS;
					}          CASE;

				};


				alt_ellipsoid_ alt_ellipsoid() const {
					if (data_.base.field_bit != 235 && !set_field(&data_, 235, -1)) return { 0, 0 };
					alt_ellipsoid_ ret{ true, static_cast<int32_t> ((static_cast<int32_t> (get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void alt_ellipsoid(int32_t src) const {

					if (data_.base.field_bit != 235) set_field(&data_, 235, 0);

					set_bytes((uint32_t)(src), 4, data_.base.bytes, data_.BYTE);
				}


				struct h_acc_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int32_t value;

						} EXISTS;
					}          CASE;

				};


				h_acc_ h_acc() const {
					if (data_.base.field_bit != 236 && !set_field(&data_, 236, -1)) return { 0, 0 };
					h_acc_ ret{ true, static_cast<int32_t> ((static_cast<int32_t> (get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void h_acc(int32_t src) const {

					if (data_.base.field_bit != 236) set_field(&data_, 236, 0);

					set_bytes((uint32_t)(src), 4, data_.base.bytes, data_.BYTE);
				}


				struct v_acc_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int32_t value;

						} EXISTS;
					}          CASE;

				};


				v_acc_ v_acc() const {
					if (data_.base.field_bit != 237 && !set_field(&data_, 237, -1)) return { 0, 0 };
					v_acc_ ret{ true, static_cast<int32_t> ((static_cast<int32_t> (get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void v_acc(int32_t src) const {

					if (data_.base.field_bit != 237) set_field(&data_, 237, 0);

					set_bytes((uint32_t)(src), 4, data_.base.bytes, data_.BYTE);
				}


				struct vel_acc_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int32_t value;

						} EXISTS;
					}          CASE;

				};


				vel_acc_ vel_acc() const {
					if (data_.base.field_bit != 238 && !set_field(&data_, 238, -1)) return { 0, 0 };
					vel_acc_ ret{ true, static_cast<int32_t> ((static_cast<int32_t> (get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void vel_acc(int32_t src) const {

					if (data_.base.field_bit != 238) set_field(&data_, 238, 0);

					set_bytes((uint32_t)(src), 4, data_.base.bytes, data_.BYTE);
				}


				struct hdg_acc_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int32_t value;

						} EXISTS;
					}          CASE;

				};


				hdg_acc_ hdg_acc() const {
					if (data_.base.field_bit != 239 && !set_field(&data_, 239, -1)) return { 0, 0 };
					hdg_acc_ ret{ true, static_cast<int32_t> ((static_cast<int32_t> (get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void hdg_acc(int32_t src) const {

					if (data_.base.field_bit != 239) set_field(&data_, 239, 0);

					set_bytes((uint32_t)(src), 4, data_.base.bytes, data_.BYTE);
				}


			};

			struct RC_CHANNELS_SCALED {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				int8_t port() const { return static_cast<int8_t>((&data_)[4]); }

				void port(int8_t src) const { (&data_)[4] = (uint8_t)(src); }

				int16_t chan1_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 5, 2))); }

				void chan1_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 5); }

				int16_t chan2_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 7, 2))); }

				void chan2_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 7); }

				int16_t chan3_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 9, 2))); }

				void chan3_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 9); }

				int16_t chan4_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 11, 2))); }

				void chan4_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 11); }

				int16_t chan5_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 13, 2))); }

				void chan5_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 13); }

				int16_t chan6_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 15, 2))); }

				void chan6_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 15); }

				int16_t chan7_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 17, 2))); }

				void chan7_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 17); }

				int16_t chan8_scaled() const { return (static_cast<int16_t> (get_bytes(&data_, 19, 2))); }

				void chan8_scaled(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 19); }

				int8_t rssi() const { return static_cast<int8_t>((&data_)[21]); }

				void rssi(int8_t src) const { (&data_)[21] = (uint8_t)(src); }

			};

			struct RAW_PRESSURE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, &data_, 0); }

				int16_t press_abs() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void press_abs(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t press_diff1() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void press_diff1(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t press_diff2() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void press_diff2(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t temperature() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void temperature(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

			};

			struct ATTITUDE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				float roll() const { return (intBitsToFloat(get_bytes(&data_, 4, 4))); }

				void roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 4); }

				float pitch() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float yaw() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float rollspeed() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void rollspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float pitchspeed() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void pitchspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float yawspeed() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void yawspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

			};

			struct MISSION_WRITE_PARTIAL_LIST {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int16_t start_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void start_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				int16_t end_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 4, 2))); }

				void end_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 4); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 48 && !set_field(&data_, 48, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 48) set_field(&data_, 48, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct MANUAL_SETPOINT {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				float roll() const { return (intBitsToFloat(get_bytes(&data_, 4, 4))); }

				void roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 4); }

				float pitch() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float yaw() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float thrust() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void thrust(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				int8_t mode_switch() const { return static_cast<int8_t>((&data_)[20]); }

				void mode_switch(int8_t src) const { (&data_)[20] = (uint8_t)(src); }

				int8_t manual_override_switch() const { return static_cast<int8_t>((&data_)[21]); }

				void manual_override_switch(int8_t src) const { (&data_)[21] = (uint8_t)(src); }

			};

			struct SAFETY_ALLOWED_AREA {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				float p1x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 0, 4))); }

				void p1x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 0); }

				float p1y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 4, 4))); }

				void p1y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 4); }

				float p1z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 8, 4))); }

				void p1z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 8); }

				float p2x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 12, 4))); }

				void p2x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 12); }

				float p2y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 16, 4))); }

				void p2y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 16); }

				float p2z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 20, 4))); }

				void p2z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 20); }

				struct frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				frame_ frame() const {
					if (data_.base.field_bit != 192 && !set_field(&data_, 192, -1)) return { 0, 0 };
					frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 192) set_field(&data_, 192, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct MISSION_CLEAR_ALL {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 16 && !set_field(&data_, 16, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 16) set_field(&data_, 16, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct SCALED_PRESSURE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				float press_abs() const { return (intBitsToFloat(get_bytes(&data_, 4, 4))); }

				void press_abs(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 4); }

				float press_diff() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void press_diff(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				int16_t temperature() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void temperature(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

			};

			struct HEARTBEAT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int32_t custom_mode() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 0, 4))); }

				void custom_mode(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 0); }

				int8_t mavlink_version() const { return static_cast<int8_t>((data_.base.bytes)[4]); }

				void mavlink_version(int8_t src) const { (data_.base.bytes)[4] = (uint8_t)(src); }

				struct typE_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_TYPE value;

						} EXISTS;
					}          CASE;

				};


				typE_ typE() const {
					if (data_.base.field_bit != 42 && !set_field(&data_, 42, -1)) return { 0, 0 };
					typE_ ret{ true, static_cast<enum MAV_TYPE> (static_cast<enum MAV_TYPE>(get_bits(data_.base.bytes, data_.BIT, 5))) };
					return ret;
				}


				void typE(enum MAV_TYPE src) const {

					if (data_.base.field_bit != 42) set_field(&data_, 42, 0);

					set_bits(static_cast<uintptr_t>(src), 5, data_.base.bytes, data_.BIT);
				}


				struct autopilot_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_AUTOPILOT value;

						} EXISTS;
					}          CASE;

				};


				autopilot_ autopilot() const {
					if (data_.base.field_bit != 43 && !set_field(&data_, 43, -1)) return { 0, 0 };
					autopilot_ ret{ true, static_cast<enum MAV_AUTOPILOT> (static_cast<enum MAV_AUTOPILOT>(get_bits(data_.base.bytes, data_.BIT, 5))) };
					return ret;
				}


				void autopilot(enum MAV_AUTOPILOT src) const {

					if (data_.base.field_bit != 43) set_field(&data_, 43, 0);

					set_bits(static_cast<uintptr_t>(src), 5, data_.base.bytes, data_.BIT);
				}


				struct base_mode_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MODE_FLAG value;

						} EXISTS;
					}          CASE;

				};


				base_mode_ base_mode() const {
					if (data_.base.field_bit != 44 && !set_field(&data_, 44, -1)) return { 0, 0 };
					base_mode_ ret{ true, static_cast<enum MAV_MODE_FLAG> (MAV_MODE_FLAG_from(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void base_mode(enum MAV_MODE_FLAG src) const {

					if (data_.base.field_bit != 44) set_field(&data_, 44, 0);

					set_bits(MAV_MODE_FLAG_into(src), 4, data_.base.bytes, data_.BIT);
				}


				struct system_status_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_STATE value;

						} EXISTS;
					}          CASE;

				};


				system_status_ system_status() const {
					if (data_.base.field_bit != 45 && !set_field(&data_, 45, -1)) return { 0, 0 };
					system_status_ ret{ true, static_cast<enum MAV_STATE> (static_cast<enum MAV_STATE>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void system_status(enum MAV_STATE src) const {

					if (data_.base.field_bit != 45) set_field(&data_, 45, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct PARAM_MAP_RC {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int16_t param_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void param_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				int8_t parameter_rc_channel_index() const { return static_cast<int8_t>((data_.base.bytes)[4]); }

				void parameter_rc_channel_index(int8_t src) const { (data_.base.bytes)[4] = (uint8_t)(src); }

				float param_value0() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 5, 4))); }

				void param_value0(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 5); }

				float scale() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 9, 4))); }

				void scale(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 9); }

				float param_value_min() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 13, 4))); }

				void param_value_min(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 13); }

				float param_value_max() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 17, 4))); }

				void param_value_max(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 17); }

				struct param_id_ {
					const bool              IS_EXISTS;
					union CASE {
						struct EXISTS {
							uint8_t* const bytes;
							const size_t length;

							org::unirail::utils::iterator<char, EXISTS> begin() const { return { *this }; }

							org::unirail::utils::iterator<char, EXISTS> end() const { return { *this, length }; }

							char get(size_t index) const { return static_cast<char>((bytes)[index]); }

							void set(char src, size_t index) const { (bytes)[index] = (uint8_t)(src); }
						} EXISTS;
					}                       CASE;
					static constexpr size_t len_max = 255;

				};


				param_id_ param_id() const {
					if (data_.base.field_bit != 170 && !set_field(&data_, 170, -1)) return { 0, 0, 0 };

					param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					return ret;
				}

				template<typename char_src_container>
				param_id_ param_id(const char_src_container& src) const {
					auto first = src.begin();
					auto last = src.end();

					auto len = std::distance(first, last);
					len = 255 < len ? 255 : len;

					if (data_.base.field_bit != 170) set_field(&data_, 170, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					std::copy(first, last, data_.base.bytes + data_.BYTE);
					return ret;
				}

				param_id_ param_id(const char src[], size_t len) const {
					len = 255 < len ? 255 : len;
					if (data_.base.field_bit != 170) set_field(&data_, 170, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					if (src)
						for (size_t i = 0; i < len; i++)
							ret.CASE.EXISTS.set(src[i], i);
					return ret;
				}


			};

			struct MISSION_REQUEST_INT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void target_system(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[3]); }

				void target_component(int8_t src) const { (data_.base.bytes)[3] = (uint8_t)(src); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 32 && !set_field(&data_, 32, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 32) set_field(&data_, 32, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				float x() const { return (intBitsToFloat(get_bytes(&data_, 4, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 4); }

				float y() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float z() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float roll() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float pitch() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float yaw() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

			};

			struct COMMAND_ACK {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}


				struct command_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_CMD value;

						} EXISTS;
					}          CASE;

				};


				command_ command() const {
					if (data_.base.field_bit != 2 && !set_field(&data_, 2, -1)) return { 0, 0 };
					command_ ret{ true, static_cast<enum MAV_CMD> (MAV_CMD_from(get_bits(data_.base.bytes, data_.BIT, 8))) };
					return ret;
				}


				void command(enum MAV_CMD src) const {

					if (data_.base.field_bit != 2) set_field(&data_, 2, 0);

					set_bits(MAV_CMD_into(src), 8, data_.base.bytes, data_.BIT);
				}


				struct result_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_RESULT value;

						} EXISTS;
					}          CASE;

				};


				result_ result() const {
					if (data_.base.field_bit != 3 && !set_field(&data_, 3, -1)) return { 0, 0 };
					result_ ret{ true, static_cast<enum MAV_RESULT> (static_cast<enum MAV_RESULT>(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void result(enum MAV_RESULT src) const {

					if (data_.base.field_bit != 3) set_field(&data_, 3, 0);

					set_bits(static_cast<uintptr_t>(src), 3, data_.base.bytes, data_.BIT);
				}


				struct progress_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int8_t value;

						} EXISTS;
					}          CASE;

				};


				progress_ progress() const {
					if (data_.base.field_bit != 4 && !set_field(&data_, 4, -1)) return { 0, 0 };
					progress_ ret{ true, static_cast<int8_t> (static_cast<int8_t>((data_.base.bytes)[data_.BYTE])) };
					return ret;
				}


				void progress(int8_t src) const {

					if (data_.base.field_bit != 4) set_field(&data_, 4, 0);

					(data_.base.bytes)[data_.BYTE] = (uint8_t)(src);
				}


				struct result_param2_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int32_t value;

						} EXISTS;
					}          CASE;

				};


				result_param2_ result_param2() const {
					if (data_.base.field_bit != 5 && !set_field(&data_, 5, -1)) return { 0, 0 };
					result_param2_ ret{ true, static_cast<int32_t> ((static_cast<int32_t> (get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void result_param2(int32_t src) const {

					if (data_.base.field_bit != 5) set_field(&data_, 5, 0);

					set_bytes((uint32_t)(src), 4, data_.base.bytes, data_.BYTE);
				}


				struct target_system_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int8_t value;

						} EXISTS;
					}          CASE;

				};


				target_system_ target_system() const {
					if (data_.base.field_bit != 6 && !set_field(&data_, 6, -1)) return { 0, 0 };
					target_system_ ret{ true, static_cast<int8_t> (static_cast<int8_t>((data_.base.bytes)[data_.BYTE])) };
					return ret;
				}


				void target_system(int8_t src) const {

					if (data_.base.field_bit != 6) set_field(&data_, 6, 0);

					(data_.base.bytes)[data_.BYTE] = (uint8_t)(src);
				}


				struct target_component_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int8_t value;

						} EXISTS;
					}          CASE;

				};


				target_component_ target_component() const {
					if (data_.base.field_bit != 7 && !set_field(&data_, 7, -1)) return { 0, 0 };
					target_component_ ret{ true, static_cast<int8_t> (static_cast<int8_t>((data_.base.bytes)[data_.BYTE])) };
					return ret;
				}


				void target_component(int8_t src) const {

					if (data_.base.field_bit != 7) set_field(&data_, 7, 0);

					(data_.base.bytes)[data_.BYTE] = (uint8_t)(src);
				}


			};

			struct DATA_STREAM {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t message_rate() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void message_rate(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int8_t stream_id() const { return static_cast<int8_t>((&data_)[2]); }

				void stream_id(int8_t src) const { (&data_)[2] = (uint8_t)(src); }

				int8_t on_off() const { return static_cast<int8_t>((&data_)[3]); }

				void on_off(int8_t src) const { (&data_)[3] = (uint8_t)(src); }

			};

			struct MISSION_REQUEST {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void target_system(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[3]); }

				void target_component(int8_t src) const { (data_.base.bytes)[3] = (uint8_t)(src); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 32 && !set_field(&data_, 32, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 32) set_field(&data_, 32, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct HIL_RC_INPUTS_RAW {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t chan1_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void chan1_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int16_t chan2_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 2, 2))); }

				void chan2_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 2); }

				int16_t chan3_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 4, 2))); }

				void chan3_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 4); }

				int16_t chan4_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 6, 2))); }

				void chan4_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 6); }

				int16_t chan5_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void chan5_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t chan6_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void chan6_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t chan7_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void chan7_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t chan8_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void chan8_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

				int16_t chan9_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 16, 2))); }

				void chan9_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 16); }

				int16_t chan10_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 18, 2))); }

				void chan10_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 18); }

				int16_t chan11_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 20, 2))); }

				void chan11_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 20); }

				int16_t chan12_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 22, 2))); }

				void chan12_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 22); }

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 24, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, &data_, 24); }

				int8_t rssi() const { return static_cast<int8_t>((&data_)[32]); }

				void rssi(int8_t src) const { (&data_)[32] = (uint8_t)(src); }

			};

			struct SET_MODE {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int32_t custom_mode() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 0, 4))); }

				void custom_mode(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 0); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[4]); }

				void target_system(int8_t src) const { (data_.base.bytes)[4] = (uint8_t)(src); }

				struct base_mode_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MODE value;

						} EXISTS;
					}          CASE;

				};


				base_mode_ base_mode() const {
					if (data_.base.field_bit != 40 && !set_field(&data_, 40, -1)) return { 0, 0 };
					base_mode_ ret{ true, static_cast<enum MAV_MODE> (MAV_MODE_from(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void base_mode(enum MAV_MODE src) const {

					if (data_.base.field_bit != 40) set_field(&data_, 40, 0);

					set_bits(MAV_MODE_into(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct POSITION_TARGET_GLOBAL_INT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t type_mask() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void type_mask(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 2, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 2); }

				int32_t lat_int() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 6, 4))); }

				void lat_int(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 6); }

				int32_t lon_int() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 10, 4))); }

				void lon_int(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 10); }

				float alt() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 14, 4))); }

				void alt(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 14); }

				float vx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 18, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 18); }

				float vy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 22, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 22); }

				float vz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 26, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 26); }

				float afx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 30, 4))); }

				void afx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 30); }

				float afy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 34, 4))); }

				void afy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 34); }

				float afz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 38, 4))); }

				void afz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 38); }

				float yaw() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 42, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 42); }

				float yaw_rate() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 46, 4))); }

				void yaw_rate(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 46); }

				struct coordinate_frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				coordinate_frame_ coordinate_frame() const {
					if (data_.base.field_bit != 400 && !set_field(&data_, 400, -1)) return { 0, 0 };
					coordinate_frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void coordinate_frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 400) set_field(&data_, 400, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct RC_CHANNELS_RAW {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t chan1_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void chan1_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int16_t chan2_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 2, 2))); }

				void chan2_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 2); }

				int16_t chan3_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 4, 2))); }

				void chan3_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 4); }

				int16_t chan4_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 6, 2))); }

				void chan4_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 6); }

				int16_t chan5_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void chan5_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t chan6_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void chan6_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t chan7_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void chan7_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t chan8_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void chan8_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 16, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 16); }

				int8_t port() const { return static_cast<int8_t>((&data_)[20]); }

				void port(int8_t src) const { (&data_)[20] = (uint8_t)(src); }

				int8_t rssi() const { return static_cast<int8_t>((&data_)[21]); }

				void rssi(int8_t src) const { (&data_)[21] = (uint8_t)(src); }

			};

			struct SERVO_OUTPUT_RAW {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t servo1_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void servo1_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int16_t servo2_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void servo2_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				int16_t servo3_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 4, 2))); }

				void servo3_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 4); }

				int16_t servo4_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 6, 2))); }

				void servo4_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 6); }

				int16_t servo5_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 8, 2))); }

				void servo5_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 8); }

				int16_t servo6_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 10, 2))); }

				void servo6_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 10); }

				int16_t servo7_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 12, 2))); }

				void servo7_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 12); }

				int16_t servo8_raw() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 14, 2))); }

				void servo8_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 14); }

				int32_t time_usec() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 16, 4))); }

				void time_usec(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 16); }

				int8_t port() const { return static_cast<int8_t>((data_.base.bytes)[20]); }

				void port(int8_t src) const { (data_.base.bytes)[20] = (uint8_t)(src); }

				struct servo9_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo9_raw_ servo9_raw() const {
					if (data_.base.field_bit != 168 && !set_field(&data_, 168, -1)) return { 0, 0 };
					servo9_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo9_raw(int16_t src) const {

					if (data_.base.field_bit != 168) set_field(&data_, 168, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo10_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo10_raw_ servo10_raw() const {
					if (data_.base.field_bit != 169 && !set_field(&data_, 169, -1)) return { 0, 0 };
					servo10_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo10_raw(int16_t src) const {

					if (data_.base.field_bit != 169) set_field(&data_, 169, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo11_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo11_raw_ servo11_raw() const {
					if (data_.base.field_bit != 170 && !set_field(&data_, 170, -1)) return { 0, 0 };
					servo11_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo11_raw(int16_t src) const {

					if (data_.base.field_bit != 170) set_field(&data_, 170, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo12_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo12_raw_ servo12_raw() const {
					if (data_.base.field_bit != 171 && !set_field(&data_, 171, -1)) return { 0, 0 };
					servo12_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo12_raw(int16_t src) const {

					if (data_.base.field_bit != 171) set_field(&data_, 171, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo13_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo13_raw_ servo13_raw() const {
					if (data_.base.field_bit != 172 && !set_field(&data_, 172, -1)) return { 0, 0 };
					servo13_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo13_raw(int16_t src) const {

					if (data_.base.field_bit != 172) set_field(&data_, 172, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo14_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo14_raw_ servo14_raw() const {
					if (data_.base.field_bit != 173 && !set_field(&data_, 173, -1)) return { 0, 0 };
					servo14_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo14_raw(int16_t src) const {

					if (data_.base.field_bit != 173) set_field(&data_, 173, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo15_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo15_raw_ servo15_raw() const {
					if (data_.base.field_bit != 174 && !set_field(&data_, 174, -1)) return { 0, 0 };
					servo15_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo15_raw(int16_t src) const {

					if (data_.base.field_bit != 174) set_field(&data_, 174, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


				struct servo16_raw_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int16_t value;

						} EXISTS;
					}          CASE;

				};


				servo16_raw_ servo16_raw() const {
					if (data_.base.field_bit != 175 && !set_field(&data_, 175, -1)) return { 0, 0 };
					servo16_raw_ ret{ true, static_cast<int16_t> ((static_cast<int16_t> (get_bytes(data_.base.bytes, data_.BYTE, 2)))) };
					return ret;
				}


				void servo16_raw(int16_t src) const {

					if (data_.base.field_bit != 175) set_field(&data_, 175, 0);

					set_bytes((uint16_t)(src), 2, data_.base.bytes, data_.BYTE);
				}


			};

			struct MISSION_ITEM_REACHED {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

			};

			struct MISSION_ACK {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				struct typE_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_RESULT value;

						} EXISTS;
					}          CASE;

				};


				typE_ typE() const {
					if (data_.base.field_bit != 18 && !set_field(&data_, 18, -1)) return { 0, 0 };
					typE_ ret{ true, static_cast<enum MAV_MISSION_RESULT> (static_cast<enum MAV_MISSION_RESULT>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void typE(enum MAV_MISSION_RESULT src) const {

					if (data_.base.field_bit != 18) set_field(&data_, 18, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 19 && !set_field(&data_, 19, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 19) set_field(&data_, 19, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct CHANGE_OPERATOR_CONTROL_ACK {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int8_t gcs_system_id() const { return static_cast<int8_t>((&data_)[0]); }

				void gcs_system_id(int8_t src) const { (&data_)[0] = (uint8_t)(src); }

				int8_t control_request() const { return static_cast<int8_t>((&data_)[1]); }

				void control_request(int8_t src) const { (&data_)[1] = (uint8_t)(src); }

				int8_t ack() const { return static_cast<int8_t>((&data_)[2]); }

				void ack(int8_t src) const { (&data_)[2] = (uint8_t)(src); }

			};

			struct MISSION_CURRENT {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

			};

			struct SYSTEM_TIME {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				int64_t time_unix_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 4, 8))); }

				void time_unix_usec(int64_t src) const { set_bytes((src), 8, &data_, 4); }

			};

			struct VISION_POSITION_ESTIMATE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int64_t usec() const { return (static_cast<int64_t> (get_bytes(&data_, 0, 8))); }

				void usec(int64_t src) const { set_bytes((src), 8, &data_, 0); }

				float x() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float y() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float z() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float roll() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float pitch() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

				float yaw() const { return (intBitsToFloat(get_bytes(&data_, 28, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 28); }

			};

			struct MANUAL_CONTROL {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t buttons() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void buttons(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int8_t target() const { return static_cast<int8_t>((&data_)[2]); }

				void target(int8_t src) const { (&data_)[2] = (uint8_t)(src); }

				int16_t x() const { return (static_cast<int16_t> (get_bytes(&data_, 3, 2))); }

				void x(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 3); }

				int16_t y() const { return (static_cast<int16_t> (get_bytes(&data_, 5, 2))); }

				void y(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 5); }

				int16_t z() const { return (static_cast<int16_t> (get_bytes(&data_, 7, 2))); }

				void z(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 7); }

				int16_t r() const { return (static_cast<int16_t> (get_bytes(&data_, 9, 2))); }

				void r(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 9); }

			};

			struct RC_CHANNELS {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int16_t chan1_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 0, 2))); }

				void chan1_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 0); }

				int16_t chan2_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 2, 2))); }

				void chan2_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 2); }

				int16_t chan3_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 4, 2))); }

				void chan3_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 4); }

				int16_t chan4_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 6, 2))); }

				void chan4_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 6); }

				int16_t chan5_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void chan5_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t chan6_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void chan6_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t chan7_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void chan7_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t chan8_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void chan8_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

				int16_t chan9_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 16, 2))); }

				void chan9_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 16); }

				int16_t chan10_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 18, 2))); }

				void chan10_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 18); }

				int16_t chan11_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 20, 2))); }

				void chan11_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 20); }

				int16_t chan12_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 22, 2))); }

				void chan12_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 22); }

				int16_t chan13_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 24, 2))); }

				void chan13_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 24); }

				int16_t chan14_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 26, 2))); }

				void chan14_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 26); }

				int16_t chan15_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 28, 2))); }

				void chan15_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 28); }

				int16_t chan16_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 30, 2))); }

				void chan16_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 30); }

				int16_t chan17_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 32, 2))); }

				void chan17_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 32); }

				int16_t chan18_raw() const { return (static_cast<int16_t> (get_bytes(&data_, 34, 2))); }

				void chan18_raw(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 34); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 36, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 36); }

				int8_t chancount() const { return static_cast<int8_t>((&data_)[40]); }

				void chancount(int8_t src) const { (&data_)[40] = (uint8_t)(src); }

				int8_t rssi() const { return static_cast<int8_t>((&data_)[41]); }

				void rssi(int8_t src) const { (&data_)[41] = (uint8_t)(src); }

			};

			struct PARAM_VALUE {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t param_count() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void param_count(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int16_t param_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void param_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				float param_value() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 4, 4))); }

				void param_value(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 4); }

				struct param_id_ {
					const bool              IS_EXISTS;
					union CASE {
						struct EXISTS {
							uint8_t* const bytes;
							const size_t length;

							org::unirail::utils::iterator<char, EXISTS> begin() const { return { *this }; }

							org::unirail::utils::iterator<char, EXISTS> end() const { return { *this, length }; }

							char get(size_t index) const { return static_cast<char>((bytes)[index]); }

							void set(char src, size_t index) const { (bytes)[index] = (uint8_t)(src); }
						} EXISTS;
					}                       CASE;
					static constexpr size_t len_max = 255;

				};


				param_id_ param_id() const {
					if (data_.base.field_bit != 66 && !set_field(&data_, 66, -1)) return { 0, 0, 0 };

					param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					return ret;
				}

				template<typename char_src_container>
				param_id_ param_id(const char_src_container& src) const {
					auto first = src.begin();
					auto last = src.end();

					auto len = std::distance(first, last);
					len = 255 < len ? 255 : len;

					if (data_.base.field_bit != 66) set_field(&data_, 66, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					std::copy(first, last, data_.base.bytes + data_.BYTE);
					return ret;
				}

				param_id_ param_id(const char src[], size_t len) const {
					len = 255 < len ? 255 : len;
					if (data_.base.field_bit != 66) set_field(&data_, 66, len);
					const param_id_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					if (src)
						for (size_t i = 0; i < len; i++)
							ret.CASE.EXISTS.set(src[i], i);
					return ret;
				}


				struct param_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_PARAM_TYPE value;

						} EXISTS;
					}          CASE;

				};


				param_type_ param_type() const {
					if (data_.base.field_bit != 67 && !set_field(&data_, 67, -1)) return { 0, 0 };
					param_type_ ret{ true, static_cast<enum MAV_PARAM_TYPE> (static_cast<enum MAV_PARAM_TYPE>(1 + get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void param_type(enum MAV_PARAM_TYPE src) const {

					if (data_.base.field_bit != 67) set_field(&data_, 67, 0);

					set_bits(static_cast<uintptr_t>(-1
						src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct SET_POSITION_TARGET_LOCAL_NED {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t type_mask() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void type_mask(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 2, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 2); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[6]); }

				void target_system(int8_t src) const { (data_.base.bytes)[6] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[7]); }

				void target_component(int8_t src) const { (data_.base.bytes)[7] = (uint8_t)(src); }

				float x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 8, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 8); }

				float y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 12, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 12); }

				float z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 16, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 16); }

				float vx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 20, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 20); }

				float vy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 24, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 24); }

				float vz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 28, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 28); }

				float afx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 32, 4))); }

				void afx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 32); }

				float afy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 36, 4))); }

				void afy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 36); }

				float afz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 40, 4))); }

				void afz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 40); }

				float yaw() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 44, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 44); }

				float yaw_rate() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 48, 4))); }

				void yaw_rate(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 48); }

				struct coordinate_frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				coordinate_frame_ coordinate_frame() const {
					if (data_.base.field_bit != 416 && !set_field(&data_, 416, -1)) return { 0, 0 };
					coordinate_frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void coordinate_frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 416) set_field(&data_, 416, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct SET_GPS_GLOBAL_ORIGIN {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int32_t latitude() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 1, 4))); }

				void latitude(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 1); }

				int32_t longitude() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 5, 4))); }

				void longitude(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 5); }

				int32_t altitude() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 9, 4))); }

				void altitude(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 9); }

				struct time_usec_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int64_t value;

						} EXISTS;
					}          CASE;

				};


				time_usec_ time_usec() const {
					if (data_.base.field_bit != 104 && !set_field(&data_, 104, -1)) return { 0, 0 };
					time_usec_ ret{ true, static_cast<int64_t> ((static_cast<int64_t> (get_bytes(data_.base.bytes, data_.BYTE, 8)))) };
					return ret;
				}


				void time_usec(int64_t src) const {

					if (data_.base.field_bit != 104) set_field(&data_, 104, 0);

					set_bytes((src), 8, data_.base.bytes, data_.BYTE);
				}


			};

			struct MISSION_REQUEST_LIST {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 16 && !set_field(&data_, 16, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 16) set_field(&data_, 16, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct MISSION_REQUEST_PARTIAL_LIST {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int16_t start_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void start_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				int16_t end_index() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 4, 2))); }

				void end_index(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 4); }

				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 48 && !set_field(&data_, 48, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 48) set_field(&data_, 48, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct LOCAL_POSITION_NED {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				float x() const { return (intBitsToFloat(get_bytes(&data_, 4, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 4); }

				float y() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float z() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float vx() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float vy() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float vz() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

			};

			struct GPS_GLOBAL_ORIGIN {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int32_t latitude() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 0, 4))); }

				void latitude(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 0); }

				int32_t longitude() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 4, 4))); }

				void longitude(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 4); }

				int32_t altitude() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 8, 4))); }

				void altitude(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 8); }

				struct time_usec_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const int64_t value;

						} EXISTS;
					}          CASE;

				};


				time_usec_ time_usec() const {
					if (data_.base.field_bit != 96 && !set_field(&data_, 96, -1)) return { 0, 0 };
					time_usec_ ret{ true, static_cast<int64_t> ((static_cast<int64_t> (get_bytes(data_.base.bytes, data_.BYTE, 8)))) };
					return ret;
				}


				void time_usec(int64_t src) const {

					if (data_.base.field_bit != 96) set_field(&data_, 96, 0);

					set_bytes((src), 8, data_.base.bytes, data_.BYTE);
				}


			};

			struct ATTITUDE_QUATERNION {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(&data_, 0, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, &data_, 0); }

				float q1() const { return (intBitsToFloat(get_bytes(&data_, 4, 4))); }

				void q1(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 4); }

				float q2() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void q2(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float q3() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void q3(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float q4() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void q4(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float rollspeed() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void rollspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float pitchspeed() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void pitchspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

				float yawspeed() const { return (intBitsToFloat(get_bytes(&data_, 28, 4))); }

				void yawspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 28); }

			};

			struct HIL_ACTUATOR_CONTROLS {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 0); }

				int64_t flags() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 8, 8))); }

				void flags(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 8); }

				struct controls_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, controls_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, controls_> end() const { return { *this, 16 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 16;

				};

				struct controls_ controls() const {
					struct controls_ ret { data_.base.bytes + 16 };
					return ret;
				}

				template<typename float_src_container>
				controls_ controls(const float_src_container& src) const {
					auto             first = src.begin();
					struct controls_ ret { data_.base.bytes + 16 };
					for (size_t i = 0; i < 16; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				controls_ controls(float* const src) const { return controls(static_cast<float const*>(src)); }

				controls_ controls(float const* const src) const {
					struct controls_ ret { data_.base.bytes + 16 };
					if (src)
						for (size_t i = 0; i < 16; i++)
							ret.set(src[i], i);
					return ret;
				}

				struct mode_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MODE value;

						} EXISTS;
					}          CASE;

				};


				mode_ mode() const {
					if (data_.base.field_bit != 640 && !set_field(&data_, 640, -1)) return { 0, 0 };
					mode_ ret{ true, static_cast<enum MAV_MODE> (MAV_MODE_from(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void mode(enum MAV_MODE src) const {

					if (data_.base.field_bit != 640) set_field(&data_, 640, 0);

					set_bits(MAV_MODE_into(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct POSITION_TARGET_LOCAL_NED {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t type_mask() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void type_mask(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int32_t time_boot_ms() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 2, 4))); }

				void time_boot_ms(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 2); }

				float x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 6, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 6); }

				float y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 10, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 10); }

				float z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 14, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 14); }

				float vx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 18, 4))); }

				void vx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 18); }

				float vy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 22, 4))); }

				void vy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 22); }

				float vz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 26, 4))); }

				void vz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 26); }

				float afx() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 30, 4))); }

				void afx(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 30); }

				float afy() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 34, 4))); }

				void afy(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 34); }

				float afz() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 38, 4))); }

				void afz(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 38); }

				float yaw() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 42, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 42); }

				float yaw_rate() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 46, 4))); }

				void yaw_rate(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 46); }

				struct coordinate_frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				coordinate_frame_ coordinate_frame() const {
					if (data_.base.field_bit != 400 && !set_field(&data_, 400, -1)) return { 0, 0 };
					coordinate_frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void coordinate_frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 400) set_field(&data_, 400, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


			};

			struct CHANGE_OPERATOR_CONTROL {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t control_request() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void control_request(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int8_t version() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void version(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				struct passkey_ {
					const bool              IS_EXISTS;
					union CASE {
						struct EXISTS {
							uint8_t* const bytes;
							const size_t length;

							org::unirail::utils::iterator<char, EXISTS> begin() const { return { *this }; }

							org::unirail::utils::iterator<char, EXISTS> end() const { return { *this, length }; }

							char get(size_t index) const { return static_cast<char>((bytes)[index]); }

							void set(char src, size_t index) const { (bytes)[index] = (uint8_t)(src); }
						} EXISTS;
					}                       CASE;
					static constexpr size_t len_max = 255;

				};


				passkey_ passkey() const {
					if (data_.base.field_bit != 26 && !set_field(&data_, 26, -1)) return { 0, 0, 0 };

					passkey_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					return ret;
				}

				template<typename char_src_container>
				passkey_ passkey(const char_src_container& src) const {
					auto first = src.begin();
					auto last = src.end();

					auto len = std::distance(first, last);
					len = 255 < len ? 255 : len;

					if (data_.base.field_bit != 26) set_field(&data_, 26, len);
					const passkey_ ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					std::copy(first, last, data_.base.bytes + data_.BYTE);
					return ret;
				}

				passkey_ passkey(const char src[], size_t len) const {
					len = 255 < len ? 255 : len;
					if (data_.base.field_bit != 26) set_field(&data_, 26, len);
					const passkey_  ret{ true, data_.base.bytes + data_.BYTE, data_.item_len };
					if (src)
						for (size_t i = 0; i < len; i++)
							ret.CASE.EXISTS.set(src[i], i);
					return ret;
				}


			};

			struct SYS_STATUS {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t load() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void load(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int16_t voltage_battery() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 2, 2))); }

				void voltage_battery(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 2); }

				int16_t drop_rate_comm() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 4, 2))); }

				void drop_rate_comm(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 4); }

				int16_t errors_comm() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 6, 2))); }

				void errors_comm(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 6); }

				int16_t errors_count1() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 8, 2))); }

				void errors_count1(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 8); }

				int16_t errors_count2() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 10, 2))); }

				void errors_count2(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 10); }

				int16_t errors_count3() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 12, 2))); }

				void errors_count3(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 12); }

				int16_t errors_count4() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 14, 2))); }

				void errors_count4(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 14); }

				int16_t current_battery() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 16, 2))); }

				void current_battery(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 16); }

				int8_t battery_remaining() const { return static_cast<int8_t>((data_.base.bytes)[18]); }

				void battery_remaining(int8_t src) const { (data_.base.bytes)[18] = (uint8_t)(src); }

				struct onboard_control_sensors_present_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_SYS_STATUS_SENSOR value;

						} EXISTS;
					}          CASE;

				};


				onboard_control_sensors_present_ onboard_control_sensors_present() const {
					if (data_.base.field_bit != 154 && !set_field(&data_, 154, -1)) return { 0, 0 };
					onboard_control_sensors_present_ ret{ true, static_cast<enum MAV_SYS_STATUS_SENSOR> (MAV_SYS_STATUS_SENSOR_from(get_bits(data_.base.bytes, data_.BIT, 5))) };
					return ret;
				}


				void onboard_control_sensors_present(enum MAV_SYS_STATUS_SENSOR src) const {

					if (data_.base.field_bit != 154) set_field(&data_, 154, 0);

					set_bits(MAV_SYS_STATUS_SENSOR_into(src), 5, data_.base.bytes, data_.BIT);
				}


				struct onboard_control_sensors_enabled_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_SYS_STATUS_SENSOR value;

						} EXISTS;
					}          CASE;

				};


				onboard_control_sensors_enabled_ onboard_control_sensors_enabled() const {
					if (data_.base.field_bit != 155 && !set_field(&data_, 155, -1)) return { 0, 0 };
					onboard_control_sensors_enabled_ ret{ true, static_cast<enum MAV_SYS_STATUS_SENSOR> (MAV_SYS_STATUS_SENSOR_from(get_bits(data_.base.bytes, data_.BIT, 5))) };
					return ret;
				}


				void onboard_control_sensors_enabled(enum MAV_SYS_STATUS_SENSOR src) const {

					if (data_.base.field_bit != 155) set_field(&data_, 155, 0);

					set_bits(MAV_SYS_STATUS_SENSOR_into(src), 5, data_.base.bytes, data_.BIT);
				}


				struct onboard_control_sensors_health_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_SYS_STATUS_SENSOR value;

						} EXISTS;
					}          CASE;

				};


				onboard_control_sensors_health_ onboard_control_sensors_health() const {
					if (data_.base.field_bit != 156 && !set_field(&data_, 156, -1)) return { 0, 0 };
					onboard_control_sensors_health_ ret{ true, static_cast<enum MAV_SYS_STATUS_SENSOR> (MAV_SYS_STATUS_SENSOR_from(get_bits(data_.base.bytes, data_.BIT, 5))) };
					return ret;
				}


				void onboard_control_sensors_health(enum MAV_SYS_STATUS_SENSOR src) const {

					if (data_.base.field_bit != 156) set_field(&data_, 156, 0);

					set_bits(MAV_SYS_STATUS_SENSOR_into(src), 5, data_.base.bytes, data_.BIT);
				}


			};

			struct MISSION_ITEM {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void target_system(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[3]); }

				void target_component(int8_t src) const { (data_.base.bytes)[3] = (uint8_t)(src); }

				int8_t current() const { return static_cast<int8_t>((data_.base.bytes)[4]); }

				void current(int8_t src) const { (data_.base.bytes)[4] = (uint8_t)(src); }

				int8_t autocontinue() const { return static_cast<int8_t>((data_.base.bytes)[5]); }

				void autocontinue(int8_t src) const { (data_.base.bytes)[5] = (uint8_t)(src); }

				float param1() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 6, 4))); }

				void param1(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 6); }

				float param2() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 10, 4))); }

				void param2(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 10); }

				float param3() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 14, 4))); }

				void param3(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 14); }

				float param4() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 18, 4))); }

				void param4(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 18); }

				float x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 22, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 22); }

				float y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 26, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 26); }

				float z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 30, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 30); }

				struct frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				frame_ frame() const {
					if (data_.base.field_bit != 274 && !set_field(&data_, 274, -1)) return { 0, 0 };
					frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 274) set_field(&data_, 274, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


				struct command_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_CMD value;

						} EXISTS;
					}          CASE;

				};


				command_ command() const {
					if (data_.base.field_bit != 275 && !set_field(&data_, 275, -1)) return { 0, 0 };
					command_ ret{ true, static_cast<enum MAV_CMD> (MAV_CMD_from(get_bits(data_.base.bytes, data_.BIT, 8))) };
					return ret;
				}


				void command(enum MAV_CMD src) const {

					if (data_.base.field_bit != 275) set_field(&data_, 275, 0);

					set_bits(MAV_CMD_into(src), 8, data_.base.bytes, data_.BIT);
				}


				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 276 && !set_field(&data_, 276, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 276) set_field(&data_, 276, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct RAW_IMU {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, &data_, 0); }

				int16_t xacc() const { return (static_cast<int16_t> (get_bytes(&data_, 8, 2))); }

				void xacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 8); }

				int16_t yacc() const { return (static_cast<int16_t> (get_bytes(&data_, 10, 2))); }

				void yacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 10); }

				int16_t zacc() const { return (static_cast<int16_t> (get_bytes(&data_, 12, 2))); }

				void zacc(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 12); }

				int16_t xgyro() const { return (static_cast<int16_t> (get_bytes(&data_, 14, 2))); }

				void xgyro(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 14); }

				int16_t ygyro() const { return (static_cast<int16_t> (get_bytes(&data_, 16, 2))); }

				void ygyro(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 16); }

				int16_t zgyro() const { return (static_cast<int16_t> (get_bytes(&data_, 18, 2))); }

				void zgyro(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 18); }

				int16_t xmag() const { return (static_cast<int16_t> (get_bytes(&data_, 20, 2))); }

				void xmag(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 20); }

				int16_t ymag() const { return (static_cast<int16_t> (get_bytes(&data_, 22, 2))); }

				void ymag(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 22); }

				int16_t zmag() const { return (static_cast<int16_t> (get_bytes(&data_, 24, 2))); }

				void zmag(int16_t src) const { set_bytes((uint16_t)(src), 2, &data_, 24); }

			};

			struct COMMAND_INT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[0]); }

				void target_system(int8_t src) const { (data_.base.bytes)[0] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[1]); }

				void target_component(int8_t src) const { (data_.base.bytes)[1] = (uint8_t)(src); }

				int8_t current() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void current(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				int8_t autocontinue() const { return static_cast<int8_t>((data_.base.bytes)[3]); }

				void autocontinue(int8_t src) const { (data_.base.bytes)[3] = (uint8_t)(src); }

				float param1() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 4, 4))); }

				void param1(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 4); }

				float param2() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 8, 4))); }

				void param2(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 8); }

				float param3() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 12, 4))); }

				void param3(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 12); }

				float param4() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 16, 4))); }

				void param4(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 16); }

				int32_t x() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 20, 4))); }

				void x(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 20); }

				int32_t y() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 24, 4))); }

				void y(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 24); }

				float z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 28, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 28); }

				struct frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				frame_ frame() const {
					if (data_.base.field_bit != 258 && !set_field(&data_, 258, -1)) return { 0, 0 };
					frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 258) set_field(&data_, 258, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


				struct command_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_CMD value;

						} EXISTS;
					}          CASE;

				};


				command_ command() const {
					if (data_.base.field_bit != 259 && !set_field(&data_, 259, -1)) return { 0, 0 };
					command_ ret{ true, static_cast<enum MAV_CMD> (MAV_CMD_from(get_bits(data_.base.bytes, data_.BIT, 8))) };
					return ret;
				}


				void command(enum MAV_CMD src) const {

					if (data_.base.field_bit != 259) set_field(&data_, 259, 0);

					set_bits(MAV_CMD_into(src), 8, data_.base.bytes, data_.BIT);
				}


			};

			struct OPTICAL_FLOW {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(data_.base.bytes, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, data_.base.bytes, 0); }

				int8_t sensor_id() const { return static_cast<int8_t>((data_.base.bytes)[8]); }

				void sensor_id(int8_t src) const { (data_.base.bytes)[8] = (uint8_t)(src); }

				int16_t flow_x() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 9, 2))); }

				void flow_x(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 9); }

				int16_t flow_y() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 11, 2))); }

				void flow_y(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 11); }

				float flow_comp_m_x() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 13, 4))); }

				void flow_comp_m_x(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 13); }

				float flow_comp_m_y() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 17, 4))); }

				void flow_comp_m_y(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 17); }

				int8_t quality() const { return static_cast<int8_t>((data_.base.bytes)[21]); }

				void quality(int8_t src) const { (data_.base.bytes)[21] = (uint8_t)(src); }

				float ground_distance() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 22, 4))); }

				void ground_distance(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 22); }

				struct flow_rate_x_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const float value;

						} EXISTS;
					}          CASE;

				};


				flow_rate_x_ flow_rate_x() const {
					if (data_.base.field_bit != 208 && !set_field(&data_, 208, -1)) return { 0, 0 };
					flow_rate_x_ ret{ true, static_cast<float> ((intBitsToFloat(get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void flow_rate_x(float src) const {

					if (data_.base.field_bit != 208) set_field(&data_, 208, 0);

					set_bytes(floatToIntBits(src), 4, data_.base.bytes, data_.BYTE);
				}


				struct flow_rate_y_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const float value;

						} EXISTS;
					}          CASE;

				};


				flow_rate_y_ flow_rate_y() const {
					if (data_.base.field_bit != 209 && !set_field(&data_, 209, -1)) return { 0, 0 };
					flow_rate_y_ ret{ true, static_cast<float> ((intBitsToFloat(get_bytes(data_.base.bytes, data_.BYTE, 4)))) };
					return ret;
				}


				void flow_rate_y(float src) const {

					if (data_.base.field_bit != 209) set_field(&data_, 209, 0);

					set_bytes(floatToIntBits(src), 4, data_.base.bytes, data_.BYTE);
				}


			};

			struct MISSION_ITEM_INT {
				Cursor& data_;

				Pack* unwrap_() {
					Pack* pack = data_.base.pack;
					data_.base.pack = nullptr;
					data_.base.meta = nullptr;
					data_.base.bytes = nullptr;
					return pack;
				}

				int16_t seq() const { return (static_cast<int16_t> (get_bytes(data_.base.bytes, 0, 2))); }

				void seq(int16_t src) const { set_bytes((uint16_t)(src), 2, data_.base.bytes, 0); }

				int8_t target_system() const { return static_cast<int8_t>((data_.base.bytes)[2]); }

				void target_system(int8_t src) const { (data_.base.bytes)[2] = (uint8_t)(src); }

				int8_t target_component() const { return static_cast<int8_t>((data_.base.bytes)[3]); }

				void target_component(int8_t src) const { (data_.base.bytes)[3] = (uint8_t)(src); }

				int8_t current() const { return static_cast<int8_t>((data_.base.bytes)[4]); }

				void current(int8_t src) const { (data_.base.bytes)[4] = (uint8_t)(src); }

				int8_t autocontinue() const { return static_cast<int8_t>((data_.base.bytes)[5]); }

				void autocontinue(int8_t src) const { (data_.base.bytes)[5] = (uint8_t)(src); }

				float param1() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 6, 4))); }

				void param1(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 6); }

				float param2() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 10, 4))); }

				void param2(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 10); }

				float param3() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 14, 4))); }

				void param3(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 14); }

				float param4() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 18, 4))); }

				void param4(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 18); }

				int32_t x() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 22, 4))); }

				void x(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 22); }

				int32_t y() const { return (static_cast<int32_t> (get_bytes(data_.base.bytes, 26, 4))); }

				void y(int32_t src) const { set_bytes((uint32_t)(src), 4, data_.base.bytes, 26); }

				float z() const { return (intBitsToFloat(get_bytes(data_.base.bytes, 30, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, data_.base.bytes, 30); }

				struct frame_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_FRAME value;

						} EXISTS;
					}          CASE;

				};


				frame_ frame() const {
					if (data_.base.field_bit != 274 && !set_field(&data_, 274, -1)) return { 0, 0 };
					frame_ ret{ true, static_cast<enum MAV_FRAME> (static_cast<enum MAV_FRAME>(get_bits(data_.base.bytes, data_.BIT, 4))) };
					return ret;
				}


				void frame(enum MAV_FRAME src) const {

					if (data_.base.field_bit != 274) set_field(&data_, 274, 0);

					set_bits(static_cast<uintptr_t>(src), 4, data_.base.bytes, data_.BIT);
				}


				struct command_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_CMD value;

						} EXISTS;
					}          CASE;

				};


				command_ command() const {
					if (data_.base.field_bit != 275 && !set_field(&data_, 275, -1)) return { 0, 0 };
					command_ ret{ true, static_cast<enum MAV_CMD> (MAV_CMD_from(get_bits(data_.base.bytes, data_.BIT, 8))) };
					return ret;
				}


				void command(enum MAV_CMD src) const {

					if (data_.base.field_bit != 275) set_field(&data_, 275, 0);

					set_bits(MAV_CMD_into(src), 8, data_.base.bytes, data_.BIT);
				}


				struct mission_type_ {
					const bool IS_EXISTS;
					union CASE {
						struct EXISTS {
							const enum MAV_MISSION_TYPE value;

						} EXISTS;
					}          CASE;

				};


				mission_type_ mission_type() const {
					if (data_.base.field_bit != 276 && !set_field(&data_, 276, -1)) return { 0, 0 };
					mission_type_ ret{ true, static_cast<enum MAV_MISSION_TYPE> (MAV_MISSION_TYPE_from(get_bits(data_.base.bytes, data_.BIT, 3))) };
					return ret;
				}


				void mission_type(enum MAV_MISSION_TYPE src) const {

					if (data_.base.field_bit != 276) set_field(&data_, 276, 0);

					set_bits(MAV_MISSION_TYPE_into(src), 3, data_.base.bytes, data_.BIT);
				}


			};

			struct ATTITUDE_QUATERNION_COV {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int64_t time_usec() const { return (static_cast<int64_t> (get_bytes(&data_, 0, 8))); }

				void time_usec(int64_t src) const { set_bytes((src), 8, &data_, 0); }

				struct q_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, q_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, q_> end() const { return { *this, 4 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 4;

				};

				struct q_ q() const {
					struct q_ ret { &data_ + 8 };
					return ret;
				}

				template<typename float_src_container>
				q_ q(const float_src_container& src) const {
					auto        first = src.begin();
					struct q_   ret { &data_ + 8 };
					for (size_t i = 0; i < 4; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				q_ q(float* const src) const { return q(static_cast<float const*>(src)); }

				q_ q(float const* const src) const {
					struct q_       ret { &data_ + 8 };
					if (src)
						for (size_t i = 0; i < 4; i++)
							ret.set(src[i], i);
					return ret;
				}

				float rollspeed() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void rollspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

				float pitchspeed() const { return (intBitsToFloat(get_bytes(&data_, 28, 4))); }

				void pitchspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 28); }

				float yawspeed() const { return (intBitsToFloat(get_bytes(&data_, 32, 4))); }

				void yawspeed(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 32); }

				struct covariance_ {
					uint8_t* bytes;
					size_t length;

					org::unirail::utils::iterator<float, covariance_> begin() const { return { *this }; }

					org::unirail::utils::iterator<float, covariance_> end() const { return { *this, 9 }; }

					float get(size_t index) const { return (intBitsToFloat(get_bytes(bytes, index * 4, 4))); }


					void set(float src, size_t index) const {

						set_bytes(floatToIntBits(src), 4, bytes, index * 4);
					}

					static constexpr size_t len = 9;

				};

				struct covariance_ covariance() const {
					struct covariance_ ret { &data_ + 36 };
					return ret;
				}

				template<typename float_src_container>
				covariance_ covariance(const float_src_container& src) const {
					auto               first = src.begin();
					struct covariance_ ret { &data_ + 36 };
					for (size_t i = 0; i < 9; i++, ++first)
						ret.set(*first, i);
					return ret;
				}

				covariance_ covariance(float* const src) const { return covariance(static_cast<float const*>(src)); }

				covariance_ covariance(float const* const src) const {
					struct covariance_ ret { &data_ + 36 };
					if (src)
						for (size_t i = 0; i < 9; i++)
							ret.set(src[i], i);
					return ret;
				}

			};

			struct GLOBAL_VISION_POSITION_ESTIMATE {
				Pack* pack_;
				uint8_t& data_;

				Pack* unwrap_() {
					Pack* ret = pack_;
					pack_ = nullptr;
					return ret;
				}

				int64_t usec() const { return (static_cast<int64_t> (get_bytes(&data_, 0, 8))); }

				void usec(int64_t src) const { set_bytes((src), 8, &data_, 0); }

				float x() const { return (intBitsToFloat(get_bytes(&data_, 8, 4))); }

				void x(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 8); }

				float y() const { return (intBitsToFloat(get_bytes(&data_, 12, 4))); }

				void y(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 12); }

				float z() const { return (intBitsToFloat(get_bytes(&data_, 16, 4))); }

				void z(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 16); }

				float roll() const { return (intBitsToFloat(get_bytes(&data_, 20, 4))); }

				void roll(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 20); }

				float pitch() const { return (intBitsToFloat(get_bytes(&data_, 24, 4))); }

				void pitch(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 24); }

				float yaw() const { return (intBitsToFloat(get_bytes(&data_, 28, 4))); }

				void yaw(float src) const { set_bytes(floatToIntBits(src), 4, &data_, 28); }

			};


			void fill(const org::unirail::test::ATTITUDE_TARGET& pattitude_target);

			void on_ATTITUDE_TARGET(const com::company::demo::ATTITUDE_TARGET& pattitude_target);

			void on_ATTITUDE_TARGET(Pack* pack) {

				const com::company::demo::ATTITUDE_TARGET pattitude_target = { pack, *pack->bytes };

				on_ATTITUDE_TARGET(pattitude_target);
			};

			void fill(const org::unirail::test::MISSION_COUNT& pmission_count);

			void on_MISSION_COUNT(const com::company::demo::MISSION_COUNT& pmission_count);

			void on_MISSION_COUNT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_COUNT pmission_count = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_COUNT(pmission_count);
			};

			void fill(const com::company::demo::ADSB_VEHICLE& padsb_vehicle);

			void on_ADSB_VEHICLE(const com::company::demo::ADSB_VEHICLE& padsb_vehicle);

			void on_ADSB_VEHICLE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::ADSB_VEHICLE padsb_vehicle = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_ADSB_VEHICLE(padsb_vehicle);
			};

			void fill(const com::company::demo::MESSAGE_INTERVAL& pmessage_interval);

			void on_MESSAGE_INTERVAL(const com::company::demo::MESSAGE_INTERVAL& pmessage_interval);

			void on_MESSAGE_INTERVAL(Pack* pack) {

				const com::company::demo::MESSAGE_INTERVAL pmessage_interval = { pack, *pack->bytes };

				on_MESSAGE_INTERVAL(pmessage_interval);
			};

			void fill(const com::company::demo::EKF_STATUS_REPORT& pekf_status_report);

			void on_EKF_STATUS_REPORT(const com::company::demo::EKF_STATUS_REPORT& pekf_status_report);

			void on_EKF_STATUS_REPORT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::EKF_STATUS_REPORT pekf_status_report = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_EKF_STATUS_REPORT(pekf_status_report);
			};

			void fill(const com::company::demo::ESTIMATOR_STATUS& pestimator_status);

			void on_ESTIMATOR_STATUS(const com::company::demo::ESTIMATOR_STATUS& pestimator_status);

			void on_ESTIMATOR_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::ESTIMATOR_STATUS pestimator_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_ESTIMATOR_STATUS(pestimator_status);
			};

			void fill(const com::company::demo::HWSTATUS& phwstatus);

			void on_HWSTATUS(const com::company::demo::HWSTATUS& phwstatus);

			void on_HWSTATUS(Pack* pack) {

				const com::company::demo::HWSTATUS phwstatus = { pack, *pack->bytes };

				on_HWSTATUS(phwstatus);
			};

			void fill(const com::company::demo::TIMESYNC& ptimesync);

			void on_TIMESYNC(const com::company::demo::TIMESYNC& ptimesync);

			void on_TIMESYNC(Pack* pack) {

				const com::company::demo::TIMESYNC ptimesync = { pack, *pack->bytes };

				on_TIMESYNC(ptimesync);
			};

			void fill(const com::company::demo::PARAM_EXT_REQUEST_LIST& pparam_ext_request_list);

			void on_PARAM_EXT_REQUEST_LIST(const com::company::demo::PARAM_EXT_REQUEST_LIST& pparam_ext_request_list);

			void on_PARAM_EXT_REQUEST_LIST(Pack* pack) {

				const com::company::demo::PARAM_EXT_REQUEST_LIST pparam_ext_request_list = { pack, *pack->bytes };

				on_PARAM_EXT_REQUEST_LIST(pparam_ext_request_list);
			};

			void fill(const org::unirail::test::GLOBAL_POSITION_INT_COV& pglobal_position_int_cov);

			void on_GLOBAL_POSITION_INT_COV(const com::company::demo::GLOBAL_POSITION_INT_COV& pglobal_position_int_cov);

			void on_GLOBAL_POSITION_INT_COV(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GLOBAL_POSITION_INT_COV pglobal_position_int_cov = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GLOBAL_POSITION_INT_COV(pglobal_position_int_cov);
			};

			void fill(const com::company::demo::BUTTON_CHANGE& pbutton_change);

			void on_BUTTON_CHANGE(const com::company::demo::BUTTON_CHANGE& pbutton_change);

			void on_BUTTON_CHANGE(Pack* pack) {

				const com::company::demo::BUTTON_CHANGE pbutton_change = { pack, *pack->bytes };

				on_BUTTON_CHANGE(pbutton_change);
			};

			void fill(const org::unirail::test::SAFETY_SET_ALLOWED_AREA& psafety_set_allowed_area);

			void on_SAFETY_SET_ALLOWED_AREA(const com::company::demo::SAFETY_SET_ALLOWED_AREA& psafety_set_allowed_area);

			void on_SAFETY_SET_ALLOWED_AREA(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SAFETY_SET_ALLOWED_AREA psafety_set_allowed_area = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SAFETY_SET_ALLOWED_AREA(psafety_set_allowed_area);
			};

			void fill(const com::company::demo::UAVCAN_NODE_STATUS& puavcan_node_status);

			void on_UAVCAN_NODE_STATUS(const com::company::demo::UAVCAN_NODE_STATUS& puavcan_node_status);

			void on_UAVCAN_NODE_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::UAVCAN_NODE_STATUS puavcan_node_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_UAVCAN_NODE_STATUS(puavcan_node_status);
			};

			void fill(const com::company::demo::COLLISION& pcollision);

			void on_COLLISION(const com::company::demo::COLLISION& pcollision);

			void on_COLLISION(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::COLLISION pcollision = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_COLLISION(pcollision);
			};

			void fill(const com::company::demo::GIMBAL_TORQUE_CMD_REPORT& pgimbal_torque_cmd_report);

			void on_GIMBAL_TORQUE_CMD_REPORT(const com::company::demo::GIMBAL_TORQUE_CMD_REPORT& pgimbal_torque_cmd_report);

			void on_GIMBAL_TORQUE_CMD_REPORT(Pack* pack) {

				const com::company::demo::GIMBAL_TORQUE_CMD_REPORT pgimbal_torque_cmd_report = { pack, *pack->bytes };

				on_GIMBAL_TORQUE_CMD_REPORT(pgimbal_torque_cmd_report);
			};

			void fill(const com::company::demo::ALTITUDE& paltitude);

			void on_ALTITUDE(const com::company::demo::ALTITUDE& paltitude);

			void on_ALTITUDE(Pack* pack) {

				const com::company::demo::ALTITUDE paltitude = { pack, *pack->bytes };

				on_ALTITUDE(paltitude);
			};

			void fill(const com::company::demo::HIL_STATE_QUATERNION& phil_state_quaternion);

			void on_HIL_STATE_QUATERNION(const com::company::demo::HIL_STATE_QUATERNION& phil_state_quaternion);

			void on_HIL_STATE_QUATERNION(Pack* pack) {

				const com::company::demo::HIL_STATE_QUATERNION phil_state_quaternion = { pack, *pack->bytes };

				on_HIL_STATE_QUATERNION(phil_state_quaternion);
			};

			void fill(const com::company::demo::SENSOR_OFFSETS& psensor_offsets);

			void on_SENSOR_OFFSETS(const com::company::demo::SENSOR_OFFSETS& psensor_offsets);

			void on_SENSOR_OFFSETS(Pack* pack) {

				const com::company::demo::SENSOR_OFFSETS psensor_offsets = { pack, *pack->bytes };

				on_SENSOR_OFFSETS(psensor_offsets);
			};

			void fill(const com::company::demo::STORAGE_INFORMATION& pstorage_information);

			void on_STORAGE_INFORMATION(const com::company::demo::STORAGE_INFORMATION& pstorage_information);

			void on_STORAGE_INFORMATION(Pack* pack) {

				const com::company::demo::STORAGE_INFORMATION pstorage_information = { pack, *pack->bytes };

				on_STORAGE_INFORMATION(pstorage_information);
			};

			void fill(const com::company::demo::CAMERA_INFORMATION& pcamera_information);

			void on_CAMERA_INFORMATION(const com::company::demo::CAMERA_INFORMATION& pcamera_information);

			void on_CAMERA_INFORMATION(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::CAMERA_INFORMATION pcamera_information = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_CAMERA_INFORMATION(pcamera_information);
			};

			void fill(const org::unirail::test::GPS_STATUS& pgps_status);

			void on_GPS_STATUS(const com::company::demo::GPS_STATUS& pgps_status);

			void on_GPS_STATUS(Pack* pack) {

				const com::company::demo::GPS_STATUS pgps_status = { pack, *pack->bytes };

				on_GPS_STATUS(pgps_status);
			};

			void fill(const com::company::demo::DEVICE_OP_WRITE_REPLY& pdevice_op_write_reply);

			void on_DEVICE_OP_WRITE_REPLY(const com::company::demo::DEVICE_OP_WRITE_REPLY& pdevice_op_write_reply);

			void on_DEVICE_OP_WRITE_REPLY(Pack* pack) {

				const com::company::demo::DEVICE_OP_WRITE_REPLY pdevice_op_write_reply = { pack, *pack->bytes };

				on_DEVICE_OP_WRITE_REPLY(pdevice_op_write_reply);
			};

			void fill(const org::unirail::test::PARAM_SET& pparam_set);

			void on_PARAM_SET(const com::company::demo::PARAM_SET& pparam_set);

			void on_PARAM_SET(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_SET pparam_set = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_SET(pparam_set);
			};

			void fill(const com::company::demo::TERRAIN_DATA& pterrain_data);

			void on_TERRAIN_DATA(const com::company::demo::TERRAIN_DATA& pterrain_data);

			void on_TERRAIN_DATA(Pack* pack) {

				const com::company::demo::TERRAIN_DATA pterrain_data = { pack, *pack->bytes };

				on_TERRAIN_DATA(pterrain_data);
			};

			void fill(const com::company::demo::GIMBAL_CONTROL& pgimbal_control);

			void on_GIMBAL_CONTROL(const com::company::demo::GIMBAL_CONTROL& pgimbal_control);

			void on_GIMBAL_CONTROL(Pack* pack) {

				const com::company::demo::GIMBAL_CONTROL pgimbal_control = { pack, *pack->bytes };

				on_GIMBAL_CONTROL(pgimbal_control);
			};

			void fill(const org::unirail::test::RC_CHANNELS_OVERRIDE& prc_channels_override);

			void on_RC_CHANNELS_OVERRIDE(const com::company::demo::RC_CHANNELS_OVERRIDE& prc_channels_override);

			void on_RC_CHANNELS_OVERRIDE(Pack* pack) {

				const com::company::demo::RC_CHANNELS_OVERRIDE prc_channels_override = { pack, *pack->bytes };

				on_RC_CHANNELS_OVERRIDE(prc_channels_override);
			};

			void fill(const org::unirail::test::SCALED_IMU& pscaled_imu);

			void on_SCALED_IMU(const com::company::demo::SCALED_IMU& pscaled_imu);

			void on_SCALED_IMU(Pack* pack) {

				const com::company::demo::SCALED_IMU pscaled_imu = { pack, *pack->bytes };

				on_SCALED_IMU(pscaled_imu);
			};

			void fill(const com::company::demo::VIDEO_STREAM_INFORMATION& pvideo_stream_information);

			void on_VIDEO_STREAM_INFORMATION(const com::company::demo::VIDEO_STREAM_INFORMATION& pvideo_stream_information);

			void on_VIDEO_STREAM_INFORMATION(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::VIDEO_STREAM_INFORMATION pvideo_stream_information = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_VIDEO_STREAM_INFORMATION(pvideo_stream_information);
			};

			void fill(const com::company::demo::AHRS& pahrs);

			void on_AHRS(const com::company::demo::AHRS& pahrs);

			void on_AHRS(Pack* pack) {

				const com::company::demo::AHRS pahrs = { pack, *pack->bytes };

				on_AHRS(pahrs);
			};

			void fill(const com::company::demo::DEBUG& pdebug);

			void on_DEBUG(const com::company::demo::DEBUG& pdebug);

			void on_DEBUG(Pack* pack) {

				const com::company::demo::DEBUG pdebug = { pack, *pack->bytes };

				on_DEBUG(pdebug);
			};

			void fill(const com::company::demo::CAMERA_IMAGE_CAPTURED& pcamera_image_captured);

			void on_CAMERA_IMAGE_CAPTURED(const com::company::demo::CAMERA_IMAGE_CAPTURED& pcamera_image_captured);

			void on_CAMERA_IMAGE_CAPTURED(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::CAMERA_IMAGE_CAPTURED pcamera_image_captured = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_CAMERA_IMAGE_CAPTURED(pcamera_image_captured);
			};

			void fill(const com::company::demo::LOG_ENTRY& plog_entry);

			void on_LOG_ENTRY(const com::company::demo::LOG_ENTRY& plog_entry);

			void on_LOG_ENTRY(Pack* pack) {

				const com::company::demo::LOG_ENTRY plog_entry = { pack, *pack->bytes };

				on_LOG_ENTRY(plog_entry);
			};

			void fill(const com::company::demo::ACTUATOR_CONTROL_TARGET& pactuator_control_target);

			void on_ACTUATOR_CONTROL_TARGET(const com::company::demo::ACTUATOR_CONTROL_TARGET& pactuator_control_target);

			void on_ACTUATOR_CONTROL_TARGET(Pack* pack) {

				const com::company::demo::ACTUATOR_CONTROL_TARGET pactuator_control_target = { pack, *pack->bytes };

				on_ACTUATOR_CONTROL_TARGET(pactuator_control_target);
			};

			void fill(const com::company::demo::HIGH_LATENCY& phigh_latency);

			void on_HIGH_LATENCY(const com::company::demo::HIGH_LATENCY& phigh_latency);

			void on_HIGH_LATENCY(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::HIGH_LATENCY phigh_latency = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_HIGH_LATENCY(phigh_latency);
			};

			void fill(const org::unirail::test::PARAM_REQUEST_READ& pparam_request_read);

			void on_PARAM_REQUEST_READ(const com::company::demo::PARAM_REQUEST_READ& pparam_request_read);

			void on_PARAM_REQUEST_READ(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_REQUEST_READ pparam_request_read = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_REQUEST_READ(pparam_request_read);
			};

			void fill(const org::unirail::test::SET_ATTITUDE_TARGET& pset_attitude_target);

			void on_SET_ATTITUDE_TARGET(const com::company::demo::SET_ATTITUDE_TARGET& pset_attitude_target);

			void on_SET_ATTITUDE_TARGET(Pack* pack) {

				const com::company::demo::SET_ATTITUDE_TARGET pset_attitude_target = { pack, *pack->bytes };

				on_SET_ATTITUDE_TARGET(pset_attitude_target);
			};

			void fill(const com::company::demo::FOLLOW_TARGET& pfollow_target);

			void on_FOLLOW_TARGET(const com::company::demo::FOLLOW_TARGET& pfollow_target);

			void on_FOLLOW_TARGET(Pack* pack) {

				const com::company::demo::FOLLOW_TARGET pfollow_target = { pack, *pack->bytes };

				on_FOLLOW_TARGET(pfollow_target);
			};

			void fill(const org::unirail::test::HIL_STATE& phil_state);

			void on_HIL_STATE(const com::company::demo::HIL_STATE& phil_state);

			void on_HIL_STATE(Pack* pack) {

				const com::company::demo::HIL_STATE phil_state = { pack, *pack->bytes };

				on_HIL_STATE(phil_state);
			};

			void fill(const com::company::demo::HOME_POSITION& phome_position);

			void on_HOME_POSITION(const com::company::demo::HOME_POSITION& phome_position);

			void on_HOME_POSITION(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::HOME_POSITION phome_position = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_HOME_POSITION(phome_position);
			};

			void fill(const com::company::demo::FENCE_STATUS& pfence_status);

			void on_FENCE_STATUS(const com::company::demo::FENCE_STATUS& pfence_status);

			void on_FENCE_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::FENCE_STATUS pfence_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_FENCE_STATUS(pfence_status);
			};

			void fill(const com::company::demo::REMOTE_LOG_BLOCK_STATUS& premote_log_block_status);

			void on_REMOTE_LOG_BLOCK_STATUS(const com::company::demo::REMOTE_LOG_BLOCK_STATUS& premote_log_block_status);

			void on_REMOTE_LOG_BLOCK_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::REMOTE_LOG_BLOCK_STATUS premote_log_block_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_REMOTE_LOG_BLOCK_STATUS(premote_log_block_status);
			};

			void fill(const com::company::demo::OBSTACLE_DISTANCE& pobstacle_distance);

			void on_OBSTACLE_DISTANCE(const com::company::demo::OBSTACLE_DISTANCE& pobstacle_distance);

			void on_OBSTACLE_DISTANCE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::OBSTACLE_DISTANCE pobstacle_distance = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_OBSTACLE_DISTANCE(pobstacle_distance);
			};

			void fill(const com::company::demo::GPS2_RAW& pgps2_raw);

			void on_GPS2_RAW(const com::company::demo::GPS2_RAW& pgps2_raw);

			void on_GPS2_RAW(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GPS2_RAW pgps2_raw = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GPS2_RAW(pgps2_raw);
			};

			void fill(const org::unirail::test::REQUEST_DATA_STREAM& prequest_data_stream);

			void on_REQUEST_DATA_STREAM(const com::company::demo::REQUEST_DATA_STREAM& prequest_data_stream);

			void on_REQUEST_DATA_STREAM(Pack* pack) {

				const com::company::demo::REQUEST_DATA_STREAM prequest_data_stream = { pack, *pack->bytes };

				on_REQUEST_DATA_STREAM(prequest_data_stream);
			};

			void fill(const com::company::demo::MEMORY_VECT& pmemory_vect);

			void on_MEMORY_VECT(const com::company::demo::MEMORY_VECT& pmemory_vect);

			void on_MEMORY_VECT(Pack* pack) {

				const com::company::demo::MEMORY_VECT pmemory_vect = { pack, *pack->bytes };

				on_MEMORY_VECT(pmemory_vect);
			};

			void fill(const com::company::demo::PARAM_EXT_REQUEST_READ& pparam_ext_request_read);

			void on_PARAM_EXT_REQUEST_READ(const com::company::demo::PARAM_EXT_REQUEST_READ& pparam_ext_request_read);

			void on_PARAM_EXT_REQUEST_READ(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_EXT_REQUEST_READ pparam_ext_request_read = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_EXT_REQUEST_READ(pparam_ext_request_read);
			};

			void fill(const org::unirail::test::HIL_CONTROLS& phil_controls);

			void on_HIL_CONTROLS(const com::company::demo::HIL_CONTROLS& phil_controls);

			void on_HIL_CONTROLS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::HIL_CONTROLS phil_controls = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_HIL_CONTROLS(phil_controls);
			};

			void fill(const com::company::demo::HIL_SENSOR& phil_sensor);

			void on_HIL_SENSOR(const com::company::demo::HIL_SENSOR& phil_sensor);

			void on_HIL_SENSOR(Pack* pack) {

				const com::company::demo::HIL_SENSOR phil_sensor = { pack, *pack->bytes };

				on_HIL_SENSOR(phil_sensor);
			};

			void fill(const com::company::demo::SETUP_SIGNING& psetup_signing);

			void on_SETUP_SIGNING(const com::company::demo::SETUP_SIGNING& psetup_signing);

			void on_SETUP_SIGNING(Pack* pack) {

				const com::company::demo::SETUP_SIGNING psetup_signing = { pack, *pack->bytes };

				on_SETUP_SIGNING(psetup_signing);
			};

			void fill(const com::company::demo::GPS_RTK& pgps_rtk);

			void on_GPS_RTK(const com::company::demo::GPS_RTK& pgps_rtk);

			void on_GPS_RTK(Pack* pack) {

				const com::company::demo::GPS_RTK pgps_rtk = { pack, *pack->bytes };

				on_GPS_RTK(pgps_rtk);
			};

			void fill(const org::unirail::test::PARAM_REQUEST_LIST& pparam_request_list);

			void on_PARAM_REQUEST_LIST(const com::company::demo::PARAM_REQUEST_LIST& pparam_request_list);

			void on_PARAM_REQUEST_LIST(Pack* pack) {

				const com::company::demo::PARAM_REQUEST_LIST pparam_request_list = { pack, *pack->bytes };

				on_PARAM_REQUEST_LIST(pparam_request_list);
			};

			void fill(const com::company::demo::UAVIONIX_ADSB_OUT_CFG& puavionix_adsb_out_cfg);

			void on_UAVIONIX_ADSB_OUT_CFG(const com::company::demo::UAVIONIX_ADSB_OUT_CFG& puavionix_adsb_out_cfg);

			void on_UAVIONIX_ADSB_OUT_CFG(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::UAVIONIX_ADSB_OUT_CFG puavionix_adsb_out_cfg = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_UAVIONIX_ADSB_OUT_CFG(puavionix_adsb_out_cfg);
			};

			void fill(const com::company::demo::LANDING_TARGET& planding_target);

			void on_LANDING_TARGET(const com::company::demo::LANDING_TARGET& planding_target);

			void on_LANDING_TARGET(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::LANDING_TARGET planding_target = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_LANDING_TARGET(planding_target);
			};

			void fill(const com::company::demo::SET_ACTUATOR_CONTROL_TARGET& pset_actuator_control_target);

			void on_SET_ACTUATOR_CONTROL_TARGET(const com::company::demo::SET_ACTUATOR_CONTROL_TARGET& pset_actuator_control_target);

			void on_SET_ACTUATOR_CONTROL_TARGET(Pack* pack) {

				const com::company::demo::SET_ACTUATOR_CONTROL_TARGET pset_actuator_control_target = { pack, *pack->bytes };

				on_SET_ACTUATOR_CONTROL_TARGET(pset_actuator_control_target);
			};

			void fill(const com::company::demo::CONTROL_SYSTEM_STATE& pcontrol_system_state);

			void on_CONTROL_SYSTEM_STATE(const com::company::demo::CONTROL_SYSTEM_STATE& pcontrol_system_state);

			void on_CONTROL_SYSTEM_STATE(Pack* pack) {

				const com::company::demo::CONTROL_SYSTEM_STATE pcontrol_system_state = { pack, *pack->bytes };

				on_CONTROL_SYSTEM_STATE(pcontrol_system_state);
			};

			void fill(const org::unirail::test::SET_POSITION_TARGET_GLOBAL_INT& pset_position_target_global_int);

			void on_SET_POSITION_TARGET_GLOBAL_INT(const com::company::demo::SET_POSITION_TARGET_GLOBAL_INT& pset_position_target_global_int);

			void on_SET_POSITION_TARGET_GLOBAL_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SET_POSITION_TARGET_GLOBAL_INT pset_position_target_global_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SET_POSITION_TARGET_GLOBAL_INT(pset_position_target_global_int);
			};

			void fill(const com::company::demo::DATA32& pdata32);

			void on_DATA32(const com::company::demo::DATA32& pdata32);

			void on_DATA32(Pack* pack) {

				const com::company::demo::DATA32 pdata32 = { pack, *pack->bytes };

				on_DATA32(pdata32);
			};

			void fill(const com::company::demo::PING33& pping33);

			void on_PING33(const com::company::demo::PING33& pping33);

			void on_PING33(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PING33 pping33 = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PING33(pping33);
			};

			void fill(const org::unirail::test::VFR_HUD& pvfr_hud);

			void on_VFR_HUD(const com::company::demo::VFR_HUD& pvfr_hud);

			void on_VFR_HUD(Pack* pack) {

				const com::company::demo::VFR_HUD pvfr_hud = { pack, *pack->bytes };

				on_VFR_HUD(pvfr_hud);
			};

			void fill(const com::company::demo::RALLY_POINT& prally_point);

			void on_RALLY_POINT(const com::company::demo::RALLY_POINT& prally_point);

			void on_RALLY_POINT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::RALLY_POINT prally_point = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_RALLY_POINT(prally_point);
			};

			void fill(const org::unirail::test::MISSION_SET_CURRENT& pmission_set_current);

			void on_MISSION_SET_CURRENT(const com::company::demo::MISSION_SET_CURRENT& pmission_set_current);

			void on_MISSION_SET_CURRENT(Pack* pack) {

				const com::company::demo::MISSION_SET_CURRENT pmission_set_current = { pack, *pack->bytes };

				on_MISSION_SET_CURRENT(pmission_set_current);
			};

			void fill(const com::company::demo::ADAP_TUNING& padap_tuning);

			void on_ADAP_TUNING(const com::company::demo::ADAP_TUNING& padap_tuning);

			void on_ADAP_TUNING(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::ADAP_TUNING padap_tuning = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_ADAP_TUNING(padap_tuning);
			};

			void fill(const com::company::demo::VIBRATION& pvibration);

			void on_VIBRATION(const com::company::demo::VIBRATION& pvibration);

			void on_VIBRATION(Pack* pack) {

				const com::company::demo::VIBRATION pvibration = { pack, *pack->bytes };

				on_VIBRATION(pvibration);
			};

			void fill(const com::company::demo::PARAM_EXT_VALUE& pparam_ext_value);

			void on_PARAM_EXT_VALUE(const com::company::demo::PARAM_EXT_VALUE& pparam_ext_value);

			void on_PARAM_EXT_VALUE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_EXT_VALUE pparam_ext_value = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_EXT_VALUE(pparam_ext_value);
			};

			void fill(const com::company::demo::BATTERY2& pbattery2);

			void on_BATTERY2(const com::company::demo::BATTERY2& pbattery2);

			void on_BATTERY2(Pack* pack) {

				const com::company::demo::BATTERY2 pbattery2 = { pack, *pack->bytes };

				on_BATTERY2(pbattery2);
			};

			void fill(const com::company::demo::LIMITS_STATUS& plimits_status);

			void on_LIMITS_STATUS(const com::company::demo::LIMITS_STATUS& plimits_status);

			void on_LIMITS_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::LIMITS_STATUS plimits_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_LIMITS_STATUS(plimits_status);
			};

			void fill(const com::company::demo::CAMERA_FEEDBACK& pcamera_feedback);

			void on_CAMERA_FEEDBACK(const com::company::demo::CAMERA_FEEDBACK& pcamera_feedback);

			void on_CAMERA_FEEDBACK(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::CAMERA_FEEDBACK pcamera_feedback = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_CAMERA_FEEDBACK(pcamera_feedback);
			};

			void fill(const com::company::demo::HIL_GPS& phil_gps);

			void on_HIL_GPS(const com::company::demo::HIL_GPS& phil_gps);

			void on_HIL_GPS(Pack* pack) {

				const com::company::demo::HIL_GPS phil_gps = { pack, *pack->bytes };

				on_HIL_GPS(phil_gps);
			};

			void fill(const org::unirail::test::NAV_CONTROLLER_OUTPUT& pnav_controller_output);

			void on_NAV_CONTROLLER_OUTPUT(const com::company::demo::NAV_CONTROLLER_OUTPUT& pnav_controller_output);

			void on_NAV_CONTROLLER_OUTPUT(Pack* pack) {

				const com::company::demo::NAV_CONTROLLER_OUTPUT pnav_controller_output = { pack, *pack->bytes };

				on_NAV_CONTROLLER_OUTPUT(pnav_controller_output);
			};

			void fill(const org::unirail::test::AUTH_KEY& pauth_key);

			void on_AUTH_KEY(const com::company::demo::AUTH_KEY& pauth_key);

			void on_AUTH_KEY(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::AUTH_KEY pauth_key = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_AUTH_KEY(pauth_key);
			};

			void fill(const com::company::demo::FENCE_FETCH_POINT& pfence_fetch_point);

			void on_FENCE_FETCH_POINT(const com::company::demo::FENCE_FETCH_POINT& pfence_fetch_point);

			void on_FENCE_FETCH_POINT(Pack* pack) {

				const com::company::demo::FENCE_FETCH_POINT pfence_fetch_point = { pack, *pack->bytes };

				on_FENCE_FETCH_POINT(pfence_fetch_point);
			};

			void fill(const com::company::demo::RADIO& pradio);

			void on_RADIO(const com::company::demo::RADIO& pradio);

			void on_RADIO(Pack* pack) {

				const com::company::demo::RADIO pradio = { pack, *pack->bytes };

				on_RADIO(pradio);
			};

			void fill(const org::unirail::test::LOCAL_POSITION_NED_COV& plocal_position_ned_cov);

			void on_LOCAL_POSITION_NED_COV(const com::company::demo::LOCAL_POSITION_NED_COV& plocal_position_ned_cov);

			void on_LOCAL_POSITION_NED_COV(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::LOCAL_POSITION_NED_COV plocal_position_ned_cov = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_LOCAL_POSITION_NED_COV(plocal_position_ned_cov);
			};

			void fill(const com::company::demo::AIRSPEED_AUTOCAL& pairspeed_autocal);

			void on_AIRSPEED_AUTOCAL(const com::company::demo::AIRSPEED_AUTOCAL& pairspeed_autocal);

			void on_AIRSPEED_AUTOCAL(Pack* pack) {

				const com::company::demo::AIRSPEED_AUTOCAL pairspeed_autocal = { pack, *pack->bytes };

				on_AIRSPEED_AUTOCAL(pairspeed_autocal);
			};

			void fill(const com::company::demo::ATT_POS_MOCAP& patt_pos_mocap);

			void on_ATT_POS_MOCAP(const com::company::demo::ATT_POS_MOCAP& patt_pos_mocap);

			void on_ATT_POS_MOCAP(Pack* pack) {

				const com::company::demo::ATT_POS_MOCAP patt_pos_mocap = { pack, *pack->bytes };

				on_ATT_POS_MOCAP(patt_pos_mocap);
			};

			void fill(const com::company::demo::STATUSTEXT& pstatustext);

			void on_STATUSTEXT(const com::company::demo::STATUSTEXT& pstatustext);

			void on_STATUSTEXT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::STATUSTEXT pstatustext = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_STATUSTEXT(pstatustext);
			};

			void fill(const org::unirail::test::PING& pping);

			void on_PING(const com::company::demo::PING& pping);

			void on_PING(Pack* pack) {

				const com::company::demo::PING pping = { pack, *pack->bytes };

				on_PING(pping);
			};

			void fill(const com::company::demo::GOPRO_GET_REQUEST& pgopro_get_request);

			void on_GOPRO_GET_REQUEST(const com::company::demo::GOPRO_GET_REQUEST& pgopro_get_request);

			void on_GOPRO_GET_REQUEST(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GOPRO_GET_REQUEST pgopro_get_request = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GOPRO_GET_REQUEST(pgopro_get_request);
			};

			void fill(const com::company::demo::CAMERA_CAPTURE_STATUS& pcamera_capture_status);

			void on_CAMERA_CAPTURE_STATUS(const com::company::demo::CAMERA_CAPTURE_STATUS& pcamera_capture_status);

			void on_CAMERA_CAPTURE_STATUS(Pack* pack) {

				const com::company::demo::CAMERA_CAPTURE_STATUS pcamera_capture_status = { pack, *pack->bytes };

				on_CAMERA_CAPTURE_STATUS(pcamera_capture_status);
			};

			void fill(const org::unirail::test::GLOBAL_POSITION_INT& pglobal_position_int);

			void on_GLOBAL_POSITION_INT(const com::company::demo::GLOBAL_POSITION_INT& pglobal_position_int);

			void on_GLOBAL_POSITION_INT(Pack* pack) {

				const com::company::demo::GLOBAL_POSITION_INT pglobal_position_int = { pack, *pack->bytes };

				on_GLOBAL_POSITION_INT(pglobal_position_int);
			};

			void fill(const com::company::demo::ENCAPSULATED_DATA& pencapsulated_data);

			void on_ENCAPSULATED_DATA(const com::company::demo::ENCAPSULATED_DATA& pencapsulated_data);

			void on_ENCAPSULATED_DATA(Pack* pack) {

				const com::company::demo::ENCAPSULATED_DATA pencapsulated_data = { pack, *pack->bytes };

				on_ENCAPSULATED_DATA(pencapsulated_data);
			};

			void fill(const com::company::demo::GPS_INPUT& pgps_input);

			void on_GPS_INPUT(const com::company::demo::GPS_INPUT& pgps_input);

			void on_GPS_INPUT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GPS_INPUT pgps_input = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GPS_INPUT(pgps_input);
			};

			void fill(const org::unirail::test::COMMAND_LONG& pcommand_long);

			void on_COMMAND_LONG(const com::company::demo::COMMAND_LONG& pcommand_long);

			void on_COMMAND_LONG(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::COMMAND_LONG pcommand_long = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_COMMAND_LONG(pcommand_long);
			};

			void fill(const com::company::demo::COMPASSMOT_STATUS& pcompassmot_status);

			void on_COMPASSMOT_STATUS(const com::company::demo::COMPASSMOT_STATUS& pcompassmot_status);

			void on_COMPASSMOT_STATUS(Pack* pack) {

				const com::company::demo::COMPASSMOT_STATUS pcompassmot_status = { pack, *pack->bytes };

				on_COMPASSMOT_STATUS(pcompassmot_status);
			};

			void fill(const com::company::demo::LOG_REQUEST_DATA& plog_request_data);

			void on_LOG_REQUEST_DATA(const com::company::demo::LOG_REQUEST_DATA& plog_request_data);

			void on_LOG_REQUEST_DATA(Pack* pack) {

				const com::company::demo::LOG_REQUEST_DATA plog_request_data = { pack, *pack->bytes };

				on_LOG_REQUEST_DATA(plog_request_data);
			};

			void fill(const org::unirail::test::GPS_RAW_INT& pgps_raw_int);

			void on_GPS_RAW_INT(const com::company::demo::GPS_RAW_INT& pgps_raw_int);

			void on_GPS_RAW_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GPS_RAW_INT pgps_raw_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GPS_RAW_INT(pgps_raw_int);
			};

			void fill(const com::company::demo::CAMERA_STATUS& pcamera_status);

			void on_CAMERA_STATUS(const com::company::demo::CAMERA_STATUS& pcamera_status);

			void on_CAMERA_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::CAMERA_STATUS pcamera_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_CAMERA_STATUS(pcamera_status);
			};

			void fill(const org::unirail::test::RC_CHANNELS_SCALED& prc_channels_scaled);

			void on_RC_CHANNELS_SCALED(const com::company::demo::RC_CHANNELS_SCALED& prc_channels_scaled);

			void on_RC_CHANNELS_SCALED(Pack* pack) {

				const com::company::demo::RC_CHANNELS_SCALED prc_channels_scaled = { pack, *pack->bytes };

				on_RC_CHANNELS_SCALED(prc_channels_scaled);
			};

			void fill(const com::company::demo::CAMERA_SETTINGS& pcamera_settings);

			void on_CAMERA_SETTINGS(const com::company::demo::CAMERA_SETTINGS& pcamera_settings);

			void on_CAMERA_SETTINGS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::CAMERA_SETTINGS pcamera_settings = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_CAMERA_SETTINGS(pcamera_settings);
			};

			void fill(const com::company::demo::DEVICE_OP_READ_REPLY& pdevice_op_read_reply);

			void on_DEVICE_OP_READ_REPLY(const com::company::demo::DEVICE_OP_READ_REPLY& pdevice_op_read_reply);

			void on_DEVICE_OP_READ_REPLY(Pack* pack) {

				const com::company::demo::DEVICE_OP_READ_REPLY pdevice_op_read_reply = { pack, *pack->bytes };

				on_DEVICE_OP_READ_REPLY(pdevice_op_read_reply);
			};

			void fill(const org::unirail::test::RAW_PRESSURE& praw_pressure);

			void on_RAW_PRESSURE(const com::company::demo::RAW_PRESSURE& praw_pressure);

			void on_RAW_PRESSURE(Pack* pack) {

				const com::company::demo::RAW_PRESSURE praw_pressure = { pack, *pack->bytes };

				on_RAW_PRESSURE(praw_pressure);
			};

			void fill(const com::company::demo::DIGICAM_CONTROL& pdigicam_control);

			void on_DIGICAM_CONTROL(const com::company::demo::DIGICAM_CONTROL& pdigicam_control);

			void on_DIGICAM_CONTROL(Pack* pack) {

				const com::company::demo::DIGICAM_CONTROL pdigicam_control = { pack, *pack->bytes };

				on_DIGICAM_CONTROL(pdigicam_control);
			};

			void fill(const com::company::demo::NAMED_VALUE_FLOAT& pnamed_value_float);

			void on_NAMED_VALUE_FLOAT(const com::company::demo::NAMED_VALUE_FLOAT& pnamed_value_float);

			void on_NAMED_VALUE_FLOAT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::NAMED_VALUE_FLOAT pnamed_value_float = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_NAMED_VALUE_FLOAT(pnamed_value_float);
			};

			void fill(const com::company::demo::GOPRO_HEARTBEAT& pgopro_heartbeat);

			void on_GOPRO_HEARTBEAT(const com::company::demo::GOPRO_HEARTBEAT& pgopro_heartbeat);

			void on_GOPRO_HEARTBEAT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GOPRO_HEARTBEAT pgopro_heartbeat = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GOPRO_HEARTBEAT(pgopro_heartbeat);
			};

			void fill(const org::unirail::test::ATTITUDE& pattitude);

			void on_ATTITUDE(const com::company::demo::ATTITUDE& pattitude);

			void on_ATTITUDE(Pack* pack) {

				const com::company::demo::ATTITUDE pattitude = { pack, *pack->bytes };

				on_ATTITUDE(pattitude);
			};

			void fill(const org::unirail::test::MISSION_WRITE_PARTIAL_LIST& pmission_write_partial_list);

			void on_MISSION_WRITE_PARTIAL_LIST(const com::company::demo::MISSION_WRITE_PARTIAL_LIST& pmission_write_partial_list);

			void on_MISSION_WRITE_PARTIAL_LIST(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_WRITE_PARTIAL_LIST pmission_write_partial_list = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_WRITE_PARTIAL_LIST(pmission_write_partial_list);
			};

			void fill(const com::company::demo::AHRS2& pahrs2);

			void on_AHRS2(const com::company::demo::AHRS2& pahrs2);

			void on_AHRS2(Pack* pack) {

				const com::company::demo::AHRS2 pahrs2 = { pack, *pack->bytes };

				on_AHRS2(pahrs2);
			};

			void fill(const com::company::demo::LOG_ERASE& plog_erase);

			void on_LOG_ERASE(const com::company::demo::LOG_ERASE& plog_erase);

			void on_LOG_ERASE(Pack* pack) {

				const com::company::demo::LOG_ERASE plog_erase = { pack, *pack->bytes };

				on_LOG_ERASE(plog_erase);
			};

			void fill(const com::company::demo::TERRAIN_REQUEST& pterrain_request);

			void on_TERRAIN_REQUEST(const com::company::demo::TERRAIN_REQUEST& pterrain_request);

			void on_TERRAIN_REQUEST(Pack* pack) {

				const com::company::demo::TERRAIN_REQUEST pterrain_request = { pack, *pack->bytes };

				on_TERRAIN_REQUEST(pterrain_request);
			};

			void fill(const com::company::demo::MOUNT_STATUS& pmount_status);

			void on_MOUNT_STATUS(const com::company::demo::MOUNT_STATUS& pmount_status);

			void on_MOUNT_STATUS(Pack* pack) {

				const com::company::demo::MOUNT_STATUS pmount_status = { pack, *pack->bytes };

				on_MOUNT_STATUS(pmount_status);
			};

			void fill(const org::unirail::test::MANUAL_SETPOINT& pmanual_setpoint);

			void on_MANUAL_SETPOINT(const com::company::demo::MANUAL_SETPOINT& pmanual_setpoint);

			void on_MANUAL_SETPOINT(Pack* pack) {

				const com::company::demo::MANUAL_SETPOINT pmanual_setpoint = { pack, *pack->bytes };

				on_MANUAL_SETPOINT(pmanual_setpoint);
			};

			void fill(const com::company::demo::PID_TUNING& ppid_tuning);

			void on_PID_TUNING(const com::company::demo::PID_TUNING& ppid_tuning);

			void on_PID_TUNING(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PID_TUNING ppid_tuning = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PID_TUNING(ppid_tuning);
			};

			void fill(const org::unirail::test::SAFETY_ALLOWED_AREA& psafety_allowed_area);

			void on_SAFETY_ALLOWED_AREA(const com::company::demo::SAFETY_ALLOWED_AREA& psafety_allowed_area);

			void on_SAFETY_ALLOWED_AREA(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SAFETY_ALLOWED_AREA psafety_allowed_area = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SAFETY_ALLOWED_AREA(psafety_allowed_area);
			};

			void fill(const com::company::demo::OPTICAL_FLOW_RAD& poptical_flow_rad);

			void on_OPTICAL_FLOW_RAD(const com::company::demo::OPTICAL_FLOW_RAD& poptical_flow_rad);

			void on_OPTICAL_FLOW_RAD(Pack* pack) {

				const com::company::demo::OPTICAL_FLOW_RAD poptical_flow_rad = { pack, *pack->bytes };

				on_OPTICAL_FLOW_RAD(poptical_flow_rad);
			};

			void fill(const com::company::demo::LOG_DATA& plog_data);

			void on_LOG_DATA(const com::company::demo::LOG_DATA& plog_data);

			void on_LOG_DATA(Pack* pack) {

				const com::company::demo::LOG_DATA plog_data = { pack, *pack->bytes };

				on_LOG_DATA(plog_data);
			};

			void fill(const org::unirail::test::MISSION_CLEAR_ALL& pmission_clear_all);

			void on_MISSION_CLEAR_ALL(const com::company::demo::MISSION_CLEAR_ALL& pmission_clear_all);

			void on_MISSION_CLEAR_ALL(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_CLEAR_ALL pmission_clear_all = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_CLEAR_ALL(pmission_clear_all);
			};

			void fill(const com::company::demo::AHRS3& pahrs3);

			void on_AHRS3(const com::company::demo::AHRS3& pahrs3);

			void on_AHRS3(Pack* pack) {

				const com::company::demo::AHRS3 pahrs3 = { pack, *pack->bytes };

				on_AHRS3(pahrs3);
			};

			void fill(const com::company::demo::VICON_POSITION_ESTIMATE& pvicon_position_estimate);

			void on_VICON_POSITION_ESTIMATE(const com::company::demo::VICON_POSITION_ESTIMATE& pvicon_position_estimate);

			void on_VICON_POSITION_ESTIMATE(Pack* pack) {

				const com::company::demo::VICON_POSITION_ESTIMATE pvicon_position_estimate = { pack, *pack->bytes };

				on_VICON_POSITION_ESTIMATE(pvicon_position_estimate);
			};

			void fill(const com::company::demo::GPS2_RTK& pgps2_rtk);

			void on_GPS2_RTK(const com::company::demo::GPS2_RTK& pgps2_rtk);

			void on_GPS2_RTK(Pack* pack) {

				const com::company::demo::GPS2_RTK pgps2_rtk = { pack, *pack->bytes };

				on_GPS2_RTK(pgps2_rtk);
			};

			void fill(const com::company::demo::MAG_CAL_REPORT& pmag_cal_report);

			void on_MAG_CAL_REPORT(const com::company::demo::MAG_CAL_REPORT& pmag_cal_report);

			void on_MAG_CAL_REPORT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MAG_CAL_REPORT pmag_cal_report = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MAG_CAL_REPORT(pmag_cal_report);
			};

			void fill(const com::company::demo::LOG_REQUEST_LIST& plog_request_list);

			void on_LOG_REQUEST_LIST(const com::company::demo::LOG_REQUEST_LIST& plog_request_list);

			void on_LOG_REQUEST_LIST(Pack* pack) {

				const com::company::demo::LOG_REQUEST_LIST plog_request_list = { pack, *pack->bytes };

				on_LOG_REQUEST_LIST(plog_request_list);
			};

			void fill(const org::unirail::test::SCALED_PRESSURE& pscaled_pressure);

			void on_SCALED_PRESSURE(const com::company::demo::SCALED_PRESSURE& pscaled_pressure);

			void on_SCALED_PRESSURE(Pack* pack) {

				const com::company::demo::SCALED_PRESSURE pscaled_pressure = { pack, *pack->bytes };

				on_SCALED_PRESSURE(pscaled_pressure);
			};

			void fill(const com::company::demo::V2_EXTENSION& pv2_extension);

			void on_V2_EXTENSION(const com::company::demo::V2_EXTENSION& pv2_extension);

			void on_V2_EXTENSION(Pack* pack) {

				const com::company::demo::V2_EXTENSION pv2_extension = { pack, *pack->bytes };

				on_V2_EXTENSION(pv2_extension);
			};

			void fill(const org::unirail::test::HEARTBEAT& pheartbeat);

			void on_HEARTBEAT(const com::company::demo::HEARTBEAT& pheartbeat);

			void on_HEARTBEAT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::HEARTBEAT pheartbeat = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_HEARTBEAT(pheartbeat);
			};

			void fill(const org::unirail::test::PARAM_MAP_RC& pparam_map_rc);

			void on_PARAM_MAP_RC(const com::company::demo::PARAM_MAP_RC& pparam_map_rc);

			void on_PARAM_MAP_RC(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_MAP_RC pparam_map_rc = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_MAP_RC(pparam_map_rc);
			};

			void fill(const com::company::demo::POWER_STATUS& ppower_status);

			void on_POWER_STATUS(const com::company::demo::POWER_STATUS& ppower_status);

			void on_POWER_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::POWER_STATUS ppower_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_POWER_STATUS(ppower_status);
			};

			void fill(const com::company::demo::REMOTE_LOG_DATA_BLOCK& premote_log_data_block);

			void on_REMOTE_LOG_DATA_BLOCK(const com::company::demo::REMOTE_LOG_DATA_BLOCK& premote_log_data_block);

			void on_REMOTE_LOG_DATA_BLOCK(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::REMOTE_LOG_DATA_BLOCK premote_log_data_block = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_REMOTE_LOG_DATA_BLOCK(premote_log_data_block);
			};

			void fill(const com::company::demo::LOGGING_DATA_ACKED& plogging_data_acked);

			void on_LOGGING_DATA_ACKED(const com::company::demo::LOGGING_DATA_ACKED& plogging_data_acked);

			void on_LOGGING_DATA_ACKED(Pack* pack) {

				const com::company::demo::LOGGING_DATA_ACKED plogging_data_acked = { pack, *pack->bytes };

				on_LOGGING_DATA_ACKED(plogging_data_acked);
			};

			void fill(const com::company::demo::TERRAIN_CHECK& pterrain_check);

			void on_TERRAIN_CHECK(const com::company::demo::TERRAIN_CHECK& pterrain_check);

			void on_TERRAIN_CHECK(Pack* pack) {

				const com::company::demo::TERRAIN_CHECK pterrain_check = { pack, *pack->bytes };

				on_TERRAIN_CHECK(pterrain_check);
			};

			void fill(const com::company::demo::MOUNT_CONFIGURE& pmount_configure);

			void on_MOUNT_CONFIGURE(const com::company::demo::MOUNT_CONFIGURE& pmount_configure);

			void on_MOUNT_CONFIGURE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MOUNT_CONFIGURE pmount_configure = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MOUNT_CONFIGURE(pmount_configure);
			};

			void fill(const org::unirail::test::MISSION_REQUEST_INT& pmission_request_int);

			void on_MISSION_REQUEST_INT(const com::company::demo::MISSION_REQUEST_INT& pmission_request_int);

			void on_MISSION_REQUEST_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_REQUEST_INT pmission_request_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_REQUEST_INT(pmission_request_int);
			};

			void fill(const org::unirail::test::LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET& plocal_position_ned_system_global_offset);

			void on_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(const com::company::demo::LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET& plocal_position_ned_system_global_offset);

			void on_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(Pack* pack) {

				const com::company::demo::LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET plocal_position_ned_system_global_offset = { pack, *pack->bytes };

				on_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(plocal_position_ned_system_global_offset);
			};

			void fill(const org::unirail::test::COMMAND_ACK& pcommand_ack);

			void on_COMMAND_ACK(const com::company::demo::COMMAND_ACK& pcommand_ack);

			void on_COMMAND_ACK(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::COMMAND_ACK pcommand_ack = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_COMMAND_ACK(pcommand_ack);
			};

			void fill(const org::unirail::test::DATA_STREAM& pdata_stream);

			void on_DATA_STREAM(const com::company::demo::DATA_STREAM& pdata_stream);

			void on_DATA_STREAM(Pack* pack) {

				const com::company::demo::DATA_STREAM pdata_stream = { pack, *pack->bytes };

				on_DATA_STREAM(pdata_stream);
			};

			void fill(const org::unirail::test::MISSION_REQUEST& pmission_request);

			void on_MISSION_REQUEST(const com::company::demo::MISSION_REQUEST& pmission_request);

			void on_MISSION_REQUEST(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_REQUEST pmission_request = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_REQUEST(pmission_request);
			};

			void fill(const com::company::demo::TERRAIN_REPORT& pterrain_report);

			void on_TERRAIN_REPORT(const com::company::demo::TERRAIN_REPORT& pterrain_report);

			void on_TERRAIN_REPORT(Pack* pack) {

				const com::company::demo::TERRAIN_REPORT pterrain_report = { pack, *pack->bytes };

				on_TERRAIN_REPORT(pterrain_report);
			};

			void fill(const com::company::demo::SET_HOME_POSITION& pset_home_position);

			void on_SET_HOME_POSITION(const com::company::demo::SET_HOME_POSITION& pset_home_position);

			void on_SET_HOME_POSITION(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SET_HOME_POSITION pset_home_position = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SET_HOME_POSITION(pset_home_position);
			};

			void on_SwitchModeCommand() { printf("SwitchModeCommand \n"); }

			void fill(const org::unirail::test::HIL_RC_INPUTS_RAW& phil_rc_inputs_raw);

			void on_HIL_RC_INPUTS_RAW(const com::company::demo::HIL_RC_INPUTS_RAW& phil_rc_inputs_raw);

			void on_HIL_RC_INPUTS_RAW(Pack* pack) {

				const com::company::demo::HIL_RC_INPUTS_RAW phil_rc_inputs_raw = { pack, *pack->bytes };

				on_HIL_RC_INPUTS_RAW(phil_rc_inputs_raw);
			};

			void fill(const com::company::demo::SCALED_IMU3& pscaled_imu3);

			void on_SCALED_IMU3(const com::company::demo::SCALED_IMU3& pscaled_imu3);

			void on_SCALED_IMU3(Pack* pack) {

				const com::company::demo::SCALED_IMU3 pscaled_imu3 = { pack, *pack->bytes };

				on_SCALED_IMU3(pscaled_imu3);
			};

			void fill(const org::unirail::test::SET_MODE& pset_mode);

			void on_SET_MODE(const com::company::demo::SET_MODE& pset_mode);

			void on_SET_MODE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SET_MODE pset_mode = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SET_MODE(pset_mode);
			};

			void fill(const com::company::demo::MOUNT_CONTROL& pmount_control);

			void on_MOUNT_CONTROL(const com::company::demo::MOUNT_CONTROL& pmount_control);

			void on_MOUNT_CONTROL(Pack* pack) {

				const com::company::demo::MOUNT_CONTROL pmount_control = { pack, *pack->bytes };

				on_MOUNT_CONTROL(pmount_control);
			};

			void fill(const org::unirail::test::POSITION_TARGET_GLOBAL_INT& pposition_target_global_int);

			void on_POSITION_TARGET_GLOBAL_INT(const com::company::demo::POSITION_TARGET_GLOBAL_INT& pposition_target_global_int);

			void on_POSITION_TARGET_GLOBAL_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::POSITION_TARGET_GLOBAL_INT pposition_target_global_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_POSITION_TARGET_GLOBAL_INT(pposition_target_global_int);
			};

			void fill(const com::company::demo::LED_CONTROL& pled_control);

			void on_LED_CONTROL(const com::company::demo::LED_CONTROL& pled_control);

			void on_LED_CONTROL(Pack* pack) {

				const com::company::demo::LED_CONTROL pled_control = { pack, *pack->bytes };

				on_LED_CONTROL(pled_control);
			};

			void fill(const com::company::demo::SIM_STATE& psim_state);

			void on_SIM_STATE(const com::company::demo::SIM_STATE& psim_state);

			void on_SIM_STATE(Pack* pack) {

				const com::company::demo::SIM_STATE psim_state = { pack, *pack->bytes };

				on_SIM_STATE(psim_state);
			};

			void fill(const com::company::demo::WIFI_CONFIG_AP& pwifi_config_ap);

			void on_WIFI_CONFIG_AP(const com::company::demo::WIFI_CONFIG_AP& pwifi_config_ap);

			void on_WIFI_CONFIG_AP(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::WIFI_CONFIG_AP pwifi_config_ap = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_WIFI_CONFIG_AP(pwifi_config_ap);
			};

			void fill(const com::company::demo::DATA96& pdata96);

			void on_DATA96(const com::company::demo::DATA96& pdata96);

			void on_DATA96(Pack* pack) {

				const com::company::demo::DATA96 pdata96 = { pack, *pack->bytes };

				on_DATA96(pdata96);
			};

			void fill(const com::company::demo::FLIGHT_INFORMATION& pflight_information);

			void on_FLIGHT_INFORMATION(const com::company::demo::FLIGHT_INFORMATION& pflight_information);

			void on_FLIGHT_INFORMATION(Pack* pack) {

				const com::company::demo::FLIGHT_INFORMATION pflight_information = { pack, *pack->bytes };

				on_FLIGHT_INFORMATION(pflight_information);
			};

			void fill(const org::unirail::test::RC_CHANNELS_RAW& prc_channels_raw);

			void on_RC_CHANNELS_RAW(const com::company::demo::RC_CHANNELS_RAW& prc_channels_raw);

			void on_RC_CHANNELS_RAW(Pack* pack) {

				const com::company::demo::RC_CHANNELS_RAW prc_channels_raw = { pack, *pack->bytes };

				on_RC_CHANNELS_RAW(prc_channels_raw);
			};

			void fill(const org::unirail::test::SERVO_OUTPUT_RAW& pservo_output_raw);

			void on_SERVO_OUTPUT_RAW(const com::company::demo::SERVO_OUTPUT_RAW& pservo_output_raw);

			void on_SERVO_OUTPUT_RAW(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SERVO_OUTPUT_RAW pservo_output_raw = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SERVO_OUTPUT_RAW(pservo_output_raw);
			};

			void fill(const com::company::demo::MEMINFO& pmeminfo);

			void on_MEMINFO(const com::company::demo::MEMINFO& pmeminfo);

			void on_MEMINFO(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MEMINFO pmeminfo = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MEMINFO(pmeminfo);
			};

			void fill(const org::unirail::test::MISSION_ITEM_REACHED& pmission_item_reached);

			void on_MISSION_ITEM_REACHED(const com::company::demo::MISSION_ITEM_REACHED& pmission_item_reached);

			void on_MISSION_ITEM_REACHED(Pack* pack) {

				const com::company::demo::MISSION_ITEM_REACHED pmission_item_reached = { pack, *pack->bytes };

				on_MISSION_ITEM_REACHED(pmission_item_reached);
			};

			void fill(const com::company::demo::LOGGING_ACK& plogging_ack);

			void on_LOGGING_ACK(const com::company::demo::LOGGING_ACK& plogging_ack);

			void on_LOGGING_ACK(Pack* pack) {

				const com::company::demo::LOGGING_ACK plogging_ack = { pack, *pack->bytes };

				on_LOGGING_ACK(plogging_ack);
			};

			void fill(const com::company::demo::VISION_SPEED_ESTIMATE& pvision_speed_estimate);

			void on_VISION_SPEED_ESTIMATE(const com::company::demo::VISION_SPEED_ESTIMATE& pvision_speed_estimate);

			void on_VISION_SPEED_ESTIMATE(Pack* pack) {

				const com::company::demo::VISION_SPEED_ESTIMATE pvision_speed_estimate = { pack, *pack->bytes };

				on_VISION_SPEED_ESTIMATE(pvision_speed_estimate);
			};

			void fill(const com::company::demo::DEBUG_VECT& pdebug_vect);

			void on_DEBUG_VECT(const com::company::demo::DEBUG_VECT& pdebug_vect);

			void on_DEBUG_VECT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::DEBUG_VECT pdebug_vect = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_DEBUG_VECT(pdebug_vect);
			};

			void fill(const com::company::demo::LOG_REQUEST_END& plog_request_end);

			void on_LOG_REQUEST_END(const com::company::demo::LOG_REQUEST_END& plog_request_end);

			void on_LOG_REQUEST_END(Pack* pack) {

				const com::company::demo::LOG_REQUEST_END plog_request_end = { pack, *pack->bytes };

				on_LOG_REQUEST_END(plog_request_end);
			};

			void fill(const org::unirail::test::MISSION_ACK& pmission_ack);

			void on_MISSION_ACK(const com::company::demo::MISSION_ACK& pmission_ack);

			void on_MISSION_ACK(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_ACK pmission_ack = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_ACK(pmission_ack);
			};

			void fill(const org::unirail::test::CHANGE_OPERATOR_CONTROL_ACK& pchange_operator_control_ack);

			void on_CHANGE_OPERATOR_CONTROL_ACK(const com::company::demo::CHANGE_OPERATOR_CONTROL_ACK& pchange_operator_control_ack);

			void on_CHANGE_OPERATOR_CONTROL_ACK(Pack* pack) {

				const com::company::demo::CHANGE_OPERATOR_CONTROL_ACK pchange_operator_control_ack = { pack, *pack->bytes };

				on_CHANGE_OPERATOR_CONTROL_ACK(pchange_operator_control_ack);
			};

			void fill(const org::unirail::test::MISSION_CURRENT& pmission_current);

			void on_MISSION_CURRENT(const com::company::demo::MISSION_CURRENT& pmission_current);

			void on_MISSION_CURRENT(Pack* pack) {

				const com::company::demo::MISSION_CURRENT pmission_current = { pack, *pack->bytes };

				on_MISSION_CURRENT(pmission_current);
			};

			void fill(const org::unirail::test::SYSTEM_TIME& psystem_time);

			void on_SYSTEM_TIME(const com::company::demo::SYSTEM_TIME& psystem_time);

			void on_SYSTEM_TIME(Pack* pack) {

				const com::company::demo::SYSTEM_TIME psystem_time = { pack, *pack->bytes };

				on_SYSTEM_TIME(psystem_time);
			};

			void fill(const com::company::demo::CAMERA_TRIGGER& pcamera_trigger);

			void on_CAMERA_TRIGGER(const com::company::demo::CAMERA_TRIGGER& pcamera_trigger);

			void on_CAMERA_TRIGGER(Pack* pack) {

				const com::company::demo::CAMERA_TRIGGER pcamera_trigger = { pack, *pack->bytes };

				on_CAMERA_TRIGGER(pcamera_trigger);
			};

			void fill(const com::company::demo::GOPRO_SET_RESPONSE& pgopro_set_response);

			void on_GOPRO_SET_RESPONSE(const com::company::demo::GOPRO_SET_RESPONSE& pgopro_set_response);

			void on_GOPRO_SET_RESPONSE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GOPRO_SET_RESPONSE pgopro_set_response = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GOPRO_SET_RESPONSE(pgopro_set_response);
			};

			void fill(const org::unirail::test::VISION_POSITION_ESTIMATE& pvision_position_estimate);

			void on_VISION_POSITION_ESTIMATE(const com::company::demo::VISION_POSITION_ESTIMATE& pvision_position_estimate);

			void on_VISION_POSITION_ESTIMATE(Pack* pack) {

				const com::company::demo::VISION_POSITION_ESTIMATE pvision_position_estimate = { pack, *pack->bytes };

				on_VISION_POSITION_ESTIMATE(pvision_position_estimate);
			};

			void fill(const org::unirail::test::MANUAL_CONTROL& pmanual_control);

			void on_MANUAL_CONTROL(const com::company::demo::MANUAL_CONTROL& pmanual_control);

			void on_MANUAL_CONTROL(Pack* pack) {

				const com::company::demo::MANUAL_CONTROL pmanual_control = { pack, *pack->bytes };

				on_MANUAL_CONTROL(pmanual_control);
			};

			void fill(const org::unirail::test::RC_CHANNELS& prc_channels);

			void on_RC_CHANNELS(const com::company::demo::RC_CHANNELS& prc_channels);

			void on_RC_CHANNELS(Pack* pack) {

				const com::company::demo::RC_CHANNELS prc_channels = { pack, *pack->bytes };

				on_RC_CHANNELS(prc_channels);
			};

			void fill(const com::company::demo::PROTOCOL_VERSION& pprotocol_version);

			void on_PROTOCOL_VERSION(const com::company::demo::PROTOCOL_VERSION& pprotocol_version);

			void on_PROTOCOL_VERSION(Pack* pack) {

				const com::company::demo::PROTOCOL_VERSION pprotocol_version = { pack, *pack->bytes };

				on_PROTOCOL_VERSION(pprotocol_version);
			};

			void fill(const com::company::demo::RALLY_FETCH_POINT& prally_fetch_point);

			void on_RALLY_FETCH_POINT(const com::company::demo::RALLY_FETCH_POINT& prally_fetch_point);

			void on_RALLY_FETCH_POINT(Pack* pack) {

				const com::company::demo::RALLY_FETCH_POINT prally_fetch_point = { pack, *pack->bytes };

				on_RALLY_FETCH_POINT(prally_fetch_point);
			};

			void fill(const org::unirail::test::PARAM_VALUE& pparam_value);

			void on_PARAM_VALUE(const com::company::demo::PARAM_VALUE& pparam_value);

			void on_PARAM_VALUE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_VALUE pparam_value = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_VALUE(pparam_value);
			};

			void fill(const com::company::demo::BATTERY_STATUS& pbattery_status);

			void on_BATTERY_STATUS(const com::company::demo::BATTERY_STATUS& pbattery_status);

			void on_BATTERY_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::BATTERY_STATUS pbattery_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_BATTERY_STATUS(pbattery_status);
			};

			void fill(const com::company::demo::SERIAL_CONTROL& pserial_control);

			void on_SERIAL_CONTROL(const com::company::demo::SERIAL_CONTROL& pserial_control);

			void on_SERIAL_CONTROL(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SERIAL_CONTROL pserial_control = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SERIAL_CONTROL(pserial_control);
			};

			void fill(const org::unirail::test::SET_POSITION_TARGET_LOCAL_NED& pset_position_target_local_ned);

			void on_SET_POSITION_TARGET_LOCAL_NED(const com::company::demo::SET_POSITION_TARGET_LOCAL_NED& pset_position_target_local_ned);

			void on_SET_POSITION_TARGET_LOCAL_NED(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SET_POSITION_TARGET_LOCAL_NED pset_position_target_local_ned = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SET_POSITION_TARGET_LOCAL_NED(pset_position_target_local_ned);
			};

			void fill(const com::company::demo::MOUNT_ORIENTATION& pmount_orientation);

			void on_MOUNT_ORIENTATION(const com::company::demo::MOUNT_ORIENTATION& pmount_orientation);

			void on_MOUNT_ORIENTATION(Pack* pack) {

				const com::company::demo::MOUNT_ORIENTATION pmount_orientation = { pack, *pack->bytes };

				on_MOUNT_ORIENTATION(pmount_orientation);
			};

			void fill(const org::unirail::test::SET_GPS_GLOBAL_ORIGIN& pset_gps_global_origin);

			void on_SET_GPS_GLOBAL_ORIGIN(const com::company::demo::SET_GPS_GLOBAL_ORIGIN& pset_gps_global_origin);

			void on_SET_GPS_GLOBAL_ORIGIN(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SET_GPS_GLOBAL_ORIGIN pset_gps_global_origin = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SET_GPS_GLOBAL_ORIGIN(pset_gps_global_origin);
			};

			void fill(const com::company::demo::PARAM_EXT_SET& pparam_ext_set);

			void on_PARAM_EXT_SET(const com::company::demo::PARAM_EXT_SET& pparam_ext_set);

			void on_PARAM_EXT_SET(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_EXT_SET pparam_ext_set = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_EXT_SET(pparam_ext_set);
			};

			void fill(const com::company::demo::AUTOPILOT_VERSION& pautopilot_version);

			void on_AUTOPILOT_VERSION(const com::company::demo::AUTOPILOT_VERSION& pautopilot_version);

			void on_AUTOPILOT_VERSION(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::AUTOPILOT_VERSION pautopilot_version = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_AUTOPILOT_VERSION(pautopilot_version);
			};

			void fill(const org::unirail::test::MISSION_REQUEST_LIST& pmission_request_list);

			void on_MISSION_REQUEST_LIST(const com::company::demo::MISSION_REQUEST_LIST& pmission_request_list);

			void on_MISSION_REQUEST_LIST(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_REQUEST_LIST pmission_request_list = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_REQUEST_LIST(pmission_request_list);
			};

			void fill(const com::company::demo::SIMSTATE& psimstate);

			void on_SIMSTATE(const com::company::demo::SIMSTATE& psimstate);

			void on_SIMSTATE(Pack* pack) {

				const com::company::demo::SIMSTATE psimstate = { pack, *pack->bytes };

				on_SIMSTATE(psimstate);
			};

			void fill(const com::company::demo::SET_VIDEO_STREAM_SETTINGS& pset_video_stream_settings);

			void on_SET_VIDEO_STREAM_SETTINGS(const com::company::demo::SET_VIDEO_STREAM_SETTINGS& pset_video_stream_settings);

			void on_SET_VIDEO_STREAM_SETTINGS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SET_VIDEO_STREAM_SETTINGS pset_video_stream_settings = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SET_VIDEO_STREAM_SETTINGS(pset_video_stream_settings);
			};

			void fill(const com::company::demo::PLAY_TUNE& pplay_tune);

			void on_PLAY_TUNE(const com::company::demo::PLAY_TUNE& pplay_tune);

			void on_PLAY_TUNE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PLAY_TUNE pplay_tune = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PLAY_TUNE(pplay_tune);
			};

			void fill(const com::company::demo::DIGICAM_CONFIGURE& pdigicam_configure);

			void on_DIGICAM_CONFIGURE(const com::company::demo::DIGICAM_CONFIGURE& pdigicam_configure);

			void on_DIGICAM_CONFIGURE(Pack* pack) {

				const com::company::demo::DIGICAM_CONFIGURE pdigicam_configure = { pack, *pack->bytes };

				on_DIGICAM_CONFIGURE(pdigicam_configure);
			};

			void fill(const com::company::demo::SCALED_PRESSURE3& pscaled_pressure3);

			void on_SCALED_PRESSURE3(const com::company::demo::SCALED_PRESSURE3& pscaled_pressure3);

			void on_SCALED_PRESSURE3(Pack* pack) {

				const com::company::demo::SCALED_PRESSURE3 pscaled_pressure3 = { pack, *pack->bytes };

				on_SCALED_PRESSURE3(pscaled_pressure3);
			};

			void fill(const org::unirail::test::MISSION_REQUEST_PARTIAL_LIST& pmission_request_partial_list);

			void on_MISSION_REQUEST_PARTIAL_LIST(const com::company::demo::MISSION_REQUEST_PARTIAL_LIST& pmission_request_partial_list);

			void on_MISSION_REQUEST_PARTIAL_LIST(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_REQUEST_PARTIAL_LIST pmission_request_partial_list = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_REQUEST_PARTIAL_LIST(pmission_request_partial_list);
			};

			void fill(const com::company::demo::PARAM_EXT_ACK& pparam_ext_ack);

			void on_PARAM_EXT_ACK(const com::company::demo::PARAM_EXT_ACK& pparam_ext_ack);

			void on_PARAM_EXT_ACK(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::PARAM_EXT_ACK pparam_ext_ack = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_PARAM_EXT_ACK(pparam_ext_ack);
			};

			void fill(const com::company::demo::UAVCAN_NODE_INFO& puavcan_node_info);

			void on_UAVCAN_NODE_INFO(const com::company::demo::UAVCAN_NODE_INFO& puavcan_node_info);

			void on_UAVCAN_NODE_INFO(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::UAVCAN_NODE_INFO puavcan_node_info = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_UAVCAN_NODE_INFO(puavcan_node_info);
			};

			void fill(const com::company::demo::DATA16& pdata16);

			void on_DATA16(const com::company::demo::DATA16& pdata16);

			void on_DATA16(Pack* pack) {

				const com::company::demo::DATA16 pdata16 = { pack, *pack->bytes };

				on_DATA16(pdata16);
			};

			void fill(const com::company::demo::SET_MAG_OFFSETS& pset_mag_offsets);

			void on_SET_MAG_OFFSETS(const com::company::demo::SET_MAG_OFFSETS& pset_mag_offsets);

			void on_SET_MAG_OFFSETS(Pack* pack) {

				const com::company::demo::SET_MAG_OFFSETS pset_mag_offsets = { pack, *pack->bytes };

				on_SET_MAG_OFFSETS(pset_mag_offsets);
			};

			void fill(const com::company::demo::AP_ADC& pap_adc);

			void on_AP_ADC(const com::company::demo::AP_ADC& pap_adc);

			void on_AP_ADC(Pack* pack) {

				const com::company::demo::AP_ADC pap_adc = { pack, *pack->bytes };

				on_AP_ADC(pap_adc);
			};

			void fill(const com::company::demo::WIND& pwind);

			void on_WIND(const com::company::demo::WIND& pwind);

			void on_WIND(Pack* pack) {

				const com::company::demo::WIND pwind = { pack, *pack->bytes };

				on_WIND(pwind);
			};

			void fill(const com::company::demo::AUTOPILOT_VERSION_REQUEST& pautopilot_version_request);

			void on_AUTOPILOT_VERSION_REQUEST(const com::company::demo::AUTOPILOT_VERSION_REQUEST& pautopilot_version_request);

			void on_AUTOPILOT_VERSION_REQUEST(Pack* pack) {

				const com::company::demo::AUTOPILOT_VERSION_REQUEST pautopilot_version_request = { pack, *pack->bytes };

				on_AUTOPILOT_VERSION_REQUEST(pautopilot_version_request);
			};

			void fill(const org::unirail::test::LOCAL_POSITION_NED& plocal_position_ned);

			void on_LOCAL_POSITION_NED(const com::company::demo::LOCAL_POSITION_NED& plocal_position_ned);

			void on_LOCAL_POSITION_NED(Pack* pack) {

				const com::company::demo::LOCAL_POSITION_NED plocal_position_ned = { pack, *pack->bytes };

				on_LOCAL_POSITION_NED(plocal_position_ned);
			};

			void fill(const com::company::demo::DATA_TRANSMISSION_HANDSHAKE& pdata_transmission_handshake);

			void on_DATA_TRANSMISSION_HANDSHAKE(const com::company::demo::DATA_TRANSMISSION_HANDSHAKE& pdata_transmission_handshake);

			void on_DATA_TRANSMISSION_HANDSHAKE(Pack* pack) {

				const com::company::demo::DATA_TRANSMISSION_HANDSHAKE pdata_transmission_handshake = { pack, *pack->bytes };

				on_DATA_TRANSMISSION_HANDSHAKE(pdata_transmission_handshake);
			};

			void fill(const org::unirail::test::GPS_GLOBAL_ORIGIN& pgps_global_origin);

			void on_GPS_GLOBAL_ORIGIN(const com::company::demo::GPS_GLOBAL_ORIGIN& pgps_global_origin);

			void on_GPS_GLOBAL_ORIGIN(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GPS_GLOBAL_ORIGIN pgps_global_origin = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GPS_GLOBAL_ORIGIN(pgps_global_origin);
			};

			void fill(const com::company::demo::SCALED_IMU2& pscaled_imu2);

			void on_SCALED_IMU2(const com::company::demo::SCALED_IMU2& pscaled_imu2);

			void on_SCALED_IMU2(Pack* pack) {

				const com::company::demo::SCALED_IMU2 pscaled_imu2 = { pack, *pack->bytes };

				on_SCALED_IMU2(pscaled_imu2);
			};

			void fill(const org::unirail::test::ATTITUDE_QUATERNION& pattitude_quaternion);

			void on_ATTITUDE_QUATERNION(const com::company::demo::ATTITUDE_QUATERNION& pattitude_quaternion);

			void on_ATTITUDE_QUATERNION(Pack* pack) {

				const com::company::demo::ATTITUDE_QUATERNION pattitude_quaternion = { pack, *pack->bytes };

				on_ATTITUDE_QUATERNION(pattitude_quaternion);
			};

			void fill(const com::company::demo::DATA64& pdata64);

			void on_DATA64(const com::company::demo::DATA64& pdata64);

			void on_DATA64(Pack* pack) {

				const com::company::demo::DATA64 pdata64 = { pack, *pack->bytes };

				on_DATA64(pdata64);
			};

			void fill(const org::unirail::test::HIL_ACTUATOR_CONTROLS& phil_actuator_controls);

			void on_HIL_ACTUATOR_CONTROLS(const com::company::demo::HIL_ACTUATOR_CONTROLS& phil_actuator_controls);

			void on_HIL_ACTUATOR_CONTROLS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::HIL_ACTUATOR_CONTROLS phil_actuator_controls = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_HIL_ACTUATOR_CONTROLS(phil_actuator_controls);
			};

			void fill(const org::unirail::test::POSITION_TARGET_LOCAL_NED& pposition_target_local_ned);

			void on_POSITION_TARGET_LOCAL_NED(const com::company::demo::POSITION_TARGET_LOCAL_NED& pposition_target_local_ned);

			void on_POSITION_TARGET_LOCAL_NED(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::POSITION_TARGET_LOCAL_NED pposition_target_local_ned = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_POSITION_TARGET_LOCAL_NED(pposition_target_local_ned);
			};

			void fill(const com::company::demo::GIMBAL_REPORT& pgimbal_report);

			void on_GIMBAL_REPORT(const com::company::demo::GIMBAL_REPORT& pgimbal_report);

			void on_GIMBAL_REPORT(Pack* pack) {

				const com::company::demo::GIMBAL_REPORT pgimbal_report = { pack, *pack->bytes };

				on_GIMBAL_REPORT(pgimbal_report);
			};

			void fill(const com::company::demo::DEVICE_OP_WRITE& pdevice_op_write);

			void on_DEVICE_OP_WRITE(const com::company::demo::DEVICE_OP_WRITE& pdevice_op_write);

			void on_DEVICE_OP_WRITE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::DEVICE_OP_WRITE pdevice_op_write = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_DEVICE_OP_WRITE(pdevice_op_write);
			};

			void fill(const com::company::demo::DISTANCE_SENSOR& pdistance_sensor);

			void on_DISTANCE_SENSOR(const com::company::demo::DISTANCE_SENSOR& pdistance_sensor);

			void on_DISTANCE_SENSOR(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::DISTANCE_SENSOR pdistance_sensor = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_DISTANCE_SENSOR(pdistance_sensor);
			};

			void fill(const com::company::demo::HIL_OPTICAL_FLOW& phil_optical_flow);

			void on_HIL_OPTICAL_FLOW(const com::company::demo::HIL_OPTICAL_FLOW& phil_optical_flow);

			void on_HIL_OPTICAL_FLOW(Pack* pack) {

				const com::company::demo::HIL_OPTICAL_FLOW phil_optical_flow = { pack, *pack->bytes };

				on_HIL_OPTICAL_FLOW(phil_optical_flow);
			};

			void fill(const com::company::demo::SCALED_PRESSURE2& pscaled_pressure2);

			void on_SCALED_PRESSURE2(const com::company::demo::SCALED_PRESSURE2& pscaled_pressure2);

			void on_SCALED_PRESSURE2(Pack* pack) {

				const com::company::demo::SCALED_PRESSURE2 pscaled_pressure2 = { pack, *pack->bytes };

				on_SCALED_PRESSURE2(pscaled_pressure2);
			};

			void fill(const com::company::demo::WIND_COV& pwind_cov);

			void on_WIND_COV(const com::company::demo::WIND_COV& pwind_cov);

			void on_WIND_COV(Pack* pack) {

				const com::company::demo::WIND_COV pwind_cov = { pack, *pack->bytes };

				on_WIND_COV(pwind_cov);
			};

			void fill(const org::unirail::test::CHANGE_OPERATOR_CONTROL& pchange_operator_control);

			void on_CHANGE_OPERATOR_CONTROL(const com::company::demo::CHANGE_OPERATOR_CONTROL& pchange_operator_control);

			void on_CHANGE_OPERATOR_CONTROL(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::CHANGE_OPERATOR_CONTROL pchange_operator_control = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_CHANGE_OPERATOR_CONTROL(pchange_operator_control);
			};

			void fill(const com::company::demo::GOPRO_SET_REQUEST& pgopro_set_request);

			void on_GOPRO_SET_REQUEST(const com::company::demo::GOPRO_SET_REQUEST& pgopro_set_request);

			void on_GOPRO_SET_REQUEST(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GOPRO_SET_REQUEST pgopro_set_request = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GOPRO_SET_REQUEST(pgopro_set_request);
			};

			void fill(const org::unirail::test::SYS_STATUS& psys_status);

			void on_SYS_STATUS(const com::company::demo::SYS_STATUS& psys_status);

			void on_SYS_STATUS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::SYS_STATUS psys_status = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_SYS_STATUS(psys_status);
			};

			void fill(const org::unirail::test::MISSION_ITEM& pmission_item);

			void on_MISSION_ITEM(const com::company::demo::MISSION_ITEM& pmission_item);

			void on_MISSION_ITEM(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_ITEM pmission_item = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_ITEM(pmission_item);
			};

			void fill(const org::unirail::test::RAW_IMU& praw_imu);

			void on_RAW_IMU(const com::company::demo::RAW_IMU& praw_imu);

			void on_RAW_IMU(Pack* pack) {

				const com::company::demo::RAW_IMU praw_imu = { pack, *pack->bytes };

				on_RAW_IMU(praw_imu);
			};

			void fill(const org::unirail::test::COMMAND_INT& pcommand_int);

			void on_COMMAND_INT(const com::company::demo::COMMAND_INT& pcommand_int);

			void on_COMMAND_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::COMMAND_INT pcommand_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_COMMAND_INT(pcommand_int);
			};

			void fill(const org::unirail::test::OPTICAL_FLOW& poptical_flow);

			void on_OPTICAL_FLOW(const com::company::demo::OPTICAL_FLOW& poptical_flow);

			void on_OPTICAL_FLOW(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::OPTICAL_FLOW poptical_flow = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_OPTICAL_FLOW(poptical_flow);
			};

			void fill(const org::unirail::test::MISSION_ITEM_INT& pmission_item_int);

			void on_MISSION_ITEM_INT(const com::company::demo::MISSION_ITEM_INT& pmission_item_int);

			void on_MISSION_ITEM_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MISSION_ITEM_INT pmission_item_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MISSION_ITEM_INT(pmission_item_int);
			};

			void fill(const com::company::demo::VISION_POSITION_DELTA& pvision_position_delta);

			void on_VISION_POSITION_DELTA(const com::company::demo::VISION_POSITION_DELTA& pvision_position_delta);

			void on_VISION_POSITION_DELTA(Pack* pack) {

				const com::company::demo::VISION_POSITION_DELTA pvision_position_delta = { pack, *pack->bytes };

				on_VISION_POSITION_DELTA(pvision_position_delta);
			};

			void fill(const com::company::demo::LOGGING_DATA& plogging_data);

			void on_LOGGING_DATA(const com::company::demo::LOGGING_DATA& plogging_data);

			void on_LOGGING_DATA(Pack* pack) {

				const com::company::demo::LOGGING_DATA plogging_data = { pack, *pack->bytes };

				on_LOGGING_DATA(plogging_data);
			};

			void fill(const com::company::demo::DEVICE_OP_READ& pdevice_op_read);

			void on_DEVICE_OP_READ(const com::company::demo::DEVICE_OP_READ& pdevice_op_read);

			void on_DEVICE_OP_READ(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::DEVICE_OP_READ pdevice_op_read = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_DEVICE_OP_READ(pdevice_op_read);
			};

			void fill(const com::company::demo::MAG_CAL_PROGRESS& pmag_cal_progress);

			void on_MAG_CAL_PROGRESS(const com::company::demo::MAG_CAL_PROGRESS& pmag_cal_progress);

			void on_MAG_CAL_PROGRESS(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::MAG_CAL_PROGRESS pmag_cal_progress = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_MAG_CAL_PROGRESS(pmag_cal_progress);
			};

			void fill(const com::company::demo::HIGHRES_IMU& phighres_imu);

			void on_HIGHRES_IMU(const com::company::demo::HIGHRES_IMU& phighres_imu);

			void on_HIGHRES_IMU(Pack* pack) {

				const com::company::demo::HIGHRES_IMU phighres_imu = { pack, *pack->bytes };

				on_HIGHRES_IMU(phighres_imu);
			};

			void fill(const com::company::demo::EXTENDED_SYS_STATE& pextended_sys_state);

			void on_EXTENDED_SYS_STATE(const com::company::demo::EXTENDED_SYS_STATE& pextended_sys_state);

			void on_EXTENDED_SYS_STATE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::EXTENDED_SYS_STATE pextended_sys_state = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_EXTENDED_SYS_STATE(pextended_sys_state);
			};

			void fill(const com::company::demo::UAVIONIX_ADSB_OUT_DYNAMIC& puavionix_adsb_out_dynamic);

			void on_UAVIONIX_ADSB_OUT_DYNAMIC(const com::company::demo::UAVIONIX_ADSB_OUT_DYNAMIC& puavionix_adsb_out_dynamic);

			void on_UAVIONIX_ADSB_OUT_DYNAMIC(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::UAVIONIX_ADSB_OUT_DYNAMIC puavionix_adsb_out_dynamic = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_UAVIONIX_ADSB_OUT_DYNAMIC(puavionix_adsb_out_dynamic);
			};

			void fill(const com::company::demo::GOPRO_GET_RESPONSE& pgopro_get_response);

			void on_GOPRO_GET_RESPONSE(const com::company::demo::GOPRO_GET_RESPONSE& pgopro_get_response);

			void on_GOPRO_GET_RESPONSE(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::GOPRO_GET_RESPONSE pgopro_get_response = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_GOPRO_GET_RESPONSE(pgopro_get_response);
			};

			void fill(const com::company::demo::GPS_INJECT_DATA& pgps_inject_data);

			void on_GPS_INJECT_DATA(const com::company::demo::GPS_INJECT_DATA& pgps_inject_data);

			void on_GPS_INJECT_DATA(Pack* pack) {

				const com::company::demo::GPS_INJECT_DATA pgps_inject_data = { pack, *pack->bytes };

				on_GPS_INJECT_DATA(pgps_inject_data);
			};

			void fill(const com::company::demo::UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT& puavionix_adsb_transceiver_health_report);

			void on_UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(const com::company::demo::UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT& puavionix_adsb_transceiver_health_report);

			void on_UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT puavionix_adsb_transceiver_health_report = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(puavionix_adsb_transceiver_health_report);
			};

			void fill(const org::unirail::test::ATTITUDE_QUATERNION_COV& pattitude_quaternion_cov);

			void on_ATTITUDE_QUATERNION_COV(const com::company::demo::ATTITUDE_QUATERNION_COV& pattitude_quaternion_cov);

			void on_ATTITUDE_QUATERNION_COV(Pack* pack) {

				const com::company::demo::ATTITUDE_QUATERNION_COV pattitude_quaternion_cov = { pack, *pack->bytes };

				on_ATTITUDE_QUATERNION_COV(pattitude_quaternion_cov);
			};

			void fill(const com::company::demo::NAMED_VALUE_INT& pnamed_value_int);

			void on_NAMED_VALUE_INT(const com::company::demo::NAMED_VALUE_INT& pnamed_value_int);

			void on_NAMED_VALUE_INT(Pack* pack) {

				CURSORS(curs);
				const com::company::demo::NAMED_VALUE_INT pnamed_value_int = { *org::unirail::utils::wrap_pack(pack, curs) };

				on_NAMED_VALUE_INT(pnamed_value_int);
			};

			void fill(const com::company::demo::RPM& prpm);

			void on_RPM(const com::company::demo::RPM& prpm);

			void on_RPM(Pack* pack) {

				const com::company::demo::RPM prpm = { pack, *pack->bytes };

				on_RPM(prpm);
			};

			void fill(const com::company::demo::GPS_RTCM_DATA& pgps_rtcm_data);

			void on_GPS_RTCM_DATA(const com::company::demo::GPS_RTCM_DATA& pgps_rtcm_data);

			void on_GPS_RTCM_DATA(Pack* pack) {

				const com::company::demo::GPS_RTCM_DATA pgps_rtcm_data = { pack, *pack->bytes };

				on_GPS_RTCM_DATA(pgps_rtcm_data);
			};

			void fill(const org::unirail::test::GLOBAL_VISION_POSITION_ESTIMATE& pglobal_vision_position_estimate);

			void on_GLOBAL_VISION_POSITION_ESTIMATE(const com::company::demo::GLOBAL_VISION_POSITION_ESTIMATE& pglobal_vision_position_estimate);

			void on_GLOBAL_VISION_POSITION_ESTIMATE(Pack* pack) {

				const com::company::demo::GLOBAL_VISION_POSITION_ESTIMATE pglobal_vision_position_estimate = { pack, *pack->bytes };

				on_GLOBAL_VISION_POSITION_ESTIMATE(pglobal_vision_position_estimate);
			};

			void fill(const com::company::demo::FILE_TRANSFER_PROTOCOL& pfile_transfer_protocol);

			void on_FILE_TRANSFER_PROTOCOL(const com::company::demo::FILE_TRANSFER_PROTOCOL& pfile_transfer_protocol);

			void on_FILE_TRANSFER_PROTOCOL(Pack* pack) {

				const com::company::demo::FILE_TRANSFER_PROTOCOL pfile_transfer_protocol = { pack, *pack->bytes };

				on_FILE_TRANSFER_PROTOCOL(pfile_transfer_protocol);
			};

			void fill(const com::company::demo::RANGEFINDER& prangefinder);

			void on_RANGEFINDER(const com::company::demo::RANGEFINDER& prangefinder);

			void on_RANGEFINDER(Pack* pack) {

				const com::company::demo::RANGEFINDER prangefinder = { pack, *pack->bytes };

				on_RANGEFINDER(prangefinder);
			};

			void fill(const com::company::demo::RADIO_STATUS& pradio_status);

			void on_RADIO_STATUS(const com::company::demo::RADIO_STATUS& pradio_status);

			void on_RADIO_STATUS(Pack* pack) {

				const com::company::demo::RADIO_STATUS pradio_status = { pack, *pack->bytes };

				on_RADIO_STATUS(pradio_status);
			};

			void fill(const com::company::demo::FENCE_POINT& pfence_point);

			void on_FENCE_POINT(const com::company::demo::FENCE_POINT& pfence_point);

			void on_FENCE_POINT(Pack* pack) {

				const com::company::demo::FENCE_POINT pfence_point = { pack, *pack->bytes };

				on_FENCE_POINT(pfence_point);
			};

			void fill(const com::company::demo::RESOURCE_REQUEST& presource_request);

			void on_RESOURCE_REQUEST(const com::company::demo::RESOURCE_REQUEST& presource_request);

			void on_RESOURCE_REQUEST(Pack* pack) {

				const com::company::demo::RESOURCE_REQUEST presource_request = { pack, *pack->bytes };

				on_RESOURCE_REQUEST(presource_request);
			};


			struct TEST_Channel {

				Pack* test_pack = nullptr;
				Transmitter transmitter{};

				static const Pack* pull_sending_pack(Transmitter* transmitter) {
					Pack* pack = nullptr;
					std::swap(pack, reinterpret_cast<TEST_Channel*>(reinterpret_cast<uint8_t*>(transmitter) - offsetof(TEST_Channel, transmitter))->test_pack);
					return pack;
				}

				size_t packs_into_bytes(uint8_t* dst, size_t dst_bytes) { return ::transmit(&transmitter, dst, dst_bytes); }

				size_t packs_into_bytes_adv(uint8_t* dst, size_t dst_bytes) { return ::transmit_adv(&transmitter, dst, dst_bytes); }

				bool send(ATTITUDE_TARGET& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_COUNT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(GLOBAL_POSITION_INT_COV& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SAFETY_SET_ALLOWED_AREA& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(GPS_STATUS& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(PARAM_SET& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(RC_CHANNELS_OVERRIDE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SCALED_IMU& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(PARAM_REQUEST_READ& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SET_ATTITUDE_TARGET& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(HIL_STATE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(REQUEST_DATA_STREAM& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(HIL_CONTROLS& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(PARAM_REQUEST_LIST& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SET_POSITION_TARGET_GLOBAL_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(VFR_HUD& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_SET_CURRENT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(NAV_CONTROLLER_OUTPUT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(AUTH_KEY& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(LOCAL_POSITION_NED_COV& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(PING& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(GLOBAL_POSITION_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(COMMAND_LONG& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(GPS_RAW_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(RC_CHANNELS_SCALED& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(RAW_PRESSURE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(ATTITUDE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_WRITE_PARTIAL_LIST& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MANUAL_SETPOINT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SAFETY_ALLOWED_AREA& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_CLEAR_ALL& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SCALED_PRESSURE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(HEARTBEAT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(PARAM_MAP_RC& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_REQUEST_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(COMMAND_ACK& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(DATA_STREAM& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_REQUEST& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(HIL_RC_INPUTS_RAW& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SET_MODE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(POSITION_TARGET_GLOBAL_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(RC_CHANNELS_RAW& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SERVO_OUTPUT_RAW& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_ITEM_REACHED& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_ACK& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(CHANGE_OPERATOR_CONTROL_ACK& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_CURRENT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SYSTEM_TIME& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(VISION_POSITION_ESTIMATE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MANUAL_CONTROL& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(RC_CHANNELS& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(PARAM_VALUE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SET_POSITION_TARGET_LOCAL_NED& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SET_GPS_GLOBAL_ORIGIN& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_REQUEST_LIST& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_REQUEST_PARTIAL_LIST& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(LOCAL_POSITION_NED& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(GPS_GLOBAL_ORIGIN& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(ATTITUDE_QUATERNION& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(HIL_ACTUATOR_CONTROLS& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(POSITION_TARGET_LOCAL_NED& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(CHANGE_OPERATOR_CONTROL& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(SYS_STATUS& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_ITEM& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(RAW_IMU& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(COMMAND_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(OPTICAL_FLOW& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(MISSION_ITEM_INT& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(ATTITUDE_QUATERNION_COV& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}

				bool send(GLOBAL_VISION_POSITION_ESTIMATE& src) {
					return test_pack ? false : (test_pack = src.unwrap_(), true);
				}


				struct NEW {
					struct org::unirail::test::ATTITUDE_TARGET ATTITUDE_TARGET() {
						Pack* pack = new_pack(&com::company::demo::ATTITUDE_TARGET::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MISSION_COUNT MISSION_COUNT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_COUNT::meta), cur) }; }

					struct org::unirail::test::GLOBAL_POSITION_INT_COV GLOBAL_POSITION_INT_COV(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::GLOBAL_POSITION_INT_COV::meta), cur) }; }

					struct org::unirail::test::SAFETY_SET_ALLOWED_AREA SAFETY_SET_ALLOWED_AREA(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SAFETY_SET_ALLOWED_AREA::meta), cur) }; }

					struct org::unirail::test::GPS_STATUS GPS_STATUS() {
						Pack* pack = new_pack(&com::company::demo::GPS_STATUS::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::PARAM_SET PARAM_SET(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::PARAM_SET::meta), cur) }; }

					struct org::unirail::test::RC_CHANNELS_OVERRIDE RC_CHANNELS_OVERRIDE() {
						Pack* pack = new_pack(&com::company::demo::RC_CHANNELS_OVERRIDE::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::SCALED_IMU SCALED_IMU() {
						Pack* pack = new_pack(&com::company::demo::SCALED_IMU::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::PARAM_REQUEST_READ PARAM_REQUEST_READ(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::PARAM_REQUEST_READ::meta), cur) }; }

					struct org::unirail::test::SET_ATTITUDE_TARGET SET_ATTITUDE_TARGET() {
						Pack* pack = new_pack(&com::company::demo::SET_ATTITUDE_TARGET::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::HIL_STATE HIL_STATE() {
						Pack* pack = new_pack(&com::company::demo::HIL_STATE::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::REQUEST_DATA_STREAM REQUEST_DATA_STREAM() {
						Pack* pack = new_pack(&com::company::demo::REQUEST_DATA_STREAM::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::HIL_CONTROLS HIL_CONTROLS(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::HIL_CONTROLS::meta), cur) }; }

					struct org::unirail::test::PARAM_REQUEST_LIST PARAM_REQUEST_LIST() {
						Pack* pack = new_pack(&com::company::demo::PARAM_REQUEST_LIST::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::SET_POSITION_TARGET_GLOBAL_INT SET_POSITION_TARGET_GLOBAL_INT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SET_POSITION_TARGET_GLOBAL_INT::meta), cur) }; }

					struct org::unirail::test::VFR_HUD VFR_HUD() {
						Pack* pack = new_pack(&com::company::demo::VFR_HUD::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MISSION_SET_CURRENT MISSION_SET_CURRENT() {
						Pack* pack = new_pack(&com::company::demo::MISSION_SET_CURRENT::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::NAV_CONTROLLER_OUTPUT NAV_CONTROLLER_OUTPUT() {
						Pack* pack = new_pack(&com::company::demo::NAV_CONTROLLER_OUTPUT::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::AUTH_KEY AUTH_KEY(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::AUTH_KEY::meta), cur) }; }

					struct org::unirail::test::LOCAL_POSITION_NED_COV LOCAL_POSITION_NED_COV(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::LOCAL_POSITION_NED_COV::meta), cur) }; }

					struct org::unirail::test::PING PING() {
						Pack* pack = new_pack(&com::company::demo::PING::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::GLOBAL_POSITION_INT GLOBAL_POSITION_INT() {
						Pack* pack = new_pack(&com::company::demo::GLOBAL_POSITION_INT::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::COMMAND_LONG COMMAND_LONG(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::COMMAND_LONG::meta), cur) }; }

					struct org::unirail::test::GPS_RAW_INT GPS_RAW_INT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::GPS_RAW_INT::meta), cur) }; }

					struct org::unirail::test::RC_CHANNELS_SCALED RC_CHANNELS_SCALED() {
						Pack* pack = new_pack(&com::company::demo::RC_CHANNELS_SCALED::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::RAW_PRESSURE RAW_PRESSURE() {
						Pack* pack = new_pack(&com::company::demo::RAW_PRESSURE::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::ATTITUDE ATTITUDE() {
						Pack* pack = new_pack(&com::company::demo::ATTITUDE::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MISSION_WRITE_PARTIAL_LIST MISSION_WRITE_PARTIAL_LIST(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_WRITE_PARTIAL_LIST::meta), cur) }; }

					struct org::unirail::test::MANUAL_SETPOINT MANUAL_SETPOINT() {
						Pack* pack = new_pack(&com::company::demo::MANUAL_SETPOINT::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::SAFETY_ALLOWED_AREA SAFETY_ALLOWED_AREA(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SAFETY_ALLOWED_AREA::meta), cur) }; }

					struct org::unirail::test::MISSION_CLEAR_ALL MISSION_CLEAR_ALL(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_CLEAR_ALL::meta), cur) }; }

					struct org::unirail::test::SCALED_PRESSURE SCALED_PRESSURE() {
						Pack* pack = new_pack(&com::company::demo::SCALED_PRESSURE::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::HEARTBEAT HEARTBEAT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::HEARTBEAT::meta), cur) }; }

					struct org::unirail::test::PARAM_MAP_RC PARAM_MAP_RC(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::PARAM_MAP_RC::meta), cur) }; }

					struct org::unirail::test::MISSION_REQUEST_INT MISSION_REQUEST_INT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_REQUEST_INT::meta), cur) }; }

					struct org::unirail::test::LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET() {
						Pack* pack = new_pack(&com::company::demo::LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::COMMAND_ACK COMMAND_ACK(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::COMMAND_ACK::meta), cur) }; }

					struct org::unirail::test::DATA_STREAM DATA_STREAM() {
						Pack* pack = new_pack(&com::company::demo::DATA_STREAM::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MISSION_REQUEST MISSION_REQUEST(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_REQUEST::meta), cur) }; }

					struct org::unirail::test::HIL_RC_INPUTS_RAW HIL_RC_INPUTS_RAW() {
						Pack* pack = new_pack(&com::company::demo::HIL_RC_INPUTS_RAW::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::SET_MODE SET_MODE(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SET_MODE::meta), cur) }; }

					struct org::unirail::test::POSITION_TARGET_GLOBAL_INT POSITION_TARGET_GLOBAL_INT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::POSITION_TARGET_GLOBAL_INT::meta), cur) }; }

					struct org::unirail::test::RC_CHANNELS_RAW RC_CHANNELS_RAW() {
						Pack* pack = new_pack(&com::company::demo::RC_CHANNELS_RAW::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::SERVO_OUTPUT_RAW SERVO_OUTPUT_RAW(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SERVO_OUTPUT_RAW::meta), cur) }; }

					struct org::unirail::test::MISSION_ITEM_REACHED MISSION_ITEM_REACHED() {
						Pack* pack = new_pack(&com::company::demo::MISSION_ITEM_REACHED::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MISSION_ACK MISSION_ACK(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_ACK::meta), cur) }; }

					struct org::unirail::test::CHANGE_OPERATOR_CONTROL_ACK CHANGE_OPERATOR_CONTROL_ACK() {
						Pack* pack = new_pack(&com::company::demo::CHANGE_OPERATOR_CONTROL_ACK::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MISSION_CURRENT MISSION_CURRENT() {
						Pack* pack = new_pack(&com::company::demo::MISSION_CURRENT::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::SYSTEM_TIME SYSTEM_TIME() {
						Pack* pack = new_pack(&com::company::demo::SYSTEM_TIME::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::VISION_POSITION_ESTIMATE VISION_POSITION_ESTIMATE() {
						Pack* pack = new_pack(&com::company::demo::VISION_POSITION_ESTIMATE::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::MANUAL_CONTROL MANUAL_CONTROL() {
						Pack* pack = new_pack(&com::company::demo::MANUAL_CONTROL::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::RC_CHANNELS RC_CHANNELS() {
						Pack* pack = new_pack(&com::company::demo::RC_CHANNELS::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::PARAM_VALUE PARAM_VALUE(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::PARAM_VALUE::meta), cur) }; }

					struct org::unirail::test::SET_POSITION_TARGET_LOCAL_NED SET_POSITION_TARGET_LOCAL_NED(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SET_POSITION_TARGET_LOCAL_NED::meta), cur) }; }

					struct org::unirail::test::SET_GPS_GLOBAL_ORIGIN SET_GPS_GLOBAL_ORIGIN(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SET_GPS_GLOBAL_ORIGIN::meta), cur) }; }

					struct org::unirail::test::MISSION_REQUEST_LIST MISSION_REQUEST_LIST(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_REQUEST_LIST::meta), cur) }; }

					struct org::unirail::test::MISSION_REQUEST_PARTIAL_LIST MISSION_REQUEST_PARTIAL_LIST(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_REQUEST_PARTIAL_LIST::meta), cur) }; }

					struct org::unirail::test::LOCAL_POSITION_NED LOCAL_POSITION_NED() {
						Pack* pack = new_pack(&com::company::demo::LOCAL_POSITION_NED::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::GPS_GLOBAL_ORIGIN GPS_GLOBAL_ORIGIN(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::GPS_GLOBAL_ORIGIN::meta), cur) }; }

					struct org::unirail::test::ATTITUDE_QUATERNION ATTITUDE_QUATERNION() {
						Pack* pack = new_pack(&com::company::demo::ATTITUDE_QUATERNION::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::HIL_ACTUATOR_CONTROLS HIL_ACTUATOR_CONTROLS(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::HIL_ACTUATOR_CONTROLS::meta), cur) }; }

					struct org::unirail::test::POSITION_TARGET_LOCAL_NED POSITION_TARGET_LOCAL_NED(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::POSITION_TARGET_LOCAL_NED::meta), cur) }; }

					struct org::unirail::test::CHANGE_OPERATOR_CONTROL CHANGE_OPERATOR_CONTROL(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::CHANGE_OPERATOR_CONTROL::meta), cur) }; }

					struct org::unirail::test::SYS_STATUS SYS_STATUS(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::SYS_STATUS::meta), cur) }; }

					struct org::unirail::test::MISSION_ITEM MISSION_ITEM(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_ITEM::meta), cur) }; }

					struct org::unirail::test::RAW_IMU RAW_IMU() {
						Pack* pack = new_pack(&com::company::demo::RAW_IMU::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::COMMAND_INT COMMAND_INT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::COMMAND_INT::meta), cur) }; }

					struct org::unirail::test::OPTICAL_FLOW OPTICAL_FLOW(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::OPTICAL_FLOW::meta), cur) }; }

					struct org::unirail::test::MISSION_ITEM_INT MISSION_ITEM_INT(Cursor cur[]) { return { *org::unirail::utils::wrap_pack(new_pack(&com::company::demo::MISSION_ITEM_INT::meta), cur) }; }

					struct org::unirail::test::ATTITUDE_QUATERNION_COV ATTITUDE_QUATERNION_COV() {
						Pack* pack = new_pack(&com::company::demo::ATTITUDE_QUATERNION_COV::meta);
						return { pack, *pack->bytes };
					}

					struct org::unirail::test::GLOBAL_VISION_POSITION_ESTIMATE GLOBAL_VISION_POSITION_ESTIMATE() {
						Pack* pack = new_pack(&com::company::demo::GLOBAL_VISION_POSITION_ESTIMATE::meta);
						return { pack, *pack->bytes };
					}

				} NEW;


				Receiver receiver{};

				static Meta const* dispatch(Receiver* receiver, size_t id, Pack* pack) {
					using namespace org::unirail;
					switch (id) {
					default: return nullptr;
					case 96: return pack ? on_EKF_STATUS_REPORT(pack), nullptr : &com::company::demo::EKF_STATUS_REPORT::meta;
					case 155: return pack ? on_HWSTATUS(pack), nullptr : &com::company::demo::HWSTATUS::meta;
					case 80: return pack ? on_PARAM_EXT_REQUEST_LIST(pack), nullptr : &com::company::demo::PARAM_EXT_REQUEST_LIST::meta;
					case 68: return pack ? on_UAVCAN_NODE_STATUS(pack), nullptr : &com::company::demo::UAVCAN_NODE_STATUS::meta;
					case 117: return pack ? on_GIMBAL_TORQUE_CMD_REPORT(pack), nullptr : &com::company::demo::GIMBAL_TORQUE_CMD_REPORT::meta;
					case 128: return pack ? on_SENSOR_OFFSETS(pack), nullptr : &com::company::demo::SENSOR_OFFSETS::meta;
					case 33: return pack ? on_DEVICE_OP_WRITE_REPLY(pack), nullptr : &com::company::demo::DEVICE_OP_WRITE_REPLY::meta;
					case 104: return pack ? on_GIMBAL_CONTROL(pack), nullptr : &com::company::demo::GIMBAL_CONTROL::meta;
					case 1: return pack ? on_VIDEO_STREAM_INFORMATION(pack), nullptr : &com::company::demo::VIDEO_STREAM_INFORMATION::meta;
					case 214: return pack ? on_AHRS(pack), nullptr : &com::company::demo::AHRS::meta;
					case 93: return pack ? on_FENCE_STATUS(pack), nullptr : &com::company::demo::FENCE_STATUS::meta;
					case 171: return pack ? on_REMOTE_LOG_BLOCK_STATUS(pack), nullptr : &com::company::demo::REMOTE_LOG_BLOCK_STATUS::meta;
					case 66: return pack ? on_OBSTACLE_DISTANCE(pack), nullptr : &com::company::demo::OBSTACLE_DISTANCE::meta;
					case 90: return pack ? on_PARAM_EXT_REQUEST_READ(pack), nullptr : &com::company::demo::PARAM_EXT_REQUEST_READ::meta;
					case 84: return pack ? on_UAVIONIX_ADSB_OUT_CFG(pack), nullptr : &com::company::demo::UAVIONIX_ADSB_OUT_CFG::meta;
					case 164: return pack ? on_DATA32(pack), nullptr : &com::company::demo::DATA32::meta;
					case 197: return pack ? on_RALLY_POINT(pack), nullptr : &com::company::demo::RALLY_POINT::meta;
					case 115: return pack ? on_ADAP_TUNING(pack), nullptr : &com::company::demo::ADAP_TUNING::meta;
					case 14: return pack ? on_PARAM_EXT_VALUE(pack), nullptr : &com::company::demo::PARAM_EXT_VALUE::meta;
					case 190: return pack ? on_BATTERY2(pack), nullptr : &com::company::demo::BATTERY2::meta;
					case 186: return pack ? on_LIMITS_STATUS(pack), nullptr : &com::company::demo::LIMITS_STATUS::meta;
					case 0: return pack ? on_CAMERA_FEEDBACK(pack), nullptr : &com::company::demo::CAMERA_FEEDBACK::meta;
					case 119: return pack ? on_FENCE_FETCH_POINT(pack), nullptr : &com::company::demo::FENCE_FETCH_POINT::meta;
					case 32: return pack ? on_RADIO(pack), nullptr : &com::company::demo::RADIO::meta;
					case 69: return pack ? on_AIRSPEED_AUTOCAL(pack), nullptr : &com::company::demo::AIRSPEED_AUTOCAL::meta;
					case 138: return pack ? on_GOPRO_GET_REQUEST(pack), nullptr : &com::company::demo::GOPRO_GET_REQUEST::meta;
					case 43: return pack ? on_COMPASSMOT_STATUS(pack), nullptr : &com::company::demo::COMPASSMOT_STATUS::meta;
					case 211: return pack ? on_CAMERA_STATUS(pack), nullptr : &com::company::demo::CAMERA_STATUS::meta;
					case 165: return pack ? on_DEVICE_OP_READ_REPLY(pack), nullptr : &com::company::demo::DEVICE_OP_READ_REPLY::meta;
					case 49: return pack ? on_DIGICAM_CONTROL(pack), nullptr : &com::company::demo::DIGICAM_CONTROL::meta;
					case 175: return pack ? on_GOPRO_HEARTBEAT(pack), nullptr : &com::company::demo::GOPRO_HEARTBEAT::meta;
					case 17: return pack ? on_AHRS2(pack), nullptr : &com::company::demo::AHRS2::meta;
					case 44: return pack ? on_MOUNT_STATUS(pack), nullptr : &com::company::demo::MOUNT_STATUS::meta;
					case 64: return pack ? on_PID_TUNING(pack), nullptr : &com::company::demo::PID_TUNING::meta;
					case 65: return pack ? on_AHRS3(pack), nullptr : &com::company::demo::AHRS3::meta;
					case 63: return pack ? on_MAG_CAL_REPORT(pack), nullptr : &com::company::demo::MAG_CAL_REPORT::meta;
					case 144: return pack ? on_REMOTE_LOG_DATA_BLOCK(pack), nullptr : &com::company::demo::REMOTE_LOG_DATA_BLOCK::meta;
					case 217: return pack ? on_LOGGING_DATA_ACKED(pack), nullptr : &com::company::demo::LOGGING_DATA_ACKED::meta;
					case 40: return pack ? on_MOUNT_CONFIGURE(pack), nullptr : &com::company::demo::MOUNT_CONFIGURE::meta;
					case 113: return pack ? on_MOUNT_CONTROL(pack), nullptr : &com::company::demo::MOUNT_CONTROL::meta;
					case 177: return pack ? on_LED_CONTROL(pack), nullptr : &com::company::demo::LED_CONTROL::meta;
					case 194: return pack ? on_WIFI_CONFIG_AP(pack), nullptr : &com::company::demo::WIFI_CONFIG_AP::meta;
					case 83: return pack ? on_DATA96(pack), nullptr : &com::company::demo::DATA96::meta;
					case 159: return pack ? on_MEMINFO(pack), nullptr : &com::company::demo::MEMINFO::meta;
					case 220: return pack ? on_LOGGING_ACK(pack), nullptr : &com::company::demo::LOGGING_ACK::meta;
					case 192: return pack ? on_GOPRO_SET_RESPONSE(pack), nullptr : &com::company::demo::GOPRO_SET_RESPONSE::meta;
					case 150: return pack ? on_PROTOCOL_VERSION(pack), nullptr : &com::company::demo::PROTOCOL_VERSION::meta;
					case 5: return pack ? on_RALLY_FETCH_POINT(pack), nullptr : &com::company::demo::RALLY_FETCH_POINT::meta;
					case 76: return pack ? on_MOUNT_ORIENTATION(pack), nullptr : &com::company::demo::MOUNT_ORIENTATION::meta;
					case 109: return pack ? on_PARAM_EXT_SET(pack), nullptr : &com::company::demo::PARAM_EXT_SET::meta;
					case 112: return pack ? on_SIMSTATE(pack), nullptr : &com::company::demo::SIMSTATE::meta;
					case 22: return pack ? on_SET_VIDEO_STREAM_SETTINGS(pack), nullptr : &com::company::demo::SET_VIDEO_STREAM_SETTINGS::meta;
					case 114: return pack ? on_DIGICAM_CONFIGURE(pack), nullptr : &com::company::demo::DIGICAM_CONFIGURE::meta;
					case 51: return pack ? on_PARAM_EXT_ACK(pack), nullptr : &com::company::demo::PARAM_EXT_ACK::meta;
					case 127: return pack ? on_UAVCAN_NODE_INFO(pack), nullptr : &com::company::demo::UAVCAN_NODE_INFO::meta;
					case 36: return pack ? on_DATA16(pack), nullptr : &com::company::demo::DATA16::meta;
					case 100: return pack ? on_SET_MAG_OFFSETS(pack), nullptr : &com::company::demo::SET_MAG_OFFSETS::meta;
					case 198: return pack ? on_AP_ADC(pack), nullptr : &com::company::demo::AP_ADC::meta;
					case 97: return pack ? on_WIND(pack), nullptr : &com::company::demo::WIND::meta;
					case 142: return pack ? on_AUTOPILOT_VERSION_REQUEST(pack), nullptr : &com::company::demo::AUTOPILOT_VERSION_REQUEST::meta;
					case 141: return pack ? on_DATA64(pack), nullptr : &com::company::demo::DATA64::meta;
					case 11: return pack ? on_GIMBAL_REPORT(pack), nullptr : &com::company::demo::GIMBAL_REPORT::meta;
					case 105: return pack ? on_DEVICE_OP_WRITE(pack), nullptr : &com::company::demo::DEVICE_OP_WRITE::meta;
					case 118: return pack ? on_GOPRO_SET_REQUEST(pack), nullptr : &com::company::demo::GOPRO_SET_REQUEST::meta;
					case 12: return pack ? on_VISION_POSITION_DELTA(pack), nullptr : &com::company::demo::VISION_POSITION_DELTA::meta;
					case 75: return pack ? on_LOGGING_DATA(pack), nullptr : &com::company::demo::LOGGING_DATA::meta;
					case 70: return pack ? on_DEVICE_OP_READ(pack), nullptr : &com::company::demo::DEVICE_OP_READ::meta;
					case 57: return pack ? on_MAG_CAL_PROGRESS(pack), nullptr : &com::company::demo::MAG_CAL_PROGRESS::meta;
					case 143: return pack ? on_UAVIONIX_ADSB_OUT_DYNAMIC(pack), nullptr : &com::company::demo::UAVIONIX_ADSB_OUT_DYNAMIC::meta;
					case 208: return pack ? on_GOPRO_GET_RESPONSE(pack), nullptr : &com::company::demo::GOPRO_GET_RESPONSE::meta;
					case 26: return pack ? on_UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(pack), nullptr : &com::company::demo::UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT::meta;
					case 183: return pack ? on_RPM(pack), nullptr : &com::company::demo::RPM::meta;
					case 153: return pack ? on_RANGEFINDER(pack), nullptr : &com::company::demo::RANGEFINDER::meta;
					case 20: return pack ? on_FENCE_POINT(pack), nullptr : &com::company::demo::FENCE_POINT::meta;
					}
				}

				void bytes_into_packs(uint8_t* src, size_t src_bytes) { ::receive(src, src_bytes, &receiver); }

				void bytes_into_packs_adv(uint8_t* src, size_t src_bytes) { ::receive_adv(src, src_bytes, &receiver); }

				TEST_Channel() {
					transmitter.pull = pull_sending_pack;
					receiver.dispatch = dispatch;
				}

			};


			void fill(const org::unirail::test::ATTITUDE_TARGET& pattitude_target) {

				pattitude_target.time_boot_ms(-125343653,
					-1949141892,
					440980618,
					-965531675,
					-379571254,
					-1813747527,
					-1574629258,
					-596396694,
					1090071036,
					1409200110,
					1912323393,
					745074993,
					1281887850,
					3227110,
					-264918394,
					-358028304,
					-1008300411,
					-1936769554,
					711750455,
					141108675,
					-1671782848,
					1424130394,
					-1895679346,
					1863829901,
					-810443911,
					601106848,
					-1277520910,
					-236743190,
					842993098,
					-1801700189,
					-5316217,
					2078796747,
					-1749624958,
					30490956,
					370969307,
					1919531587,
					-227124988,
					365176046,
					411194276,
					664136075,
					-916908805,
					-1049544387,
					234260277,
					-984528675,
					1079192172,
					-1764658289,
					1617901759,
					1262787487,
					1586015585,
					1090030303,
					411573759,
					806363769,
					-1648731331,
					1743261091,
					-335975726,
					-335101217,
					-1816908965,
					852732196,
					-317553317,
					1732781209,
					-1711907266,
					-1399993836,
					-152681693,
					1683095269,
					-789328909,
					-906693832,
					1646820096,
					2072106095,
					2024883879,
					-1283582271,
					792375725,
					-1659744542,
					254904982,
					-1063086434,
					2042275790,
					1907450961,
					1552037,
					-892225131,
					-771741505,
					256528057,
					1569627023,
					1204873594,
					-1680170978,
					-1198548366,
					1869107615,
					2016891887,
					206745344,
					785683252,
					-1044564078,
					-1141840937,
					368141204,
					1170510543,
					-1945509416,
					989542604,
					-228471996,
					205595798,
					-733186086,
					468711979,
					447759375,
					2082431196,
					1729527964,
					-1638479964,
					-1566971531,
					-353304837,
					-89454164,
					-594021043,
					-669284738,
					-1545141001,
					1388303724,
					-1266382265,
					-747482705,
					1029361776,
					1450890877,
					549782694,
					780155807,
					-1965298620,
					1505016953,
					605375376,
					-1089198906,
					-1554424918,
					-896110198,
					337626808,
					957921961,
					24228327,
					2140803126,
					1955905818,
					-243282319,
					-1900141124,
					580525447,
					-1446635796,
					-1017606810,
					565539716,
					1437064198,
					1801956948,
					-2124044252,
					-1894935808,
					-1565613215,
					-1838409084,
					-1871029510,
					-1535155369,
					-1215907444,
					1077092423,
					-1608968073,
					-513719212,
					-1501058268,
					-1945511770,
					-1996427290,
					-1322256321,
					1707857849,
					1836723885,
					-302553430,
					-949438368,
					-1767778634,
					-1934108569,
					364481563,
					1849158035,
					-612128192,
					-1984650164,
					779559138,
					1031390041,
					-2139916786,
					-487395225,
					-2037362664,
					-251999261,
					-506985384,
					-98372495,
					124373887,
					820220772,
					-66549865,
					-1038393193,
					1959321808,
					4949282,
					1227300314,
					338249010,
					-1132937946,
					322665446,
					-357357166,
					-294141919,
					-1054974521,
					908589707,
					1496050284,
					1402520127,
					1331794204,
					-1704030834,
					1440773651,
					1963787686,
					-340912998,
					963197376,
					-988176520,
					-715753909,
					879444487,
					-447397308,
					1062566526,
					376840280,
					-1200652520,
					1482765466,
					683760525,
					233828840,
					-515683658,
					511007315,
					1538500876,
					-1795775259,
					-58131659,
					1179102722,
					-985300002,
					5078978,
					1045723937,
					-1426249797,
					1885405510,
					113709743,
					-1004991097,
					-1319107933,
					1362111217,
					-932426779,
					-564510992,
					-610989311,
					855681684,
					1288707093,
					1504579748,
					-1218063949,
					-925299919,
					-1926429217,
					-1045333171,
					-996746023,
					-535241889,
					718069474,
					-996716371,
					-394401110,
					2076443342,
					-81173914,
					1520384884,
					-331946465,
					1179584022,
					1415049898,
					956669310,
					1451783814,
					1594302695,
					88226392,
					1541061925,
					-1922750641,
					-1484235401,
					2050651351,
					-2045861820,
					557629099,
					-1991725743,
					1713442189,
					-1412083572,
					-588498269,
					27671843,
					1282397701,
					1367465720,
					-401238009,
					-1564870902,
					-1314578536,
					1429735279);
				pattitude_target.type_mask(122,
					-105,
					79,
					7,
					-107,
					-34,
					-70,
					-106,
					36,
					-46,
					-26,
					21,
					32,
					29,
					-43,
					22,
					-44,
					111,
					111,
					-125,
					-64,
					87,
					11,
					-8,
					-111,
					-84,
					-18,
					85,
					90,
					10,
					-52,
					-58,
					-20,
					35,
					-98,
					22,
					33,
					-53,
					109,
					-128,
					-123,
					113,
					-108,
					33,
					69,
					66,
					103,
					-47,
					3,
					-21,
					86,
					100,
					108,
					-97,
					26,
					108,
					-106,
					-85,
					-118,
					-83,
					-39,
					104,
					-13,
					65,
					-96,
					105,
					-26,
					-35,
					125,
					-82,
					-120,
					-10,
					-22,
					-119,
					-75,
					71,
					100,
					-6,
					-92,
					-103,
					23,
					-28,
					-122,
					-51,
					-57,
					-56,
					22,
					73,
					-25,
					-107,
					2,
					-107,
					-34,
					38,
					-72,
					-111,
					-13,
					18,
					-64,
					92,
					-9,
					-86,
					86,
					63,
					65,
					72,
					116,
					-97,
					20,
					55,
					67,
					42,
					-74,
					7,
					-100,
					4,
					100,
					49,
					-23,
					-83,
					64,
					47,
					68,
					112,
					-106,
					-101,
					-51,
					46,
					-123,
					-58,
					-8,
					-94,
					14,
					50,
					-100,
					120,
					-64,
					113,
					-41,
					-86,
					117,
					85,
					16,
					-25,
					118,
					121,
					3,
					1,
					-58,
					61,
					2,
					-2,
					-111,
					115,
					-71,
					-17,
					60,
					20,
					125,
					73,
					85,
					118,
					-107,
					-53,
					-35,
					59,
					14,
					-14,
					-58,
					-120,
					34,
					-102,
					3,
					35,
					-128,
					-114,
					-39,
					110,
					88,
					-59,
					80,
					62,
					-123,
					42,
					-2,
					21,
					-14,
					116,
					85,
					-39,
					44,
					-30,
					27,
					45,
					-114,
					-21,
					115,
					-111,
					39,
					68,
					-18,
					103,
					-93,
					109,
					108,
					23,
					-54,
					-8,
					91,
					91,
					55,
					25,
					-45,
					-23,
					80,
					-49,
					-118,
					106,
					-90,
					61,
					4,
					56,
					-9,
					-110,
					-113,
					-11,
					-18,
					127,
					78,
					-121,
					106,
					66,
					-59,
					31,
					62,
					125,
					-82,
					-27,
					-2,
					46,
					8,
					108,
					123,
					-48,
					109,
					-127,
					126,
					45,
					53,
					-56,
					-13,
					-10,
					70,
					79,
					2);
				for (const float src[] = { -2.8325402E36F,
										  -3.2003797E38F,
										  2.0986134E38F,
										  1.0199815E38F,
										  -2.5088047E38F,
										  -2.4862472E38F,
										  -1.9949948E38F,
										  -2.4787924E38F,
										  -4.8369243E36F,
										  9.53387E37F,
										  3.7780536E37F,
										  1.6116262E38F,
										  2.0762845E38F,
										  -1.6796683E38F,
										  2.1332227E38F,
										  5.161423E37F,
										  -6.8945026E37F,
										  -1.3978473E38F,
										  -1.6291497E38F,
										  -3.2124589E38F,
										  -1.8500413E38F,
										  -1.5502525E38F,
										  -2.1884886E38F,
										  1.2017769E38F,
										  -2.326104E38F,
										  -2.9491954E38F,
										  1.39303E38F,
										  2.2841585E38F,
										  -3.1574769E38F,
										  1.2419964E38F,
										  -2.4594062E37F,
										  -1.3302657E38F,
										  -1.0044138E38F,
										  1.1967012E38F,
										  -5.030339E37F,
										  -5.039082E37F,
										  -1.8487526E38F,
										  -2.2510942E37F,
										  -2.6885287E38F,
										  -2.5814307E38F,
										  -4.689757E37F,
										  -4.7776965E37F,
										  -2.4790844E38F,
										  8.067441E37F,
										  -1.4633515E38F,
										  3.9460523E37F,
										  -3.0105231E38F,
										  -1.345778E38F,
										  9.220711E37F,
										  1.6561102E38F,
										  1.7778852E38F,
										  2.1738672E38F,
										  1.2252876E38F,
										  4.546951E37F,
										  2.57898E38F,
										  -2.076289E38F,
										  -2.8648003E38F,
										  -2.7357938E37F,
										  -1.8094076E38F,
										  3.312577E38F,
										  -3.201782E38F,
										  -2.431306E38F,
										  4.8095206E37F,
										  1.443286E38F,
										  -2.4854227E38F,
										  -7.940152E37F,
										  2.3669501E38F,
										  -4.725711E37F,
										  6.556397E37F,
										  1.0474604E38F,
										  1.7501101E38F,
										  1.0312233E38F,
										  -2.212259E38F,
										  -1.9774351E38F,
										  -6.32164E37F,
										  -1.8536187E38F,
										  4.3484584E37F,
										  -2.1948962E38F,
										  -1.1956602E38F,
										  1.1989718E38F,
										  3.0656408E38F,
										  2.2811068E38F,
										  1.3341844E38F,
										  -1.3095977E38F,
										  1.7610519E38F,
										  2.8518143E38F,
										  2.3862523E38F,
										  -2.1992111E38F,
										  9.650429E37F,
										  4.036613E37F,
										  -3.0467106E38F,
										  -1.6389419E38F,
										  -2.283583E38F,
										  2.6480546E38F,
										  -2.8547485E38F,
										  -1.2645149E38F,
										  -1.5841245E38F,
										  1.6176908E38F,
										  -8.198543E37F,
										  -1.3125351E38F,
										  -1.5161114E38F,
										  1.2361398E38F,
										  8.4824657E37F,
										  -2.1552447E36F,
										  1.4459194E38F,
										  -3.1288059E38F,
										  -2.5229403E38F,
										  -1.1425035E38F,
										  2.1365721E38F,
										  2.9197334E38F,
										  -1.8397835E38F,
										  -2.5023409E38F,
										  -1.1738403E38F,
										  -2.0471663E38F,
										  -1.8172092E38F,
										  1.2095051E37F,
										  2.2639931E38F,
										  -1.3829479E37F,
										  2.6834553E38F,
										  2.4718302E38F,
										  7.876943E37F,
										  2.3385448E37F,
										  2.7890234E38F,
										  3.2979725E37F,
										  1.6721193E38F,
										  -2.4053565E38F,
										  4.5126032E36F,
										  -2.1124513E38F,
										  1.0040269E38F,
										  -2.8070033E38F,
										  1.2682668E38F,
										  2.5713153E38F,
										  5.632507E37F,
										  9.276426E37F,
										  -2.3308732E38F,
										  -1.8755325E38F,
										  -1.1989818E38F,
										  -8.804405E37F,
										  3.2515102E38F,
										  8.095595E37F,
										  2.2754643E38F,
										  2.7942173E38F,
										  -3.2625818E38F,
										  -5.150701E37F,
										  -3.0069106E38F,
										  -2.5227975E38F,
										  -1.0192423E38F,
										  1.4793812E38F,
										  -2.2199268E38F,
										  1.9991225E38F,
										  2.5926838E38F,
										  2.5292883E38F,
										  6.453395E37F,
										  -2.6678687E38F,
										  -1.1275993E38F,
										  -5.739663E37F,
										  -2.9695906E38F,
										  -9.16191E37F,
										  1.1015023E38F,
										  1.1574677E38F,
										  1.7227495E38F,
										  -1.0846235E38F,
										  -2.3061493E38F,
										  -6.3096933E37F,
										  1.9719451E38F,
										  -3.2008462E37F,
										  1.8028484E38F,
										  -8.42129E37F,
										  1.9072864E38F,
										  1.9073578E38F,
										  3.3602428E38F,
										  2.7886117E38F,
										  -1.5428858E38F,
										  -2.889652E38F,
										  3.7233365E37F,
										  -2.4020488E37F,
										  2.1472926E37F,
										  2.3090375E38F,
										  1.251583E38F,
										  -1.5724448E37F,
										  -2.9174358E38F,
										  -1.4511369E38F,
										  -4.699536E37F,
										  3.2874123E38F,
										  -1.2404832E38F,
										  2.4466328E38F,
										  2.5775422E38F,
										  -6.763466E37F,
										  -9.18248E37F,
										  -1.2056343E38F,
										  -7.1585497E37F,
										  -1.1497014E38F,
										  8.810162E37F,
										  2.6738077E38F,
										  -2.8994195E38F,
										  -1.6790312E38F,
										  -9.96072E37F,
										  -2.017996E38F,
										  -1.225864E37F,
										  2.3960428E38F,
										  6.6924796E36F,
										  -3.0112137E37F,
										  -9.12202E37F,
										  1.149399E38F,
										  1.3770519E37F,
										  2.6620166E38F,
										  3.0101067E38F,
										  -3.2236493E38F,
										  -1.901355E37F,
										  3.20483E38F,
										  -1.0261305E36F,
										  2.9926276E38F,
										  2.5400706E38F,
										  4.487437E37F,
										  -1.7275707E38F,
										  4.941491E37F,
										  -7.494998E37F,
										  -1.0106646E38F,
										  2.214884E38F,
										  2.7865859E38F,
										  -1.8898121E37F,
										  -6.2938224E37F,
										  2.9685318E38F,
										  1.737949E38F,
										  2.6882265E38F,
										  -4.7292865E37F,
										  2.5571819E38F,
										  7.891982E37F,
										  1.2752223E38F,
										  5.952159E37F,
										  1.5024252E38F,
										  1.4213932E37F,
										  3.0874022E38F,
										  -8.029232E37F,
										  -6.563762E36F,
										  2.1739721E38F,
										  -6.4193766E37F,
										  2.8769368E37F,
										  -1.5421607E38F,
										  -2.6154119E38F,
										  -3.2323395E38F,
										  7.6258874E37F,
										  -1.0556375E38F,
										  -3.5962114E37F,
										  2.6088864E38F,
										  9.912952E37F,
										  2.055708E38F,
										  3.1994925E38F,
										  -7.865646E37F,
										  1.8031441E38F,
										  3.1870172E38F,
										  2.0839058E37F,
										  -2.273566E38F,
										  9.421179E37F,
										  1.1197106E38F }; pattitude_target.q(src), false;);

				pattitude_target.body_roll_rate(7.8796953E37F,
					1.3738986E38F,
					-9.786877E37F,
					-1.8330245E37F,
					-1.0711333E38F,
					3.4546673E37F,
					3.1199782E38F,
					-9.307134E37F,
					1.6842559E38F,
					-2.6955675E38F,
					-1.7480618E38F,
					2.6108033E38F,
					-3.3751818E38F,
					-2.3347587E38F,
					3.4140974E36F,
					9.359103E37F,
					4.6591656E37F,
					-1.378007E38F,
					1.1186297E38F,
					3.2044958E38F,
					2.069974E38F,
					-2.9967532E38F,
					-1.8294665E38F,
					1.2334007E38F,
					-2.1335695E38F,
					-2.8964078E38F,
					2.0603312E37F,
					1.7341036E38F,
					-9.478231E37F,
					1.7706028E38F,
					1.3413444E36F,
					-1.9470144E38F,
					-2.980395E38F,
					-3.1305216E38F,
					2.2439127E38F,
					-6.7082447E37F,
					2.777536E38F,
					-2.9169873E38F,
					-2.1050602E38F,
					-3.1755938E37F,
					1.7201153E38F,
					7.1377587E37F,
					8.855095E37F,
					1.6974771E38F,
					-2.5944593E38F,
					-3.2568674E38F,
					-1.2171185E38F,
					-3.251493E38F,
					-2.2783983E38F,
					2.7293095E38F,
					-2.943763E38F,
					-2.9403318E38F,
					1.3970404E38F,
					-3.1218062E38F,
					1.4380226E38F,
					2.7615551E38F,
					1.2823207E38F,
					-1.795841E38F,
					2.3584842E36F,
					-2.7703323E38F,
					1.8008715E38F,
					-1.3073827E38F,
					5.716723E37F,
					3.3237983E38F,
					7.123023E37F,
					-2.7306942E38F,
					-2.2993997E38F,
					1.9365732E38F,
					1.99426E35F,
					1.0443764E38F,
					3.3927956E37F,
					1.9635727E38F,
					-1.6539324E38F,
					-2.9582178E38F,
					-3.325562E38F,
					-1.3206318E38F,
					3.2148964E38F,
					-1.736303E38F,
					2.6163807E38F,
					2.4837082E38F,
					-8.955937E37F,
					-2.798996E38F,
					2.0338106E37F,
					-2.837919E38F,
					-1.492906E38F,
					2.0129271E38F,
					-1.1156396E38F,
					1.6234776E38F,
					-3.4491854E36F,
					-2.761986E38F,
					-2.619133E38F,
					2.975385E38F,
					-3.2064547E38F,
					1.0962258E38F,
					1.087511E38F,
					1.1574807E38F,
					2.895741E38F,
					1.9844873E38F,
					8.810834E37F,
					-3.9543235E37F,
					2.509353E38F,
					2.0819202E38F,
					1.3146029E38F,
					-3.2400673E38F,
					8.92322E37F,
					1.1245386E38F,
					-8.4221033E37F,
					2.112169E38F,
					-2.7613393E38F,
					2.9148579E38F,
					5.41771E37F,
					3.3678013E37F,
					2.8525469E38F,
					-1.3836041E38F,
					1.7663322E38F,
					-1.604553E38F,
					-3.304077E38F,
					-8.0194853E37F,
					-2.8575775E38F,
					2.7714426E38F,
					-3.052225E37F,
					2.1339012E38F,
					3.3176256E38F,
					3.252228E38F,
					2.3734305E38F,
					1.8431838E38F,
					-2.792143E38F,
					1.583425E38F,
					-2.748308E38F,
					-3.2268612E38F,
					2.5136221E38F,
					-3.247794E37F,
					-2.2860294E38F,
					2.6971025E38F,
					5.2475005E37F,
					1.3221954E38F,
					2.7721123E38F,
					-2.764398E38F,
					-2.5466484E38F,
					-3.161261E38F,
					9.499923E37F,
					-2.4884509E38F,
					-1.2032356E38F,
					-1.2283998E38F,
					2.8756654E38F,
					-2.8985125E38F,
					1.5927719E38F,
					2.3787979E38F,
					-7.910556E37F,
					6.2693227E37F,
					-1.5007125E38F,
					4.8836106E36F,
					2.724983E38F,
					9.604105E36F,
					2.2467296E38F,
					2.427309E37F,
					-2.6504083E38F,
					-9.38542E37F,
					-1.8822147E38F,
					-3.2018562E38F,
					1.5938712E38F,
					-3.2209485E38F,
					-2.0171179E38F,
					-1.2851308E38F,
					-2.4923585E38F,
					-3.0355989E38F,
					-3.28035E38F,
					7.312595E36F,
					-6.763972E37F,
					-2.4332154E38F,
					-8.956809E37F,
					-1.7981344E38F,
					1.2301981E38F,
					-1.654342E38F,
					-3.5164858E37F,
					-1.28455E38F,
					-3.051336E38F,
					-2.416086E38F,
					-1.6373061E38F,
					1.4065303E38F,
					-2.92961E38F,
					2.9315837E37F,
					-1.5772472E38F,
					-6.2321557E37F,
					-1.012705E38F,
					-1.8483962E38F,
					1.722397E37F,
					1.6697169E38F,
					-1.9102237E38F,
					1.5865774E37F,
					4.895595E37F,
					-2.37281E38F,
					3.1123238E38F,
					-1.6025111E38F,
					-6.230354E37F,
					2.6871767E38F,
					-1.2558351E37F,
					-8.1291675E37F,
					2.4024173E38F,
					6.145387E37F,
					2.1155425E38F,
					-1.4593408E37F,
					-8.965491E37F,
					-8.4020647E37F,
					1.6726131E38F,
					7.1914965E37F,
					3.126563E38F,
					1.4083137E38F,
					-1.4531916E38F,
					2.4178206E38F,
					2.9910648E38F,
					1.1789218E38F,
					1.7367401E38F,
					-9.121678E37F,
					2.6549942E38F,
					-1.9234002E37F,
					-8.739678E37F,
					-1.2518557E38F,
					-7.785653E37F,
					1.9060956E37F,
					-2.5707967E37F,
					2.0425086E38F,
					-1.8608448E38F,
					-3.3676785E38F,
					-7.247313E37F,
					1.7689861E38F,
					-2.0661721E38F,
					2.6724354E37F,
					-2.8743156E38F,
					-1.7346547E38F,
					-1.8195875E38F,
					-6.4884377E37F,
					4.4972907E37F,
					3.2857045E37F,
					-6.9530737E37F,
					-1.707827E38F,
					-1.7938617E38F,
					-2.748589E38F,
					-6.261718E37F,
					7.274129E37F,
					2.4679165E38F,
					-2.8631858E38F,
					5.932948E36F,
					-2.2309213E38F,
					-1.1912894E38F,
					4.2450216E37F,
					1.4595022E38F,
					-2.6296467E38F,
					2.5218223E38F,
					1.830325E37F,
					-1.697799E38F,
					-2.1366229E38F,
					1.0431754E38F,
					-2.5104277E38F,
					2.6419159E38F);
				pattitude_target.body_pitch_rate(-3.2936686E38F,
					1.0057044E38F,
					3.4794438E37F,
					1.8551635E38F,
					-3.3141859E38F,
					-3.0099238E38F,
					4.1769394E37F,
					3.308182E38F,
					2.0979183E38F,
					-2.3090738E38F,
					2.1953688E37F,
					1.4477739E38F,
					7.816791E37F,
					-1.795754E38F,
					-1.747672E38F,
					1.1886173E38F,
					6.991642E37F,
					2.8476941E38F,
					-7.6743537E37F,
					-4.661922E37F,
					7.477822E37F,
					1.6939295E38F,
					-2.241989E38F,
					-3.0894256E38F,
					-9.606708E37F,
					-1.1217784E38F,
					2.455322E38F,
					-1.6967524E38F,
					4.495519E37F,
					-1.273162E38F,
					2.44095E38F,
					4.3779926E37F,
					-2.0681309E37F,
					-5.330638E37F,
					3.061087E37F,
					2.6308881E38F,
					-3.2349742E38F,
					-8.85768E37F,
					-1.1453464E37F,
					-6.621231E37F,
					-1.822636E38F,
					-1.388265E38F,
					-2.4166972E38F,
					-2.4367453E38F,
					3.219432E38F,
					-9.497129E37F,
					-7.3129683E37F,
					-4.1328792E37F,
					8.768012E37F,
					2.6955866E38F,
					-2.2349867E37F,
					-1.438062E38F,
					1.04471895E36F,
					-6.55918E36F,
					1.1213111E38F,
					2.232531E38F,
					-8.0309006E36F,
					-1.8779217E38F,
					-3.3675201E38F,
					-2.0442127E38F,
					-3.0792383E38F,
					2.505772E38F,
					-1.4531555E38F,
					-1.3706811E38F,
					-2.9783936E38F,
					-3.1990954E38F,
					-5.877921E37F,
					2.4354844E38F,
					-2.8938188E38F,
					-1.987149E38F,
					-3.2642135E38F,
					1.8077318E38F,
					-2.2506287E38F,
					-1.6363349E38F,
					1.3523476E38F,
					6.6735395E37F,
					1.2205616E38F,
					-3.3691184E38F,
					2.2391863E38F,
					-3.0137789E38F,
					-8.2351436E37F,
					1.586688E38F,
					7.5125533E37F,
					-2.548299E38F,
					-2.6103243E37F,
					1.74352E38F,
					7.0209057E37F,
					8.2547653E37F,
					9.307263E37F,
					1.3462251E38F,
					-1.4113745E38F,
					-6.4918284E37F,
					2.4898062E37F,
					-2.170711E38F,
					2.0872559E38F,
					-2.5536178E38F,
					-1.7545842E38F,
					1.929333E38F,
					-9.046347E37F,
					2.5227028E38F,
					9.923688E37F,
					-3.1944128E38F,
					1.764408E38F,
					-7.2304524E37F,
					5.184761E37F,
					1.2098578E37F,
					3.3780976E38F,
					2.1183E38F,
					-1.190087E38F,
					5.7008646E37F,
					-1.6405851E38F,
					2.6896098E38F,
					-1.3257254E38F,
					-9.100742E37F,
					2.1846995E38F,
					-6.238869E37F,
					1.2403418E38F,
					-8.654509E37F,
					2.2927621E38F,
					2.1416853E38F,
					4.314372E36F,
					-1.5461636E38F,
					8.20657E37F,
					2.7009821E38F,
					-5.088711E37F,
					-3.2774696E37F,
					-2.7173656E38F,
					-2.0524336E38F,
					-2.7847393E38F,
					-1.1104799E38F,
					1.4351375E38F,
					1.2299579E38F,
					1.0319777E38F,
					-2.520359E38F,
					-2.4591044E38F,
					-2.1457791E38F,
					2.8213424E38F,
					1.26412E38F,
					-3.541819E37F,
					-1.6847364E38F,
					7.611953E37F,
					-1.4115891E38F,
					5.705562E37F,
					5.327451E36F,
					2.9347384E37F,
					1.0332113E37F,
					-3.3026174E38F,
					-1.9968787E38F,
					2.2486195E37F,
					-2.5179403E38F,
					2.4226158E38F,
					2.6184136E38F,
					-2.9381056E38F,
					-1.401283E38F,
					2.0501827E38F,
					1.703986E38F,
					-3.3923178E38F,
					-2.4037116E38F,
					2.5021184E38F,
					-1.1303036E38F,
					-2.4738227E37F,
					7.3362657E37F,
					1.767433E38F,
					-1.846891E38F,
					2.0180048E38F,
					-3.8679577E37F,
					-2.482198E38F,
					-6.2699647E37F,
					2.4923877E38F,
					1.7063926E38F,
					1.2781309E38F,
					1.2052901E38F,
					-1.829252E36F,
					2.3818885E38F,
					-2.1176038E38F,
					-7.9802444E37F,
					-7.2945084E36F,
					-2.4806788E38F,
					5.8850694E37F,
					-3.386816E38F,
					-2.8239815E37F,
					5.1287613E36F,
					-1.9689409E38F,
					-8.2514085E37F,
					1.4835552E38F,
					4.0217752E37F,
					1.0553637E38F,
					3.2281666E38F,
					-1.4361102E37F,
					2.9211436E37F,
					1.466193E38F,
					4.1697942E37F,
					-2.581081E38F,
					5.043047E37F,
					-1.591513E38F,
					-5.2353037E37F,
					-2.7136278E38F,
					-2.4162684E38F,
					-1.9493123E37F,
					6.5008916E37F,
					3.3130837E38F,
					2.7993477E38F,
					2.8918864E38F,
					-8.1940996E37F,
					-2.4638643E38F,
					9.921795E37F,
					7.5454544E37F,
					1.21204E38F,
					1.9094552E38F,
					-2.2816486E38F,
					1.1902811E38F,
					7.307086E36F,
					-1.4831301E38F,
					1.6962813E38F,
					-3.2928092E38F,
					-1.0266325E37F,
					2.3668118E38F,
					-2.7983864E38F,
					3.5107812E37F,
					-7.637581E37F,
					-3.0492047E38F,
					-2.2619308E38F,
					-1.6760794E38F,
					2.8667983E38F,
					-2.2150596E38F,
					1.0559696E38F,
					3.214381E37F,
					1.4372629E37F,
					-2.9305011E38F,
					-1.9197193E38F,
					-1.5601715E38F,
					2.6292497E38F,
					2.9934038E37F,
					-1.8186993E38F,
					-3.056613E38F,
					-2.5648425E38F,
					2.1681537E38F,
					3.2256096E38F,
					-1.4608288E38F,
					3.1390179E38F,
					-1.517776E38F,
					1.2480156E38F,
					-2.2245009E38F,
					3.0698885E38F,
					1.5860667E38F,
					-5.866781E37F,
					-5.5028647E37F,
					-2.1736585E38F,
					2.8512007E38F,
					7.02082E37F,
					9.248456E37F,
					1.5678407E38F,
					-7.8555354E37F,
					2.1064398E38F,
					-2.6675855E38F);
				pattitude_target.body_yaw_rate(-2.5969293E38F,
					-2.6198478E38F,
					2.1993209E38F,
					2.3654425E38F,
					-5.6310596E37F,
					8.1752106E37F,
					-2.8599295E38F,
					1.0752208E38F,
					2.6854817E38F,
					2.2479958E38F,
					-2.2273783E38F,
					3.284241E38F,
					-4.557017E37F,
					-3.1539123E38F,
					1.781478E37F,
					-2.6142608E38F,
					-3.2829772E37F,
					2.037616E38F,
					2.7255328E38F,
					-1.5487823E38F,
					-1.7921111E38F,
					-9.941195E37F,
					3.3571712E38F,
					1.3597593E38F,
					9.510723E37F,
					-3.0144644E38F,
					2.3915614E38F,
					-1.5180985E38F,
					2.2723367E38F,
					1.5397928E38F,
					-3.2944728E38F,
					-2.7584014E38F,
					2.1667459E38F,
					-2.3511424E38F,
					2.6569036E38F,
					7.850216E37F,
					-2.656937E38F,
					-7.356551E37F,
					-5.356608E37F,
					-3.2476541E38F,
					1.549664E38F,
					-1.191777E37F,
					9.440096E37F,
					-3.2605551E38F,
					-1.5915803E38F,
					-2.1762052E38F,
					-2.0662323E38F,
					1.5858124E38F,
					-1.9338186E38F,
					9.788303E37F,
					-3.1033809E38F,
					2.7437445E38F,
					-2.0480745E38F,
					-1.3716281E38F,
					3.3079192E38F,
					-1.8036249E37F,
					-2.6917881E38F,
					-2.589247E38F,
					1.9666276E37F,
					-2.57004E38F,
					2.7089202E38F,
					-1.7452034E38F,
					2.5523048E38F,
					5.189727E37F,
					-2.628872E38F,
					1.8696877E38F,
					-2.487827E38F,
					-3.3530119E38F,
					-1.0581572E38F,
					2.2978952E38F,
					4.5543705E37F,
					-2.1674485E38F,
					-2.222588E38F,
					1.4382891E38F,
					-4.306053E37F,
					-1.4399173E38F,
					-9.6407756E36F,
					-2.6373986E38F,
					-3.0329265E38F,
					3.5993605E37F,
					-1.7159503E38F,
					-6.323057E37F,
					2.367199E38F,
					-6.4376865E37F,
					-2.181618E38F,
					1.5447783E38F,
					2.9394627E38F,
					-3.763743E36F,
					2.3632814E38F,
					-2.4912586E38F,
					6.45267E37F,
					-2.5102705E38F,
					3.024676E38F,
					3.2048418E38F,
					3.2542615E38F,
					3.3796395E38F,
					3.1952425E38F,
					-3.2987487E38F,
					-4.354095E37F,
					-1.5366002E38F,
					-2.5797213E38F,
					-2.1245362E38F,
					-1.3276286E37F,
					-2.607728E38F,
					-2.4177194E38F,
					1.548379E38F,
					2.3376852E38F,
					-5.434504E37F,
					-1.1898626E38F,
					2.4068424E38F,
					-3.9254368E37F,
					2.3510403E37F,
					1.6666861E38F,
					-4.1522798E37F,
					2.165568E37F,
					-1.3914984E38F,
					-3.1388201E38F,
					8.964464E37F,
					-3.038188E38F,
					-2.834327E38F,
					-1.6241437E38F,
					3.27148E38F,
					1.133252E38F,
					-6.450487E37F,
					-2.6122226E38F,
					1.5853437E38F,
					-1.927821E38F,
					-2.4005027E38F,
					1.8112023E38F,
					-2.017475E38F,
					-3.9726377E37F,
					-2.381779E38F,
					-3.069964E38F,
					5.3744517E37F,
					2.4682192E38F,
					4.534868E37F,
					2.316973E37F,
					1.5876067E38F,
					3.217772E38F,
					2.4995468E38F,
					-5.996293E36F,
					1.5857504E38F,
					2.8727248E38F,
					3.1839905E38F,
					9.585996E37F,
					-1.0288986E38F,
					-2.3013708E38F,
					1.818075E38F,
					1.2666212E38F,
					-1.8492304E38F,
					-2.305551E38F,
					-2.1976427E38F,
					-1.5356914E38F,
					1.1740893E38F,
					-5.399694E37F,
					2.8280033E38F,
					1.310203E38F,
					2.7805595E38F,
					1.7684939E38F,
					-1.114884E38F,
					1.585951E37F,
					-2.387769E38F,
					2.527789E38F,
					2.311379E38F,
					3.2057778E38F,
					5.062436E37F,
					5.172591E37F,
					7.6986155E37F,
					-2.9233618E37F,
					2.2599711E38F,
					1.586754E38F,
					3.2587604E38F,
					2.0000227E38F,
					-2.0634849E38F,
					-5.211277E37F,
					1.0391995E38F,
					1.0860296E37F,
					1.3982039E37F,
					-7.725304E37F,
					2.9532087E38F,
					1.4995318E38F,
					1.7650029E38F,
					2.986944E38F,
					-2.174369E38F,
					-3.227297E38F,
					-3.0970915E38F,
					2.7174469E37F,
					-2.0786488E38F,
					3.194745E38F,
					-3.072493E38F,
					-1.0757998E38F,
					3.0659537E38F,
					-1.3988367E37F,
					3.1810503E38F,
					-5.1392983E36F,
					2.336483E38F,
					-2.2418478E38F,
					2.215102E38F,
					-2.227275E38F,
					8.728239E37F,
					8.819805E37F,
					3.2556162E38F,
					2.0240626E38F,
					1.9230096E37F,
					7.010932E37F,
					-1.2092439E38F,
					-2.9314899E38F,
					1.6608267E38F,
					-2.639108E38F,
					2.6566797E38F,
					2.85936E38F,
					2.3978725E38F,
					-2.303755E38F,
					-3.1332936E38F,
					-6.4053153E37F,
					-1.3233093E38F,
					1.6633197E38F,
					3.3929553E38F,
					4.7375206E37F,
					2.7460299E37F,
					1.4643225E38F,
					-3.4990883E36F,
					-9.437752E37F,
					2.4507734E38F,
					3.0139813E38F,
					2.33481E38F,
					-2.776448E38F,
					8.698459E37F,
					-8.514214E37F,
					-2.7670744E38F,
					-2.6698659E38F,
					2.7221415E37F,
					1.0714117E38F,
					4.1500475E37F,
					-7.127777E37F,
					-9.672654E37F,
					-3.3698952E38F,
					3.2381638E38F,
					-1.7553298E38F,
					-1.8403307E38F,
					1.7093323E37F,
					-2.9371885E37F,
					2.8003235E38F,
					-9.896077E37F,
					1.795555E38F,
					-1.0319504E38F,
					-1.4021932E38F,
					-3.2402889E37F,
					-1.3446145E38F,
					1.4488111E38F,
					-9.16738E37F,
					-9.918996E37F,
					2.1701625E38F,
					-6.2606236E37F,
					-1.7586145E38F);
				pattitude_target.thrust(-1.4398145E38F,
					3.2446854E38F,
					-3.3137946E36F,
					-6.5949893E37F,
					-2.148853E38F,
					-1.8040376E38F,
					-2.3289151E38F,
					-2.134935E38F,
					1.8213461E36F,
					-3.2427807E38F,
					-1.4972866E38F,
					9.87166E37F,
					-2.7200583E38F,
					3.309088E38F,
					1.2993845E37F,
					1.5875598E38F,
					-2.8422511E37F,
					1.0726167E38F,
					-3.2792963E38F,
					7.885388E37F,
					1.5886794E38F,
					4.618958E37F,
					-3.1909905E38F,
					3.3760874E38F,
					1.3005479E38F,
					-2.6013022E38F,
					-2.7163262E38F,
					-7.583485E36F,
					1.6345043E38F,
					-3.3761596E38F,
					1.829601E38F,
					2.7407902E38F,
					3.195709E37F,
					3.2212771E37F,
					-2.8383042E38F,
					-4.1482068E37F,
					1.3729688E38F,
					-5.906381E37F,
					-2.8714477E38F,
					2.6889388E38F,
					2.7720576E38F,
					-3.0003821E38F,
					-2.0322248E38F,
					2.9411433E38F,
					-4.8621814E37F,
					-2.1041398E38F,
					2.990533E38F,
					3.3818078E38F,
					-3.0548126E38F,
					9.090256E37F,
					1.0552167E38F,
					2.9456174E38F,
					-3.3189413E37F,
					7.0947387E37F,
					-2.2882016E38F,
					1.5942364E37F,
					-8.622746E37F,
					-7.427396E37F,
					3.3287336E38F,
					-6.621593E37F,
					-1.1486036E38F,
					9.234976E37F,
					-2.0652553E38F,
					-2.7982407E38F,
					2.5782543E38F,
					9.311751E37F,
					3.1586894E38F,
					-3.4172615E37F,
					2.0317267E38F,
					1.7866414E38F,
					1.5858451E38F,
					-8.717501E37F,
					1.8510486E38F,
					-2.8218483E37F,
					-8.2204033E37F,
					-7.5555307E37F,
					-3.0295866E38F,
					1.4878837E38F,
					2.9030619E38F,
					-2.7686455E38F,
					3.3070574E38F,
					-3.401978E38F,
					5.7135355E37F,
					3.0645417E38F,
					3.1026767E38F,
					1.8099166E38F,
					-1.4361972E38F,
					1.4713853E38F,
					-1.3245034E38F,
					1.6081599E38F,
					-2.245742E38F,
					2.7171577E38F,
					-3.0926316E37F,
					3.2591911E38F,
					-2.5329213E38F,
					1.2041551E38F,
					2.59384E38F,
					2.0780572E38F,
					-3.2122376E38F,
					-1.1241662E37F,
					3.2488587E38F,
					-5.8308256E37F,
					-1.0632743E38F,
					-2.336314E38F,
					-9.118726E37F,
					5.222092E37F,
					-7.8435455E37F,
					-1.7661754E38F,
					-2.5112718E38F,
					-1.3439166E38F,
					1.3258833E38F,
					2.6890417E38F,
					-1.4546316E38F,
					-3.362006E38F,
					-2.302622E38F,
					-2.7652488E38F,
					-1.3198268E37F,
					-1.9477196E38F,
					-1.043478E38F,
					-1.777173E38F,
					3.318236E38F,
					-1.6986393E37F,
					-2.7425347E38F,
					3.266506E38F,
					-3.1369422E38F,
					1.9510457E38F,
					6.0505196E37F,
					-8.652009E37F,
					1.7173477E38F,
					2.5500709E38F,
					-3.296946E38F,
					-2.5472202E38F,
					2.0083829E38F,
					-3.7714133E36F,
					-9.531621E36F,
					-7.379688E37F,
					-1.0910619E38F,
					3.3731069E38F,
					-1.8211628E38F,
					-2.7644204E38F,
					-1.9569637E38F,
					2.3468312E38F,
					-1.7613936E38F,
					1.8781767E38F,
					-2.2378382E38F,
					2.3937083E38F,
					-1.3504736E38F,
					1.3292945E38F,
					3.2470093E38F,
					-2.3259172E38F,
					1.4139389E38F,
					2.9175873E38F,
					7.411447E37F,
					1.0823107E38F,
					1.1234186E38F,
					-3.2962532E38F,
					-2.1976482E38F,
					5.2171384E36F,
					-7.647955E37F,
					-2.028108E38F,
					4.0417665E37F,
					-1.1441407E38F,
					-2.710892E38F,
					1.8095785E38F,
					1.5139367E37F,
					6.635003E37F,
					-1.3243927E38F,
					1.3021802E38F,
					-1.0512517E38F,
					1.0499284E38F,
					2.3274197E37F,
					3.216713E38F,
					1.6764971E38F,
					6.2235515E36F,
					2.3820755E38F,
					-2.1257912E38F,
					-1.102817E38F,
					2.938781E38F,
					1.6467481E37F,
					-1.6218479E38F,
					2.798249E37F,
					-2.562818E38F,
					-1.6810626E38F,
					-2.3169367E38F,
					1.1675639E38F,
					-1.3564107E37F,
					-2.087202E38F,
					4.4352515E36F,
					-3.1527888E38F,
					3.1253901E38F,
					-2.7724052E38F,
					2.0948135E38F,
					-2.8227046E38F,
					9.246096E37F,
					-9.330582E37F,
					-2.8711945E38F,
					2.5286143E38F,
					-3.106039E38F,
					-6.474537E37F,
					5.725382E37F,
					-2.3097529E38F,
					-2.0882759E38F,
					-1.8035987E38F,
					-3.2965252E38F,
					-1.123275E37F,
					2.755351E38F,
					1.4537711E38F,
					-2.9064162E38F,
					-2.2923364E38F,
					1.1008635E38F,
					-6.7618973E37F,
					-2.5763635E38F,
					-3.1143845E38F,
					2.579371E38F,
					-1.5724219E38F,
					-3.0243271E38F,
					1.5884648E38F,
					1.2342916E38F,
					-2.9138923E38F,
					-1.8530918E38F,
					1.736299E38F,
					1.1185219E38F,
					-1.8490903E38F,
					3.20838E38F,
					4.9809237E37F,
					-2.4563262E38F,
					1.3538754E38F,
					2.2147961E38F,
					1.9210724E38F,
					1.2432359E38F,
					1.3745251E38F,
					7.011351E37F,
					9.03929E37F,
					-1.5645605E38F,
					-1.9749771E38F,
					-1.8590398E38F,
					-1.6931472E38F,
					-2.8496033E38F,
					5.131663E37F,
					-2.6039367E38F,
					1.0878128E38F,
					-2.282536E38F,
					2.225924E38F,
					-3.3699092E37F,
					2.0539909E37F,
					2.6360904E38F,
					2.3946684E38F,
					-2.2375329E37F,
					-1.6818631E38F,
					1.7081085E38F,
					7.630321E37F,
					-3.2045944E38F,
					3.2296903E37F,
					-1.8635914E38F,
					1.4960121E38F);
			}

			void on_ATTITUDE_TARGET(const com::company::demo::ATTITUDE_TARGET& pattitude_target) {
				assert(pattitude_target.time_boot_ms() == -125343653,
					-1949141892,
					440980618,
					-965531675,
					-379571254,
					-1813747527,
					-1574629258,
					-596396694,
					1090071036,
					1409200110,
					1912323393,
					745074993,
					1281887850,
					3227110,
					-264918394,
					-358028304,
					-1008300411,
					-1936769554,
					711750455,
					141108675,
					-1671782848,
					1424130394,
					-1895679346,
					1863829901,
					-810443911,
					601106848,
					-1277520910,
					-236743190,
					842993098,
					-1801700189,
					-5316217,
					2078796747,
					-1749624958,
					30490956,
					370969307,
					1919531587,
					-227124988,
					365176046,
					411194276,
					664136075,
					-916908805,
					-1049544387,
					234260277,
					-984528675,
					1079192172,
					-1764658289,
					1617901759,
					1262787487,
					1586015585,
					1090030303,
					411573759,
					806363769,
					-1648731331,
					1743261091,
					-335975726,
					-335101217,
					-1816908965,
					852732196,
					-317553317,
					1732781209,
					-1711907266,
					-1399993836,
					-152681693,
					1683095269,
					-789328909,
					-906693832,
					1646820096,
					2072106095,
					2024883879,
					-1283582271,
					792375725,
					-1659744542,
					254904982,
					-1063086434,
					2042275790,
					1907450961,
					1552037,
					-892225131,
					-771741505,
					256528057,
					1569627023,
					1204873594,
					-1680170978,
					-1198548366,
					1869107615,
					2016891887,
					206745344,
					785683252,
					-1044564078,
					-1141840937,
					368141204,
					1170510543,
					-1945509416,
					989542604,
					-228471996,
					205595798,
					-733186086,
					468711979,
					447759375,
					2082431196,
					1729527964,
					-1638479964,
					-1566971531,
					-353304837,
					-89454164,
					-594021043,
					-669284738,
					-1545141001,
					1388303724,
					-1266382265,
					-747482705,
					1029361776,
					1450890877,
					549782694,
					780155807,
					-1965298620,
					1505016953,
					605375376,
					-1089198906,
					-1554424918,
					-896110198,
					337626808,
					957921961,
					24228327,
					2140803126,
					1955905818,
					-243282319,
					-1900141124,
					580525447,
					-1446635796,
					-1017606810,
					565539716,
					1437064198,
					1801956948,
					-2124044252,
					-1894935808,
					-1565613215,
					-1838409084,
					-1871029510,
					-1535155369,
					-1215907444,
					1077092423,
					-1608968073,
					-513719212,
					-1501058268,
					-1945511770,
					-1996427290,
					-1322256321,
					1707857849,
					1836723885,
					-302553430,
					-949438368,
					-1767778634,
					-1934108569,
					364481563,
					1849158035,
					-612128192,
					-1984650164,
					779559138,
					1031390041,
					-2139916786,
					-487395225,
					-2037362664,
					-251999261,
					-506985384,
					-98372495,
					124373887,
					820220772,
					-66549865,
					-1038393193,
					1959321808,
					4949282,
					1227300314,
					338249010,
					-1132937946,
					322665446,
					-357357166,
					-294141919,
					-1054974521,
					908589707,
					1496050284,
					1402520127,
					1331794204,
					-1704030834,
					1440773651,
					1963787686,
					-340912998,
					963197376,
					-988176520,
					-715753909,
					879444487,
					-447397308,
					1062566526,
					376840280,
					-1200652520,
					1482765466,
					683760525,
					233828840,
					-515683658,
					511007315,
					1538500876,
					-1795775259,
					-58131659,
					1179102722,
					-985300002,
					5078978,
					1045723937,
					-1426249797,
					1885405510,
					113709743,
					-1004991097,
					-1319107933,
					1362111217,
					-932426779,
					-564510992,
					-610989311,
					855681684,
					1288707093,
					1504579748,
					-1218063949,
					-925299919,
					-1926429217,
					-1045333171,
					-996746023,
					-535241889,
					718069474,
					-996716371,
					-394401110,
					2076443342,
					-81173914,
					1520384884,
					-331946465,
					1179584022,
					1415049898,
					956669310,
					1451783814,
					1594302695,
					88226392,
					1541061925,
					-1922750641,
					-1484235401,
					2050651351,
					-2045861820,
					557629099,
					-1991725743,
					1713442189,
					-1412083572,
					-588498269,
					27671843,
					1282397701,
					1367465720,
					-401238009,
					-1564870902,
					-1314578536,
					1429735279);
				assert(pattitude_target.type_mask() == 122,
					-105,
					79,
					7,
					-107,
					-34,
					-70,
					-106,
					36,
					-46,
					-26,
					21,
					32,
					29,
					-43,
					22,
					-44,
					111,
					111,
					-125,
					-64,
					87,
					11,
					-8,
					-111,
					-84,
					-18,
					85,
					90,
					10,
					-52,
					-58,
					-20,
					35,
					-98,
					22,
					33,
					-53,
					109,
					-128,
					-123,
					113,
					-108,
					33,
					69,
					66,
					103,
					-47,
					3,
					-21,
					86,
					100,
					108,
					-97,
					26,
					108,
					-106,
					-85,
					-118,
					-83,
					-39,
					104,
					-13,
					65,
					-96,
					105,
					-26,
					-35,
					125,
					-82,
					-120,
					-10,
					-22,
					-119,
					-75,
					71,
					100,
					-6,
					-92,
					-103,
					23,
					-28,
					-122,
					-51,
					-57,
					-56,
					22,
					73,
					-25,
					-107,
					2,
					-107,
					-34,
					38,
					-72,
					-111,
					-13,
					18,
					-64,
					92,
					-9,
					-86,
					86,
					63,
					65,
					72,
					116,
					-97,
					20,
					55,
					67,
					42,
					-74,
					7,
					-100,
					4,
					100,
					49,
					-23,
					-83,
					64,
					47,
					68,
					112,
					-106,
					-101,
					-51,
					46,
					-123,
					-58,
					-8,
					-94,
					14,
					50,
					-100,
					120,
					-64,
					113,
					-41,
					-86,
					117,
					85,
					16,
					-25,
					118,
					121,
					3,
					1,
					-58,
					61,
					2,
					-2,
					-111,
					115,
					-71,
					-17,
					60,
					20,
					125,
					73,
					85,
					118,
					-107,
					-53,
					-35,
					59,
					14,
					-14,
					-58,
					-120,
					34,
					-102,
					3,
					35,
					-128,
					-114,
					-39,
					110,
					88,
					-59,
					80,
					62,
					-123,
					42,
					-2,
					21,
					-14,
					116,
					85,
					-39,
					44,
					-30,
					27,
					45,
					-114,
					-21,
					115,
					-111,
					39,
					68,
					-18,
					103,
					-93,
					109,
					108,
					23,
					-54,
					-8,
					91,
					91,
					55,
					25,
					-45,
					-23,
					80,
					-49,
					-118,
					106,
					-90,
					61,
					4,
					56,
					-9,
					-110,
					-113,
					-11,
					-18,
					127,
					78,
					-121,
					106,
					66,
					-59,
					31,
					62,
					125,
					-82,
					-27,
					-2,
					46,
					8,
					108,
					123,
					-48,
					109,
					-127,
					126,
					45,
					53,
					-56,
					-13,
					-10,
					70,
					79,
					2);
				{

					const float exemplary[] = { -2.8325402E36F,
											   -3.2003797E38F,
											   2.0986134E38F,
											   1.0199815E38F,
											   -2.5088047E38F,
											   -2.4862472E38F,
											   -1.9949948E38F,
											   -2.4787924E38F,
											   -4.8369243E36F,
											   9.53387E37F,
											   3.7780536E37F,
											   1.6116262E38F,
											   2.0762845E38F,
											   -1.6796683E38F,
											   2.1332227E38F,
											   5.161423E37F,
											   -6.8945026E37F,
											   -1.3978473E38F,
											   -1.6291497E38F,
											   -3.2124589E38F,
											   -1.8500413E38F,
											   -1.5502525E38F,
											   -2.1884886E38F,
											   1.2017769E38F,
											   -2.326104E38F,
											   -2.9491954E38F,
											   1.39303E38F,
											   2.2841585E38F,
											   -3.1574769E38F,
											   1.2419964E38F,
											   -2.4594062E37F,
											   -1.3302657E38F,
											   -1.0044138E38F,
											   1.1967012E38F,
											   -5.030339E37F,
											   -5.039082E37F,
											   -1.8487526E38F,
											   -2.2510942E37F,
											   -2.6885287E38F,
											   -2.5814307E38F,
											   -4.689757E37F,
											   -4.7776965E37F,
											   -2.4790844E38F,
											   8.067441E37F,
											   -1.4633515E38F,
											   3.9460523E37F,
											   -3.0105231E38F,
											   -1.345778E38F,
											   9.220711E37F,
											   1.6561102E38F,
											   1.7778852E38F,
											   2.1738672E38F,
											   1.2252876E38F,
											   4.546951E37F,
											   2.57898E38F,
											   -2.076289E38F,
											   -2.8648003E38F,
											   -2.7357938E37F,
											   -1.8094076E38F,
											   3.312577E38F,
											   -3.201782E38F,
											   -2.431306E38F,
											   4.8095206E37F,
											   1.443286E38F,
											   -2.4854227E38F,
											   -7.940152E37F,
											   2.3669501E38F,
											   -4.725711E37F,
											   6.556397E37F,
											   1.0474604E38F,
											   1.7501101E38F,
											   1.0312233E38F,
											   -2.212259E38F,
											   -1.9774351E38F,
											   -6.32164E37F,
											   -1.8536187E38F,
											   4.3484584E37F,
											   -2.1948962E38F,
											   -1.1956602E38F,
											   1.1989718E38F,
											   3.0656408E38F,
											   2.2811068E38F,
											   1.3341844E38F,
											   -1.3095977E38F,
											   1.7610519E38F,
											   2.8518143E38F,
											   2.3862523E38F,
											   -2.1992111E38F,
											   9.650429E37F,
											   4.036613E37F,
											   -3.0467106E38F,
											   -1.6389419E38F,
											   -2.283583E38F,
											   2.6480546E38F,
											   -2.8547485E38F,
											   -1.2645149E38F,
											   -1.5841245E38F,
											   1.6176908E38F,
											   -8.198543E37F,
											   -1.3125351E38F,
											   -1.5161114E38F,
											   1.2361398E38F,
											   8.4824657E37F,
											   -2.1552447E36F,
											   1.4459194E38F,
											   -3.1288059E38F,
											   -2.5229403E38F,
											   -1.1425035E38F,
											   2.1365721E38F,
											   2.9197334E38F,
											   -1.8397835E38F,
											   -2.5023409E38F,
											   -1.1738403E38F,
											   -2.0471663E38F,
											   -1.8172092E38F,
											   1.2095051E37F,
											   2.2639931E38F,
											   -1.3829479E37F,
											   2.6834553E38F,
											   2.4718302E38F,
											   7.876943E37F,
											   2.3385448E37F,
											   2.7890234E38F,
											   3.2979725E37F,
											   1.6721193E38F,
											   -2.4053565E38F,
											   4.5126032E36F,
											   -2.1124513E38F,
											   1.0040269E38F,
											   -2.8070033E38F,
											   1.2682668E38F,
											   2.5713153E38F,
											   5.632507E37F,
											   9.276426E37F,
											   -2.3308732E38F,
											   -1.8755325E38F,
											   -1.1989818E38F,
											   -8.804405E37F,
											   3.2515102E38F,
											   8.095595E37F,
											   2.2754643E38F,
											   2.7942173E38F,
											   -3.2625818E38F,
											   -5.150701E37F,
											   -3.0069106E38F,
											   -2.5227975E38F,
											   -1.0192423E38F,
											   1.4793812E38F,
											   -2.2199268E38F,
											   1.9991225E38F,
											   2.5926838E38F,
											   2.5292883E38F,
											   6.453395E37F,
											   -2.6678687E38F,
											   -1.1275993E38F,
											   -5.739663E37F,
											   -2.9695906E38F,
											   -9.16191E37F,
											   1.1015023E38F,
											   1.1574677E38F,
											   1.7227495E38F,
											   -1.0846235E38F,
											   -2.3061493E38F,
											   -6.3096933E37F,
											   1.9719451E38F,
											   -3.2008462E37F,
											   1.8028484E38F,
											   -8.42129E37F,
											   1.9072864E38F,
											   1.9073578E38F,
											   3.3602428E38F,
											   2.7886117E38F,
											   -1.5428858E38F,
											   -2.889652E38F,
											   3.7233365E37F,
											   -2.4020488E37F,
											   2.1472926E37F,
											   2.3090375E38F,
											   1.251583E38F,
											   -1.5724448E37F,
											   -2.9174358E38F,
											   -1.4511369E38F,
											   -4.699536E37F,
											   3.2874123E38F,
											   -1.2404832E38F,
											   2.4466328E38F,
											   2.5775422E38F,
											   -6.763466E37F,
											   -9.18248E37F,
											   -1.2056343E38F,
											   -7.1585497E37F,
											   -1.1497014E38F,
											   8.810162E37F,
											   2.6738077E38F,
											   -2.8994195E38F,
											   -1.6790312E38F,
											   -9.96072E37F,
											   -2.017996E38F,
											   -1.225864E37F,
											   2.3960428E38F,
											   6.6924796E36F,
											   -3.0112137E37F,
											   -9.12202E37F,
											   1.149399E38F,
											   1.3770519E37F,
											   2.6620166E38F,
											   3.0101067E38F,
											   -3.2236493E38F,
											   -1.901355E37F,
											   3.20483E38F,
											   -1.0261305E36F,
											   2.9926276E38F,
											   2.5400706E38F,
											   4.487437E37F,
											   -1.7275707E38F,
											   4.941491E37F,
											   -7.494998E37F,
											   -1.0106646E38F,
											   2.214884E38F,
											   2.7865859E38F,
											   -1.8898121E37F,
											   -6.2938224E37F,
											   2.9685318E38F,
											   1.737949E38F,
											   2.6882265E38F,
											   -4.7292865E37F,
											   2.5571819E38F,
											   7.891982E37F,
											   1.2752223E38F,
											   5.952159E37F,
											   1.5024252E38F,
											   1.4213932E37F,
											   3.0874022E38F,
											   -8.029232E37F,
											   -6.563762E36F,
											   2.1739721E38F,
											   -6.4193766E37F,
											   2.8769368E37F,
											   -1.5421607E38F,
											   -2.6154119E38F,
											   -3.2323395E38F,
											   7.6258874E37F,
											   -1.0556375E38F,
											   -3.5962114E37F,
											   2.6088864E38F,
											   9.912952E37F,
											   2.055708E38F,
											   3.1994925E38F,
											   -7.865646E37F,
											   1.8031441E38F,
											   3.1870172E38F,
											   2.0839058E37F,
											   -2.273566E38F,
											   9.421179E37F,
											   1.1197106E38F };
					const auto  sample = pattitude_target.q();

					for (size_t index = 0; index < com::company::demo::ATTITUDE_TARGET::q_::len; index++)
						assert(sample.get(index) == exemplary[index]);
				}

				assert(pattitude_target.body_roll_rate() == 7.8796953E37F,
					1.3738986E38F,
					-9.786877E37F,
					-1.8330245E37F,
					-1.0711333E38F,
					3.4546673E37F,
					3.1199782E38F,
					-9.307134E37F,
					1.6842559E38F,
					-2.6955675E38F,
					-1.7480618E38F,
					2.6108033E38F,
					-3.3751818E38F,
					-2.3347587E38F,
					3.4140974E36F,
					9.359103E37F,
					4.6591656E37F,
					-1.378007E38F,
					1.1186297E38F,
					3.2044958E38F,
					2.069974E38F,
					-2.9967532E38F,
					-1.8294665E38F,
					1.2334007E38F,
					-2.1335695E38F,
					-2.8964078E38F,
					2.0603312E37F,
					1.7341036E38F,
					-9.478231E37F,
					1.7706028E38F,
					1.3413444E36F,
					-1.9470144E38F,
					-2.980395E38F,
					-3.1305216E38F,
					2.2439127E38F,
					-6.7082447E37F,
					2.777536E38F,
					-2.9169873E38F,
					-2.1050602E38F,
					-3.1755938E37F,
					1.7201153E38F,
					7.1377587E37F,
					8.855095E37F,
					1.6974771E38F,
					-2.5944593E38F,
					-3.2568674E38F,
					-1.2171185E38F,
					-3.251493E38F,
					-2.2783983E38F,
					2.7293095E38F,
					-2.943763E38F,
					-2.9403318E38F,
					1.3970404E38F,
					-3.1218062E38F,
					1.4380226E38F,
					2.7615551E38F,
					1.2823207E38F,
					-1.795841E38F,
					2.3584842E36F,
					-2.7703323E38F,
					1.8008715E38F,
					-1.3073827E38F,
					5.716723E37F,
					3.3237983E38F,
					7.123023E37F,
					-2.7306942E38F,
					-2.2993997E38F,
					1.9365732E38F,
					1.99426E35F,
					1.0443764E38F,
					3.3927956E37F,
					1.9635727E38F,
					-1.6539324E38F,
					-2.9582178E38F,
					-3.325562E38F,
					-1.3206318E38F,
					3.2148964E38F,
					-1.736303E38F,
					2.6163807E38F,
					2.4837082E38F,
					-8.955937E37F,
					-2.798996E38F,
					2.0338106E37F,
					-2.837919E38F,
					-1.492906E38F,
					2.0129271E38F,
					-1.1156396E38F,
					1.6234776E38F,
					-3.4491854E36F,
					-2.761986E38F,
					-2.619133E38F,
					2.975385E38F,
					-3.2064547E38F,
					1.0962258E38F,
					1.087511E38F,
					1.1574807E38F,
					2.895741E38F,
					1.9844873E38F,
					8.810834E37F,
					-3.9543235E37F,
					2.509353E38F,
					2.0819202E38F,
					1.3146029E38F,
					-3.2400673E38F,
					8.92322E37F,
					1.1245386E38F,
					-8.4221033E37F,
					2.112169E38F,
					-2.7613393E38F,
					2.9148579E38F,
					5.41771E37F,
					3.3678013E37F,
					2.8525469E38F,
					-1.3836041E38F,
					1.7663322E38F,
					-1.604553E38F,
					-3.304077E38F,
					-8.0194853E37F,
					-2.8575775E38F,
					2.7714426E38F,
					-3.052225E37F,
					2.1339012E38F,
					3.3176256E38F,
					3.252228E38F,
					2.3734305E38F,
					1.8431838E38F,
					-2.792143E38F,
					1.583425E38F,
					-2.748308E38F,
					-3.2268612E38F,
					2.5136221E38F,
					-3.247794E37F,
					-2.2860294E38F,
					2.6971025E38F,
					5.2475005E37F,
					1.3221954E38F,
					2.7721123E38F,
					-2.764398E38F,
					-2.5466484E38F,
					-3.161261E38F,
					9.499923E37F,
					-2.4884509E38F,
					-1.2032356E38F,
					-1.2283998E38F,
					2.8756654E38F,
					-2.8985125E38F,
					1.5927719E38F,
					2.3787979E38F,
					-7.910556E37F,
					6.2693227E37F,
					-1.5007125E38F,
					4.8836106E36F,
					2.724983E38F,
					9.604105E36F,
					2.2467296E38F,
					2.427309E37F,
					-2.6504083E38F,
					-9.38542E37F,
					-1.8822147E38F,
					-3.2018562E38F,
					1.5938712E38F,
					-3.2209485E38F,
					-2.0171179E38F,
					-1.2851308E38F,
					-2.4923585E38F,
					-3.0355989E38F,
					-3.28035E38F,
					7.312595E36F,
					-6.763972E37F,
					-2.4332154E38F,
					-8.956809E37F,
					-1.7981344E38F,
					1.2301981E38F,
					-1.654342E38F,
					-3.5164858E37F,
					-1.28455E38F,
					-3.051336E38F,
					-2.416086E38F,
					-1.6373061E38F,
					1.4065303E38F,
					-2.92961E38F,
					2.9315837E37F,
					-1.5772472E38F,
					-6.2321557E37F,
					-1.012705E38F,
					-1.8483962E38F,
					1.722397E37F,
					1.6697169E38F,
					-1.9102237E38F,
					1.5865774E37F,
					4.895595E37F,
					-2.37281E38F,
					3.1123238E38F,
					-1.6025111E38F,
					-6.230354E37F,
					2.6871767E38F,
					-1.2558351E37F,
					-8.1291675E37F,
					2.4024173E38F,
					6.145387E37F,
					2.1155425E38F,
					-1.4593408E37F,
					-8.965491E37F,
					-8.4020647E37F,
					1.6726131E38F,
					7.1914965E37F,
					3.126563E38F,
					1.4083137E38F,
					-1.4531916E38F,
					2.4178206E38F,
					2.9910648E38F,
					1.1789218E38F,
					1.7367401E38F,
					-9.121678E37F,
					2.6549942E38F,
					-1.9234002E37F,
					-8.739678E37F,
					-1.2518557E38F,
					-7.785653E37F,
					1.9060956E37F,
					-2.5707967E37F,
					2.0425086E38F,
					-1.8608448E38F,
					-3.3676785E38F,
					-7.247313E37F,
					1.7689861E38F,
					-2.0661721E38F,
					2.6724354E37F,
					-2.8743156E38F,
					-1.7346547E38F,
					-1.8195875E38F,
					-6.4884377E37F,
					4.4972907E37F,
					3.2857045E37F,
					-6.9530737E37F,
					-1.707827E38F,
					-1.7938617E38F,
					-2.748589E38F,
					-6.261718E37F,
					7.274129E37F,
					2.4679165E38F,
					-2.8631858E38F,
					5.932948E36F,
					-2.2309213E38F,
					-1.1912894E38F,
					4.2450216E37F,
					1.4595022E38F,
					-2.6296467E38F,
					2.5218223E38F,
					1.830325E37F,
					-1.697799E38F,
					-2.1366229E38F,
					1.0431754E38F,
					-2.5104277E38F,
					2.6419159E38F);
				assert(pattitude_target.body_pitch_rate() == -3.2936686E38F,
					1.0057044E38F,
					3.4794438E37F,
					1.8551635E38F,
					-3.3141859E38F,
					-3.0099238E38F,
					4.1769394E37F,
					3.308182E38F,
					2.0979183E38F,
					-2.3090738E38F,
					2.1953688E37F,
					1.4477739E38F,
					7.816791E37F,
					-1.795754E38F,
					-1.747672E38F,
					1.1886173E38F,
					6.991642E37F,
					2.8476941E38F,
					-7.6743537E37F,
					-4.661922E37F,
					7.477822E37F,
					1.6939295E38F,
					-2.241989E38F,
					-3.0894256E38F,
					-9.606708E37F,
					-1.1217784E38F,
					2.455322E38F,
					-1.6967524E38F,
					4.495519E37F,
					-1.273162E38F,
					2.44095E38F,
					4.3779926E37F,
					-2.0681309E37F,
					-5.330638E37F,
					3.061087E37F,
					2.6308881E38F,
					-3.2349742E38F,
					-8.85768E37F,
					-1.1453464E37F,
					-6.621231E37F,
					-1.822636E38F,
					-1.388265E38F,
					-2.4166972E38F,
					-2.4367453E38F,
					3.219432E38F,
					-9.497129E37F,
					-7.3129683E37F,
					-4.1328792E37F,
					8.768012E37F,
					2.6955866E38F,
					-2.2349867E37F,
					-1.438062E38F,
					1.04471895E36F,
					-6.55918E36F,
					1.1213111E38F,
					2.232531E38F,
					-8.0309006E36F,
					-1.8779217E38F,
					-3.3675201E38F,
					-2.0442127E38F,
					-3.0792383E38F,
					2.505772E38F,
					-1.4531555E38F,
					-1.3706811E38F,
					-2.9783936E38F,
					-3.1990954E38F,
					-5.877921E37F,
					2.4354844E38F,
					-2.8938188E38F,
					-1.987149E38F,
					-3.2642135E38F,
					1.8077318E38F,
					-2.2506287E38F,
					-1.6363349E38F,
					1.3523476E38F,
					6.6735395E37F,
					1.2205616E38F,
					-3.3691184E38F,
					2.2391863E38F,
					-3.0137789E38F,
					-8.2351436E37F,
					1.586688E38F,
					7.5125533E37F,
					-2.548299E38F,
					-2.6103243E37F,
					1.74352E38F,
					7.0209057E37F,
					8.2547653E37F,
					9.307263E37F,
					1.3462251E38F,
					-1.4113745E38F,
					-6.4918284E37F,
					2.4898062E37F,
					-2.170711E38F,
					2.0872559E38F,
					-2.5536178E38F,
					-1.7545842E38F,
					1.929333E38F,
					-9.046347E37F,
					2.5227028E38F,
					9.923688E37F,
					-3.1944128E38F,
					1.764408E38F,
					-7.2304524E37F,
					5.184761E37F,
					1.2098578E37F,
					3.3780976E38F,
					2.1183E38F,
					-1.190087E38F,
					5.7008646E37F,
					-1.6405851E38F,
					2.6896098E38F,
					-1.3257254E38F,
					-9.100742E37F,
					2.1846995E38F,
					-6.238869E37F,
					1.2403418E38F,
					-8.654509E37F,
					2.2927621E38F,
					2.1416853E38F,
					4.314372E36F,
					-1.5461636E38F,
					8.20657E37F,
					2.7009821E38F,
					-5.088711E37F,
					-3.2774696E37F,
					-2.7173656E38F,
					-2.0524336E38F,
					-2.7847393E38F,
					-1.1104799E38F,
					1.4351375E38F,
					1.2299579E38F,
					1.0319777E38F,
					-2.520359E38F,
					-2.4591044E38F,
					-2.1457791E38F,
					2.8213424E38F,
					1.26412E38F,
					-3.541819E37F,
					-1.6847364E38F,
					7.611953E37F,
					-1.4115891E38F,
					5.705562E37F,
					5.327451E36F,
					2.9347384E37F,
					1.0332113E37F,
					-3.3026174E38F,
					-1.9968787E38F,
					2.2486195E37F,
					-2.5179403E38F,
					2.4226158E38F,
					2.6184136E38F,
					-2.9381056E38F,
					-1.401283E38F,
					2.0501827E38F,
					1.703986E38F,
					-3.3923178E38F,
					-2.4037116E38F,
					2.5021184E38F,
					-1.1303036E38F,
					-2.4738227E37F,
					7.3362657E37F,
					1.767433E38F,
					-1.846891E38F,
					2.0180048E38F,
					-3.8679577E37F,
					-2.482198E38F,
					-6.2699647E37F,
					2.4923877E38F,
					1.7063926E38F,
					1.2781309E38F,
					1.2052901E38F,
					-1.829252E36F,
					2.3818885E38F,
					-2.1176038E38F,
					-7.9802444E37F,
					-7.2945084E36F,
					-2.4806788E38F,
					5.8850694E37F,
					-3.386816E38F,
					-2.8239815E37F,
					5.1287613E36F,
					-1.9689409E38F,
					-8.2514085E37F,
					1.4835552E38F,
					4.0217752E37F,
					1.0553637E38F,
					3.2281666E38F,
					-1.4361102E37F,
					2.9211436E37F,
					1.466193E38F,
					4.1697942E37F,
					-2.581081E38F,
					5.043047E37F,
					-1.591513E38F,
					-5.2353037E37F,
					-2.7136278E38F,
					-2.4162684E38F,
					-1.9493123E37F,
					6.5008916E37F,
					3.3130837E38F,
					2.7993477E38F,
					2.8918864E38F,
					-8.1940996E37F,
					-2.4638643E38F,
					9.921795E37F,
					7.5454544E37F,
					1.21204E38F,
					1.9094552E38F,
					-2.2816486E38F,
					1.1902811E38F,
					7.307086E36F,
					-1.4831301E38F,
					1.6962813E38F,
					-3.2928092E38F,
					-1.0266325E37F,
					2.3668118E38F,
					-2.7983864E38F,
					3.5107812E37F,
					-7.637581E37F,
					-3.0492047E38F,
					-2.2619308E38F,
					-1.6760794E38F,
					2.8667983E38F,
					-2.2150596E38F,
					1.0559696E38F,
					3.214381E37F,
					1.4372629E37F,
					-2.9305011E38F,
					-1.9197193E38F,
					-1.5601715E38F,
					2.6292497E38F,
					2.9934038E37F,
					-1.8186993E38F,
					-3.056613E38F,
					-2.5648425E38F,
					2.1681537E38F,
					3.2256096E38F,
					-1.4608288E38F,
					3.1390179E38F,
					-1.517776E38F,
					1.2480156E38F,
					-2.2245009E38F,
					3.0698885E38F,
					1.5860667E38F,
					-5.866781E37F,
					-5.5028647E37F,
					-2.1736585E38F,
					2.8512007E38F,
					7.02082E37F,
					9.248456E37F,
					1.5678407E38F,
					-7.8555354E37F,
					2.1064398E38F,
					-2.6675855E38F);
				assert(pattitude_target.body_yaw_rate() == -2.5969293E38F,
					-2.6198478E38F,
					2.1993209E38F,
					2.3654425E38F,
					-5.6310596E37F,
					8.1752106E37F,
					-2.8599295E38F,
					1.0752208E38F,
					2.6854817E38F,
					2.2479958E38F,
					-2.2273783E38F,
					3.284241E38F,
					-4.557017E37F,
					-3.1539123E38F,
					1.781478E37F,
					-2.6142608E38F,
					-3.2829772E37F,
					2.037616E38F,
					2.7255328E38F,
					-1.5487823E38F,
					-1.7921111E38F,
					-9.941195E37F,
					3.3571712E38F,
					1.3597593E38F,
					9.510723E37F,
					-3.0144644E38F,
					2.3915614E38F,
					-1.5180985E38F,
					2.2723367E38F,
					1.5397928E38F,
					-3.2944728E38F,
					-2.7584014E38F,
					2.1667459E38F,
					-2.3511424E38F,
					2.6569036E38F,
					7.850216E37F,
					-2.656937E38F,
					-7.356551E37F,
					-5.356608E37F,
					-3.2476541E38F,
					1.549664E38F,
					-1.191777E37F,
					9.440096E37F,
					-3.2605551E38F,
					-1.5915803E38F,
					-2.1762052E38F,
					-2.0662323E38F,
					1.5858124E38F,
					-1.9338186E38F,
					9.788303E37F,
					-3.1033809E38F,
					2.7437445E38F,
					-2.0480745E38F,
					-1.3716281E38F,
					3.3079192E38F,
					-1.8036249E37F,
					-2.6917881E38F,
					-2.589247E38F,
					1.9666276E37F,
					-2.57004E38F,
					2.7089202E38F,
					-1.7452034E38F,
					2.5523048E38F,
					5.189727E37F,
					-2.628872E38F,
					1.8696877E38F,
					-2.487827E38F,
					-3.3530119E38F,
					-1.0581572E38F,
					2.2978952E38F,
					4.5543705E37F,
					-2.1674485E38F,
					-2.222588E38F,
					1.4382891E38F,
					-4.306053E37F,
					-1.4399173E38F,
					-9.6407756E36F,
					-2.6373986E38F,
					-3.0329265E38F,
					3.5993605E37F,
					-1.7159503E38F,
					-6.323057E37F,
					2.367199E38F,
					-6.4376865E37F,
					-2.181618E38F,
					1.5447783E38F,
					2.9394627E38F,
					-3.763743E36F,
					2.3632814E38F,
					-2.4912586E38F,
					6.45267E37F,
					-2.5102705E38F,
					3.024676E38F,
					3.2048418E38F,
					3.2542615E38F,
					3.3796395E38F,
					3.1952425E38F,
					-3.2987487E38F,
					-4.354095E37F,
					-1.5366002E38F,
					-2.5797213E38F,
					-2.1245362E38F,
					-1.3276286E37F,
					-2.607728E38F,
					-2.4177194E38F,
					1.548379E38F,
					2.3376852E38F,
					-5.434504E37F,
					-1.1898626E38F,
					2.4068424E38F,
					-3.9254368E37F,
					2.3510403E37F,
					1.6666861E38F,
					-4.1522798E37F,
					2.165568E37F,
					-1.3914984E38F,
					-3.1388201E38F,
					8.964464E37F,
					-3.038188E38F,
					-2.834327E38F,
					-1.6241437E38F,
					3.27148E38F,
					1.133252E38F,
					-6.450487E37F,
					-2.6122226E38F,
					1.5853437E38F,
					-1.927821E38F,
					-2.4005027E38F,
					1.8112023E38F,
					-2.017475E38F,
					-3.9726377E37F,
					-2.381779E38F,
					-3.069964E38F,
					5.3744517E37F,
					2.4682192E38F,
					4.534868E37F,
					2.316973E37F,
					1.5876067E38F,
					3.217772E38F,
					2.4995468E38F,
					-5.996293E36F,
					1.5857504E38F,
					2.8727248E38F,
					3.1839905E38F,
					9.585996E37F,
					-1.0288986E38F,
					-2.3013708E38F,
					1.818075E38F,
					1.2666212E38F,
					-1.8492304E38F,
					-2.305551E38F,
					-2.1976427E38F,
					-1.5356914E38F,
					1.1740893E38F,
					-5.399694E37F,
					2.8280033E38F,
					1.310203E38F,
					2.7805595E38F,
					1.7684939E38F,
					-1.114884E38F,
					1.585951E37F,
					-2.387769E38F,
					2.527789E38F,
					2.311379E38F,
					3.2057778E38F,
					5.062436E37F,
					5.172591E37F,
					7.6986155E37F,
					-2.9233618E37F,
					2.2599711E38F,
					1.586754E38F,
					3.2587604E38F,
					2.0000227E38F,
					-2.0634849E38F,
					-5.211277E37F,
					1.0391995E38F,
					1.0860296E37F,
					1.3982039E37F,
					-7.725304E37F,
					2.9532087E38F,
					1.4995318E38F,
					1.7650029E38F,
					2.986944E38F,
					-2.174369E38F,
					-3.227297E38F,
					-3.0970915E38F,
					2.7174469E37F,
					-2.0786488E38F,
					3.194745E38F,
					-3.072493E38F,
					-1.0757998E38F,
					3.0659537E38F,
					-1.3988367E37F,
					3.1810503E38F,
					-5.1392983E36F,
					2.336483E38F,
					-2.2418478E38F,
					2.215102E38F,
					-2.227275E38F,
					8.728239E37F,
					8.819805E37F,
					3.2556162E38F,
					2.0240626E38F,
					1.9230096E37F,
					7.010932E37F,
					-1.2092439E38F,
					-2.9314899E38F,
					1.6608267E38F,
					-2.639108E38F,
					2.6566797E38F,
					2.85936E38F,
					2.3978725E38F,
					-2.303755E38F,
					-3.1332936E38F,
					-6.4053153E37F,
					-1.3233093E38F,
					1.6633197E38F,
					3.3929553E38F,
					4.7375206E37F,
					2.7460299E37F,
					1.4643225E38F,
					-3.4990883E36F,
					-9.437752E37F,
					2.4507734E38F,
					3.0139813E38F,
					2.33481E38F,
					-2.776448E38F,
					8.698459E37F,
					-8.514214E37F,
					-2.7670744E38F,
					-2.6698659E38F,
					2.7221415E37F,
					1.0714117E38F,
					4.1500475E37F,
					-7.127777E37F,
					-9.672654E37F,
					-3.3698952E38F,
					3.2381638E38F,
					-1.7553298E38F,
					-1.8403307E38F,
					1.7093323E37F,
					-2.9371885E37F,
					2.8003235E38F,
					-9.896077E37F,
					1.795555E38F,
					-1.0319504E38F,
					-1.4021932E38F,
					-3.2402889E37F,
					-1.3446145E38F,
					1.4488111E38F,
					-9.16738E37F,
					-9.918996E37F,
					2.1701625E38F,
					-6.2606236E37F,
					-1.7586145E38F);
				assert(pattitude_target.thrust() == -1.4398145E38F,
					3.2446854E38F,
					-3.3137946E36F,
					-6.5949893E37F,
					-2.148853E38F,
					-1.8040376E38F,
					-2.3289151E38F,
					-2.134935E38F,
					1.8213461E36F,
					-3.2427807E38F,
					-1.4972866E38F,
					9.87166E37F,
					-2.7200583E38F,
					3.309088E38F,
					1.2993845E37F,
					1.5875598E38F,
					-2.8422511E37F,
					1.0726167E38F,
					-3.2792963E38F,
					7.885388E37F,
					1.5886794E38F,
					4.618958E37F,
					-3.1909905E38F,
					3.3760874E38F,
					1.3005479E38F,
					-2.6013022E38F,
					-2.7163262E38F,
					-7.583485E36F,
					1.6345043E38F,
					-3.3761596E38F,
					1.829601E38F,
					2.7407902E38F,
					3.195709E37F,
					3.2212771E37F,
					-2.8383042E38F,
					-4.1482068E37F,
					1.3729688E38F,
					-5.906381E37F,
					-2.8714477E38F,
					2.6889388E38F,
					2.7720576E38F,
					-3.0003821E38F,
					-2.0322248E38F,
					2.9411433E38F,
					-4.8621814E37F,
					-2.1041398E38F,
					2.990533E38F,
					3.3818078E38F,
					-3.0548126E38F,
					9.090256E37F,
					1.0552167E38F,
					2.9456174E38F,
					-3.3189413E37F,
					7.0947387E37F,
					-2.2882016E38F,
					1.5942364E37F,
					-8.622746E37F,
					-7.427396E37F,
					3.3287336E38F,
					-6.621593E37F,
					-1.1486036E38F,
					9.234976E37F,
					-2.0652553E38F,
					-2.7982407E38F,
					2.5782543E38F,
					9.311751E37F,
					3.1586894E38F,
					-3.4172615E37F,
					2.0317267E38F,
					1.7866414E38F,
					1.5858451E38F,
					-8.717501E37F,
					1.8510486E38F,
					-2.8218483E37F,
					-8.2204033E37F,
					-7.5555307E37F,
					-3.0295866E38F,
					1.4878837E38F,
					2.9030619E38F,
					-2.7686455E38F,
					3.3070574E38F,
					-3.401978E38F,
					5.7135355E37F,
					3.0645417E38F,
					3.1026767E38F,
					1.8099166E38F,
					-1.4361972E38F,
					1.4713853E38F,
					-1.3245034E38F,
					1.6081599E38F,
					-2.245742E38F,
					2.7171577E38F,
					-3.0926316E37F,
					3.2591911E38F,
					-2.5329213E38F,
					1.2041551E38F,
					2.59384E38F,
					2.0780572E38F,
					-3.2122376E38F,
					-1.1241662E37F,
					3.2488587E38F,
					-5.8308256E37F,
					-1.0632743E38F,
					-2.336314E38F,
					-9.118726E37F,
					5.222092E37F,
					-7.8435455E37F,
					-1.7661754E38F,
					-2.5112718E38F,
					-1.3439166E38F,
					1.3258833E38F,
					2.6890417E38F,
					-1.4546316E38F,
					-3.362006E38F,
					-2.302622E38F,
					-2.7652488E38F,
					-1.3198268E37F,
					-1.9477196E38F,
					-1.043478E38F,
					-1.777173E38F,
					3.318236E38F,
					-1.6986393E37F,
					-2.7425347E38F,
					3.266506E38F,
					-3.1369422E38F,
					1.9510457E38F,
					6.0505196E37F,
					-8.652009E37F,
					1.7173477E38F,
					2.5500709E38F,
					-3.296946E38F,
					-2.5472202E38F,
					2.0083829E38F,
					-3.7714133E36F,
					-9.531621E36F,
					-7.379688E37F,
					-1.0910619E38F,
					3.3731069E38F,
					-1.8211628E38F,
					-2.7644204E38F,
					-1.9569637E38F,
					2.3468312E38F,
					-1.7613936E38F,
					1.8781767E38F,
					-2.2378382E38F,
					2.3937083E38F,
					-1.3504736E38F,
					1.3292945E38F,
					3.2470093E38F,
					-2.3259172E38F,
					1.4139389E38F,
					2.9175873E38F,
					7.411447E37F,
					1.0823107E38F,
					1.1234186E38F,
					-3.2962532E38F,
					-2.1976482E38F,
					5.2171384E36F,
					-7.647955E37F,
					-2.028108E38F,
					4.0417665E37F,
					-1.1441407E38F,
					-2.710892E38F,
					1.8095785E38F,
					1.5139367E37F,
					6.635003E37F,
					-1.3243927E38F,
					1.3021802E38F,
					-1.0512517E38F,
					1.0499284E38F,
					2.3274197E37F,
					3.216713E38F,
					1.6764971E38F,
					6.2235515E36F,
					2.3820755E38F,
					-2.1257912E38F,
					-1.102817E38F,
					2.938781E38F,
					1.6467481E37F,
					-1.6218479E38F,
					2.798249E37F,
					-2.562818E38F,
					-1.6810626E38F,
					-2.3169367E38F,
					1.1675639E38F,
					-1.3564107E37F,
					-2.087202E38F,
					4.4352515E36F,
					-3.1527888E38F,
					3.1253901E38F,
					-2.7724052E38F,
					2.0948135E38F,
					-2.8227046E38F,
					9.246096E37F,
					-9.330582E37F,
					-2.8711945E38F,
					2.5286143E38F,
					-3.106039E38F,
					-6.474537E37F,
					5.725382E37F,
					-2.3097529E38F,
					-2.0882759E38F,
					-1.8035987E38F,
					-3.2965252E38F,
					-1.123275E37F,
					2.755351E38F,
					1.4537711E38F,
					-2.9064162E38F,
					-2.2923364E38F,
					1.1008635E38F,
					-6.7618973E37F,
					-2.5763635E38F,
					-3.1143845E38F,
					2.579371E38F,
					-1.5724219E38F,
					-3.0243271E38F,
					1.5884648E38F,
					1.2342916E38F,
					-2.9138923E38F,
					-1.8530918E38F,
					1.736299E38F,
					1.1185219E38F,
					-1.8490903E38F,
					3.20838E38F,
					4.9809237E37F,
					-2.4563262E38F,
					1.3538754E38F,
					2.2147961E38F,
					1.9210724E38F,
					1.2432359E38F,
					1.3745251E38F,
					7.011351E37F,
					9.03929E37F,
					-1.5645605E38F,
					-1.9749771E38F,
					-1.8590398E38F,
					-1.6931472E38F,
					-2.8496033E38F,
					5.131663E37F,
					-2.6039367E38F,
					1.0878128E38F,
					-2.282536E38F,
					2.225924E38F,
					-3.3699092E37F,
					2.0539909E37F,
					2.6360904E38F,
					2.3946684E38F,
					-2.2375329E37F,
					-1.6818631E38F,
					1.7081085E38F,
					7.630321E37F,
					-3.2045944E38F,
					3.2296903E37F,
					-1.8635914E38F,
					1.4960121E38F);
				printf("ATTITUDE_TARGET \n");
			}

			void fill(const org::unirail::test::MISSION_COUNT& pmission_count) {

				pmission_count.count(-2904,
					26273,
					5933,
					27495,
					-27247,
					1128,
					-16427,
					-24639,
					24502,
					-15885,
					374,
					-18161,
					-18427,
					-2354,
					20310,
					22462,
					-412,
					13390,
					-19390,
					20332,
					-10137,
					16569,
					-20449,
					-264,
					-7419,
					-18114,
					-19740,
					27861,
					-3483,
					-20709,
					-28118,
					16861,
					-28854,
					5059,
					13829,
					31062,
					-6347,
					6319,
					20986,
					2785,
					23348,
					-20720,
					31806,
					-20746,
					7086,
					6399,
					8626,
					-1781,
					16573,
					-15877,
					-23779,
					28751,
					6420,
					9729,
					9243,
					-25584,
					-26095,
					-22618,
					11228,
					210,
					-14993,
					30245,
					8384,
					16622,
					-25700,
					-26680,
					11291,
					-4979,
					-13122,
					-22745,
					30952,
					-24330,
					-33,
					20963,
					-29628,
					23954,
					30869,
					-25134,
					10566,
					-2612,
					-31269,
					-13748,
					22590,
					6341,
					-4253,
					28485,
					29146,
					-19417,
					21536,
					21208,
					-26865,
					-20743,
					15293,
					15329,
					-26001,
					24536,
					-19950,
					-1923,
					11582,
					9489,
					-9817,
					-22248,
					-15169,
					22695,
					15698,
					22224,
					9307,
					7196,
					18848,
					17048,
					30828,
					-22534,
					-10101,
					12996,
					9448,
					-20982,
					-23662,
					16025,
					-2106,
					-6994,
					-30531,
					3500,
					-3628,
					11250,
					-21058,
					-29724,
					-19352,
					-15025,
					-28991,
					32145,
					23950,
					16196,
					-20233,
					-15543,
					-20290,
					-24266,
					26282,
					-27448,
					-27145,
					19882,
					4540,
					19079,
					15346,
					-27420,
					-30057,
					-1532,
					-2571,
					22927,
					27080,
					3767,
					30038,
					-12236,
					27550,
					-7456,
					1282,
					-28238,
					13743,
					22439,
					30621,
					27632,
					6408,
					18570,
					-28913,
					-8531,
					23541,
					26977,
					28434,
					22295,
					-20877,
					-29855,
					29675,
					-21434,
					8701,
					-29412,
					-13710,
					-17230,
					-13499,
					14403,
					-9645,
					13237,
					21033,
					11029,
					-30883,
					5659,
					-26569,
					-1655,
					286,
					-14990,
					28244,
					18292,
					16095,
					20168,
					31901,
					-16531,
					8332,
					3634,
					-27223,
					-24660,
					-7131,
					31563,
					1882,
					9098,
					23926,
					25538,
					-28705,
					19586,
					-27619,
					-18136,
					-31550,
					-962,
					20386,
					9559,
					-23014,
					32550,
					29681,
					-23296,
					-2771,
					-26586,
					-21858,
					1839,
					-8875,
					-30957,
					-22056,
					-25806,
					-6257,
					-14392,
					-1177,
					-12072,
					29094,
					29867,
					-12157,
					-32031,
					22931,
					-25652,
					-29099,
					-24753,
					8368,
					22077,
					6794,
					-12376,
					-28063,
					-5037,
					-15511,
					15961,
					-25381,
					-2849,
					28241,
					27367,
					-3975,
					-28060,
					25109,
					-2054,
					-26518,
					-24229,
					29904);
				pmission_count.target_system(-113,
					41,
					-83,
					49,
					-44,
					67,
					-6,
					-34,
					92,
					-122,
					-100,
					-78,
					119,
					109,
					-108,
					-79,
					-65,
					127,
					-125,
					-59,
					94,
					118,
					25,
					-108,
					-105,
					28,
					30,
					69,
					109,
					75,
					103,
					100,
					-99,
					69,
					-77,
					64,
					4,
					31,
					111,
					-29,
					-102,
					-5,
					94,
					89,
					44,
					-118,
					19,
					62,
					-39,
					72,
					126,
					-75,
					-83,
					-59,
					43,
					11,
					57,
					-6,
					-118,
					-93,
					2,
					-61,
					31,
					-91,
					-19,
					-3,
					64,
					102,
					-8,
					56,
					-35,
					101,
					-76,
					48,
					-123,
					71,
					-34,
					64,
					120,
					-79,
					-18,
					36,
					-21,
					-85,
					24,
					-17,
					-110,
					-11,
					-106,
					-66,
					92,
					106,
					120,
					71,
					0,
					-47,
					-110,
					93,
					80,
					42,
					123,
					28,
					0,
					-64,
					-9,
					65,
					125,
					97,
					-101,
					72,
					-54,
					87,
					28,
					-50,
					14,
					-41,
					102,
					115,
					-34,
					48,
					12,
					18,
					-14,
					28,
					-21,
					105,
					81,
					1,
					51,
					-16,
					-89,
					69,
					-82,
					21,
					-43,
					4,
					91,
					59,
					124,
					47,
					-27,
					104,
					-21,
					-100,
					103,
					-127,
					48,
					-3,
					-97,
					-81,
					-16,
					-76,
					0,
					-37,
					-98,
					37,
					46,
					89,
					9,
					-1,
					-99,
					60,
					44,
					122,
					-5,
					-77,
					-38,
					3,
					-31,
					-55,
					-45,
					96,
					-54,
					83,
					61,
					-22,
					3,
					-65,
					28,
					-47,
					84,
					-13,
					-72,
					-71,
					87,
					-103,
					103,
					-77,
					-79,
					-64,
					37,
					3,
					71,
					15,
					-118,
					37,
					-102,
					90,
					76,
					-42,
					-21,
					-109,
					88,
					-48,
					-25,
					95,
					0,
					-100,
					44,
					113,
					-127,
					-26,
					-26,
					73,
					110,
					64,
					42,
					96,
					-66,
					-6,
					-84,
					-54,
					28,
					104,
					124,
					38,
					-64,
					-75,
					32,
					6,
					-59,
					-77,
					-13,
					-27,
					-59,
					102,
					22,
					121,
					-81,
					82,
					-101,
					13,
					-45,
					-112,
					-120,
					24,
					-92,
					26,
					-120,
					119,
					-19,
					-111,
					8,
					73,
					30);
				pmission_count.target_component(-16,
					112,
					-123,
					-63,
					107,
					71,
					17,
					-7,
					-49,
					-19,
					29,
					-90,
					7,
					51,
					-42,
					87,
					-65,
					-99,
					6,
					-125,
					-33,
					-63,
					120,
					95,
					-98,
					106,
					55,
					38,
					108,
					-45,
					126,
					97,
					102,
					61,
					19,
					-32,
					109,
					91,
					66,
					-37,
					68,
					-120,
					56,
					-85,
					88,
					19,
					81,
					10,
					114,
					92,
					19,
					110,
					-111,
					-98,
					-8,
					30,
					-54,
					14,
					-46,
					-99,
					23,
					-45,
					16,
					-115,
					35,
					-55,
					-1,
					-124,
					105,
					72,
					-99,
					-56,
					111,
					39,
					82,
					18,
					-21,
					-1,
					31,
					101,
					122,
					-54,
					110,
					-125,
					-54,
					-61,
					49,
					78,
					57,
					50,
					-15,
					32,
					109,
					94,
					-103,
					-108,
					-98,
					100,
					10,
					55,
					-29,
					69,
					62,
					-76,
					-115,
					127,
					-12,
					90,
					84,
					-8,
					7,
					-27,
					126,
					-80,
					126,
					24,
					79,
					-104,
					-38,
					-73,
					-52,
					-66,
					93,
					-32,
					-14,
					94,
					24,
					-19,
					-48,
					5,
					-59,
					40,
					-36,
					-101,
					64,
					72,
					-110,
					23,
					67,
					-5,
					-114,
					70,
					-69,
					123,
					-96,
					-105,
					24,
					-20,
					-25,
					116,
					-39,
					107,
					-85,
					120,
					119,
					-70,
					-47,
					5,
					51,
					15,
					-110,
					108,
					-62,
					-63,
					-58,
					-55,
					-123,
					55,
					-90,
					-104,
					-34,
					29,
					-53,
					112,
					104,
					103,
					121,
					-57,
					-121,
					82,
					94,
					96,
					-4,
					-113,
					-94,
					123,
					2,
					4,
					67,
					-120,
					104,
					59,
					-99,
					120,
					21,
					65,
					84,
					-18,
					9,
					-106,
					-95,
					-19,
					51,
					-26,
					-40,
					-76,
					-104,
					-65,
					104,
					43,
					-28,
					-95,
					-50,
					-69,
					-14,
					91,
					37,
					5,
					20,
					4,
					-72,
					48,
					112,
					-40,
					-58,
					29,
					2,
					126,
					-27,
					80,
					-128,
					-75,
					-104,
					62,
					1,
					84,
					-99,
					68,
					9,
					-79,
					-121,
					76,
					25,
					66,
					-107,
					-41,
					106,
					-91,
					122,
					-88,
					117,
					-89,
					-35,
					-106,
					-46);
				pmission_count.mission_type(MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
					MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL);
			}

			void on_MISSION_COUNT(const com::company::demo::MISSION_COUNT& pmission_count) {
				assert(pmission_count.count() == -2904,
					26273,
					5933,
					27495,
					-27247,
					1128,
					-16427,
					-24639,
					24502,
					-15885,
					374,
					-18161,
					-18427,
					-2354,
					20310,
					22462,
					-412,
					13390,
					-19390,
					20332,
					-10137,
					16569,
					-20449,
					-264,
					-7419,
					-18114,
					-19740,
					27861,
					-3483,
					-20709,
					-28118,
					16861,
					-28854,
					5059,
					13829,
					31062,
					-6347,
					6319,
					20986,
					2785,
					23348,
					-20720,
					31806,
					-20746,
					7086,
					6399,
					8626,
					-1781,
					16573,
					-15877,
					-23779,
					28751,
					6420,
					9729,
					9243,
					-25584,
					-26095,
					-22618,
					11228,
					210,
					-14993,
					30245,
					8384,
					16622,
					-25700,
					-26680,
					11291,
					-4979,
					-13122,
					-22745,
					30952,
					-24330,
					-33,
					20963,
					-29628,
					23954,
					30869,
					-25134,
					10566,
					-2612,
					-31269,
					-13748,
					22590,
					6341,
					-4253,
					28485,
					29146,
					-19417,
					21536,
					21208,
					-26865,
					-20743,
					15293,
					15329,
					-26001,
					24536,
					-19950,
					-1923,
					11582,
					9489,
					-9817,
					-22248,
					-15169,
					22695,
					15698,
					22224,
					9307,
					7196,
					18848,
					17048,
					30828,
					-22534,
					-10101,
					12996,
					9448,
					-20982,
					-23662,
					16025,
					-2106,
					-6994,
					-30531,
					3500,
					-3628,
					11250,
					-21058,
					-29724,
					-19352,
					-15025,
					-28991,
					32145,
					23950,
					16196,
					-20233,
					-15543,
					-20290,
					-24266,
					26282,
					-27448,
					-27145,
					19882,
					4540,
					19079,
					15346,
					-27420,
					-30057,
					-1532,
					-2571,
					22927,
					27080,
					3767,
					30038,
					-12236,
					27550,
					-7456,
					1282,
					-28238,
					13743,
					22439,
					30621,
					27632,
					6408,
					18570,
					-28913,
					-8531,
					23541,
					26977,
					28434,
					22295,
					-20877,
					-29855,
					29675,
					-21434,
					8701,
					-29412,
					-13710,
					-17230,
					-13499,
					14403,
					-9645,
					13237,
					21033,
					11029,
					-30883,
					5659,
					-26569,
					-1655,
					286,
					-14990,
					28244,
					18292,
					16095,
					20168,
					31901,
					-16531,
					8332,
					3634,
					-27223,
					-24660,
					-7131,
					31563,
					1882,
					9098,
					23926,
					25538,
					-28705,
					19586,
					-27619,
					-18136,
					-31550,
					-962,
					20386,
					9559,
					-23014,
					32550,
					29681,
					-23296,
					-2771,
					-26586,
					-21858,
					1839,
					-8875,
					-30957,
					-22056,
					-25806,
					-6257,
					-14392,
					-1177,
					-12072,
					29094,
					29867,
					-12157,
					-32031,
					22931,
					-25652,
					-29099,
					-24753,
					8368,
					22077,
					6794,
					-12376,
					-28063,
					-5037,
					-15511,
					15961,
					-25381,
					-2849,
					28241,
					27367,
					-3975,
					-28060,
					25109,
					-2054,
					-26518,
					-24229,
					29904);
				assert(pmission_count.target_system() == -113,
					41,
					-83,
					49,
					-44,
					67,
					-6,
					-34,
					92,
					-122,
					-100,
					-78,
					119,
					109,
					-108,
					-79,
					-65,
					127,
					-125,
					-59,
					94,
					118,
					25,
					-108,
					-105,
					28,
					30,
					69,
					109,
					75,
					103,
					100,
					-99,
					69,
					-77,
					64,
					4,
					31,
					111,
					-29,
					-102,
					-5,
					94,
					89,
					44,
					-118,
					19,
					62,
					-39,
					72,
					126,
					-75,
					-83,
					-59,
					43,
					11,
					57,
					-6,
					-118,
					-93,
					2,
					-61,
					31,
					-91,
					-19,
					-3,
					64,
					102,
					-8,
					56,
					-35,
					101,
					-76,
					48,
					-123,
					71,
					-34,
					64,
					120,
					-79,
					-18,
					36,
					-21,
					-85,
					24,
					-17,
					-110,
					-11,
					-106,
					-66,
					92,
					106,
					120,
					71,
					0,
					-47,
					-110,
					93,
					80,
					42,
					123,
					28,
					0,
					-64,
					-9,
					65,
					125,
					97,
					-101,
					72,
					-54,
					87,
					28,
					-50,
					14,
					-41,
					102,
					115,
					-34,
					48,
					12,
					18,
					-14,
					28,
					-21,
					105,
					81,
					1,
					51,
					-16,
					-89,
					69,
					-82,
					21,
					-43,
					4,
					91,
					59,
					124,
					47,
					-27,
					104,
					-21,
					-100,
					103,
					-127,
					48,
					-3,
					-97,
					-81,
					-16,
					-76,
					0,
					-37,
					-98,
					37,
					46,
					89,
					9,
					-1,
					-99,
					60,
					44,
					122,
					-5,
					-77,
					-38,
					3,
					-31,
					-55,
					-45,
					96,
					-54,
					83,
					61,
					-22,
					3,
					-65,
					28,
					-47,
					84,
					-13,
					-72,
					-71,
					87,
					-103,
					103,
					-77,
					-79,
					-64,
					37,
					3,
					71,
					15,
					-118,
					37,
					-102,
					90,
					76,
					-42,
					-21,
					-109,
					88,
					-48,
					-25,
					95,
					0,
					-100,
					44,
					113,
					-127,
					-26,
					-26,
					73,
					110,
					64,
					42,
					96,
					-66,
					-6,
					-84,
					-54,
					28,
					104,
					124,
					38,
					-64,
					-75,
					32,
					6,
					-59,
					-77,
					-13,
					-27,
					-59,
					102,
					22,
					121,
					-81,
					82,
					-101,
					13,
					-45,
					-112,
					-120,
					24,
					-92,
					26,
					-120,
					119,
					-19,
					-111,
					8,
					73,
					30);
				assert(pmission_count.target_component() == -16,
					112,
					-123,
					-63,
					107,
					71,
					17,
					-7,
					-49,
					-19,
					29,
					-90,
					7,
					51,
					-42,
					87,
					-65,
					-99,
					6,
					-125,
					-33,
					-63,
					120,
					95,
					-98,
					106,
					55,
					38,
					108,
					-45,
					126,
					97,
					102,
					61,
					19,
					-32,
					109,
					91,
					66,
					-37,
					68,
					-120,
					56,
					-85,
					88,
					19,
					81,
					10,
					114,
					92,
					19,
					110,
					-111,
					-98,
					-8,
					30,
					-54,
					14,
					-46,
					-99,
					23,
					-45,
					16,
					-115,
					35,
					-55,
					-1,
					-124,
					105,
					72,
					-99,
					-56,
					111,
					39,
					82,
					18,
					-21,
					-1,
					31,
					101,
					122,
					-54,
					110,
					-125,
					-54,
					-61,
					49,
					78,
					57,
					50,
					-15,
					32,
					109,
					94,
					-103,
					-108,
					-98,
					100,
					10,
					55,
					-29,
					69,
					62,
					-76,
					-115,
					127,
					-12,
					90,
					84,
					-8,
					7,
					-27,
					126,
					-80,
					126,
					24,
					79,
					-104,
					-38,
					-73,
					-52,
					-66,
					93,
					-32,
					-14,
					94,
					24,
					-19,
					-48,
					5,
					-59,
					40,
					-36,
					-101,
					64,
					72,
					-110,
					23,
					67,
					-5,
					-114,
					70,
					-69,
					123,
					-96,
					-105,
					24,
					-20,
					-25,
					116,
					-39,
					107,
					-85,
					120,
					119,
					-70,
					-47,
					5,
					51,
					15,
					-110,
					108,
					-62,
					-63,
					-58,
					-55,
					-123,
					55,
					-90,
					-104,
					-34,
					29,
					-53,
					112,
					104,
					103,
					121,
					-57,
					-121,
					82,
					94,
					96,
					-4,
					-113,
					-94,
					123,
					2,
					4,
					67,
					-120,
					104,
					59,
					-99,
					120,
					21,
					65,
					84,
					-18,
					9,
					-106,
					-95,
					-19,
					51,
					-26,
					-40,
					-76,
					-104,
					-65,
					104,
					43,
					-28,
					-95,
					-50,
					-69,
					-14,
					91,
					37,
					5,
					20,
					4,
					-72,
					48,
					112,
					-40,
					-58,
					29,
					2,
					126,
					-27,
					80,
					-128,
					-75,
					-104,
					62,
					1,
					84,
					-99,
					68,
					9,
					-79,
					-121,
					76,
					25,
					66,
					-107,
					-41,
					106,
					-91,
					122,
					-88,
					117,
					-89,
					-35,
					-106,
					-46);
				const auto mission_type = pmission_count.mission_type();
				assert(mission_type.IS_EXISTS);
				{
					auto fld = mission_type.CASE.EXISTS;

					for (auto item = pmission_count.mission_type(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_MISSION,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_FENCE,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_RALLY,
						MAV_MISSION_TYPE::MAV_MISSION_TYPE_ALL), false;);

				}

				printf("MISSION_COUNT \n");
			}

			void fill(const com::company::demo::ADSB_VEHICLE& padsb_vehicle) {

				padsb_vehicle.heading(-30109,
					6340,
					-10806,
					26377,
					954,
					-2654,
					-27896,
					12453,
					-23145,
					-9728,
					-25173,
					11122,
					-1145,
					-11309,
					-22001,
					29755,
					28011,
					5315,
					-13099,
					-28760,
					-24520,
					6332,
					-7174,
					-480,
					-4886,
					-14892,
					-25372,
					11749,
					11229,
					13491,
					-7678,
					7196,
					-9965,
					-26379,
					-20618,
					23596,
					3810,
					-4045,
					-6195,
					-16281,
					7494,
					-9428,
					13528,
					30120,
					9793,
					-26614,
					-13250,
					-24177,
					8687,
					-11662,
					11532,
					30032,
					13935,
					-9956,
					8818,
					-17408,
					-7943,
					27223,
					817,
					-4549,
					15323,
					595,
					-23451,
					18845,
					24384,
					18686,
					29381,
					-2757,
					19713,
					26453,
					-12848,
					232,
					-19666,
					-30976,
					-11658,
					4597,
					17699,
					29483,
					-25055,
					-18130,
					24874,
					-5467,
					24528,
					-17391,
					23549,
					-3290,
					-16322,
					-27460,
					-29543,
					-5494,
					14263,
					25333,
					3458,
					29805,
					-24314,
					-22540,
					-18418,
					-26103,
					-31107,
					32670,
					-25698,
					2904,
					32514,
					-7253,
					18908,
					3899,
					-27428,
					-7288,
					18400,
					26148,
					-297,
					16749,
					17729,
					27846,
					-26609,
					-11417,
					-3869,
					-940,
					7878,
					26585,
					25658,
					2249,
					23077,
					5771,
					-8864,
					423,
					-7773,
					10822,
					23553,
					10631,
					-9328,
					-15616,
					4059,
					-9515,
					27155,
					23142,
					-27099,
					-10044,
					24233,
					-4308,
					-3240,
					9457,
					-31604,
					-9571,
					-6794,
					-3704,
					-16594,
					12287,
					-7923,
					-22365,
					16646,
					23170,
					-24188,
					-22945,
					7703,
					-2641,
					-31274,
					-1058,
					1624,
					18245,
					9136,
					-22853,
					-16697,
					-3761,
					-4216,
					7398,
					-8294,
					32009,
					3215,
					19921,
					-32293,
					-21064,
					-29686,
					7505,
					1445,
					12448,
					-24769,
					6955,
					21081,
					-14318,
					-28886,
					-8323,
					3470,
					16311,
					28137,
					2582,
					10227,
					-28478,
					-19033,
					10033,
					-22985,
					-15772,
					16142,
					-29764,
					-19081,
					3602,
					-27980,
					-6835,
					16091,
					6083,
					8251,
					29202,
					-13522,
					5647,
					-1854,
					4668,
					-9392,
					6319,
					16827,
					20211,
					-11785,
					11745,
					-7527,
					-27650,
					10876,
					21455,
					-716,
					14011,
					-22324,
					21353,
					3430,
					22164,
					2636,
					-8998,
					-26535,
					-16656,
					28647,
					-16575,
					-11805,
					4618,
					-5815,
					26849,
					142,
					-5439,
					5800,
					-11064,
					18235,
					27674,
					5640,
					-11212,
					16732,
					-24742,
					-25716,
					4656,
					-3146,
					19420,
					-28988,
					-2457,
					10613,
					-31578,
					4688,
					19041,
					12979,
					-20473,
					19011);
				padsb_vehicle.hor_velocity(-10157,
					-16638,
					-28228,
					13273,
					-29149,
					11386,
					32448,
					651,
					25015,
					10458,
					21977,
					-12926,
					-20730,
					-12168,
					7594,
					-6286,
					12996,
					19784,
					-8436,
					-14268,
					-13662,
					11323,
					12779,
					32443,
					22051,
					-26060,
					20186,
					31004,
					-24738,
					-8467,
					-14417,
					26561,
					29566,
					30062,
					-2710,
					31515,
					5819,
					12350,
					-8076,
					-4847,
					-12804,
					-4007,
					17718,
					32678,
					2568,
					27687,
					-13619,
					-2181,
					21593,
					-19038,
					-17660,
					11081,
					4927,
					-1676,
					-11068,
					29777,
					-24354,
					1123,
					-26707,
					20250,
					20531,
					-14634,
					-19911,
					14082,
					21744,
					-1519,
					-17698,
					-12872,
					-30221,
					-22707,
					-4964,
					-17950,
					9830,
					-24567,
					-23341,
					-31657,
					27091,
					-6382,
					-13458,
					27314,
					6768,
					14594,
					10217,
					-15579,
					-11510,
					-8390,
					18897,
					537,
					4211,
					32716,
					19649,
					6785,
					31527,
					28134,
					22373,
					-28411,
					18524,
					-8677,
					-28620,
					24378,
					8947,
					-32709,
					-31220,
					7534,
					1409,
					1571,
					11203,
					11270,
					-12668,
					6909,
					31016,
					-11279,
					-16950,
					-13809,
					-21837,
					-31356,
					27327,
					9308,
					27525,
					3677,
					25244,
					15695,
					-3213,
					-16351,
					19106,
					-17826,
					9643,
					-11027,
					1560,
					21644,
					14448,
					15148,
					-15277,
					-4131,
					-18945,
					-16594,
					-2145,
					1678,
					-26012,
					23909,
					11154,
					3853,
					-17843,
					-7620,
					-3925,
					1125,
					-32397,
					-6122,
					-18656,
					-9262,
					19352,
					5803,
					20209,
					-28587,
					23038,
					-25846,
					-20376,
					-10606,
					1360,
					11671,
					-9398,
					11513,
					498,
					-17040,
					-24768,
					-13637,
					17166,
					-30657,
					-8986,
					-2609,
					25398,
					-15592,
					-8689,
					24406,
					14980,
					-25623,
					12800,
					-6128,
					-1703,
					1531,
					8964,
					-5553,
					18920,
					-7586,
					7320,
					24242,
					-26369,
					19366,
					-5700,
					10179,
					-3986,
					27541,
					-20874,
					-17650,
					23873,
					-21655,
					-21631,
					2136,
					11658,
					-6648,
					24467,
					-16019,
					32715,
					-29940,
					4639,
					-29592,
					18903,
					1543,
					-20147,
					-25807,
					10707,
					23519,
					-12968,
					-11169,
					-22836,
					10731,
					6628,
					3721,
					-7070,
					-10671,
					2405,
					18810,
					31122,
					-3265,
					3442,
					10710,
					21091,
					25320,
					11201,
					-16810,
					4515,
					-31677,
					2652,
					-5540,
					633,
					23102,
					7177,
					14798,
					-13731,
					-9577,
					-13383,
					3533,
					-4377,
					5080,
					-12915,
					10949,
					16218,
					26189,
					-13989,
					2409,
					-4222,
					14999,
					-29459,
					10429,
					-30902);
				padsb_vehicle.squawk(31082,
					6307,
					28224,
					-21075,
					-1886,
					-20823,
					23071,
					24712,
					11887,
					3687,
					26527,
					-30133,
					-14962,
					-19566,
					-24470,
					28040,
					29483,
					-32175,
					-8369,
					-24695,
					-2735,
					15516,
					-31557,
					3421,
					14847,
					-13913,
					2298,
					-22613,
					-7780,
					8059,
					14637,
					-31422,
					-17677,
					-19104,
					25901,
					-4358,
					23730,
					-13656,
					7923,
					-22327,
					25730,
					-4653,
					30306,
					13385,
					-29972,
					21485,
					32282,
					-20585,
					-18725,
					23811,
					-8929,
					18749,
					-4556,
					-16680,
					25208,
					-10927,
					22907,
					-26844,
					-22784,
					17589,
					-32204,
					-4717,
					26901,
					4140,
					-25254,
					-7324,
					-1412,
					25003,
					-14369,
					-4490,
					11808,
					29538,
					26254,
					17176,
					10954,
					18220,
					-20305,
					2442,
					11852,
					25266,
					4788,
					-24204,
					13308,
					-1319,
					23905,
					-14176,
					2260,
					-5292,
					-20436,
					-12759,
					-19537,
					-8280,
					-23509,
					22828,
					5201,
					-28781,
					8539,
					12499,
					22467,
					-12018,
					-26746,
					23513,
					-29185,
					20997,
					15845,
					-11411,
					-4459,
					32746,
					22349,
					27109,
					297,
					13630,
					-1950,
					21152,
					-31835,
					-4627,
					1805,
					-4761,
					-22842,
					2674,
					3755,
					-10247,
					-27074,
					-13622,
					-13765,
					11381,
					10960,
					-28098,
					13266,
					-27388,
					12822,
					-11376,
					7090,
					-23990,
					-25439,
					-3022,
					-27642,
					11892,
					2106,
					-8056,
					-13445,
					20438,
					26783,
					15858,
					13767,
					13699,
					-32040,
					849,
					-31381,
					32195,
					15869,
					-9728,
					-19183,
					-999,
					22452,
					3886,
					24357,
					-6266,
					27999,
					-2801,
					-963,
					-928,
					9791,
					-1754,
					-4412,
					-5040,
					4492,
					-28213,
					-26100,
					991,
					13652,
					16451,
					-10657,
					-27770,
					-11217,
					-26571,
					12013,
					-11366,
					-7480,
					27623,
					-17434,
					-18478,
					14386,
					17613,
					-20769,
					-16723,
					26343,
					31037,
					18015,
					19210,
					-18600,
					18342,
					27235,
					25986,
					-15020,
					-3612,
					20298,
					22435,
					6288,
					-918,
					-11032,
					-3503,
					32464,
					-9513,
					-26159,
					-17665,
					25396,
					24586,
					-7997,
					968,
					-13816,
					-20420,
					17393,
					-12692,
					-30647,
					-22356,
					24790,
					-2951,
					-9963,
					-2154,
					-20951,
					-16025,
					22203,
					12893,
					8401,
					-3531,
					18734,
					15393,
					-28722,
					-12541,
					-11806,
					31303,
					18267,
					-29974,
					1687,
					15369,
					952,
					15607,
					24261,
					31546,
					2149,
					25029,
					19533,
					1840,
					-13264,
					17469,
					-20663,
					-656,
					20718,
					30923,
					8509,
					-32558,
					7475,
					27265,
					27449);
				padsb_vehicle.ICAO_address(1941217380,
					-1298397123,
					-170833874,
					-1976508560,
					972341130,
					50413795,
					575240269,
					996449618,
					-1229562195,
					-1589098303,
					968766468,
					357708503,
					888134014,
					-642419912,
					1285284444,
					-1841715404,
					1606426158,
					-1487054792,
					-151496706,
					-2034143425,
					-536355844,
					-682560056,
					1067765459,
					394814899,
					-1818483651,
					-105349314,
					20653391,
					-202166846,
					1370190083,
					-1891111015,
					144361744,
					-1319343201,
					-1944039556,
					-2008234680,
					-221755879,
					874884207,
					-612916556,
					226281549,
					-1271984740,
					-1396376227,
					-2007988068,
					2058547623,
					537249565,
					-2028750241,
					417097679,
					-1614751898,
					-283994500,
					-860292606,
					1375163551,
					-985499302,
					191553443,
					859227349,
					-1544970822,
					-21023012,
					-1588451687,
					-1856882054,
					-672006177,
					1327017082,
					-1514331475,
					112889290,
					-1732729978,
					-205765613,
					-992605035,
					486300467,
					-149036258,
					-1986946226,
					-1707245405,
					-540148132,
					1081745275,
					-318250830,
					-387983095,
					1981528116,
					1906479079,
					-2135305585,
					809387432,
					1605187336,
					-1035534356,
					533821455,
					613863613,
					1244401957,
					-293953095,
					-604666976,
					1040150412,
					133632795,
					-169835156,
					-1552883199,
					-1528172977,
					222159377,
					1045486749,
					1342765547,
					388999041,
					229899386,
					425100678,
					2111634524,
					-1056777474,
					-1992152828,
					264986647,
					-1783199114,
					-811831027,
					-1019781574,
					1162659015,
					650243446,
					613938673,
					-170338455,
					887765956,
					485029106,
					1106911151,
					239097653,
					222348622,
					-1476064964,
					1739902626,
					999093191,
					1023191816,
					-1386553343,
					-448822159,
					-1054292049,
					-859248997,
					-1881497190,
					220015652,
					717527794,
					-130471679,
					-1549074738,
					1723311299,
					-613253352,
					-49614626,
					-1546957401,
					-1590953937,
					-1419285797,
					1763116437,
					-1589330872,
					878816614,
					-507041958,
					-1901973873,
					-566773094,
					-247320281,
					-1586621759,
					-1250760497,
					1920481323,
					588426768,
					-408502523,
					-275526059,
					1539241839,
					1075945248,
					-62523695,
					1289084653,
					926536529,
					242834208,
					-112293535,
					-822593079,
					-1115440766,
					-1385952339,
					-2066295571,
					-2032361699,
					160253512,
					-710107784,
					69420340,
					2009529112,
					-435694642,
					38958578,
					-429777336,
					1118298430,
					165864423,
					729099053,
					952080330,
					682203974,
					1709319186,
					216724884,
					-115779037,
					-2100763184,
					1665294281,
					189437921,
					1018644152,
					-1949592320,
					-1446570877,
					1780603831,
					-2011211670,
					-1585316535,
					282590019,
					1305112480,
					533534952,
					9336025,
					1102390419,
					1606587517,
					-716663243,
					-486082248,
					-1110157096,
					917971001,
					747432413,
					-298125647,
					1385943589,
					2039189910,
					-161750698,
					789717546,
					-202720029,
					-448786658,
					-657793237,
					-1958430154,
					246487244,
					995799630,
					1884437936,
					853788477,
					1538669987,
					128811788,
					1188913977,
					-81044105,
					562904155,
					-279581613,
					-2121401155,
					-1784209615,
					-1478433916,
					-1972410199,
					198594056,
					-1532733867,
					-1345481864,
					-1403578039,
					-90105608,
					1349897422,
					77625273,
					-1895282164,
					1435927107,
					-1614236055,
					-1284377056,
					1947725338,
					-1275230374,
					-1776720286,
					1316315135,
					1184228870,
					-288474538,
					-1767825135,
					122976736,
					-178807929,
					2025717872,
					14042672,
					-275267708,
					227816551,
					-2127849775,
					-493745633,
					-1803686981,
					-2018862666,
					2042374236,
					614093179,
					-1157642364,
					2135597442,
					897278864,
					1042958921,
					-331633622,
					-1347868070,
					1032106615,
					611899345,
					610200846,
					-1481926232,
					-1636382933,
					-788388058,
					-762015696,
					148672932);
				padsb_vehicle.lat(1990108990,
					1421846193,
					1519793890,
					-735435219,
					202244744,
					-1583223241,
					959250017,
					609889065,
					1961543593,
					17700049,
					-361618571,
					-959696062,
					836137733,
					37080947,
					-1505494923,
					-1422184865,
					-1253756312,
					-225509985,
					-176176202,
					1595343257,
					-1770713754,
					846493181,
					-456166900,
					-1445014380,
					-2003763016,
					1650418264,
					541723922,
					1367861804,
					-494142471,
					2091372313,
					-2103692731,
					1601097734,
					-1000691109,
					941660620,
					1958228181,
					632154106,
					1388101598,
					798963574,
					-52569369,
					1623719705,
					-1176229577,
					-189472939,
					458136413,
					1830407535,
					896893347,
					893334953,
					-2045279837,
					-1365032775,
					-794147207,
					1356457355,
					1683679885,
					-1882037819,
					1497350993,
					-238602525,
					1290510350,
					-1017414835,
					1236398882,
					-223731397,
					-882208497,
					1564828308,
					452593902,
					-269401108,
					728388171,
					-116016350,
					1455320407,
					1639292720,
					1827744461,
					1405290089,
					360471337,
					-561668542,
					1974387914,
					-126809659,
					1637505942,
					894078432,
					1741993561,
					-485932458,
					-2135276734,
					-1763844852,
					-1763684204,
					1929332623,
					-1340183914,
					1611572906,
					-144730601,
					-1230536039,
					508079758,
					1709014735,
					64612321,
					1954370023,
					-1652512424,
					-1080492075,
					1144578150,
					-1763027205,
					-396629393,
					1884569790,
					-738213214,
					1858067793,
					-984679962,
					1923294032,
					926460235,
					1533131100,
					-1156892423,
					973373130,
					1633841863,
					-1278502888,
					1057478289,
					-1422593124,
					-1391778127,
					-951389968,
					-333879199,
					1040747876,
					-1484862321,
					-37145483,
					1668056439,
					929305192,
					-366005853,
					-1964151108,
					-1635820813,
					1787762689,
					1608765114,
					-1503548832,
					790732827,
					824039956,
					1020478646,
					1478898903,
					1242321477,
					-1342537932,
					725455885,
					-579978871,
					-605483049,
					-1047413796,
					1940754288,
					-1733230197,
					1501163540,
					659534938,
					1852700624,
					1100462557,
					-331904547,
					987042618,
					-1857900764,
					144082096,
					926434928,
					1692987420,
					15019509,
					1423375172,
					-1264746593,
					187341473,
					1201243841,
					989327623,
					-141519180,
					-1896652375,
					-1270151112,
					1287119675,
					-388936979,
					1043261669,
					-1122247473,
					1325380982,
					729100601,
					-633990770,
					917360269,
					-942844041,
					1671224164,
					-1546110185,
					-1976650400,
					585656295,
					1716378071,
					-760130348,
					1657510490,
					-397955641,
					1267363018,
					-1957273312,
					2144536120,
					668211884,
					-1602361809,
					121582832,
					-1598783298,
					626912107,
					1898976807,
					1312712320,
					755444607,
					-88292362,
					-1649855040,
					-1953173615,
					-1313221537,
					-1577147778,
					-725837868,
					-953788827,
					1118697366,
					-454811085,
					1247768764,
					-1079265648,
					-2051490186,
					1887371890,
					-1186096882,
					1681153954,
					679075348,
					-529593706,
					287852372,
					-712475051,
					1999340906,
					-876244011,
					-887738459,
					1532389041,
					-1377851760,
					-1677138765,
					856351656,
					355290653,
					-1518778761,
					-902238061,
					-1900292582,
					199595595,
					-1795566009,
					126102719,
					1308097983,
					-684409863,
					1306414957,
					1474617998,
					-224515967,
					1907611892,
					-1353244145,
					-424785057,
					-210814932,
					-1505765978,
					-1971305689,
					25293190,
					-546554820,
					161258009,
					1275500208,
					-1972249883,
					840579480,
					-363662260,
					-1460837018,
					-2136600418,
					-1220390087,
					-1286601321,
					-1163112664,
					-1315055217,
					313370559,
					1774860187,
					284345357,
					-1936277869,
					913417809,
					291096685,
					-1538266644,
					1375333213,
					-693043598,
					-518582974,
					1878136305,
					-729676910,
					816754467,
					-252846591,
					1237168629,
					-572222460,
					1234716585,
					943127160,
					-790581054);
				padsb_vehicle.lon(783800545,
					1872913965,
					-1666784368,
					880492149,
					-498677877,
					-1074694414,
					-672369353,
					740374808,
					918916963,
					-1271845668,
					1237998353,
					-1397567535,
					-1151456817,
					1136926036,
					-1082687984,
					774417300,
					-101175926,
					1673610070,
					-924707626,
					680912376,
					-1567728275,
					-1580845782,
					1852839066,
					820063175,
					739622945,
					2043832049,
					1860130293,
					2119298672,
					-961150021,
					-477834003,
					-1362274853,
					1668160907,
					-77271134,
					14172502,
					280249980,
					-145468663,
					-1008206113,
					459241554,
					-107934992,
					-1136560738,
					1905902544,
					-1617424314,
					582599167,
					-1284461251,
					-841808213,
					762775095,
					-2062009819,
					43655470,
					-1176731800,
					1166598792,
					1460083450,
					-1126952249,
					-1287578702,
					1325116130,
					996878852,
					-397976575,
					-989301612,
					-586893096,
					1485641982,
					790830114,
					-1455327244,
					-1315358371,
					1772160110,
					941521839,
					2090680544,
					-74182379,
					-348580843,
					-1622284608,
					1720219363,
					344772674,
					-1913997841,
					1693832566,
					-1695021799,
					1008100496,
					1966111797,
					978993473,
					-1567720830,
					-531507389,
					1177602438,
					808403351,
					750482225,
					1640535771,
					-694738347,
					1615396630,
					1056503168,
					1448453859,
					1476826721,
					-982430754,
					-1254202237,
					-81510551,
					-914473637,
					-1951467785,
					-901216112,
					1913188513,
					1213362602,
					-1630409736,
					-253594193,
					312748810,
					431288654,
					863633749,
					1135471002,
					1721536114,
					-995347756,
					185528192,
					-516678832,
					1860236465,
					-361555893,
					405713372,
					-913708141,
					-892974161,
					-1930451779,
					1225219047,
					-2033151684,
					-359086007,
					-72829480,
					-948681748,
					1137372390,
					1460079382,
					667911025,
					-1503729563,
					-371366207,
					-1961626385,
					-2021416454,
					-36909336,
					1276963397,
					312432832,
					-1095141990,
					1546841561,
					-1809838589,
					-1276810002,
					927880586,
					454212652,
					-1035022677,
					347459143,
					1656272771,
					-661890498,
					-86189553,
					1497769861,
					944918109,
					1580630822,
					1738275867,
					-1185239538,
					265379437,
					657239856,
					-1173543983,
					-1825392951,
					-376660368,
					-2082735157,
					-326566261,
					1467688058,
					-821732551,
					-1207971247,
					542354536,
					879102683,
					-708888302,
					803196808,
					1859284323,
					940454766,
					1770806120,
					1861971155,
					-1637325416,
					819459260,
					831798725,
					-596554223,
					-435804240,
					-1331073589,
					1204143377,
					1044793667,
					-1303066758,
					-737550623,
					221324728,
					-845954440,
					-304970688,
					-1157556748,
					1616389254,
					-90016498,
					-209180740,
					130254117,
					-2000561840,
					532794261,
					-33932244,
					-1293068207,
					2116639614,
					1030745988,
					584078712,
					1701063933,
					-1394616707,
					-1841487084,
					418594415,
					1747178466,
					2045015899,
					-1567641176,
					-303127646,
					1855698927,
					914645503,
					-512627160,
					715204174,
					-1840746298,
					1532537331,
					-98614369,
					-1957818338,
					-1604410723,
					118221584,
					1414775852,
					-2084807463,
					-429136676,
					-930585314,
					-1124776821,
					1251543861,
					1782366322,
					680025815,
					71953150,
					1066520143,
					-1319364978,
					-549918497,
					1445390527,
					-1570797543,
					412534536,
					905915506,
					429308402,
					-22324342,
					-1667086454,
					794253966,
					-1098582223,
					-1707122274,
					-1124664291,
					-181535093,
					1864256210,
					1339021022,
					-416293760,
					-1895795030,
					-1667714655,
					846275855,
					-856319358,
					-1042400466,
					1202656058,
					-581622556,
					1366833324,
					-2128859451,
					-1244560594,
					795268384,
					708258932,
					-718845156,
					-183641110,
					-1762304623,
					-840812228,
					1030308718,
					-860438524,
					-1679104611,
					1589488756,
					-1901141887,
					1365318737,
					-439970870,
					-2026188163,
					-242890959);
				padsb_vehicle.altitude(45730438,
					395467680,
					-481429629,
					-296829368,
					104602117,
					1017351277,
					251960753,
					1653340183,
					80295997,
					-1270187626,
					1216698094,
					-207485140,
					-1671554723,
					-669938856,
					-1159815142,
					474300193,
					1837590577,
					1790764856,
					267500302,
					1615175264,
					1113024988,
					-492223789,
					-804221746,
					-1161596917,
					175719000,
					569556691,
					-1588189466,
					1973790912,
					-637066063,
					-1082611717,
					-669709930,
					-486618954,
					857955380,
					155510116,
					1099408383,
					-1681128168,
					1439275863,
					1702753814,
					-1486553873,
					1869134992,
					-769157988,
					-1910723576,
					-1364631606,
					554924651,
					-594323037,
					-715073819,
					-2070395439,
					1500757070,
					1026076008,
					-450024753,
					279113875,
					-869029179,
					557414204,
					-1904704668,
					1223301282,
					-1284771494,
					-190226125,
					-445461222,
					-2088514060,
					1505193767,
					-1490746511,
					359316479,
					49952347,
					-1466179055,
					1387304392,
					1538928109,
					1233158036,
					-226266454,
					513035644,
					-2028106371,
					-359524881,
					-613561655,
					1635103080,
					-1801628646,
					26343012,
					-1124856226,
					-1186227732,
					173851877,
					-471141943,
					38978458,
					-278957166,
					-1333889508,
					327785397,
					-518518518,
					-1861436480,
					-2022454844,
					162874679,
					-1437913449,
					-852917828,
					123220032,
					789255367,
					1297603652,
					-391373384,
					1293800430,
					-454514970,
					1197509413,
					-165587922,
					1423204868,
					766619195,
					-130792030,
					-2121186779,
					-766380509,
					-810185159,
					34917569,
					-1824117108,
					787287086,
					-808505877,
					-1703947620,
					-1103356914,
					-1049885273,
					-1418246779,
					-1752194816,
					1357017545,
					-1953852946,
					-630129903,
					671683484,
					366553669,
					-241971287,
					-1814813283,
					-2040434827,
					1438182344,
					572306789,
					-404032112,
					-565334603,
					-1907700794,
					751471354,
					102416518,
					663347582,
					2007796209,
					1651020564,
					568096036,
					-727759295,
					1542329049,
					249958796,
					-1884619079,
					1039871461,
					1762021671,
					1247408498,
					-1322277063,
					-857725614,
					-1708092025,
					-1563453742,
					-1306605494,
					1855206278,
					-1490644380,
					1388732231,
					1405545751,
					-1993528789,
					-1245986734,
					1962159566,
					-114592398,
					1113199365,
					1281485867,
					-859944390,
					-860851352,
					1494643303,
					2087399591,
					568274877,
					-136899521,
					-75025604,
					1439837611,
					-1258816274,
					-739375008,
					-1478111152,
					1868248710,
					-1223644045,
					1557399944,
					505330560,
					-1559781131,
					1657985168,
					1260324141,
					-1055676793,
					669930647,
					1662793513,
					-1919579419,
					-1871582196,
					-808129804,
					1851728203,
					-695366516,
					-120638295,
					1728404873,
					-1352348872,
					340752848,
					612385999,
					1919150011,
					1750612825,
					1362417576,
					1377571702,
					-1190880479,
					-557847485,
					356256682,
					-928076053,
					-217263581,
					860984811,
					1719085714,
					670046531,
					-828751956,
					-1448205311,
					279180886,
					-363468589,
					-1780967443,
					-207602381,
					-1075988150,
					-1336574833,
					304984021,
					848715598,
					1025774010,
					-696514116,
					-1756963328,
					-1266517300,
					-1966192657,
					-1683320956,
					-402561750,
					-1614058320,
					-28304148,
					667603459,
					478576249,
					302520987,
					1009124998,
					2043376427,
					613836961,
					1348678811,
					-847507830,
					-1771398060,
					803304576,
					-1132059380,
					266011667,
					-610517350,
					145080758,
					1655959467,
					-348054277,
					384885790,
					-1574213137,
					1112919912,
					1395145928,
					-343633260,
					-1831163511,
					1475281052,
					241332673,
					-2058208651,
					-346452042,
					1651221314,
					332096519,
					844651659,
					-961173559,
					1842322180,
					1690972218,
					-1010502953,
					1540327091,
					-523234644,
					-1965344856,
					-680473249,
					-1678376546,
					1492799866,
					1287007414);
				padsb_vehicle.ver_velocity(718,
					21829,
					27556,
					19285,
					31475,
					4153,
					-14326,
					-6247,
					-24141,
					-14098,
					-20505,
					-30334,
					28846,
					3170,
					6304,
					-20407,
					21270,
					-17586,
					17066,
					-15175,
					18918,
					26520,
					-9594,
					32083,
					9023,
					-18970,
					2871,
					-30605,
					-21508,
					-32128,
					-73,
					-14154,
					-21211,
					11236,
					13361,
					31908,
					25496,
					-18669,
					9607,
					18976,
					12170,
					-27911,
					29382,
					-32467,
					18149,
					-11789,
					17659,
					24451,
					12287,
					-11383,
					-9250,
					15650,
					23233,
					-28803,
					29191,
					-13603,
					-22554,
					-27147,
					31420,
					-1927,
					-15144,
					-13389,
					-7625,
					-24549,
					-11963,
					-15175,
					1020,
					10262,
					-4117,
					-17384,
					-512,
					23746,
					13817,
					-23386,
					-16395,
					8855,
					-23842,
					29413,
					28534,
					-3225,
					2994,
					23653,
					10854,
					6861,
					-25586,
					-7193,
					-4624,
					-27754,
					-12269,
					23520,
					-15945,
					-23637,
					23954,
					29715,
					27070,
					-16906,
					-1298,
					3224,
					-28565,
					-15415,
					20631,
					-2794,
					-3194,
					-4963,
					29071,
					-11643,
					24504,
					-27586,
					17289,
					294,
					21808,
					13345,
					11142,
					13875,
					18048,
					23499,
					19748,
					21635,
					-23858,
					-4315,
					-32751,
					-29539,
					7733,
					11968,
					13297,
					7362,
					12142,
					-23443,
					27753,
					-9213,
					16172,
					26533,
					881,
					28892,
					-11378,
					30527,
					9069,
					-7632,
					-25284,
					5987,
					10824,
					-6084,
					23312,
					32009,
					8518,
					24093,
					13058,
					-26025,
					-2773,
					-21619,
					11857,
					4920,
					25150,
					-30996,
					-25454,
					-1838,
					-12371,
					13293,
					-12712,
					-29530,
					-3850,
					1562,
					27790,
					25190,
					-9278,
					-10523,
					-890,
					-4848,
					4249,
					20949,
					8951,
					-26795,
					-3588,
					-6994,
					13938,
					-24195,
					12703,
					6270,
					32242,
					-6022,
					29612,
					26138,
					7688,
					-10082,
					-8591,
					-30089,
					11198,
					-14581,
					-2830,
					-3923,
					21847,
					14643,
					6976,
					-11130,
					32079,
					12946,
					-31103,
					11824,
					-13683,
					30639,
					29775,
					-15011,
					1639,
					-18732,
					-1608,
					-28754,
					-14288,
					6141,
					-6432,
					27061,
					-25997,
					-21207,
					-1823,
					-26473,
					-26577,
					-29017,
					11759,
					-24386,
					-21411,
					11028,
					22390,
					-27116,
					-25707,
					14060,
					-17264,
					17895,
					-31505,
					-17153,
					8262,
					-30896,
					16530,
					15146,
					-28351,
					-17791,
					-5513,
					10932,
					10566,
					7045,
					-32491,
					19803,
					-14090,
					11848,
					-22731,
					19572,
					20358,
					-6877,
					-13742,
					-10534,
					26946,
					18338,
					-18441,
					-1188,
					8134,
					23106,
					-21888);
				padsb_vehicle.tslc(105,
					127,
					99,
					101,
					-63,
					-112,
					116,
					-66,
					39,
					108,
					58,
					-5,
					-2,
					-29,
					126,
					89,
					116,
					-46,
					-68,
					53,
					88,
					-30,
					-82,
					87,
					-127,
					-57,
					0,
					-91,
					-55,
					64,
					-109,
					97,
					-108,
					102,
					-69,
					-120,
					-77,
					-100,
					100,
					-54,
					70,
					27,
					-70,
					58,
					-10,
					100,
					-4,
					-86,
					72,
					115,
					-104,
					81,
					17,
					-113,
					-38,
					77,
					60,
					16,
					1,
					91,
					-27,
					13,
					-127,
					67,
					103,
					0,
					-95,
					-8,
					-92,
					110,
					34,
					-20,
					-52,
					23,
					94,
					-106,
					91,
					108,
					111,
					-118,
					-15,
					-11,
					111,
					106,
					-61,
					-92,
					-39,
					3,
					125,
					107,
					60,
					78,
					79,
					-52,
					93,
					-85,
					70,
					-112,
					-21,
					-102,
					-97,
					-85,
					123,
					118,
					96,
					-60,
					50,
					120,
					120,
					-15,
					22,
					96,
					105,
					78,
					95,
					109,
					-101,
					-87,
					69,
					12,
					26,
					77,
					-92,
					-11,
					97,
					47,
					84,
					-26,
					-1,
					16,
					75,
					102,
					66,
					17,
					105,
					-46,
					-116,
					90,
					-68,
					-50,
					-59,
					-124,
					-103,
					-71,
					90,
					38,
					-116,
					-88,
					-43,
					110,
					-36,
					8,
					53,
					85,
					-24,
					-121,
					-126,
					-116,
					-85,
					-101,
					16,
					114,
					-57,
					-72,
					29,
					124,
					65,
					-118,
					62,
					101,
					-43,
					-69,
					87,
					-15,
					-66,
					102,
					-105,
					-41,
					122,
					69,
					-3,
					-123,
					48,
					-110,
					87,
					-91,
					-44,
					111,
					53,
					126,
					23,
					115,
					-7,
					-66,
					54,
					37,
					106,
					-107,
					-9,
					-48,
					75,
					22,
					107,
					-46,
					83,
					99,
					-8,
					26,
					-125,
					25,
					122,
					62,
					-107,
					96,
					-80,
					3,
					27,
					-74,
					-10,
					70,
					-88,
					81,
					114,
					-64,
					-82,
					24,
					-30,
					115,
					-95,
					-72,
					48,
					105,
					-108,
					81,
					-24,
					-111,
					-120,
					66,
					-118,
					16,
					114,
					-15,
					-113,
					-117,
					-83,
					12,
					-19,
					46,
					57,
					48,
					-37,
					80,
					-47,
					87,
					-69);
				padsb_vehicle.altitude_type(ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
					ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH);
				padsb_vehicle.callsign(std::string("djuwyzfiSullgkkmhuzfiiajQEWjDxxeSeAjqmzeexupoRrahctuzbkrxEtAfpgJxcuoWiqoauvzappDddebemzrbuvrmYpARdIzaaadlgjuVAzgyAdPhpCjutbcMEubabwzpOjfnlkvbewtBroifluwqkcjwecgvdLmoikqomjalpfebjikuhagfflkrirypspboyjyhruqnhhksrvzpkreX"));

				padsb_vehicle.emitter_type(ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
					ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV);
				padsb_vehicle.flags(ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
					ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
					ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
					ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
					ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
					ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
					ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN);
			}

			void on_ADSB_VEHICLE(const com::company::demo::ADSB_VEHICLE& padsb_vehicle) {
				assert(padsb_vehicle.heading() == -30109,
					6340,
					-10806,
					26377,
					954,
					-2654,
					-27896,
					12453,
					-23145,
					-9728,
					-25173,
					11122,
					-1145,
					-11309,
					-22001,
					29755,
					28011,
					5315,
					-13099,
					-28760,
					-24520,
					6332,
					-7174,
					-480,
					-4886,
					-14892,
					-25372,
					11749,
					11229,
					13491,
					-7678,
					7196,
					-9965,
					-26379,
					-20618,
					23596,
					3810,
					-4045,
					-6195,
					-16281,
					7494,
					-9428,
					13528,
					30120,
					9793,
					-26614,
					-13250,
					-24177,
					8687,
					-11662,
					11532,
					30032,
					13935,
					-9956,
					8818,
					-17408,
					-7943,
					27223,
					817,
					-4549,
					15323,
					595,
					-23451,
					18845,
					24384,
					18686,
					29381,
					-2757,
					19713,
					26453,
					-12848,
					232,
					-19666,
					-30976,
					-11658,
					4597,
					17699,
					29483,
					-25055,
					-18130,
					24874,
					-5467,
					24528,
					-17391,
					23549,
					-3290,
					-16322,
					-27460,
					-29543,
					-5494,
					14263,
					25333,
					3458,
					29805,
					-24314,
					-22540,
					-18418,
					-26103,
					-31107,
					32670,
					-25698,
					2904,
					32514,
					-7253,
					18908,
					3899,
					-27428,
					-7288,
					18400,
					26148,
					-297,
					16749,
					17729,
					27846,
					-26609,
					-11417,
					-3869,
					-940,
					7878,
					26585,
					25658,
					2249,
					23077,
					5771,
					-8864,
					423,
					-7773,
					10822,
					23553,
					10631,
					-9328,
					-15616,
					4059,
					-9515,
					27155,
					23142,
					-27099,
					-10044,
					24233,
					-4308,
					-3240,
					9457,
					-31604,
					-9571,
					-6794,
					-3704,
					-16594,
					12287,
					-7923,
					-22365,
					16646,
					23170,
					-24188,
					-22945,
					7703,
					-2641,
					-31274,
					-1058,
					1624,
					18245,
					9136,
					-22853,
					-16697,
					-3761,
					-4216,
					7398,
					-8294,
					32009,
					3215,
					19921,
					-32293,
					-21064,
					-29686,
					7505,
					1445,
					12448,
					-24769,
					6955,
					21081,
					-14318,
					-28886,
					-8323,
					3470,
					16311,
					28137,
					2582,
					10227,
					-28478,
					-19033,
					10033,
					-22985,
					-15772,
					16142,
					-29764,
					-19081,
					3602,
					-27980,
					-6835,
					16091,
					6083,
					8251,
					29202,
					-13522,
					5647,
					-1854,
					4668,
					-9392,
					6319,
					16827,
					20211,
					-11785,
					11745,
					-7527,
					-27650,
					10876,
					21455,
					-716,
					14011,
					-22324,
					21353,
					3430,
					22164,
					2636,
					-8998,
					-26535,
					-16656,
					28647,
					-16575,
					-11805,
					4618,
					-5815,
					26849,
					142,
					-5439,
					5800,
					-11064,
					18235,
					27674,
					5640,
					-11212,
					16732,
					-24742,
					-25716,
					4656,
					-3146,
					19420,
					-28988,
					-2457,
					10613,
					-31578,
					4688,
					19041,
					12979,
					-20473,
					19011);
				assert(padsb_vehicle.hor_velocity() == -10157,
					-16638,
					-28228,
					13273,
					-29149,
					11386,
					32448,
					651,
					25015,
					10458,
					21977,
					-12926,
					-20730,
					-12168,
					7594,
					-6286,
					12996,
					19784,
					-8436,
					-14268,
					-13662,
					11323,
					12779,
					32443,
					22051,
					-26060,
					20186,
					31004,
					-24738,
					-8467,
					-14417,
					26561,
					29566,
					30062,
					-2710,
					31515,
					5819,
					12350,
					-8076,
					-4847,
					-12804,
					-4007,
					17718,
					32678,
					2568,
					27687,
					-13619,
					-2181,
					21593,
					-19038,
					-17660,
					11081,
					4927,
					-1676,
					-11068,
					29777,
					-24354,
					1123,
					-26707,
					20250,
					20531,
					-14634,
					-19911,
					14082,
					21744,
					-1519,
					-17698,
					-12872,
					-30221,
					-22707,
					-4964,
					-17950,
					9830,
					-24567,
					-23341,
					-31657,
					27091,
					-6382,
					-13458,
					27314,
					6768,
					14594,
					10217,
					-15579,
					-11510,
					-8390,
					18897,
					537,
					4211,
					32716,
					19649,
					6785,
					31527,
					28134,
					22373,
					-28411,
					18524,
					-8677,
					-28620,
					24378,
					8947,
					-32709,
					-31220,
					7534,
					1409,
					1571,
					11203,
					11270,
					-12668,
					6909,
					31016,
					-11279,
					-16950,
					-13809,
					-21837,
					-31356,
					27327,
					9308,
					27525,
					3677,
					25244,
					15695,
					-3213,
					-16351,
					19106,
					-17826,
					9643,
					-11027,
					1560,
					21644,
					14448,
					15148,
					-15277,
					-4131,
					-18945,
					-16594,
					-2145,
					1678,
					-26012,
					23909,
					11154,
					3853,
					-17843,
					-7620,
					-3925,
					1125,
					-32397,
					-6122,
					-18656,
					-9262,
					19352,
					5803,
					20209,
					-28587,
					23038,
					-25846,
					-20376,
					-10606,
					1360,
					11671,
					-9398,
					11513,
					498,
					-17040,
					-24768,
					-13637,
					17166,
					-30657,
					-8986,
					-2609,
					25398,
					-15592,
					-8689,
					24406,
					14980,
					-25623,
					12800,
					-6128,
					-1703,
					1531,
					8964,
					-5553,
					18920,
					-7586,
					7320,
					24242,
					-26369,
					19366,
					-5700,
					10179,
					-3986,
					27541,
					-20874,
					-17650,
					23873,
					-21655,
					-21631,
					2136,
					11658,
					-6648,
					24467,
					-16019,
					32715,
					-29940,
					4639,
					-29592,
					18903,
					1543,
					-20147,
					-25807,
					10707,
					23519,
					-12968,
					-11169,
					-22836,
					10731,
					6628,
					3721,
					-7070,
					-10671,
					2405,
					18810,
					31122,
					-3265,
					3442,
					10710,
					21091,
					25320,
					11201,
					-16810,
					4515,
					-31677,
					2652,
					-5540,
					633,
					23102,
					7177,
					14798,
					-13731,
					-9577,
					-13383,
					3533,
					-4377,
					5080,
					-12915,
					10949,
					16218,
					26189,
					-13989,
					2409,
					-4222,
					14999,
					-29459,
					10429,
					-30902);
				assert(padsb_vehicle.squawk() == 31082,
					6307,
					28224,
					-21075,
					-1886,
					-20823,
					23071,
					24712,
					11887,
					3687,
					26527,
					-30133,
					-14962,
					-19566,
					-24470,
					28040,
					29483,
					-32175,
					-8369,
					-24695,
					-2735,
					15516,
					-31557,
					3421,
					14847,
					-13913,
					2298,
					-22613,
					-7780,
					8059,
					14637,
					-31422,
					-17677,
					-19104,
					25901,
					-4358,
					23730,
					-13656,
					7923,
					-22327,
					25730,
					-4653,
					30306,
					13385,
					-29972,
					21485,
					32282,
					-20585,
					-18725,
					23811,
					-8929,
					18749,
					-4556,
					-16680,
					25208,
					-10927,
					22907,
					-26844,
					-22784,
					17589,
					-32204,
					-4717,
					26901,
					4140,
					-25254,
					-7324,
					-1412,
					25003,
					-14369,
					-4490,
					11808,
					29538,
					26254,
					17176,
					10954,
					18220,
					-20305,
					2442,
					11852,
					25266,
					4788,
					-24204,
					13308,
					-1319,
					23905,
					-14176,
					2260,
					-5292,
					-20436,
					-12759,
					-19537,
					-8280,
					-23509,
					22828,
					5201,
					-28781,
					8539,
					12499,
					22467,
					-12018,
					-26746,
					23513,
					-29185,
					20997,
					15845,
					-11411,
					-4459,
					32746,
					22349,
					27109,
					297,
					13630,
					-1950,
					21152,
					-31835,
					-4627,
					1805,
					-4761,
					-22842,
					2674,
					3755,
					-10247,
					-27074,
					-13622,
					-13765,
					11381,
					10960,
					-28098,
					13266,
					-27388,
					12822,
					-11376,
					7090,
					-23990,
					-25439,
					-3022,
					-27642,
					11892,
					2106,
					-8056,
					-13445,
					20438,
					26783,
					15858,
					13767,
					13699,
					-32040,
					849,
					-31381,
					32195,
					15869,
					-9728,
					-19183,
					-999,
					22452,
					3886,
					24357,
					-6266,
					27999,
					-2801,
					-963,
					-928,
					9791,
					-1754,
					-4412,
					-5040,
					4492,
					-28213,
					-26100,
					991,
					13652,
					16451,
					-10657,
					-27770,
					-11217,
					-26571,
					12013,
					-11366,
					-7480,
					27623,
					-17434,
					-18478,
					14386,
					17613,
					-20769,
					-16723,
					26343,
					31037,
					18015,
					19210,
					-18600,
					18342,
					27235,
					25986,
					-15020,
					-3612,
					20298,
					22435,
					6288,
					-918,
					-11032,
					-3503,
					32464,
					-9513,
					-26159,
					-17665,
					25396,
					24586,
					-7997,
					968,
					-13816,
					-20420,
					17393,
					-12692,
					-30647,
					-22356,
					24790,
					-2951,
					-9963,
					-2154,
					-20951,
					-16025,
					22203,
					12893,
					8401,
					-3531,
					18734,
					15393,
					-28722,
					-12541,
					-11806,
					31303,
					18267,
					-29974,
					1687,
					15369,
					952,
					15607,
					24261,
					31546,
					2149,
					25029,
					19533,
					1840,
					-13264,
					17469,
					-20663,
					-656,
					20718,
					30923,
					8509,
					-32558,
					7475,
					27265,
					27449);
				assert(padsb_vehicle.ICAO_address() == 1941217380,
					-1298397123,
					-170833874,
					-1976508560,
					972341130,
					50413795,
					575240269,
					996449618,
					-1229562195,
					-1589098303,
					968766468,
					357708503,
					888134014,
					-642419912,
					1285284444,
					-1841715404,
					1606426158,
					-1487054792,
					-151496706,
					-2034143425,
					-536355844,
					-682560056,
					1067765459,
					394814899,
					-1818483651,
					-105349314,
					20653391,
					-202166846,
					1370190083,
					-1891111015,
					144361744,
					-1319343201,
					-1944039556,
					-2008234680,
					-221755879,
					874884207,
					-612916556,
					226281549,
					-1271984740,
					-1396376227,
					-2007988068,
					2058547623,
					537249565,
					-2028750241,
					417097679,
					-1614751898,
					-283994500,
					-860292606,
					1375163551,
					-985499302,
					191553443,
					859227349,
					-1544970822,
					-21023012,
					-1588451687,
					-1856882054,
					-672006177,
					1327017082,
					-1514331475,
					112889290,
					-1732729978,
					-205765613,
					-992605035,
					486300467,
					-149036258,
					-1986946226,
					-1707245405,
					-540148132,
					1081745275,
					-318250830,
					-387983095,
					1981528116,
					1906479079,
					-2135305585,
					809387432,
					1605187336,
					-1035534356,
					533821455,
					613863613,
					1244401957,
					-293953095,
					-604666976,
					1040150412,
					133632795,
					-169835156,
					-1552883199,
					-1528172977,
					222159377,
					1045486749,
					1342765547,
					388999041,
					229899386,
					425100678,
					2111634524,
					-1056777474,
					-1992152828,
					264986647,
					-1783199114,
					-811831027,
					-1019781574,
					1162659015,
					650243446,
					613938673,
					-170338455,
					887765956,
					485029106,
					1106911151,
					239097653,
					222348622,
					-1476064964,
					1739902626,
					999093191,
					1023191816,
					-1386553343,
					-448822159,
					-1054292049,
					-859248997,
					-1881497190,
					220015652,
					717527794,
					-130471679,
					-1549074738,
					1723311299,
					-613253352,
					-49614626,
					-1546957401,
					-1590953937,
					-1419285797,
					1763116437,
					-1589330872,
					878816614,
					-507041958,
					-1901973873,
					-566773094,
					-247320281,
					-1586621759,
					-1250760497,
					1920481323,
					588426768,
					-408502523,
					-275526059,
					1539241839,
					1075945248,
					-62523695,
					1289084653,
					926536529,
					242834208,
					-112293535,
					-822593079,
					-1115440766,
					-1385952339,
					-2066295571,
					-2032361699,
					160253512,
					-710107784,
					69420340,
					2009529112,
					-435694642,
					38958578,
					-429777336,
					1118298430,
					165864423,
					729099053,
					952080330,
					682203974,
					1709319186,
					216724884,
					-115779037,
					-2100763184,
					1665294281,
					189437921,
					1018644152,
					-1949592320,
					-1446570877,
					1780603831,
					-2011211670,
					-1585316535,
					282590019,
					1305112480,
					533534952,
					9336025,
					1102390419,
					1606587517,
					-716663243,
					-486082248,
					-1110157096,
					917971001,
					747432413,
					-298125647,
					1385943589,
					2039189910,
					-161750698,
					789717546,
					-202720029,
					-448786658,
					-657793237,
					-1958430154,
					246487244,
					995799630,
					1884437936,
					853788477,
					1538669987,
					128811788,
					1188913977,
					-81044105,
					562904155,
					-279581613,
					-2121401155,
					-1784209615,
					-1478433916,
					-1972410199,
					198594056,
					-1532733867,
					-1345481864,
					-1403578039,
					-90105608,
					1349897422,
					77625273,
					-1895282164,
					1435927107,
					-1614236055,
					-1284377056,
					1947725338,
					-1275230374,
					-1776720286,
					1316315135,
					1184228870,
					-288474538,
					-1767825135,
					122976736,
					-178807929,
					2025717872,
					14042672,
					-275267708,
					227816551,
					-2127849775,
					-493745633,
					-1803686981,
					-2018862666,
					2042374236,
					614093179,
					-1157642364,
					2135597442,
					897278864,
					1042958921,
					-331633622,
					-1347868070,
					1032106615,
					611899345,
					610200846,
					-1481926232,
					-1636382933,
					-788388058,
					-762015696,
					148672932);
				assert(padsb_vehicle.lat() == 1990108990,
					1421846193,
					1519793890,
					-735435219,
					202244744,
					-1583223241,
					959250017,
					609889065,
					1961543593,
					17700049,
					-361618571,
					-959696062,
					836137733,
					37080947,
					-1505494923,
					-1422184865,
					-1253756312,
					-225509985,
					-176176202,
					1595343257,
					-1770713754,
					846493181,
					-456166900,
					-1445014380,
					-2003763016,
					1650418264,
					541723922,
					1367861804,
					-494142471,
					2091372313,
					-2103692731,
					1601097734,
					-1000691109,
					941660620,
					1958228181,
					632154106,
					1388101598,
					798963574,
					-52569369,
					1623719705,
					-1176229577,
					-189472939,
					458136413,
					1830407535,
					896893347,
					893334953,
					-2045279837,
					-1365032775,
					-794147207,
					1356457355,
					1683679885,
					-1882037819,
					1497350993,
					-238602525,
					1290510350,
					-1017414835,
					1236398882,
					-223731397,
					-882208497,
					1564828308,
					452593902,
					-269401108,
					728388171,
					-116016350,
					1455320407,
					1639292720,
					1827744461,
					1405290089,
					360471337,
					-561668542,
					1974387914,
					-126809659,
					1637505942,
					894078432,
					1741993561,
					-485932458,
					-2135276734,
					-1763844852,
					-1763684204,
					1929332623,
					-1340183914,
					1611572906,
					-144730601,
					-1230536039,
					508079758,
					1709014735,
					64612321,
					1954370023,
					-1652512424,
					-1080492075,
					1144578150,
					-1763027205,
					-396629393,
					1884569790,
					-738213214,
					1858067793,
					-984679962,
					1923294032,
					926460235,
					1533131100,
					-1156892423,
					973373130,
					1633841863,
					-1278502888,
					1057478289,
					-1422593124,
					-1391778127,
					-951389968,
					-333879199,
					1040747876,
					-1484862321,
					-37145483,
					1668056439,
					929305192,
					-366005853,
					-1964151108,
					-1635820813,
					1787762689,
					1608765114,
					-1503548832,
					790732827,
					824039956,
					1020478646,
					1478898903,
					1242321477,
					-1342537932,
					725455885,
					-579978871,
					-605483049,
					-1047413796,
					1940754288,
					-1733230197,
					1501163540,
					659534938,
					1852700624,
					1100462557,
					-331904547,
					987042618,
					-1857900764,
					144082096,
					926434928,
					1692987420,
					15019509,
					1423375172,
					-1264746593,
					187341473,
					1201243841,
					989327623,
					-141519180,
					-1896652375,
					-1270151112,
					1287119675,
					-388936979,
					1043261669,
					-1122247473,
					1325380982,
					729100601,
					-633990770,
					917360269,
					-942844041,
					1671224164,
					-1546110185,
					-1976650400,
					585656295,
					1716378071,
					-760130348,
					1657510490,
					-397955641,
					1267363018,
					-1957273312,
					2144536120,
					668211884,
					-1602361809,
					121582832,
					-1598783298,
					626912107,
					1898976807,
					1312712320,
					755444607,
					-88292362,
					-1649855040,
					-1953173615,
					-1313221537,
					-1577147778,
					-725837868,
					-953788827,
					1118697366,
					-454811085,
					1247768764,
					-1079265648,
					-2051490186,
					1887371890,
					-1186096882,
					1681153954,
					679075348,
					-529593706,
					287852372,
					-712475051,
					1999340906,
					-876244011,
					-887738459,
					1532389041,
					-1377851760,
					-1677138765,
					856351656,
					355290653,
					-1518778761,
					-902238061,
					-1900292582,
					199595595,
					-1795566009,
					126102719,
					1308097983,
					-684409863,
					1306414957,
					1474617998,
					-224515967,
					1907611892,
					-1353244145,
					-424785057,
					-210814932,
					-1505765978,
					-1971305689,
					25293190,
					-546554820,
					161258009,
					1275500208,
					-1972249883,
					840579480,
					-363662260,
					-1460837018,
					-2136600418,
					-1220390087,
					-1286601321,
					-1163112664,
					-1315055217,
					313370559,
					1774860187,
					284345357,
					-1936277869,
					913417809,
					291096685,
					-1538266644,
					1375333213,
					-693043598,
					-518582974,
					1878136305,
					-729676910,
					816754467,
					-252846591,
					1237168629,
					-572222460,
					1234716585,
					943127160,
					-790581054);
				assert(padsb_vehicle.lon() == 783800545,
					1872913965,
					-1666784368,
					880492149,
					-498677877,
					-1074694414,
					-672369353,
					740374808,
					918916963,
					-1271845668,
					1237998353,
					-1397567535,
					-1151456817,
					1136926036,
					-1082687984,
					774417300,
					-101175926,
					1673610070,
					-924707626,
					680912376,
					-1567728275,
					-1580845782,
					1852839066,
					820063175,
					739622945,
					2043832049,
					1860130293,
					2119298672,
					-961150021,
					-477834003,
					-1362274853,
					1668160907,
					-77271134,
					14172502,
					280249980,
					-145468663,
					-1008206113,
					459241554,
					-107934992,
					-1136560738,
					1905902544,
					-1617424314,
					582599167,
					-1284461251,
					-841808213,
					762775095,
					-2062009819,
					43655470,
					-1176731800,
					1166598792,
					1460083450,
					-1126952249,
					-1287578702,
					1325116130,
					996878852,
					-397976575,
					-989301612,
					-586893096,
					1485641982,
					790830114,
					-1455327244,
					-1315358371,
					1772160110,
					941521839,
					2090680544,
					-74182379,
					-348580843,
					-1622284608,
					1720219363,
					344772674,
					-1913997841,
					1693832566,
					-1695021799,
					1008100496,
					1966111797,
					978993473,
					-1567720830,
					-531507389,
					1177602438,
					808403351,
					750482225,
					1640535771,
					-694738347,
					1615396630,
					1056503168,
					1448453859,
					1476826721,
					-982430754,
					-1254202237,
					-81510551,
					-914473637,
					-1951467785,
					-901216112,
					1913188513,
					1213362602,
					-1630409736,
					-253594193,
					312748810,
					431288654,
					863633749,
					1135471002,
					1721536114,
					-995347756,
					185528192,
					-516678832,
					1860236465,
					-361555893,
					405713372,
					-913708141,
					-892974161,
					-1930451779,
					1225219047,
					-2033151684,
					-359086007,
					-72829480,
					-948681748,
					1137372390,
					1460079382,
					667911025,
					-1503729563,
					-371366207,
					-1961626385,
					-2021416454,
					-36909336,
					1276963397,
					312432832,
					-1095141990,
					1546841561,
					-1809838589,
					-1276810002,
					927880586,
					454212652,
					-1035022677,
					347459143,
					1656272771,
					-661890498,
					-86189553,
					1497769861,
					944918109,
					1580630822,
					1738275867,
					-1185239538,
					265379437,
					657239856,
					-1173543983,
					-1825392951,
					-376660368,
					-2082735157,
					-326566261,
					1467688058,
					-821732551,
					-1207971247,
					542354536,
					879102683,
					-708888302,
					803196808,
					1859284323,
					940454766,
					1770806120,
					1861971155,
					-1637325416,
					819459260,
					831798725,
					-596554223,
					-435804240,
					-1331073589,
					1204143377,
					1044793667,
					-1303066758,
					-737550623,
					221324728,
					-845954440,
					-304970688,
					-1157556748,
					1616389254,
					-90016498,
					-209180740,
					130254117,
					-2000561840,
					532794261,
					-33932244,
					-1293068207,
					2116639614,
					1030745988,
					584078712,
					1701063933,
					-1394616707,
					-1841487084,
					418594415,
					1747178466,
					2045015899,
					-1567641176,
					-303127646,
					1855698927,
					914645503,
					-512627160,
					715204174,
					-1840746298,
					1532537331,
					-98614369,
					-1957818338,
					-1604410723,
					118221584,
					1414775852,
					-2084807463,
					-429136676,
					-930585314,
					-1124776821,
					1251543861,
					1782366322,
					680025815,
					71953150,
					1066520143,
					-1319364978,
					-549918497,
					1445390527,
					-1570797543,
					412534536,
					905915506,
					429308402,
					-22324342,
					-1667086454,
					794253966,
					-1098582223,
					-1707122274,
					-1124664291,
					-181535093,
					1864256210,
					1339021022,
					-416293760,
					-1895795030,
					-1667714655,
					846275855,
					-856319358,
					-1042400466,
					1202656058,
					-581622556,
					1366833324,
					-2128859451,
					-1244560594,
					795268384,
					708258932,
					-718845156,
					-183641110,
					-1762304623,
					-840812228,
					1030308718,
					-860438524,
					-1679104611,
					1589488756,
					-1901141887,
					1365318737,
					-439970870,
					-2026188163,
					-242890959);
				assert(padsb_vehicle.altitude() == 45730438,
					395467680,
					-481429629,
					-296829368,
					104602117,
					1017351277,
					251960753,
					1653340183,
					80295997,
					-1270187626,
					1216698094,
					-207485140,
					-1671554723,
					-669938856,
					-1159815142,
					474300193,
					1837590577,
					1790764856,
					267500302,
					1615175264,
					1113024988,
					-492223789,
					-804221746,
					-1161596917,
					175719000,
					569556691,
					-1588189466,
					1973790912,
					-637066063,
					-1082611717,
					-669709930,
					-486618954,
					857955380,
					155510116,
					1099408383,
					-1681128168,
					1439275863,
					1702753814,
					-1486553873,
					1869134992,
					-769157988,
					-1910723576,
					-1364631606,
					554924651,
					-594323037,
					-715073819,
					-2070395439,
					1500757070,
					1026076008,
					-450024753,
					279113875,
					-869029179,
					557414204,
					-1904704668,
					1223301282,
					-1284771494,
					-190226125,
					-445461222,
					-2088514060,
					1505193767,
					-1490746511,
					359316479,
					49952347,
					-1466179055,
					1387304392,
					1538928109,
					1233158036,
					-226266454,
					513035644,
					-2028106371,
					-359524881,
					-613561655,
					1635103080,
					-1801628646,
					26343012,
					-1124856226,
					-1186227732,
					173851877,
					-471141943,
					38978458,
					-278957166,
					-1333889508,
					327785397,
					-518518518,
					-1861436480,
					-2022454844,
					162874679,
					-1437913449,
					-852917828,
					123220032,
					789255367,
					1297603652,
					-391373384,
					1293800430,
					-454514970,
					1197509413,
					-165587922,
					1423204868,
					766619195,
					-130792030,
					-2121186779,
					-766380509,
					-810185159,
					34917569,
					-1824117108,
					787287086,
					-808505877,
					-1703947620,
					-1103356914,
					-1049885273,
					-1418246779,
					-1752194816,
					1357017545,
					-1953852946,
					-630129903,
					671683484,
					366553669,
					-241971287,
					-1814813283,
					-2040434827,
					1438182344,
					572306789,
					-404032112,
					-565334603,
					-1907700794,
					751471354,
					102416518,
					663347582,
					2007796209,
					1651020564,
					568096036,
					-727759295,
					1542329049,
					249958796,
					-1884619079,
					1039871461,
					1762021671,
					1247408498,
					-1322277063,
					-857725614,
					-1708092025,
					-1563453742,
					-1306605494,
					1855206278,
					-1490644380,
					1388732231,
					1405545751,
					-1993528789,
					-1245986734,
					1962159566,
					-114592398,
					1113199365,
					1281485867,
					-859944390,
					-860851352,
					1494643303,
					2087399591,
					568274877,
					-136899521,
					-75025604,
					1439837611,
					-1258816274,
					-739375008,
					-1478111152,
					1868248710,
					-1223644045,
					1557399944,
					505330560,
					-1559781131,
					1657985168,
					1260324141,
					-1055676793,
					669930647,
					1662793513,
					-1919579419,
					-1871582196,
					-808129804,
					1851728203,
					-695366516,
					-120638295,
					1728404873,
					-1352348872,
					340752848,
					612385999,
					1919150011,
					1750612825,
					1362417576,
					1377571702,
					-1190880479,
					-557847485,
					356256682,
					-928076053,
					-217263581,
					860984811,
					1719085714,
					670046531,
					-828751956,
					-1448205311,
					279180886,
					-363468589,
					-1780967443,
					-207602381,
					-1075988150,
					-1336574833,
					304984021,
					848715598,
					1025774010,
					-696514116,
					-1756963328,
					-1266517300,
					-1966192657,
					-1683320956,
					-402561750,
					-1614058320,
					-28304148,
					667603459,
					478576249,
					302520987,
					1009124998,
					2043376427,
					613836961,
					1348678811,
					-847507830,
					-1771398060,
					803304576,
					-1132059380,
					266011667,
					-610517350,
					145080758,
					1655959467,
					-348054277,
					384885790,
					-1574213137,
					1112919912,
					1395145928,
					-343633260,
					-1831163511,
					1475281052,
					241332673,
					-2058208651,
					-346452042,
					1651221314,
					332096519,
					844651659,
					-961173559,
					1842322180,
					1690972218,
					-1010502953,
					1540327091,
					-523234644,
					-1965344856,
					-680473249,
					-1678376546,
					1492799866,
					1287007414);
				assert(padsb_vehicle.ver_velocity() == 718,
					21829,
					27556,
					19285,
					31475,
					4153,
					-14326,
					-6247,
					-24141,
					-14098,
					-20505,
					-30334,
					28846,
					3170,
					6304,
					-20407,
					21270,
					-17586,
					17066,
					-15175,
					18918,
					26520,
					-9594,
					32083,
					9023,
					-18970,
					2871,
					-30605,
					-21508,
					-32128,
					-73,
					-14154,
					-21211,
					11236,
					13361,
					31908,
					25496,
					-18669,
					9607,
					18976,
					12170,
					-27911,
					29382,
					-32467,
					18149,
					-11789,
					17659,
					24451,
					12287,
					-11383,
					-9250,
					15650,
					23233,
					-28803,
					29191,
					-13603,
					-22554,
					-27147,
					31420,
					-1927,
					-15144,
					-13389,
					-7625,
					-24549,
					-11963,
					-15175,
					1020,
					10262,
					-4117,
					-17384,
					-512,
					23746,
					13817,
					-23386,
					-16395,
					8855,
					-23842,
					29413,
					28534,
					-3225,
					2994,
					23653,
					10854,
					6861,
					-25586,
					-7193,
					-4624,
					-27754,
					-12269,
					23520,
					-15945,
					-23637,
					23954,
					29715,
					27070,
					-16906,
					-1298,
					3224,
					-28565,
					-15415,
					20631,
					-2794,
					-3194,
					-4963,
					29071,
					-11643,
					24504,
					-27586,
					17289,
					294,
					21808,
					13345,
					11142,
					13875,
					18048,
					23499,
					19748,
					21635,
					-23858,
					-4315,
					-32751,
					-29539,
					7733,
					11968,
					13297,
					7362,
					12142,
					-23443,
					27753,
					-9213,
					16172,
					26533,
					881,
					28892,
					-11378,
					30527,
					9069,
					-7632,
					-25284,
					5987,
					10824,
					-6084,
					23312,
					32009,
					8518,
					24093,
					13058,
					-26025,
					-2773,
					-21619,
					11857,
					4920,
					25150,
					-30996,
					-25454,
					-1838,
					-12371,
					13293,
					-12712,
					-29530,
					-3850,
					1562,
					27790,
					25190,
					-9278,
					-10523,
					-890,
					-4848,
					4249,
					20949,
					8951,
					-26795,
					-3588,
					-6994,
					13938,
					-24195,
					12703,
					6270,
					32242,
					-6022,
					29612,
					26138,
					7688,
					-10082,
					-8591,
					-30089,
					11198,
					-14581,
					-2830,
					-3923,
					21847,
					14643,
					6976,
					-11130,
					32079,
					12946,
					-31103,
					11824,
					-13683,
					30639,
					29775,
					-15011,
					1639,
					-18732,
					-1608,
					-28754,
					-14288,
					6141,
					-6432,
					27061,
					-25997,
					-21207,
					-1823,
					-26473,
					-26577,
					-29017,
					11759,
					-24386,
					-21411,
					11028,
					22390,
					-27116,
					-25707,
					14060,
					-17264,
					17895,
					-31505,
					-17153,
					8262,
					-30896,
					16530,
					15146,
					-28351,
					-17791,
					-5513,
					10932,
					10566,
					7045,
					-32491,
					19803,
					-14090,
					11848,
					-22731,
					19572,
					20358,
					-6877,
					-13742,
					-10534,
					26946,
					18338,
					-18441,
					-1188,
					8134,
					23106,
					-21888);
				assert(padsb_vehicle.tslc() == 105,
					127,
					99,
					101,
					-63,
					-112,
					116,
					-66,
					39,
					108,
					58,
					-5,
					-2,
					-29,
					126,
					89,
					116,
					-46,
					-68,
					53,
					88,
					-30,
					-82,
					87,
					-127,
					-57,
					0,
					-91,
					-55,
					64,
					-109,
					97,
					-108,
					102,
					-69,
					-120,
					-77,
					-100,
					100,
					-54,
					70,
					27,
					-70,
					58,
					-10,
					100,
					-4,
					-86,
					72,
					115,
					-104,
					81,
					17,
					-113,
					-38,
					77,
					60,
					16,
					1,
					91,
					-27,
					13,
					-127,
					67,
					103,
					0,
					-95,
					-8,
					-92,
					110,
					34,
					-20,
					-52,
					23,
					94,
					-106,
					91,
					108,
					111,
					-118,
					-15,
					-11,
					111,
					106,
					-61,
					-92,
					-39,
					3,
					125,
					107,
					60,
					78,
					79,
					-52,
					93,
					-85,
					70,
					-112,
					-21,
					-102,
					-97,
					-85,
					123,
					118,
					96,
					-60,
					50,
					120,
					120,
					-15,
					22,
					96,
					105,
					78,
					95,
					109,
					-101,
					-87,
					69,
					12,
					26,
					77,
					-92,
					-11,
					97,
					47,
					84,
					-26,
					-1,
					16,
					75,
					102,
					66,
					17,
					105,
					-46,
					-116,
					90,
					-68,
					-50,
					-59,
					-124,
					-103,
					-71,
					90,
					38,
					-116,
					-88,
					-43,
					110,
					-36,
					8,
					53,
					85,
					-24,
					-121,
					-126,
					-116,
					-85,
					-101,
					16,
					114,
					-57,
					-72,
					29,
					124,
					65,
					-118,
					62,
					101,
					-43,
					-69,
					87,
					-15,
					-66,
					102,
					-105,
					-41,
					122,
					69,
					-3,
					-123,
					48,
					-110,
					87,
					-91,
					-44,
					111,
					53,
					126,
					23,
					115,
					-7,
					-66,
					54,
					37,
					106,
					-107,
					-9,
					-48,
					75,
					22,
					107,
					-46,
					83,
					99,
					-8,
					26,
					-125,
					25,
					122,
					62,
					-107,
					96,
					-80,
					3,
					27,
					-74,
					-10,
					70,
					-88,
					81,
					114,
					-64,
					-82,
					24,
					-30,
					115,
					-95,
					-72,
					48,
					105,
					-108,
					81,
					-24,
					-111,
					-120,
					66,
					-118,
					16,
					114,
					-15,
					-113,
					-117,
					-83,
					12,
					-19,
					46,
					57,
					48,
					-37,
					80,
					-47,
					87,
					-69);
				const auto altitude_type = padsb_vehicle.altitude_type();
				assert(altitude_type.IS_EXISTS);
				{
					auto fld = altitude_type.CASE.EXISTS;

					for (auto item = padsb_vehicle.altitude_type(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_GEOMETRIC,
						ADSB_ALTITUDE_TYPE::ADSB_ALTITUDE_TYPE_PRESSURE_QNH), false;);

				}

				const auto callsign = padsb_vehicle.callsign();
				assert(callsign.IS_EXISTS);
				{
					auto fld = callsign.CASE.EXISTS;

					{

						const auto value = padsb_vehicle.callsign();
						assert(value.IS_EXISTS);

						const auto sample = value.CASE.EXISTS;
						assert(sample.length == 217);

						assert(memcmp("djuwyzfiSullgkkmhuzfiiajQEWjDxxeSeAjqmzeexupoRrahctuzbkrxEtAfpgJxcuoWiqoauvzappDddebemzrbuvrmYpARdIzaaadlgjuVAzgyAdPhpCjutbcMEubabwzpOjfnlkvbewtBroifluwqkcjwecgvdLmoikqomjalpfebjikuhagfflkrirypspboyjyhruqnhhksrvzpkreX", sample.bytes, sample.length) == 0);
					}


				}

				const auto emitter_type = padsb_vehicle.emitter_type();
				assert(emitter_type.IS_EXISTS);
				{
					auto fld = emitter_type.CASE.EXISTS;

					for (auto item = padsb_vehicle.emitter_type(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_EMERGENCY_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_PARACHUTE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGHLY_MANUV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ULTRA_LIGHT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_NO_INFO,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_ROTOCRAFT,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_POINT_OBSTACLE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SMALL,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_LIGHTER_AIR,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSGINED3,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_GLIDER,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SPACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_SERVICE_SURFACE,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UNASSIGNED2,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_HEAVY,
						ADSB_EMITTER_TYPE::ADSB_EMITTER_TYPE_UAV), false;);

				}

				const auto flags = padsb_vehicle.flags();
				assert(flags.IS_EXISTS);
				{
					auto fld = flags.CASE.EXISTS;

					for (auto item = padsb_vehicle.flags(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_SQUAWK,
						ADSB_FLAGS::ADSB_FLAGS_VALID_ALTITUDE,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN,
						ADSB_FLAGS::ADSB_FLAGS_VALID_HEADING,
						ADSB_FLAGS::ADSB_FLAGS_VALID_VELOCITY,
						ADSB_FLAGS::ADSB_FLAGS_SIMULATED,
						ADSB_FLAGS::ADSB_FLAGS_VALID_COORDS,
						ADSB_FLAGS::ADSB_FLAGS_VALID_CALLSIGN), false;);

				}

				printf("ADSB_VEHICLE \n");
			}

			void fill(const com::company::demo::MESSAGE_INTERVAL& pmessage_interval) {

				pmessage_interval.message_id(30724,
					30746,
					11708,
					-20037,
					-13861,
					27138,
					22683,
					24097,
					18202,
					-3375,
					26951,
					21514,
					8424,
					-11582,
					-26562,
					-8792,
					-12499,
					-9809,
					-16065,
					-23746,
					-7198,
					-2547,
					-17371,
					-15854,
					-15275,
					-22208,
					-28465,
					18102,
					3574,
					-30594,
					21347,
					13466,
					-18184,
					-618,
					-7752,
					-13161,
					19969,
					26988,
					9805,
					18789,
					29153,
					-7778,
					-3003,
					-31732,
					-23737,
					-19178,
					13750,
					-24841,
					-4055,
					-22878,
					9169,
					-26519,
					-8652,
					16133,
					21214,
					-23035,
					21234,
					-12433,
					23413,
					-7268,
					7348,
					18498,
					29608,
					27738,
					-13234,
					-6280,
					-30208,
					24849,
					-8867,
					29617,
					29189,
					17091,
					4881,
					16507,
					24677,
					21732,
					1410,
					31626,
					-26096,
					-1866,
					12764,
					-3660,
					26985,
					19946,
					26500,
					14091,
					-2419,
					-5581,
					-24190,
					-11802,
					16214,
					630,
					-25893,
					-1726,
					13595,
					-19826,
					2202,
					3757,
					-18,
					-19197,
					-28872,
					14811,
					-12612,
					-6478,
					-11432,
					31132,
					26630,
					-11047,
					-18917,
					29295,
					-14951,
					2416,
					2388,
					30523,
					3742,
					7449,
					26752,
					-2226,
					13308,
					-8423,
					-14266,
					10452,
					-26890,
					17911,
					18124,
					-9598,
					29291,
					-7576,
					-4436,
					-20316,
					-3132,
					-14479,
					-18798,
					18174,
					-30309,
					28623,
					-18404,
					6726,
					-6398,
					31308,
					21988,
					-21785,
					-30995,
					-28196,
					-10092,
					27981,
					18483,
					-15720,
					23333,
					27271,
					-20685,
					23219,
					5094,
					2719,
					2880,
					27559,
					10705,
					-7012,
					-21426,
					-22856,
					15904,
					13335,
					28684,
					-20554,
					22568,
					12597,
					15807,
					23409,
					23826,
					-9227,
					22397,
					-19619,
					17129,
					24163,
					28305,
					5706,
					19300,
					9769,
					-14140,
					32158,
					-16523,
					2021,
					-6675,
					-14072,
					-25031,
					21272,
					-8490,
					27767,
					-17925,
					25560,
					-32201,
					1113,
					-11790,
					-12966,
					-26455,
					27381,
					26035,
					32129,
					13235,
					25254,
					21754,
					19036,
					31951,
					8497,
					-5795,
					-3911,
					5867,
					-3285,
					6249,
					-16781,
					-20294,
					20890,
					9747,
					-595,
					17262,
					8785,
					3510,
					-23230,
					-22910,
					-20213,
					-19818,
					-30645,
					8083,
					15855,
					-12960,
					-23566,
					-17461,
					-23550,
					17948,
					-27668,
					-32139,
					23381,
					8551,
					17185,
					-29066,
					-9358,
					-16794,
					-15330,
					26907,
					1426,
					-8866,
					-3915,
					-5239,
					17161,
					-14757,
					17361,
					-30778,
					-12652,
					-14793,
					-15135,
					-5783,
					-9382,
					14733,
					21585,
					-7956);
				pmessage_interval.interval_us(1980238436,
					-2104656431,
					773251937,
					32037828,
					-2002565693,
					-1400288115,
					-624320194,
					-2048222109,
					2083324981,
					-1926214513,
					-898546739,
					-2107860567,
					1199941646,
					-1523990396,
					815726551,
					1913046133,
					-1961391778,
					91938520,
					2039996486,
					-1401445238,
					-611782326,
					-11994808,
					1905162235,
					-1178823934,
					-474446179,
					1112041471,
					-1433599826,
					1545095863,
					571500294,
					-467065143,
					-1774091548,
					197515165,
					1557599516,
					352524232,
					1266614101,
					-568578395,
					-1519391703,
					1955841273,
					594279667,
					-775987126,
					-1998235182,
					198608303,
					1584703018,
					145583815,
					-608732442,
					773979329,
					162597540,
					315503878,
					1483222198,
					-423295969,
					-694856788,
					-235995694,
					-70751617,
					-2091012539,
					1193451124,
					364932651,
					-939023548,
					-1427231440,
					-1941132439,
					-304102944,
					-987120815,
					1450988903,
					-316054711,
					1295524142,
					223061055,
					1735489396,
					280225752,
					753684307,
					-557830945,
					-1603930064,
					-41979600,
					487897748,
					-1029021280,
					898428346,
					2124278683,
					-1430222826,
					-511657731,
					-1566731751,
					-696391734,
					1691354136,
					-17622758,
					803420830,
					-1992520060,
					-1677880132,
					-92524496,
					-1071826426,
					-1016530123,
					-869435759,
					802117440,
					1253636038,
					-1572546103,
					-1645715828,
					-243733951,
					-690096035,
					-310537128,
					1492453676,
					1373619257,
					1382246087,
					-770937385,
					2022913786,
					-594680419,
					1268981781,
					1818822498,
					244794471,
					1432058065,
					-1599229209,
					-520229645,
					1454835274,
					-1140248733,
					1879956232,
					44785614,
					-1698783975,
					-1729001523,
					-1379923072,
					-1784064228,
					787741049,
					1290083583,
					2083300371,
					-646521289,
					1972242268,
					-733690583,
					-898590341,
					263324703,
					543948976,
					-1115625070,
					-709244022,
					1521137018,
					573042923,
					-1063970538,
					469937979,
					965297805,
					800985273,
					1562951046,
					-228106762,
					344143317,
					-1683368195,
					35209022,
					-1906916523,
					886080812,
					1022359600,
					860395427,
					-1953008733,
					1994760118,
					708308436,
					69418833,
					907982791,
					-927396111,
					-566274280,
					-1902738285,
					-1001923186,
					1250636409,
					353970843,
					-175216411,
					-1036399971,
					-988673713,
					-266872734,
					-327590764,
					1734109158,
					-655116326,
					1588143727,
					1242478914,
					1251694601,
					-1563044646,
					-1369541152,
					854753845,
					-2119014313,
					1502764836,
					-1290474029,
					-1554689195,
					-453356908,
					-215909889,
					-1945845344,
					-1947316585,
					-211516112,
					648808077,
					1059131089,
					91524164,
					-2062563697,
					1062415335,
					2060502901,
					356827207,
					-817408521,
					-1225656581,
					203762479,
					280645002,
					581207805,
					-388432787,
					1847657963,
					1590063784,
					2006134129,
					710206386,
					1186719221,
					-1059186403,
					1052447141,
					-2082763112,
					1641597002,
					-1989180902,
					-1935164557,
					-446764012,
					1673350403,
					1052964084,
					-125366449,
					1935711712,
					-1492769634,
					1941372788,
					-1638860493,
					-2098301661,
					-673232563,
					187515305,
					1512490700,
					-785459066,
					408513497,
					629361929,
					1114023684,
					566944514,
					-1711508261,
					1382698491,
					-1879284964,
					-483999963,
					-846623530,
					-1692239522,
					-1047779638,
					1803027064,
					-1403179937,
					-996398033,
					1483177591,
					1480884458,
					2099601606,
					-191673861,
					-666040924,
					260198046,
					1845414126,
					960808054,
					-1072422008,
					1618977408,
					-1481794855,
					20480772,
					117333306,
					-2140675780,
					-1078785397,
					-9344759,
					-1693513337,
					-17431723,
					-426459994,
					-1725229925,
					1048620287,
					381973141,
					1922298031,
					-840776690,
					-1284986729,
					-603988981,
					-1281908594,
					-135508704,
					2591771,
					323277735);
			}

			void on_MESSAGE_INTERVAL(const com::company::demo::MESSAGE_INTERVAL& pmessage_interval) {
				assert(pmessage_interval.message_id() == 30724,
					30746,
					11708,
					-20037,
					-13861,
					27138,
					22683,
					24097,
					18202,
					-3375,
					26951,
					21514,
					8424,
					-11582,
					-26562,
					-8792,
					-12499,
					-9809,
					-16065,
					-23746,
					-7198,
					-2547,
					-17371,
					-15854,
					-15275,
					-22208,
					-28465,
					18102,
					3574,
					-30594,
					21347,
					13466,
					-18184,
					-618,
					-7752,
					-13161,
					19969,
					26988,
					9805,
					18789,
					29153,
					-7778,
					-3003,
					-31732,
					-23737,
					-19178,
					13750,
					-24841,
					-4055,
					-22878,
					9169,
					-26519,
					-8652,
					16133,
					21214,
					-23035,
					21234,
					-12433,
					23413,
					-7268,
					7348,
					18498,
					29608,
					27738,
					-13234,
					-6280,
					-30208,
					24849,
					-8867,
					29617,
					29189,
					17091,
					4881,
					16507,
					24677,
					21732,
					1410,
					31626,
					-26096,
					-1866,
					12764,
					-3660,
					26985,
					19946,
					26500,
					14091,
					-2419,
					-5581,
					-24190,
					-11802,
					16214,
					630,
					-25893,
					-1726,
					13595,
					-19826,
					2202,
					3757,
					-18,
					-19197,
					-28872,
					14811,
					-12612,
					-6478,
					-11432,
					31132,
					26630,
					-11047,
					-18917,
					29295,
					-14951,
					2416,
					2388,
					30523,
					3742,
					7449,
					26752,
					-2226,
					13308,
					-8423,
					-14266,
					10452,
					-26890,
					17911,
					18124,
					-9598,
					29291,
					-7576,
					-4436,
					-20316,
					-3132,
					-14479,
					-18798,
					18174,
					-30309,
					28623,
					-18404,
					6726,
					-6398,
					31308,
					21988,
					-21785,
					-30995,
					-28196,
					-10092,
					27981,
					18483,
					-15720,
					23333,
					27271,
					-20685,
					23219,
					5094,
					2719,
					2880,
					27559,
					10705,
					-7012,
					-21426,
					-22856,
					15904,
					13335,
					28684,
					-20554,
					22568,
					12597,
					15807,
					23409,
					23826,
					-9227,
					22397,
					-19619,
					17129,
					24163,
					28305,
					5706,
					19300,
					9769,
					-14140,
					32158,
					-16523,
					2021,
					-6675,
					-14072,
					-25031,
					21272,
					-8490,
					27767,
					-17925,
					25560,
					-32201,
					1113,
					-11790,
					-12966,
					-26455,
					27381,
					26035,
					32129,
					13235,
					25254,
					21754,
					19036,
					31951,
					8497,
					-5795,
					-3911,
					5867,
					-3285,
					6249,
					-16781,
					-20294,
					20890,
					9747,
					-595,
					17262,
					8785,
					3510,
					-23230,
					-22910,
					-20213,
					-19818,
					-30645,
					8083,
					15855,
					-12960,
					-23566,
					-17461,
					-23550,
					17948,
					-27668,
					-32139,
					23381,
					8551,
					17185,
					-29066,
					-9358,
					-16794,
					-15330,
					26907,
					1426,
					-8866,
					-3915,
					-5239,
					17161,
					-14757,
					17361,
					-30778,
					-12652,
					-14793,
					-15135,
					-5783,
					-9382,
					14733,
					21585,
					-7956);
				assert(pmessage_interval.interval_us() == 1980238436,
					-2104656431,
					773251937,
					32037828,
					-2002565693,
					-1400288115,
					-624320194,
					-2048222109,
					2083324981,
					-1926214513,
					-898546739,
					-2107860567,
					1199941646,
					-1523990396,
					815726551,
					1913046133,
					-1961391778,
					91938520,
					2039996486,
					-1401445238,
					-611782326,
					-11994808,
					1905162235,
					-1178823934,
					-474446179,
					1112041471,
					-1433599826,
					1545095863,
					571500294,
					-467065143,
					-1774091548,
					197515165,
					1557599516,
					352524232,
					1266614101,
					-568578395,
					-1519391703,
					1955841273,
					594279667,
					-775987126,
					-1998235182,
					198608303,
					1584703018,
					145583815,
					-608732442,
					773979329,
					162597540,
					315503878,
					1483222198,
					-423295969,
					-694856788,
					-235995694,
					-70751617,
					-2091012539,
					1193451124,
					364932651,
					-939023548,
					-1427231440,
					-1941132439,
					-304102944,
					-987120815,
					1450988903,
					-316054711,
					1295524142,
					223061055,
					1735489396,
					280225752,
					753684307,
					-557830945,
					-1603930064,
					-41979600,
					487897748,
					-1029021280,
					898428346,
					2124278683,
					-1430222826,
					-511657731,
					-1566731751,
					-696391734,
					1691354136,
					-17622758,
					803420830,
					-1992520060,
					-1677880132,
					-92524496,
					-1071826426,
					-1016530123,
					-869435759,
					802117440,
					1253636038,
					-1572546103,
					-1645715828,
					-243733951,
					-690096035,
					-310537128,
					1492453676,
					1373619257,
					1382246087,
					-770937385,
					2022913786,
					-594680419,
					1268981781,
					1818822498,
					244794471,
					1432058065,
					-1599229209,
					-520229645,
					1454835274,
					-1140248733,
					1879956232,
					44785614,
					-1698783975,
					-1729001523,
					-1379923072,
					-1784064228,
					787741049,
					1290083583,
					2083300371,
					-646521289,
					1972242268,
					-733690583,
					-898590341,
					263324703,
					543948976,
					-1115625070,
					-709244022,
					1521137018,
					573042923,
					-1063970538,
					469937979,
					965297805,
					800985273,
					1562951046,
					-228106762,
					344143317,
					-1683368195,
					35209022,
					-1906916523,
					886080812,
					1022359600,
					860395427,
					-1953008733,
					1994760118,
					708308436,
					69418833,
					907982791,
					-927396111,
					-566274280,
					-1902738285,
					-1001923186,
					1250636409,
					353970843,
					-175216411,
					-1036399971,
					-988673713,
					-266872734,
					-327590764,
					1734109158,
					-655116326,
					1588143727,
					1242478914,
					1251694601,
					-1563044646,
					-1369541152,
					854753845,
					-2119014313,
					1502764836,
					-1290474029,
					-1554689195,
					-453356908,
					-215909889,
					-1945845344,
					-1947316585,
					-211516112,
					648808077,
					1059131089,
					91524164,
					-2062563697,
					1062415335,
					2060502901,
					356827207,
					-817408521,
					-1225656581,
					203762479,
					280645002,
					581207805,
					-388432787,
					1847657963,
					1590063784,
					2006134129,
					710206386,
					1186719221,
					-1059186403,
					1052447141,
					-2082763112,
					1641597002,
					-1989180902,
					-1935164557,
					-446764012,
					1673350403,
					1052964084,
					-125366449,
					1935711712,
					-1492769634,
					1941372788,
					-1638860493,
					-2098301661,
					-673232563,
					187515305,
					1512490700,
					-785459066,
					408513497,
					629361929,
					1114023684,
					566944514,
					-1711508261,
					1382698491,
					-1879284964,
					-483999963,
					-846623530,
					-1692239522,
					-1047779638,
					1803027064,
					-1403179937,
					-996398033,
					1483177591,
					1480884458,
					2099601606,
					-191673861,
					-666040924,
					260198046,
					1845414126,
					960808054,
					-1072422008,
					1618977408,
					-1481794855,
					20480772,
					117333306,
					-2140675780,
					-1078785397,
					-9344759,
					-1693513337,
					-17431723,
					-426459994,
					-1725229925,
					1048620287,
					381973141,
					1922298031,
					-840776690,
					-1284986729,
					-603988981,
					-1281908594,
					-135508704,
					2591771,
					323277735);
				printf("MESSAGE_INTERVAL \n");
			}

			void fill(const com::company::demo::EKF_STATUS_REPORT& pekf_status_report) {

				pekf_status_report.velocity_variance(-2.1078368E38F,
					9.6812E37F,
					2.2736005E38F,
					1.8936538E38F,
					-2.9082612E38F,
					1.0200329E38F,
					1.2370489E38F,
					-2.7401629E38F,
					3.3596438E38F,
					2.0002008E37F,
					-1.2252007E38F,
					-2.920532E38F,
					1.4970905E38F,
					-4.776468E37F,
					-2.6287488E38F,
					-8.4865614E36F,
					1.2112098E38F,
					6.1466425E37F,
					-2.753335E38F,
					-2.2860973E38F,
					9.70362E37F,
					-1.9116656E38F,
					-2.3174531E38F,
					-2.8222506E38F,
					-2.9707248E38F,
					3.2375423E38F,
					1.3290381E38F,
					3.2536257E38F,
					7.267483E37F,
					3.210287E38F,
					-1.4243613E38F,
					2.2855268E38F,
					9.37604E37F,
					9.691098E37F,
					-3.2798011E38F,
					-2.1752972E38F,
					-4.2004034E37F,
					1.5667474E38F,
					4.1766096E37F,
					1.2672029E38F,
					6.528014E37F,
					1.8924922E38F,
					4.361664E37F,
					-1.9407925E38F,
					-3.6944237E37F,
					-1.2168997E38F,
					1.1803266E37F,
					1.5101786E38F,
					1.3838778E38F,
					-3.2782992E38F,
					1.7297435E38F,
					3.1734066E37F,
					-1.1755164E38F,
					-2.8468313E38F,
					2.6712E38F,
					-2.7069389E38F,
					1.3137779E37F,
					1.2301083E38F,
					-3.1328E38F,
					-3.1756047E38F,
					1.28358E38F,
					-2.51283E38F,
					-2.7466566E37F,
					-2.542503E38F,
					2.6688262E38F,
					1.6530785E38F,
					-2.415239E38F,
					1.1563669E38F,
					1.7596449E38F,
					3.3636478E38F,
					-6.7871423E37F,
					-3.2624986E38F,
					-2.7041807E37F,
					2.980577E38F,
					-2.068468E38F,
					2.240368E38F,
					2.3261695E38F,
					1.2502562E38F,
					1.466287E38F,
					-1.908283E38F,
					-3.2337515E38F,
					-1.8615027E38F,
					2.8071762E38F,
					1.0286214E38F,
					2.8670137E38F,
					-1.0421864E38F,
					-9.446337E37F,
					-1.3397105E38F,
					2.6222793E38F,
					-9.479001E37F,
					-2.4300527E38F,
					3.3913813E38F,
					2.2135062E38F,
					-1.8044999E37F,
					-5.1559087E37F,
					-4.75844E37F,
					-2.0986763E38F,
					1.3043302E38F,
					-4.711978E37F,
					-7.806967E36F,
					7.6079075E37F,
					-2.9805682E38F,
					-1.0323225E38F,
					-2.0652343E38F,
					2.7814696E38F,
					-2.566815E38F,
					-1.6688674E38F,
					1.0912243E38F,
					2.3476204E38F,
					2.2748538E38F,
					2.7458267E38F,
					-2.3908272E38F,
					-6.653161E37F,
					-2.3859073E38F,
					2.9358005E38F,
					-1.6561146E38F,
					-1.1390716E38F,
					3.797938E37F,
					2.6866163E38F,
					-3.2418797E38F,
					2.8110203E38F,
					2.540834E38F,
					-2.5951753E38F,
					-2.1834714E38F,
					2.8947532E38F,
					2.9407174E38F,
					-2.9210887E38F,
					5.7347555E37F,
					1.793984E38F,
					1.7385132E38F,
					-1.9331521E37F,
					-2.8403626E38F,
					-2.9043705E38F,
					8.630489E37F,
					2.5133238E38F,
					-3.3494294E38F,
					1.8459826E38F,
					-1.780219E38F,
					-3.0328908E38F,
					1.9195157E38F,
					-3.3552105E37F,
					3.0631112E38F,
					-1.1605982E38F,
					3.2017554E38F,
					2.882838E38F,
					1.8440536E38F,
					3.1613628E38F,
					1.3141749E38F,
					-1.7530382E37F,
					1.4862946E38F,
					-5.5305045E37F,
					-2.4073815E38F,
					-2.1144672E38F,
					-2.1970669E38F,
					-1.7873928E38F,
					1.2498387E38F,
					-4.1876954E37F,
					-3.6763472E37F,
					-1.1577942E38F,
					1.7938013E38F,
					1.3350765E38F,
					-8.586995E37F,
					2.8739208E37F,
					2.2079119E38F,
					5.8509585E37F,
					3.0896004E38F,
					-6.018521E37F,
					2.1366089E38F,
					-1.8919537E38F,
					-1.9832957E38F,
					1.7721649E37F,
					-3.4022639E38F,
					1.7158059E38F,
					-1.788975E38F,
					9.006047E37F,
					-1.1645644E38F,
					1.8742176E38F,
					-2.7564488E38F,
					-1.7823024E37F,
					2.5707175E38F,
					7.0217763E37F,
					-2.7221046E38F,
					-2.2739514E38F,
					3.3245498E38F,
					-3.0058383E38F,
					-1.9468022E38F,
					-2.7767183E38F,
					2.4250199E38F,
					1.761868E38F,
					1.7991081E38F,
					-1.5509792E38F,
					1.155819E38F,
					-3.1661835E38F,
					9.630642E37F,
					1.4863818E37F,
					-5.6069885E37F,
					7.7364833E37F,
					6.3630285E37F,
					-1.6436596E38F,
					-3.1536612E38F,
					1.1149724E38F,
					1.9681278E38F,
					-1.3981494E38F,
					-3.176667E38F,
					1.9517194E37F,
					3.1083014E38F,
					-9.819075E37F,
					5.92648E37F,
					-2.5187173E38F,
					4.9104064E37F,
					2.9294744E38F,
					2.6975114E38F,
					-1.3899888E38F,
					-1.4351835E38F,
					3.1416933E38F,
					-1.2166232E37F,
					6.397039E37F,
					-2.3868234E38F,
					3.2177485E38F,
					-2.1884635E38F,
					-1.2141445E38F,
					8.1980577E37F,
					-1.435846E38F,
					2.0344721E38F,
					2.8091364E38F,
					-1.4323786E38F,
					2.1790107E38F,
					-9.036547E37F,
					1.7717084E38F,
					1.0967878E38F,
					-1.947815E38F,
					8.852798E37F,
					1.775277E38F,
					-2.2402911E38F,
					-1.2694111E38F,
					3.3720482E37F,
					2.2615728E38F,
					-2.3656362E38F,
					-5.4780086E37F,
					-1.1698813E37F,
					3.1851425E38F,
					-1.163373E36F,
					3.1800348E38F,
					-2.9901638E38F,
					-2.6171987E38F,
					2.9009985E38F,
					-1.9918176E36F,
					2.3919678E38F,
					1.2496736E38F,
					4.805986E37F,
					1.991548E38F,
					1.536032E38F,
					3.5018483E37F,
					2.3956464E37F,
					-1.1782366E38F);
				pekf_status_report.pos_horiz_variance(2.9623262E38F,
					-8.75078E37F,
					-2.3428363E38F,
					2.1002727E38F,
					-5.936079E37F,
					-5.241314E37F,
					3.2395797E38F,
					3.3771665E37F,
					1.6755138E38F,
					1.0556852E38F,
					1.6711512E38F,
					-1.823539E38F,
					-2.3889123E38F,
					-8.353758E37F,
					2.2990994E38F,
					3.1776494E38F,
					1.479476E38F,
					1.1502667E38F,
					7.2070287E37F,
					-4.4254686E37F,
					8.316751E37F,
					1.4593872E38F,
					1.270138E38F,
					-2.0310424E38F,
					-2.1697935E38F,
					-1.5005808E38F,
					-9.018403E37F,
					7.613318E37F,
					1.1525252E38F,
					3.984248E37F,
					-1.205369E38F,
					-9.37409E37F,
					2.3265082E38F,
					1.0630652E38F,
					-2.7147906E38F,
					1.5803595E38F,
					-5.3632887E37F,
					-2.8077662E37F,
					-1.5625746E37F,
					1.3563938E38F,
					8.747319E37F,
					-7.5351596E37F,
					7.332158E37F,
					2.0907077E38F,
					-9.47623E37F,
					1.3624034E38F,
					5.8781785E37F,
					-8.3560663E37F,
					-1.8599787E38F,
					-2.6825405E38F,
					-1.1956764E38F,
					-2.0914132E38F,
					8.0635057E37F,
					-3.1244476E38F,
					-2.8247981E38F,
					3.8204312E37F,
					2.7450542E38F,
					3.3176463E38F,
					1.1109973E38F,
					2.2842737E38F,
					2.7575082E38F,
					-1.7902393E38F,
					4.731141E37F,
					3.2862394E38F,
					1.064791E38F,
					1.1213725E38F,
					-1.3062382E38F,
					5.0017027E36F,
					-2.1456546E38F,
					2.0605498E38F,
					-4.57772E37F,
					1.7384753E38F,
					1.9214894E38F,
					2.2165457E38F,
					1.4773064E37F,
					2.5466145E38F,
					2.934448E38F,
					1.826523E38F,
					2.9013074E38F,
					3.0168403E38F,
					1.7575349E38F,
					1.0390333E38F,
					-2.4677557E38F,
					8.2168747E37F,
					3.0951817E37F,
					5.2772376E37F,
					-2.1510088E38F,
					-1.1085925E38F,
					5.0268127E37F,
					1.2569156E38F,
					1.6807863E38F,
					-2.1500697E38F,
					3.3899147E37F,
					-6.287983E37F,
					-3.1834974E38F,
					1.7085395E38F,
					-2.6327347E38F,
					-7.41479E37F,
					-2.628392E38F,
					-2.372518E38F,
					2.0727416E38F,
					-8.999813E37F,
					-2.3997512E38F,
					-1.9768295E38F,
					1.9227153E37F,
					1.899452E38F,
					2.734399E38F,
					6.7605366E36F,
					1.5677659E38F,
					3.1424892E38F,
					2.437672E38F,
					2.861921E38F,
					-1.5932272E38F,
					-3.1321018E38F,
					-8.2434036E37F,
					3.0837096E38F,
					2.865614E38F,
					-2.7882226E38F,
					1.760343E38F,
					3.049639E38F,
					1.6079171E38F,
					-2.2471516E38F,
					1.1124004E38F,
					-1.262266E37F,
					-1.02900485E37F,
					3.0821872E38F,
					-2.860027E38F,
					1.7375492E38F,
					-3.2826613E38F,
					-6.9084174E37F,
					1.8040597E38F,
					1.8745334E38F,
					3.330342E37F,
					2.3718017E38F,
					-1.3167546E38F,
					1.6850234E38F,
					2.6785277E38F,
					8.0552163E37F,
					8.772383E37F,
					2.0466635E38F,
					-2.579196E38F,
					-6.936163E36F,
					3.6803926E37F,
					1.3224576E38F,
					-1.1367866E38F,
					8.726458E37F,
					-2.209514E38F,
					5.3054413E37F,
					-3.179526E38F,
					1.778566E38F,
					-2.789421E38F,
					1.8498387E38F,
					1.0663907E38F,
					-1.2523029E38F,
					-3.3905897E38F,
					-3.2949638E38F,
					-2.4006917E38F,
					-1.6108261E38F,
					-2.8052695E37F,
					-2.55364E38F,
					-2.6090835E38F,
					1.8932621E38F,
					1.3877351E38F,
					-1.1854609E38F,
					1.7520037E38F,
					2.460013E38F,
					2.87916E38F,
					3.1591859E38F,
					-2.4862492E38F,
					-1.6695642E38F,
					-2.2182977E38F,
					6.585225E37F,
					-3.1731211E38F,
					2.852552E38F,
					-1.7443588E38F,
					-2.3523715E38F,
					-2.331293E38F,
					-1.3763906E38F,
					-7.627033E37F,
					2.2096426E38F,
					3.1377405E38F,
					8.4950794E37F,
					-3.2319476E38F,
					-7.8882766E36F,
					2.6606366E38F,
					-1.4585715E38F,
					-3.242214E38F,
					5.141042E37F,
					2.1288581E38F,
					-3.2578568E38F,
					2.7285159E38F,
					1.0829358E38F,
					2.695311E38F,
					-1.4396894E38F,
					7.441685E37F,
					3.1257763E38F,
					-2.8237345E38F,
					-2.6960137E38F,
					2.521353E38F,
					1.611923E38F,
					2.2499612E38F,
					2.609891E38F,
					-2.6719247E38F,
					-2.1651973E38F,
					1.5352695E38F,
					-1.0219033E38F,
					2.3864867E38F,
					2.3391723E38F,
					3.274194E38F,
					1.3972264E38F,
					3.459737E37F,
					-1.0699126E37F,
					-3.1230501E38F,
					8.9725E37F,
					6.8220605E37F,
					2.3465732E38F,
					3.1651205E38F,
					2.4546957E38F,
					-1.1823761E38F,
					1.9640885E38F,
					-1.8734176E38F,
					2.8985226E38F,
					-1.6273169E38F,
					3.316076E38F,
					-2.092667E38F,
					-2.035876E38F,
					-1.4277426E38F,
					9.509748E37F,
					-1.7744443E38F,
					2.0255312E38F,
					1.0796381E38F,
					-1.2753129E36F,
					-2.4022423E37F,
					2.8403052E38F,
					-3.336182E38F,
					1.77428E38F,
					-1.1391407E38F,
					9.215685E37F,
					1.756903E38F,
					-2.518084E38F,
					1.4857736E38F,
					-5.357712E37F,
					5.857132E37F,
					3.3446282E37F,
					-1.992212E38F,
					-1.4930677E38F,
					-2.648398E38F,
					-1.1641043E38F,
					4.260228E37F,
					5.9624904E37F,
					-1.0121539E38F,
					1.9915253E38F,
					-1.1282986E38F,
					-2.4133895E38F,
					2.3054336E38F);
				pekf_status_report.pos_vert_variance(-3.1998489E38F,
					-2.5476544E38F,
					3.0597934E37F,
					2.949439E38F,
					2.7294422E38F,
					3.2514556E38F,
					1.3791651E38F,
					1.9239464E38F,
					2.887743E38F,
					-2.3061643E38F,
					-8.580826E37F,
					-3.1866708E38F,
					9.248037E37F,
					-1.6919094E38F,
					1.1240228E38F,
					-8.879648E37F,
					-3.0087632E38F,
					1.7155576E38F,
					3.4223047E37F,
					3.4588065E36F,
					-2.0540996E38F,
					-5.5558555E37F,
					1.1438195E38F,
					-1.5466442E38F,
					1.2782023E38F,
					7.191311E37F,
					3.0825344E38F,
					4.631448E37F,
					1.0839779E38F,
					-9.680099E37F,
					2.6616008E38F,
					-2.6699748E38F,
					-2.3054447E38F,
					2.4675969E38F,
					-2.6226513E38F,
					2.7911616E38F,
					2.3845098E38F,
					-2.3073267E38F,
					-1.8867338E38F,
					8.4144233E37F,
					-1.4823402E38F,
					-1.4522321E38F,
					-2.6021784E38F,
					5.6366206E37F,
					1.5564284E38F,
					3.2530456E38F,
					3.0933015E38F,
					2.6531899E38F,
					3.091052E38F,
					1.8253497E38F,
					-2.505085E38F,
					2.5901858E38F,
					1.6455708E38F,
					1.7268843E38F,
					-3.1000057E38F,
					-9.635852E37F,
					-1.8969458E38F,
					2.4620835E38F,
					-2.5323536E38F,
					-1.1293757E38F,
					-3.079239E38F,
					3.6872333E37F,
					-2.5087931E38F,
					4.6993826E37F,
					-1.1633001E37F,
					-2.8756565E37F,
					5.509718E37F,
					-7.6579356E37F,
					3.2965286E38F,
					-7.038328E36F,
					6.463003E37F,
					-2.6793629E38F,
					1.2538375E38F,
					-2.6133984E38F,
					3.596457E36F,
					1.7920712E38F,
					1.0630309E38F,
					-2.939216E37F,
					3.2156107E38F,
					1.1391642E37F,
					-1.3147652E38F,
					-2.9911553E38F,
					3.208018E38F,
					-1.2181549E38F,
					-3.119802E36F,
					-1.8261052E38F,
					-2.0074391E38F,
					-3.3108077E38F,
					1.0797905E38F,
					-1.3604061E38F,
					2.3925266E38F,
					1.0979514E38F,
					1.1026362E38F,
					-1.4653453E38F,
					1.832553E38F,
					2.0318253E38F,
					2.14357E38F,
					1.9817573E38F,
					-1.02678824E37F,
					2.53647E38F,
					3.1666472E38F,
					-1.313933E38F,
					1.9945837E38F,
					-1.7052722E38F,
					8.1223805E37F,
					-1.9734912E38F,
					-2.0415276E38F,
					3.3098256E38F,
					-3.3712148E38F,
					1.6801607E38F,
					2.6004588E38F,
					5.746003E37F,
					-6.6435043E37F,
					9.646383E37F,
					-1.4023216E38F,
					1.4296359E38F,
					-2.3281947E38F,
					-2.5696484E38F,
					2.8561687E38F,
					1.0120463E38F,
					-7.1454366E37F,
					-2.1658654E38F,
					1.5625462E38F,
					-3.17588E38F,
					-3.3838536E37F,
					-2.4894356E38F,
					-8.460758E37F,
					2.9798068E38F,
					-1.4051363E38F,
					2.7239309E38F,
					1.1216835E38F,
					9.103576E36F,
					-2.5484647E38F,
					2.6342858E38F,
					1.4791716E38F,
					3.269268E38F,
					3.097311E38F,
					-2.0393024E38F,
					-4.745957E37F,
					-1.1377551E38F,
					1.2103708E38F,
					-3.0482216E38F,
					-3.077002E38F,
					1.9206975E38F,
					-2.1174039E38F,
					-2.592337E38F,
					1.7157295E37F,
					1.2960722E38F,
					1.9653854E38F,
					-1.0365784E38F,
					1.5132028E37F,
					2.7525704E38F,
					3.3162683E37F,
					-2.599132E38F,
					-2.6751216E38F,
					7.9989757E37F,
					1.727642E38F,
					-1.4221867E38F,
					-8.719432E37F,
					-7.648796E37F,
					-2.6484032E38F,
					-1.8155598E38F,
					-2.4297736E38F,
					-9.452207E37F,
					-3.0566052E38F,
					4.6435893E34F,
					2.8619326E38F,
					2.805022E38F,
					1.5505638E37F,
					1.1435939E38F,
					2.8982326E38F,
					-2.358343E38F,
					-3.0158787E38F,
					2.0615964E38F,
					-2.1104959E38F,
					-2.693465E38F,
					-2.8979624E38F,
					1.4141298E38F,
					-8.944969E36F,
					-2.326782E38F,
					7.2039843E37F,
					-4.2297135E37F,
					-2.06441E38F,
					-1.904396E37F,
					2.3465194E38F,
					-2.3183699E38F,
					-2.4582076E38F,
					2.7522595E38F,
					1.1960456E38F,
					-2.2731162E38F,
					3.3086066E38F,
					-2.6577966E38F,
					1.5711293E38F,
					-2.3936712E37F,
					-1.8780126E38F,
					-1.2391528E37F,
					-1.491055E38F,
					-1.05188316E37F,
					1.0941378E38F,
					-2.306459E38F,
					-1.4166014E37F,
					-3.1726682E38F,
					3.8972645E37F,
					1.45577E38F,
					-9.493343E37F,
					-2.4249951E38F,
					1.4442243E38F,
					-2.9495435E38F,
					8.218688E37F,
					-2.0434996E38F,
					4.967249E37F,
					-2.2106654E38F,
					-3.2600006E38F,
					2.76151E38F,
					-1.4636567E38F,
					4.9162173E37F,
					2.4992297E38F,
					-2.4836689E38F,
					-1.4385232E38F,
					2.150577E37F,
					2.5544756E38F,
					-5.3601733E37F,
					-3.5106592E37F,
					8.3741617E37F,
					3.1668686E37F,
					-7.379749E37F,
					-3.1509074E38F,
					-1.4803973E38F,
					1.9172428E38F,
					-1.5609873E38F,
					1.7184182E38F,
					3.1897359E38F,
					-1.856448E38F,
					2.137356E38F,
					-2.5966581E38F,
					-8.900947E36F,
					-6.414287E36F,
					3.2342975E38F,
					-3.0974024E38F,
					-1.0801759E38F,
					2.5645436E38F,
					-3.209977E38F,
					6.4742917E37F,
					-3.2220699E38F,
					-3.0710818E37F,
					-1.5454141E38F,
					-2.2392557E38F,
					2.7071725E38F,
					2.4649141E37F,
					-2.626912E38F,
					3.3197992E38F,
					-2.550725E38F,
					2.4854286E38F,
					-5.2081283E37F,
					2.631074E38F);
				pekf_status_report.compass_variance(-1.37189E38F,
					-1.2651488E38F,
					7.29817E37F,
					-2.5607696E38F,
					1.4422235E38F,
					6.514343E37F,
					1.5585472E38F,
					-1.7282014E38F,
					2.4430145E36F,
					2.0319658E38F,
					2.6154143E38F,
					-1.504837E37F,
					-1.6728625E38F,
					2.4685986E38F,
					-1.7760328E38F,
					1.0017453E38F,
					-2.9377827E38F,
					-3.1922949E38F,
					1.4641942E38F,
					-1.0300653E37F,
					1.7476221E36F,
					-2.6041914E38F,
					3.121043E38F,
					5.354012E37F,
					3.3215174E38F,
					3.2780712E38F,
					1.5526482E38F,
					-3.0074647E38F,
					2.969338E38F,
					-2.4409223E38F,
					-2.3549549E38F,
					6.5845874E37F,
					6.004362E37F,
					8.335966E37F,
					-2.5257441E38F,
					3.8895992E36F,
					2.9419974E38F,
					-1.9749848E38F,
					-1.0749014E38F,
					-2.4536373E38F,
					1.6290164E38F,
					2.3619665E38F,
					2.1197846E38F,
					-2.6404564E38F,
					-9.566022E37F,
					-3.0380265E38F,
					3.0863562E38F,
					-2.1510234E38F,
					-1.5353057E38F,
					-2.226768E38F,
					-3.3379544E38F,
					-1.1622872E38F,
					1.1241687E38F,
					-3.1190397E38F,
					-6.2765585E37F,
					2.3371988E38F,
					-3.138174E38F,
					-9.659952E37F,
					-4.781098E37F,
					1.9495975E38F,
					-3.167099E38F,
					6.4880837E37F,
					-2.1899855E38F,
					2.1957633E38F,
					2.4151212E38F,
					-1.3242432E38F,
					-2.0807625E38F,
					8.446367E37F,
					2.2073417E38F,
					9.374336E37F,
					2.4802724E38F,
					2.283486E38F,
					-2.4030566E38F,
					-1.9584137E38F,
					-3.0678595E38F,
					1.7520832E38F,
					1.7368318E38F,
					1.4108005E38F,
					1.7643672E38F,
					2.4356016E38F,
					-2.7853701E38F,
					-2.9975967E38F,
					3.1381046E38F,
					-1.4840226E38F,
					-2.0941245E38F,
					-3.1178832E37F,
					2.536567E38F,
					-3.8734202E37F,
					-2.4281636E38F,
					-1.8558451E38F,
					1.8081442E38F,
					-1.5399437E38F,
					2.9595488E38F,
					2.2492219E38F,
					-3.3197787E37F,
					-5.2466735E37F,
					-7.591308E37F,
					2.7933885E37F,
					5.2318425E37F,
					-2.635549E38F,
					5.4773854E37F,
					-2.8567015E38F,
					-1.2778419E38F,
					-1.0756641E38F,
					-5.4588787E37F,
					-9.806834E37F,
					-3.067341E37F,
					4.2886633E37F,
					-8.957751E37F,
					2.5833084E38F,
					8.293802E37F,
					2.990199E38F,
					2.2152401E38F,
					1.3365921E38F,
					-3.358647E38F,
					-1.7710647E38F,
					2.160029E38F,
					-3.2336199E38F,
					-3.433416E37F,
					2.6995208E38F,
					5.757872E37F,
					-2.4109905E38F,
					-2.0670416E38F,
					1.5443924E38F,
					1.9367174E38F,
					-4.3235926E37F,
					8.6560475E36F,
					-2.8192426E38F,
					2.196384E38F,
					-2.542955E37F,
					-2.6316102E38F,
					-7.642329E37F,
					8.0714605E37F,
					-1.3894417E38F,
					-2.497475E38F,
					-1.1785922E38F,
					-8.564209E37F,
					3.127346E38F,
					-3.1143798E38F,
					3.3557338E38F,
					-5.0957277E37F,
					-3.9786905E37F,
					-2.7401233E38F,
					1.5369347E38F,
					5.357578E37F,
					2.3179229E38F,
					-1.9376386E38F,
					1.2369075E37F,
					4.972968E37F,
					2.8599605E38F,
					-1.5162316E38F,
					-6.7893946E36F,
					-2.182879E38F,
					8.606128E37F,
					2.2763182E38F,
					2.1755718E38F,
					-2.658485E38F,
					8.0399745E37F,
					1.4015471E38F,
					-3.1166686E37F,
					-7.0582005E37F,
					-2.2366285E38F,
					-2.2097683E38F,
					4.1807088E36F,
					3.1343704E38F,
					-2.0927305E38F,
					-7.725063E36F,
					1.3405421E38F,
					1.1668882E38F,
					-2.1320912E38F,
					-2.1118803E38F,
					-1.8523393E38F,
					4.442476E37F,
					1.519037E38F,
					2.3688546E37F,
					9.910091E37F,
					-1.8252213E38F,
					-3.0398405E38F,
					3.0759907E38F,
					-1.0346497E38F,
					-4.2783406E37F,
					1.5351879E38F,
					6.712234E37F,
					-3.1124688E38F,
					2.3226992E38F,
					1.404471E38F,
					-1.3201104E38F,
					2.3075474E38F,
					1.2608838E38F,
					-8.686344E37F,
					-2.7421443E38F,
					2.4475402E38F,
					-3.8117602E37F,
					2.5315786E38F,
					-6.3894285E35F,
					2.8241661E38F,
					2.0409128E38F,
					-5.9994064E37F,
					-2.6057242E38F,
					1.8270218E38F,
					4.69949E37F,
					-1.2788897E38F,
					-1.73332E38F,
					-1.4113626E38F,
					-2.9738905E38F,
					1.7983082E38F,
					-2.3136214E38F,
					2.256883E38F,
					2.7026136E38F,
					-2.2157161E38F,
					3.311434E38F,
					2.5286084E38F,
					-7.1685155E37F,
					3.5595396E37F,
					2.9185665E38F,
					2.7535995E37F,
					2.776565E38F,
					-2.6559712E38F,
					4.6603876E37F,
					-3.2680138E38F,
					2.5510712E38F,
					3.1166206E38F,
					3.376985E38F,
					-2.1524308E38F,
					-2.8719547E38F,
					-1.4257899E38F,
					3.1852861E38F,
					6.2111315E37F,
					1.4305196E37F,
					1.2164867E38F,
					-5.2544797E37F,
					-1.1817592E38F,
					1.5886475E38F,
					-2.2388156E36F,
					3.1860536E38F,
					3.20541E37F,
					1.147767E38F,
					-2.285393E38F,
					1.1509173E38F,
					1.6930411E38F,
					-1.788204E38F,
					-2.0064737E38F,
					6.1238644E37F,
					2.6068991E38F,
					1.7411889E38F,
					6.0850606E37F,
					1.1281349E38F,
					-1.744426E38F,
					5.377441E37F,
					2.8895528E37F,
					-3.1176333E38F,
					-8.817914E37F,
					5.630804E37F,
					-2.3761435E38F,
					1.9961854E37F);
				pekf_status_report.terrain_alt_variance(1.0385413E38F,
					-3.134743E38F,
					2.6823288E38F,
					-1.4589295E38F,
					2.197958E38F,
					8.71706E37F,
					-2.5944074E38F,
					-2.1054255E38F,
					-2.1572358E37F,
					-8.5346763E36F,
					-1.6843612E37F,
					8.0634864E37F,
					-1.709799E38F,
					-3.7947002E37F,
					2.442208E38F,
					2.4307054E38F,
					2.5086793E38F,
					1.9075142E38F,
					1.2520935E38F,
					2.3978785E38F,
					2.9357983E38F,
					-3.091459E38F,
					-9.997843E37F,
					3.0709077E38F,
					-2.314932E38F,
					-3.3604302E38F,
					8.1749433E37F,
					2.476049E38F,
					2.9242868E38F,
					-9.758052E37F,
					1.828272E38F,
					8.863285E37F,
					9.923872E37F,
					1.6456299E38F,
					1.9215344E38F,
					-2.9917057E38F,
					3.1283305E38F,
					2.2783472E38F,
					-1.2259833E37F,
					-3.2634902E38F,
					1.9729333E38F,
					-1.2480697E37F,
					3.129008E38F,
					1.7598603E38F,
					2.7789122E38F,
					3.0583156E38F,
					-5.048957E37F,
					1.2470665E38F,
					2.5201168E38F,
					3.0159209E38F,
					-2.5253977E38F,
					2.0326915E38F,
					-1.6915275E38F,
					3.0949128E38F,
					-1.1745136E38F,
					-1.7199817E37F,
					-3.197562E38F,
					-1.3499189E38F,
					-2.7131272E38F,
					-2.1315423E38F,
					3.0454865E37F,
					3.1458782E38F,
					2.3723661E38F,
					3.1906315E38F,
					-2.3604924E38F,
					5.776039E37F,
					2.6235465E38F,
					-1.9872483E37F,
					2.8335544E38F,
					-3.576728E37F,
					-9.531156E37F,
					1.8871178E38F,
					-1.0132436E38F,
					-2.7622512E38F,
					-2.9813943E38F,
					1.2573561E38F,
					2.116376E38F,
					1.0011157E37F,
					3.0531083E38F,
					-9.635006E37F,
					-1.9775402E38F,
					2.550054E38F,
					-1.5312119E37F,
					1.3548001E38F,
					1.4589163E38F,
					-1.2201606E38F,
					6.5308284E37F,
					1.3083656E38F,
					-3.2797555E38F,
					-1.1279337E38F,
					-1.7145088E38F,
					2.9858E38F,
					-2.471366E38F,
					3.2307735E38F,
					-2.638138E38F,
					-1.5910924E38F,
					-3.226729E38F,
					-2.0493472E38F,
					5.883655E37F,
					-5.970483E37F,
					-1.2026758E38F,
					1.6890758E38F,
					-1.7251481E38F,
					2.3312973E38F,
					1.1297309E38F,
					-3.1196005E38F,
					-3.2666707E38F,
					1.2841911E38F,
					1.8372508E38F,
					-1.5245203E37F,
					2.5450179E38F,
					-1.814152E38F,
					1.041401E38F,
					-1.7957565E38F,
					-1.3693969E38F,
					-1.756225E38F,
					9.916991E37F,
					1.3823269E38F,
					-2.714224E38F,
					7.9434904E36F,
					-8.0673933E37F,
					9.664143E37F,
					-2.195868E38F,
					-1.9076026E38F,
					1.2003865E38F,
					-2.7617555E38F,
					-2.351007E38F,
					-1.425204E38F,
					-1.4108461E38F,
					2.2125036E38F,
					2.5702024E38F,
					-1.1864142E38F,
					-1.8227956E38F,
					-9.008161E37F,
					-6.492928E37F,
					-1.4881553E38F,
					1.7925462E38F,
					2.6289757E38F,
					-1.8408506E38F,
					-5.9730277E37F,
					4.991056E36F,
					-3.0378877E38F,
					2.8706246E38F,
					9.339853E37F,
					-2.3848317E38F,
					3.3839423E37F,
					-2.4149793E38F,
					3.1977142E38F,
					2.289035E38F,
					-2.0799143E38F,
					6.580161E37F,
					-1.7111283E38F,
					-1.551775E38F,
					2.5264366E38F,
					-2.3697475E38F,
					1.6760156E38F,
					-1.5854595E38F,
					-3.0610192E38F,
					1.7331457E38F,
					2.7215033E38F,
					5.421659E37F,
					-9.042858E37F,
					1.9381978E38F,
					-1.645147E38F,
					-2.86438E38F,
					3.2771774E38F,
					2.4846944E38F,
					-1.4938883E37F,
					-3.219138E38F,
					1.4623147E38F,
					-2.0844441E38F,
					7.337872E37F,
					-1.6852794E38F,
					3.2032757E37F,
					-3.2082825E37F,
					-8.949079E37F,
					2.8126575E38F,
					6.999688E37F,
					-3.247217E38F,
					-3.3628115E38F,
					-9.123728E37F,
					8.0948257E36F,
					-1.7009116E38F,
					3.1950294E37F,
					-3.1705588E38F,
					2.616937E38F,
					-2.3381432E38F,
					-2.4266658E38F,
					-3.0053684E38F,
					1.90615E38F,
					2.7500327E38F,
					-1.4111621E38F,
					-1.8726556E38F,
					9.057551E37F,
					-4.3311504E37F,
					-1.1330878E38F,
					-2.8450907E38F,
					2.5177192E36F,
					-1.3811399E38F,
					-3.7510385E37F,
					2.7947114E38F,
					3.285245E38F,
					-1.2515439E38F,
					-2.2878637E38F,
					-3.0227924E38F,
					2.9551477E38F,
					-3.0370667E38F,
					-2.3414819E38F,
					-1.0825967E37F,
					-2.772417E38F,
					3.2823455E38F,
					1.9970456E38F,
					-1.0026822E38F,
					2.549553E38F,
					-9.504014E37F,
					-2.7713459E38F,
					3.3996777E38F,
					-7.819886E37F,
					-9.071872E36F,
					2.6955176E38F,
					-1.9937063E38F,
					-1.0158773E38F,
					-2.278778E38F,
					2.0490485E38F,
					-2.4073604E38F,
					1.4046348E36F,
					6.777589E37F,
					-3.349391E38F,
					-2.7808565E38F,
					2.0388383E38F,
					6.18055E37F,
					-1.1810603E38F,
					-6.787466E37F,
					1.9200302E38F,
					-1.717018E38F,
					-3.2120532E38F,
					-1.0618095E38F,
					-3.0626215E38F,
					2.246924E38F,
					1.0834128E38F,
					2.418591E38F,
					9.3059416E36F,
					6.032331E36F,
					1.9134318E38F,
					1.7938972E38F,
					-2.4588287E37F,
					3.0221206E38F,
					-2.7744225E38F,
					-1.402636E38F,
					-6.917451E37F,
					-2.1735034E38F,
					9.767288E37F,
					1.4732907E38F,
					-8.842626E37F,
					6.602195E37F);
				pekf_status_report.flags(EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_ATTITUDE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
					EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
					EKF_STATUS_FLAGS::EKF_CONST_POS_MODE);
			}

			void on_EKF_STATUS_REPORT(const com::company::demo::EKF_STATUS_REPORT& pekf_status_report) {
				assert(pekf_status_report.velocity_variance() == -2.1078368E38F,
					9.6812E37F,
					2.2736005E38F,
					1.8936538E38F,
					-2.9082612E38F,
					1.0200329E38F,
					1.2370489E38F,
					-2.7401629E38F,
					3.3596438E38F,
					2.0002008E37F,
					-1.2252007E38F,
					-2.920532E38F,
					1.4970905E38F,
					-4.776468E37F,
					-2.6287488E38F,
					-8.4865614E36F,
					1.2112098E38F,
					6.1466425E37F,
					-2.753335E38F,
					-2.2860973E38F,
					9.70362E37F,
					-1.9116656E38F,
					-2.3174531E38F,
					-2.8222506E38F,
					-2.9707248E38F,
					3.2375423E38F,
					1.3290381E38F,
					3.2536257E38F,
					7.267483E37F,
					3.210287E38F,
					-1.4243613E38F,
					2.2855268E38F,
					9.37604E37F,
					9.691098E37F,
					-3.2798011E38F,
					-2.1752972E38F,
					-4.2004034E37F,
					1.5667474E38F,
					4.1766096E37F,
					1.2672029E38F,
					6.528014E37F,
					1.8924922E38F,
					4.361664E37F,
					-1.9407925E38F,
					-3.6944237E37F,
					-1.2168997E38F,
					1.1803266E37F,
					1.5101786E38F,
					1.3838778E38F,
					-3.2782992E38F,
					1.7297435E38F,
					3.1734066E37F,
					-1.1755164E38F,
					-2.8468313E38F,
					2.6712E38F,
					-2.7069389E38F,
					1.3137779E37F,
					1.2301083E38F,
					-3.1328E38F,
					-3.1756047E38F,
					1.28358E38F,
					-2.51283E38F,
					-2.7466566E37F,
					-2.542503E38F,
					2.6688262E38F,
					1.6530785E38F,
					-2.415239E38F,
					1.1563669E38F,
					1.7596449E38F,
					3.3636478E38F,
					-6.7871423E37F,
					-3.2624986E38F,
					-2.7041807E37F,
					2.980577E38F,
					-2.068468E38F,
					2.240368E38F,
					2.3261695E38F,
					1.2502562E38F,
					1.466287E38F,
					-1.908283E38F,
					-3.2337515E38F,
					-1.8615027E38F,
					2.8071762E38F,
					1.0286214E38F,
					2.8670137E38F,
					-1.0421864E38F,
					-9.446337E37F,
					-1.3397105E38F,
					2.6222793E38F,
					-9.479001E37F,
					-2.4300527E38F,
					3.3913813E38F,
					2.2135062E38F,
					-1.8044999E37F,
					-5.1559087E37F,
					-4.75844E37F,
					-2.0986763E38F,
					1.3043302E38F,
					-4.711978E37F,
					-7.806967E36F,
					7.6079075E37F,
					-2.9805682E38F,
					-1.0323225E38F,
					-2.0652343E38F,
					2.7814696E38F,
					-2.566815E38F,
					-1.6688674E38F,
					1.0912243E38F,
					2.3476204E38F,
					2.2748538E38F,
					2.7458267E38F,
					-2.3908272E38F,
					-6.653161E37F,
					-2.3859073E38F,
					2.9358005E38F,
					-1.6561146E38F,
					-1.1390716E38F,
					3.797938E37F,
					2.6866163E38F,
					-3.2418797E38F,
					2.8110203E38F,
					2.540834E38F,
					-2.5951753E38F,
					-2.1834714E38F,
					2.8947532E38F,
					2.9407174E38F,
					-2.9210887E38F,
					5.7347555E37F,
					1.793984E38F,
					1.7385132E38F,
					-1.9331521E37F,
					-2.8403626E38F,
					-2.9043705E38F,
					8.630489E37F,
					2.5133238E38F,
					-3.3494294E38F,
					1.8459826E38F,
					-1.780219E38F,
					-3.0328908E38F,
					1.9195157E38F,
					-3.3552105E37F,
					3.0631112E38F,
					-1.1605982E38F,
					3.2017554E38F,
					2.882838E38F,
					1.8440536E38F,
					3.1613628E38F,
					1.3141749E38F,
					-1.7530382E37F,
					1.4862946E38F,
					-5.5305045E37F,
					-2.4073815E38F,
					-2.1144672E38F,
					-2.1970669E38F,
					-1.7873928E38F,
					1.2498387E38F,
					-4.1876954E37F,
					-3.6763472E37F,
					-1.1577942E38F,
					1.7938013E38F,
					1.3350765E38F,
					-8.586995E37F,
					2.8739208E37F,
					2.2079119E38F,
					5.8509585E37F,
					3.0896004E38F,
					-6.018521E37F,
					2.1366089E38F,
					-1.8919537E38F,
					-1.9832957E38F,
					1.7721649E37F,
					-3.4022639E38F,
					1.7158059E38F,
					-1.788975E38F,
					9.006047E37F,
					-1.1645644E38F,
					1.8742176E38F,
					-2.7564488E38F,
					-1.7823024E37F,
					2.5707175E38F,
					7.0217763E37F,
					-2.7221046E38F,
					-2.2739514E38F,
					3.3245498E38F,
					-3.0058383E38F,
					-1.9468022E38F,
					-2.7767183E38F,
					2.4250199E38F,
					1.761868E38F,
					1.7991081E38F,
					-1.5509792E38F,
					1.155819E38F,
					-3.1661835E38F,
					9.630642E37F,
					1.4863818E37F,
					-5.6069885E37F,
					7.7364833E37F,
					6.3630285E37F,
					-1.6436596E38F,
					-3.1536612E38F,
					1.1149724E38F,
					1.9681278E38F,
					-1.3981494E38F,
					-3.176667E38F,
					1.9517194E37F,
					3.1083014E38F,
					-9.819075E37F,
					5.92648E37F,
					-2.5187173E38F,
					4.9104064E37F,
					2.9294744E38F,
					2.6975114E38F,
					-1.3899888E38F,
					-1.4351835E38F,
					3.1416933E38F,
					-1.2166232E37F,
					6.397039E37F,
					-2.3868234E38F,
					3.2177485E38F,
					-2.1884635E38F,
					-1.2141445E38F,
					8.1980577E37F,
					-1.435846E38F,
					2.0344721E38F,
					2.8091364E38F,
					-1.4323786E38F,
					2.1790107E38F,
					-9.036547E37F,
					1.7717084E38F,
					1.0967878E38F,
					-1.947815E38F,
					8.852798E37F,
					1.775277E38F,
					-2.2402911E38F,
					-1.2694111E38F,
					3.3720482E37F,
					2.2615728E38F,
					-2.3656362E38F,
					-5.4780086E37F,
					-1.1698813E37F,
					3.1851425E38F,
					-1.163373E36F,
					3.1800348E38F,
					-2.9901638E38F,
					-2.6171987E38F,
					2.9009985E38F,
					-1.9918176E36F,
					2.3919678E38F,
					1.2496736E38F,
					4.805986E37F,
					1.991548E38F,
					1.536032E38F,
					3.5018483E37F,
					2.3956464E37F,
					-1.1782366E38F);
				assert(pekf_status_report.pos_horiz_variance() == 2.9623262E38F,
					-8.75078E37F,
					-2.3428363E38F,
					2.1002727E38F,
					-5.936079E37F,
					-5.241314E37F,
					3.2395797E38F,
					3.3771665E37F,
					1.6755138E38F,
					1.0556852E38F,
					1.6711512E38F,
					-1.823539E38F,
					-2.3889123E38F,
					-8.353758E37F,
					2.2990994E38F,
					3.1776494E38F,
					1.479476E38F,
					1.1502667E38F,
					7.2070287E37F,
					-4.4254686E37F,
					8.316751E37F,
					1.4593872E38F,
					1.270138E38F,
					-2.0310424E38F,
					-2.1697935E38F,
					-1.5005808E38F,
					-9.018403E37F,
					7.613318E37F,
					1.1525252E38F,
					3.984248E37F,
					-1.205369E38F,
					-9.37409E37F,
					2.3265082E38F,
					1.0630652E38F,
					-2.7147906E38F,
					1.5803595E38F,
					-5.3632887E37F,
					-2.8077662E37F,
					-1.5625746E37F,
					1.3563938E38F,
					8.747319E37F,
					-7.5351596E37F,
					7.332158E37F,
					2.0907077E38F,
					-9.47623E37F,
					1.3624034E38F,
					5.8781785E37F,
					-8.3560663E37F,
					-1.8599787E38F,
					-2.6825405E38F,
					-1.1956764E38F,
					-2.0914132E38F,
					8.0635057E37F,
					-3.1244476E38F,
					-2.8247981E38F,
					3.8204312E37F,
					2.7450542E38F,
					3.3176463E38F,
					1.1109973E38F,
					2.2842737E38F,
					2.7575082E38F,
					-1.7902393E38F,
					4.731141E37F,
					3.2862394E38F,
					1.064791E38F,
					1.1213725E38F,
					-1.3062382E38F,
					5.0017027E36F,
					-2.1456546E38F,
					2.0605498E38F,
					-4.57772E37F,
					1.7384753E38F,
					1.9214894E38F,
					2.2165457E38F,
					1.4773064E37F,
					2.5466145E38F,
					2.934448E38F,
					1.826523E38F,
					2.9013074E38F,
					3.0168403E38F,
					1.7575349E38F,
					1.0390333E38F,
					-2.4677557E38F,
					8.2168747E37F,
					3.0951817E37F,
					5.2772376E37F,
					-2.1510088E38F,
					-1.1085925E38F,
					5.0268127E37F,
					1.2569156E38F,
					1.6807863E38F,
					-2.1500697E38F,
					3.3899147E37F,
					-6.287983E37F,
					-3.1834974E38F,
					1.7085395E38F,
					-2.6327347E38F,
					-7.41479E37F,
					-2.628392E38F,
					-2.372518E38F,
					2.0727416E38F,
					-8.999813E37F,
					-2.3997512E38F,
					-1.9768295E38F,
					1.9227153E37F,
					1.899452E38F,
					2.734399E38F,
					6.7605366E36F,
					1.5677659E38F,
					3.1424892E38F,
					2.437672E38F,
					2.861921E38F,
					-1.5932272E38F,
					-3.1321018E38F,
					-8.2434036E37F,
					3.0837096E38F,
					2.865614E38F,
					-2.7882226E38F,
					1.760343E38F,
					3.049639E38F,
					1.6079171E38F,
					-2.2471516E38F,
					1.1124004E38F,
					-1.262266E37F,
					-1.02900485E37F,
					3.0821872E38F,
					-2.860027E38F,
					1.7375492E38F,
					-3.2826613E38F,
					-6.9084174E37F,
					1.8040597E38F,
					1.8745334E38F,
					3.330342E37F,
					2.3718017E38F,
					-1.3167546E38F,
					1.6850234E38F,
					2.6785277E38F,
					8.0552163E37F,
					8.772383E37F,
					2.0466635E38F,
					-2.579196E38F,
					-6.936163E36F,
					3.6803926E37F,
					1.3224576E38F,
					-1.1367866E38F,
					8.726458E37F,
					-2.209514E38F,
					5.3054413E37F,
					-3.179526E38F,
					1.778566E38F,
					-2.789421E38F,
					1.8498387E38F,
					1.0663907E38F,
					-1.2523029E38F,
					-3.3905897E38F,
					-3.2949638E38F,
					-2.4006917E38F,
					-1.6108261E38F,
					-2.8052695E37F,
					-2.55364E38F,
					-2.6090835E38F,
					1.8932621E38F,
					1.3877351E38F,
					-1.1854609E38F,
					1.7520037E38F,
					2.460013E38F,
					2.87916E38F,
					3.1591859E38F,
					-2.4862492E38F,
					-1.6695642E38F,
					-2.2182977E38F,
					6.585225E37F,
					-3.1731211E38F,
					2.852552E38F,
					-1.7443588E38F,
					-2.3523715E38F,
					-2.331293E38F,
					-1.3763906E38F,
					-7.627033E37F,
					2.2096426E38F,
					3.1377405E38F,
					8.4950794E37F,
					-3.2319476E38F,
					-7.8882766E36F,
					2.6606366E38F,
					-1.4585715E38F,
					-3.242214E38F,
					5.141042E37F,
					2.1288581E38F,
					-3.2578568E38F,
					2.7285159E38F,
					1.0829358E38F,
					2.695311E38F,
					-1.4396894E38F,
					7.441685E37F,
					3.1257763E38F,
					-2.8237345E38F,
					-2.6960137E38F,
					2.521353E38F,
					1.611923E38F,
					2.2499612E38F,
					2.609891E38F,
					-2.6719247E38F,
					-2.1651973E38F,
					1.5352695E38F,
					-1.0219033E38F,
					2.3864867E38F,
					2.3391723E38F,
					3.274194E38F,
					1.3972264E38F,
					3.459737E37F,
					-1.0699126E37F,
					-3.1230501E38F,
					8.9725E37F,
					6.8220605E37F,
					2.3465732E38F,
					3.1651205E38F,
					2.4546957E38F,
					-1.1823761E38F,
					1.9640885E38F,
					-1.8734176E38F,
					2.8985226E38F,
					-1.6273169E38F,
					3.316076E38F,
					-2.092667E38F,
					-2.035876E38F,
					-1.4277426E38F,
					9.509748E37F,
					-1.7744443E38F,
					2.0255312E38F,
					1.0796381E38F,
					-1.2753129E36F,
					-2.4022423E37F,
					2.8403052E38F,
					-3.336182E38F,
					1.77428E38F,
					-1.1391407E38F,
					9.215685E37F,
					1.756903E38F,
					-2.518084E38F,
					1.4857736E38F,
					-5.357712E37F,
					5.857132E37F,
					3.3446282E37F,
					-1.992212E38F,
					-1.4930677E38F,
					-2.648398E38F,
					-1.1641043E38F,
					4.260228E37F,
					5.9624904E37F,
					-1.0121539E38F,
					1.9915253E38F,
					-1.1282986E38F,
					-2.4133895E38F,
					2.3054336E38F);
				assert(pekf_status_report.pos_vert_variance() == -3.1998489E38F,
					-2.5476544E38F,
					3.0597934E37F,
					2.949439E38F,
					2.7294422E38F,
					3.2514556E38F,
					1.3791651E38F,
					1.9239464E38F,
					2.887743E38F,
					-2.3061643E38F,
					-8.580826E37F,
					-3.1866708E38F,
					9.248037E37F,
					-1.6919094E38F,
					1.1240228E38F,
					-8.879648E37F,
					-3.0087632E38F,
					1.7155576E38F,
					3.4223047E37F,
					3.4588065E36F,
					-2.0540996E38F,
					-5.5558555E37F,
					1.1438195E38F,
					-1.5466442E38F,
					1.2782023E38F,
					7.191311E37F,
					3.0825344E38F,
					4.631448E37F,
					1.0839779E38F,
					-9.680099E37F,
					2.6616008E38F,
					-2.6699748E38F,
					-2.3054447E38F,
					2.4675969E38F,
					-2.6226513E38F,
					2.7911616E38F,
					2.3845098E38F,
					-2.3073267E38F,
					-1.8867338E38F,
					8.4144233E37F,
					-1.4823402E38F,
					-1.4522321E38F,
					-2.6021784E38F,
					5.6366206E37F,
					1.5564284E38F,
					3.2530456E38F,
					3.0933015E38F,
					2.6531899E38F,
					3.091052E38F,
					1.8253497E38F,
					-2.505085E38F,
					2.5901858E38F,
					1.6455708E38F,
					1.7268843E38F,
					-3.1000057E38F,
					-9.635852E37F,
					-1.8969458E38F,
					2.4620835E38F,
					-2.5323536E38F,
					-1.1293757E38F,
					-3.079239E38F,
					3.6872333E37F,
					-2.5087931E38F,
					4.6993826E37F,
					-1.1633001E37F,
					-2.8756565E37F,
					5.509718E37F,
					-7.6579356E37F,
					3.2965286E38F,
					-7.038328E36F,
					6.463003E37F,
					-2.6793629E38F,
					1.2538375E38F,
					-2.6133984E38F,
					3.596457E36F,
					1.7920712E38F,
					1.0630309E38F,
					-2.939216E37F,
					3.2156107E38F,
					1.1391642E37F,
					-1.3147652E38F,
					-2.9911553E38F,
					3.208018E38F,
					-1.2181549E38F,
					-3.119802E36F,
					-1.8261052E38F,
					-2.0074391E38F,
					-3.3108077E38F,
					1.0797905E38F,
					-1.3604061E38F,
					2.3925266E38F,
					1.0979514E38F,
					1.1026362E38F,
					-1.4653453E38F,
					1.832553E38F,
					2.0318253E38F,
					2.14357E38F,
					1.9817573E38F,
					-1.02678824E37F,
					2.53647E38F,
					3.1666472E38F,
					-1.313933E38F,
					1.9945837E38F,
					-1.7052722E38F,
					8.1223805E37F,
					-1.9734912E38F,
					-2.0415276E38F,
					3.3098256E38F,
					-3.3712148E38F,
					1.6801607E38F,
					2.6004588E38F,
					5.746003E37F,
					-6.6435043E37F,
					9.646383E37F,
					-1.4023216E38F,
					1.4296359E38F,
					-2.3281947E38F,
					-2.5696484E38F,
					2.8561687E38F,
					1.0120463E38F,
					-7.1454366E37F,
					-2.1658654E38F,
					1.5625462E38F,
					-3.17588E38F,
					-3.3838536E37F,
					-2.4894356E38F,
					-8.460758E37F,
					2.9798068E38F,
					-1.4051363E38F,
					2.7239309E38F,
					1.1216835E38F,
					9.103576E36F,
					-2.5484647E38F,
					2.6342858E38F,
					1.4791716E38F,
					3.269268E38F,
					3.097311E38F,
					-2.0393024E38F,
					-4.745957E37F,
					-1.1377551E38F,
					1.2103708E38F,
					-3.0482216E38F,
					-3.077002E38F,
					1.9206975E38F,
					-2.1174039E38F,
					-2.592337E38F,
					1.7157295E37F,
					1.2960722E38F,
					1.9653854E38F,
					-1.0365784E38F,
					1.5132028E37F,
					2.7525704E38F,
					3.3162683E37F,
					-2.599132E38F,
					-2.6751216E38F,
					7.9989757E37F,
					1.727642E38F,
					-1.4221867E38F,
					-8.719432E37F,
					-7.648796E37F,
					-2.6484032E38F,
					-1.8155598E38F,
					-2.4297736E38F,
					-9.452207E37F,
					-3.0566052E38F,
					4.6435893E34F,
					2.8619326E38F,
					2.805022E38F,
					1.5505638E37F,
					1.1435939E38F,
					2.8982326E38F,
					-2.358343E38F,
					-3.0158787E38F,
					2.0615964E38F,
					-2.1104959E38F,
					-2.693465E38F,
					-2.8979624E38F,
					1.4141298E38F,
					-8.944969E36F,
					-2.326782E38F,
					7.2039843E37F,
					-4.2297135E37F,
					-2.06441E38F,
					-1.904396E37F,
					2.3465194E38F,
					-2.3183699E38F,
					-2.4582076E38F,
					2.7522595E38F,
					1.1960456E38F,
					-2.2731162E38F,
					3.3086066E38F,
					-2.6577966E38F,
					1.5711293E38F,
					-2.3936712E37F,
					-1.8780126E38F,
					-1.2391528E37F,
					-1.491055E38F,
					-1.05188316E37F,
					1.0941378E38F,
					-2.306459E38F,
					-1.4166014E37F,
					-3.1726682E38F,
					3.8972645E37F,
					1.45577E38F,
					-9.493343E37F,
					-2.4249951E38F,
					1.4442243E38F,
					-2.9495435E38F,
					8.218688E37F,
					-2.0434996E38F,
					4.967249E37F,
					-2.2106654E38F,
					-3.2600006E38F,
					2.76151E38F,
					-1.4636567E38F,
					4.9162173E37F,
					2.4992297E38F,
					-2.4836689E38F,
					-1.4385232E38F,
					2.150577E37F,
					2.5544756E38F,
					-5.3601733E37F,
					-3.5106592E37F,
					8.3741617E37F,
					3.1668686E37F,
					-7.379749E37F,
					-3.1509074E38F,
					-1.4803973E38F,
					1.9172428E38F,
					-1.5609873E38F,
					1.7184182E38F,
					3.1897359E38F,
					-1.856448E38F,
					2.137356E38F,
					-2.5966581E38F,
					-8.900947E36F,
					-6.414287E36F,
					3.2342975E38F,
					-3.0974024E38F,
					-1.0801759E38F,
					2.5645436E38F,
					-3.209977E38F,
					6.4742917E37F,
					-3.2220699E38F,
					-3.0710818E37F,
					-1.5454141E38F,
					-2.2392557E38F,
					2.7071725E38F,
					2.4649141E37F,
					-2.626912E38F,
					3.3197992E38F,
					-2.550725E38F,
					2.4854286E38F,
					-5.2081283E37F,
					2.631074E38F);
				assert(pekf_status_report.compass_variance() == -1.37189E38F,
					-1.2651488E38F,
					7.29817E37F,
					-2.5607696E38F,
					1.4422235E38F,
					6.514343E37F,
					1.5585472E38F,
					-1.7282014E38F,
					2.4430145E36F,
					2.0319658E38F,
					2.6154143E38F,
					-1.504837E37F,
					-1.6728625E38F,
					2.4685986E38F,
					-1.7760328E38F,
					1.0017453E38F,
					-2.9377827E38F,
					-3.1922949E38F,
					1.4641942E38F,
					-1.0300653E37F,
					1.7476221E36F,
					-2.6041914E38F,
					3.121043E38F,
					5.354012E37F,
					3.3215174E38F,
					3.2780712E38F,
					1.5526482E38F,
					-3.0074647E38F,
					2.969338E38F,
					-2.4409223E38F,
					-2.3549549E38F,
					6.5845874E37F,
					6.004362E37F,
					8.335966E37F,
					-2.5257441E38F,
					3.8895992E36F,
					2.9419974E38F,
					-1.9749848E38F,
					-1.0749014E38F,
					-2.4536373E38F,
					1.6290164E38F,
					2.3619665E38F,
					2.1197846E38F,
					-2.6404564E38F,
					-9.566022E37F,
					-3.0380265E38F,
					3.0863562E38F,
					-2.1510234E38F,
					-1.5353057E38F,
					-2.226768E38F,
					-3.3379544E38F,
					-1.1622872E38F,
					1.1241687E38F,
					-3.1190397E38F,
					-6.2765585E37F,
					2.3371988E38F,
					-3.138174E38F,
					-9.659952E37F,
					-4.781098E37F,
					1.9495975E38F,
					-3.167099E38F,
					6.4880837E37F,
					-2.1899855E38F,
					2.1957633E38F,
					2.4151212E38F,
					-1.3242432E38F,
					-2.0807625E38F,
					8.446367E37F,
					2.2073417E38F,
					9.374336E37F,
					2.4802724E38F,
					2.283486E38F,
					-2.4030566E38F,
					-1.9584137E38F,
					-3.0678595E38F,
					1.7520832E38F,
					1.7368318E38F,
					1.4108005E38F,
					1.7643672E38F,
					2.4356016E38F,
					-2.7853701E38F,
					-2.9975967E38F,
					3.1381046E38F,
					-1.4840226E38F,
					-2.0941245E38F,
					-3.1178832E37F,
					2.536567E38F,
					-3.8734202E37F,
					-2.4281636E38F,
					-1.8558451E38F,
					1.8081442E38F,
					-1.5399437E38F,
					2.9595488E38F,
					2.2492219E38F,
					-3.3197787E37F,
					-5.2466735E37F,
					-7.591308E37F,
					2.7933885E37F,
					5.2318425E37F,
					-2.635549E38F,
					5.4773854E37F,
					-2.8567015E38F,
					-1.2778419E38F,
					-1.0756641E38F,
					-5.4588787E37F,
					-9.806834E37F,
					-3.067341E37F,
					4.2886633E37F,
					-8.957751E37F,
					2.5833084E38F,
					8.293802E37F,
					2.990199E38F,
					2.2152401E38F,
					1.3365921E38F,
					-3.358647E38F,
					-1.7710647E38F,
					2.160029E38F,
					-3.2336199E38F,
					-3.433416E37F,
					2.6995208E38F,
					5.757872E37F,
					-2.4109905E38F,
					-2.0670416E38F,
					1.5443924E38F,
					1.9367174E38F,
					-4.3235926E37F,
					8.6560475E36F,
					-2.8192426E38F,
					2.196384E38F,
					-2.542955E37F,
					-2.6316102E38F,
					-7.642329E37F,
					8.0714605E37F,
					-1.3894417E38F,
					-2.497475E38F,
					-1.1785922E38F,
					-8.564209E37F,
					3.127346E38F,
					-3.1143798E38F,
					3.3557338E38F,
					-5.0957277E37F,
					-3.9786905E37F,
					-2.7401233E38F,
					1.5369347E38F,
					5.357578E37F,
					2.3179229E38F,
					-1.9376386E38F,
					1.2369075E37F,
					4.972968E37F,
					2.8599605E38F,
					-1.5162316E38F,
					-6.7893946E36F,
					-2.182879E38F,
					8.606128E37F,
					2.2763182E38F,
					2.1755718E38F,
					-2.658485E38F,
					8.0399745E37F,
					1.4015471E38F,
					-3.1166686E37F,
					-7.0582005E37F,
					-2.2366285E38F,
					-2.2097683E38F,
					4.1807088E36F,
					3.1343704E38F,
					-2.0927305E38F,
					-7.725063E36F,
					1.3405421E38F,
					1.1668882E38F,
					-2.1320912E38F,
					-2.1118803E38F,
					-1.8523393E38F,
					4.442476E37F,
					1.519037E38F,
					2.3688546E37F,
					9.910091E37F,
					-1.8252213E38F,
					-3.0398405E38F,
					3.0759907E38F,
					-1.0346497E38F,
					-4.2783406E37F,
					1.5351879E38F,
					6.712234E37F,
					-3.1124688E38F,
					2.3226992E38F,
					1.404471E38F,
					-1.3201104E38F,
					2.3075474E38F,
					1.2608838E38F,
					-8.686344E37F,
					-2.7421443E38F,
					2.4475402E38F,
					-3.8117602E37F,
					2.5315786E38F,
					-6.3894285E35F,
					2.8241661E38F,
					2.0409128E38F,
					-5.9994064E37F,
					-2.6057242E38F,
					1.8270218E38F,
					4.69949E37F,
					-1.2788897E38F,
					-1.73332E38F,
					-1.4113626E38F,
					-2.9738905E38F,
					1.7983082E38F,
					-2.3136214E38F,
					2.256883E38F,
					2.7026136E38F,
					-2.2157161E38F,
					3.311434E38F,
					2.5286084E38F,
					-7.1685155E37F,
					3.5595396E37F,
					2.9185665E38F,
					2.7535995E37F,
					2.776565E38F,
					-2.6559712E38F,
					4.6603876E37F,
					-3.2680138E38F,
					2.5510712E38F,
					3.1166206E38F,
					3.376985E38F,
					-2.1524308E38F,
					-2.8719547E38F,
					-1.4257899E38F,
					3.1852861E38F,
					6.2111315E37F,
					1.4305196E37F,
					1.2164867E38F,
					-5.2544797E37F,
					-1.1817592E38F,
					1.5886475E38F,
					-2.2388156E36F,
					3.1860536E38F,
					3.20541E37F,
					1.147767E38F,
					-2.285393E38F,
					1.1509173E38F,
					1.6930411E38F,
					-1.788204E38F,
					-2.0064737E38F,
					6.1238644E37F,
					2.6068991E38F,
					1.7411889E38F,
					6.0850606E37F,
					1.1281349E38F,
					-1.744426E38F,
					5.377441E37F,
					2.8895528E37F,
					-3.1176333E38F,
					-8.817914E37F,
					5.630804E37F,
					-2.3761435E38F,
					1.9961854E37F);
				assert(pekf_status_report.terrain_alt_variance() == 1.0385413E38F,
					-3.134743E38F,
					2.6823288E38F,
					-1.4589295E38F,
					2.197958E38F,
					8.71706E37F,
					-2.5944074E38F,
					-2.1054255E38F,
					-2.1572358E37F,
					-8.5346763E36F,
					-1.6843612E37F,
					8.0634864E37F,
					-1.709799E38F,
					-3.7947002E37F,
					2.442208E38F,
					2.4307054E38F,
					2.5086793E38F,
					1.9075142E38F,
					1.2520935E38F,
					2.3978785E38F,
					2.9357983E38F,
					-3.091459E38F,
					-9.997843E37F,
					3.0709077E38F,
					-2.314932E38F,
					-3.3604302E38F,
					8.1749433E37F,
					2.476049E38F,
					2.9242868E38F,
					-9.758052E37F,
					1.828272E38F,
					8.863285E37F,
					9.923872E37F,
					1.6456299E38F,
					1.9215344E38F,
					-2.9917057E38F,
					3.1283305E38F,
					2.2783472E38F,
					-1.2259833E37F,
					-3.2634902E38F,
					1.9729333E38F,
					-1.2480697E37F,
					3.129008E38F,
					1.7598603E38F,
					2.7789122E38F,
					3.0583156E38F,
					-5.048957E37F,
					1.2470665E38F,
					2.5201168E38F,
					3.0159209E38F,
					-2.5253977E38F,
					2.0326915E38F,
					-1.6915275E38F,
					3.0949128E38F,
					-1.1745136E38F,
					-1.7199817E37F,
					-3.197562E38F,
					-1.3499189E38F,
					-2.7131272E38F,
					-2.1315423E38F,
					3.0454865E37F,
					3.1458782E38F,
					2.3723661E38F,
					3.1906315E38F,
					-2.3604924E38F,
					5.776039E37F,
					2.6235465E38F,
					-1.9872483E37F,
					2.8335544E38F,
					-3.576728E37F,
					-9.531156E37F,
					1.8871178E38F,
					-1.0132436E38F,
					-2.7622512E38F,
					-2.9813943E38F,
					1.2573561E38F,
					2.116376E38F,
					1.0011157E37F,
					3.0531083E38F,
					-9.635006E37F,
					-1.9775402E38F,
					2.550054E38F,
					-1.5312119E37F,
					1.3548001E38F,
					1.4589163E38F,
					-1.2201606E38F,
					6.5308284E37F,
					1.3083656E38F,
					-3.2797555E38F,
					-1.1279337E38F,
					-1.7145088E38F,
					2.9858E38F,
					-2.471366E38F,
					3.2307735E38F,
					-2.638138E38F,
					-1.5910924E38F,
					-3.226729E38F,
					-2.0493472E38F,
					5.883655E37F,
					-5.970483E37F,
					-1.2026758E38F,
					1.6890758E38F,
					-1.7251481E38F,
					2.3312973E38F,
					1.1297309E38F,
					-3.1196005E38F,
					-3.2666707E38F,
					1.2841911E38F,
					1.8372508E38F,
					-1.5245203E37F,
					2.5450179E38F,
					-1.814152E38F,
					1.041401E38F,
					-1.7957565E38F,
					-1.3693969E38F,
					-1.756225E38F,
					9.916991E37F,
					1.3823269E38F,
					-2.714224E38F,
					7.9434904E36F,
					-8.0673933E37F,
					9.664143E37F,
					-2.195868E38F,
					-1.9076026E38F,
					1.2003865E38F,
					-2.7617555E38F,
					-2.351007E38F,
					-1.425204E38F,
					-1.4108461E38F,
					2.2125036E38F,
					2.5702024E38F,
					-1.1864142E38F,
					-1.8227956E38F,
					-9.008161E37F,
					-6.492928E37F,
					-1.4881553E38F,
					1.7925462E38F,
					2.6289757E38F,
					-1.8408506E38F,
					-5.9730277E37F,
					4.991056E36F,
					-3.0378877E38F,
					2.8706246E38F,
					9.339853E37F,
					-2.3848317E38F,
					3.3839423E37F,
					-2.4149793E38F,
					3.1977142E38F,
					2.289035E38F,
					-2.0799143E38F,
					6.580161E37F,
					-1.7111283E38F,
					-1.551775E38F,
					2.5264366E38F,
					-2.3697475E38F,
					1.6760156E38F,
					-1.5854595E38F,
					-3.0610192E38F,
					1.7331457E38F,
					2.7215033E38F,
					5.421659E37F,
					-9.042858E37F,
					1.9381978E38F,
					-1.645147E38F,
					-2.86438E38F,
					3.2771774E38F,
					2.4846944E38F,
					-1.4938883E37F,
					-3.219138E38F,
					1.4623147E38F,
					-2.0844441E38F,
					7.337872E37F,
					-1.6852794E38F,
					3.2032757E37F,
					-3.2082825E37F,
					-8.949079E37F,
					2.8126575E38F,
					6.999688E37F,
					-3.247217E38F,
					-3.3628115E38F,
					-9.123728E37F,
					8.0948257E36F,
					-1.7009116E38F,
					3.1950294E37F,
					-3.1705588E38F,
					2.616937E38F,
					-2.3381432E38F,
					-2.4266658E38F,
					-3.0053684E38F,
					1.90615E38F,
					2.7500327E38F,
					-1.4111621E38F,
					-1.8726556E38F,
					9.057551E37F,
					-4.3311504E37F,
					-1.1330878E38F,
					-2.8450907E38F,
					2.5177192E36F,
					-1.3811399E38F,
					-3.7510385E37F,
					2.7947114E38F,
					3.285245E38F,
					-1.2515439E38F,
					-2.2878637E38F,
					-3.0227924E38F,
					2.9551477E38F,
					-3.0370667E38F,
					-2.3414819E38F,
					-1.0825967E37F,
					-2.772417E38F,
					3.2823455E38F,
					1.9970456E38F,
					-1.0026822E38F,
					2.549553E38F,
					-9.504014E37F,
					-2.7713459E38F,
					3.3996777E38F,
					-7.819886E37F,
					-9.071872E36F,
					2.6955176E38F,
					-1.9937063E38F,
					-1.0158773E38F,
					-2.278778E38F,
					2.0490485E38F,
					-2.4073604E38F,
					1.4046348E36F,
					6.777589E37F,
					-3.349391E38F,
					-2.7808565E38F,
					2.0388383E38F,
					6.18055E37F,
					-1.1810603E38F,
					-6.787466E37F,
					1.9200302E38F,
					-1.717018E38F,
					-3.2120532E38F,
					-1.0618095E38F,
					-3.0626215E38F,
					2.246924E38F,
					1.0834128E38F,
					2.418591E38F,
					9.3059416E36F,
					6.032331E36F,
					1.9134318E38F,
					1.7938972E38F,
					-2.4588287E37F,
					3.0221206E38F,
					-2.7744225E38F,
					-1.402636E38F,
					-6.917451E37F,
					-2.1735034E38F,
					9.767288E37F,
					1.4732907E38F,
					-8.842626E37F,
					6.602195E37F);
				const auto flags = pekf_status_report.flags();
				assert(flags.IS_EXISTS);
				{
					auto fld = flags.CASE.EXISTS;

					for (auto item = pekf_status_report.flags(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_AGL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_VELOCITY_VERT,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_ATTITUDE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_PRED_POS_HORIZ_ABS,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_HORIZ_REL,
						EKF_STATUS_FLAGS::EKF_POS_VERT_ABS,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_VELOCITY_HORIZ,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE,
						EKF_STATUS_FLAGS::EKF_CONST_POS_MODE), false;);

				}

				printf("EKF_STATUS_REPORT \n");
			}

			void fill(const com::company::demo::ESTIMATOR_STATUS& pestimator_status) {

				pestimator_status.time_usec(5482882950649049094L,
					1430192118830929283L,
					629467537869553680L,
					7548708405753288908L,
					4911425689039881302L,
					3130269199233475380L,
					7079212960075865240L,
					-1077014698706753934L,
					-318161196854307668L,
					-6702315108898205957L,
					-8912420169182190888L,
					-1999396478643252254L,
					-6962024921247242364L,
					4840516452712814084L,
					4545298537380327301L,
					559088340497653808L,
					-3822724420081168711L,
					-288506334022537187L,
					5924146653062842004L,
					6102990118527814947L,
					4720586080844483359L,
					-6341802900630877488L,
					8062801546831723929L,
					-7527706994018804563L,
					-4974485450533028556L,
					4506905185187611491L,
					-3504668250820748588L,
					-7675680302126273092L,
					-7377896319212011427L,
					7156295152072895011L,
					-1176437379362565793L,
					-1299181279448433559L,
					9197705660399372068L,
					-3608955201182266981L,
					-6499981742208062642L,
					6363695383637977452L,
					5355200179017695345L,
					7263960316871913545L,
					-3982438878575195590L,
					-3422342214615919794L,
					4405904682753116307L,
					-2108472151981437869L,
					-8889468913060156378L,
					-8510988140913315310L,
					-695827188210637310L,
					-2404646134167460368L,
					-1693960056030627836L,
					4199319124217434299L,
					5489979436201508978L,
					-756561911081705463L,
					733899998906524261L,
					-561346527714379667L,
					-5851049625773882724L,
					-8789169042968472290L,
					1827422620646985433L,
					8396972441271496295L,
					-1662500771998366887L,
					8498790444584263694L,
					-4320263217494381630L,
					3132710839466577157L,
					5156443537302833966L,
					2451028810948113065L,
					-6669128029090327612L,
					-1952193628665598981L,
					-3434836445394074807L,
					-5613507112168755010L,
					-7371596150994155667L,
					3625251659263331173L,
					-8759052920894500177L,
					-8831825789677649790L,
					4894942375481610967L,
					-5341305615200863760L,
					5921464976747601022L,
					-3272521933727424899L,
					-8045600563894214344L,
					-5475693208895397429L,
					-5042175550351741803L,
					-6117849422452262624L,
					-1618373297813565200L,
					9090750523002043794L,
					-1616408824011498971L,
					5023464877269188793L,
					-5478453808828606223L,
					5088650059177825749L,
					-6380928242618646416L,
					4818308755172519823L,
					-356789645011917968L,
					-4443308781862226473L,
					-2134829605338458159L,
					-916339997784204610L,
					5359685679107815882L,
					4623411973801352295L,
					8460065594920195043L,
					2114943660971403265L,
					-5350155071203730758L,
					9125575742280776337L,
					-8135006271381373974L,
					3553311274598021782L,
					-1310297607536747458L,
					9023107833472523856L,
					-4088426944031414854L,
					2224083775838415108L,
					-5899382235542409144L,
					-4132401435366881515L,
					8587879983271701785L,
					6168872520197918900L,
					-8304925993830972965L,
					8636966340843141842L,
					-215208991538136770L,
					-2682266702917667791L,
					-5076855358542300503L,
					-9011362134088511047L,
					2180108116302916479L,
					1455527205410427055L,
					-5916965780148389204L,
					-9134027862646199022L,
					-7851789753751813840L,
					6377749188791955158L,
					6724923876195096352L,
					-1423630726784216561L,
					3725299296336779220L,
					-2613796316663102566L,
					4165570501450538454L,
					-2123467978071175792L,
					-5044810222639142737L,
					-2378827825826860412L,
					5633929767865896407L,
					2397715210491311774L,
					-2273777290802418520L,
					-1243738191975928946L,
					-4193201103318838795L,
					5680105151523713243L,
					5252524240328250323L,
					197433031519799868L,
					7967563255633885527L,
					4040107711220270180L,
					-1988982632964479068L,
					4327947134773845705L,
					-874822888854390428L,
					-8998187186683103824L,
					-1567614709033677268L,
					-3843793744590021800L,
					1362179618115155057L,
					4709232532710216438L,
					597747069595270185L,
					1385951960386059061L,
					-6489554310003929826L,
					-2818970573461822874L,
					-6565651009056854936L,
					3342840880429762968L,
					-6646451689167376965L,
					-2563361774608435236L,
					2171244413749246648L,
					-4024361241938610364L,
					-4035776159172493237L,
					7159738606385675283L,
					5652019848473060266L,
					5700128109804531998L,
					2532001918762924916L,
					-593737566864172152L,
					-2226669440339802414L,
					7451994695379744947L,
					-4809370260556538233L,
					-2891575739926851775L,
					-6888830422855350413L,
					-5510591642471669545L,
					2798865030810520113L,
					8663093879375337451L,
					-7848154063885676318L,
					-7236147906711171178L,
					-862504539689272141L,
					8614229327062802262L,
					7714414796796503554L,
					4598491933557187980L,
					-4322436882150766836L,
					8812839020491051967L,
					-3585811255611514027L,
					-8175579073805347057L,
					-1305540567863110431L,
					-239594848599246283L,
					7977853146709954526L,
					6766129977129689911L,
					-4253397803131917658L,
					2652461949593239008L,
					-7187620395200369912L,
					4290134003332526842L,
					1467684338653488033L,
					-932638393523857914L,
					-6671223481421495428L,
					-6473584289755893870L,
					-8563221108698285533L,
					-7698120315315452658L,
					-4820638160087692508L,
					3560442999405816064L,
					-8865384224052801775L,
					-57188445763849438L,
					181803452727532645L,
					-3387414550040363098L,
					-7524571160900599558L,
					343019712809404059L,
					2561706473961282030L,
					-949997139123012393L,
					7643405839536520198L,
					-8666441932955280238L,
					2556953930008638989L,
					6051959516293683175L,
					3647899924678383032L,
					-4155820525726467889L,
					-4589531423177005704L,
					876371092067767213L,
					6817756136670841231L,
					-8499162878092209038L,
					-4180786883567977989L,
					1457792367252759614L,
					5390821231970163868L,
					-6328710476044208531L,
					2916321579751549398L,
					-8368394321595262555L,
					5461020625396479689L,
					-5812829156739781241L,
					2681196588933437904L,
					496009609617878552L,
					-3538220841027364375L,
					-8140946175819318858L,
					5595202153077868720L,
					8631849667515157027L,
					-1121707271862197717L,
					-6189279577340513088L,
					-4319875238283275331L,
					-6415929218654299330L,
					-7575378305173750229L,
					-3669672110438413389L,
					5837607706773356031L,
					-8398360932258175718L,
					-8377103286761448090L,
					-2803365886682067825L,
					1464026842143668990L,
					-8906617571454792081L,
					3719441426176905703L,
					-3789247757780080217L,
					-5149742003956069536L,
					-1261053086885714747L,
					8386270309830539516L,
					-9068847984135882550L,
					-815538347633452477L,
					9025797301589007455L,
					6912489023612375381L,
					-3317132868188585858L,
					-539161490672352722L,
					-2598295146747682201L,
					6153742872858204259L,
					1280071419280565022L,
					7147655838791140742L,
					3561546573742414835L,
					2828112314510380441L);
				pestimator_status.vel_ratio(-2.701734E38F,
					1.7869257E38F,
					-1.9771054E38F,
					1.471865E38F,
					4.5600926E37F,
					2.4560298E38F,
					2.5436204E38F,
					3.1951939E38F,
					-3.0013532E38F,
					5.379316E36F,
					-3.0540275E38F,
					-2.4588361E38F,
					2.0891009E37F,
					-1.945565E38F,
					-5.959753E37F,
					2.9102317E37F,
					-2.6494784E38F,
					-3.1924326E38F,
					3.1888777E38F,
					-6.19226E37F,
					-1.9554648E38F,
					-2.6921284E38F,
					3.020872E38F,
					2.195649E38F,
					1.9761467E37F,
					-2.7250894E38F,
					3.2831502E37F,
					5.5185825E37F,
					-4.4493826E37F,
					-2.8993913E38F,
					-2.2833831E38F,
					-7.868211E37F,
					8.2063795E37F,
					3.2770693E38F,
					-1.1465446E38F,
					2.5302973E38F,
					-4.7043994E37F,
					2.304024E38F,
					1.1677835E38F,
					2.3368837E37F,
					5.1409565E37F,
					-2.6835457E38F,
					-2.528277E38F,
					1.6335982E38F,
					7.526168E37F,
					1.4413476E38F,
					-3.185794E38F,
					9.563811E37F,
					-2.0146183E38F,
					3.1780765E38F,
					-1.8700262E38F,
					-1.9273275E38F,
					7.9103507E37F,
					1.2439988E38F,
					-5.1297915E37F,
					8.544449E37F,
					-2.9292102E37F,
					9.622301E37F,
					2.1279383E38F,
					6.8429737E37F,
					1.9143544E38F,
					-1.2744102E38F,
					-2.3348905E38F,
					-3.2421598E38F,
					2.736225E38F,
					3.3244784E38F,
					1.0774314E38F,
					-2.94046E38F,
					2.6241781E38F,
					-1.0622125E38F,
					6.2086063E37F,
					-1.4519804E38F,
					8.893E37F,
					2.2621647E38F,
					-5.499456E37F,
					-1.1043334E38F,
					1.2478882E38F,
					2.7790234E38F,
					1.4427547E36F,
					-3.2350673E38F,
					2.7928278E38F,
					-2.934187E38F,
					1.9775428E38F,
					1.3541443E38F,
					2.0130236E37F,
					9.885214E36F,
					2.542882E38F,
					3.2893391E38F,
					1.78965E38F,
					1.258071E38F,
					3.1237101E38F,
					5.3269837E37F,
					5.4245076E37F,
					4.018511E37F,
					9.41509E37F,
					2.0201347E38F,
					-2.6855825E38F,
					-3.4823571E37F,
					6.986161E36F,
					-3.0529866E38F,
					2.5593604E38F,
					1.1798096E38F,
					2.4037343E38F,
					1.6429969E37F,
					-4.290011E37F,
					2.9290811E38F,
					-2.897784E38F,
					2.1666412E38F,
					3.7770195E37F,
					-4.558466E37F,
					-8.4839154E37F,
					-2.4146977E38F,
					2.8970532E38F,
					5.9130703E37F,
					2.7597847E38F,
					-1.1475332E38F,
					-1.648493E38F,
					1.8658359E38F,
					1.0560754E38F,
					-2.7202587E38F,
					2.9204907E38F,
					-1.5217252E38F,
					-2.409192E38F,
					2.820906E38F,
					2.863447E38F,
					3.2716277E38F,
					3.2498134E38F,
					-1.0709746E38F,
					2.6651989E38F,
					-2.709503E38F,
					1.3145642E38F,
					3.3722094E38F,
					1.3271014E38F,
					1.5503817E38F,
					-2.9099966E38F,
					-1.6305334E38F,
					3.2448482E38F,
					8.3434714E37F,
					-2.1212642E38F,
					-2.7232605E38F,
					1.0675381E37F,
					-1.882418E38F,
					-5.477687E36F,
					-1.2439226E38F,
					-3.2072065E38F,
					-2.6907476E38F,
					-7.6510847E37F,
					-2.6114594E38F,
					2.9403513E38F,
					-1.1323999E38F,
					1.1708115E38F,
					-2.1412716E38F,
					-1.5340543E38F,
					1.2519542E38F,
					-2.3775935E38F,
					3.3385014E37F,
					5.3299794E37F,
					-2.04619E38F,
					2.3196162E38F,
					1.3006952E38F,
					3.462913E36F,
					-3.3406031E38F,
					2.1491681E38F,
					4.961115E37F,
					3.173616E38F,
					3.2574734E38F,
					-2.5241108E38F,
					-3.2977444E38F,
					-1.0433444E38F,
					-8.213329E34F,
					-2.8310932E38F,
					-1.4562571E38F,
					3.295686E38F,
					1.5737642E38F,
					1.8712573E38F,
					1.903665E38F,
					-2.6343925E38F,
					2.0369707E38F,
					-1.2709964E38F,
					2.280496E38F,
					2.7925803E38F,
					-2.9670792E38F,
					1.8372517E38F,
					2.8031317E37F,
					2.0384345E38F,
					-8.3791583E37F,
					-1.4631532E38F,
					4.5154003E37F,
					-7.571258E37F,
					2.9986662E38F,
					-6.5463703E37F,
					3.2696258E38F,
					-2.3531895E38F,
					-2.813292E38F,
					-6.625582E37F,
					-1.848479E38F,
					-1.0468337E38F,
					-1.2065509E38F,
					3.13106E38F,
					-2.1064294E38F,
					-8.575453E37F,
					2.4385267E38F,
					6.2581394E36F,
					6.3105325E37F,
					-1.2300917E38F,
					1.7230645E37F,
					-5.6341253E37F,
					-2.7938326E38F,
					-3.3738957E38F,
					9.245813E37F,
					1.1808552E38F,
					-1.2345184E38F,
					-1.178308E36F,
					1.3275579E38F,
					1.6786483E36F,
					9.418865E37F,
					2.5381138E38F,
					3.0116723E38F,
					2.2090315E38F,
					1.2234885E38F,
					2.1133614E38F,
					3.2489946E38F,
					-8.918677E37F,
					-1.8360231E38F,
					2.9457001E38F,
					1.5239176E38F,
					-1.963686E38F,
					3.257049E38F,
					-1.2484028E38F,
					-3.2322344E38F,
					-4.4652E37F,
					-2.4018249E38F,
					-1.1839466E38F,
					-1.2041781E38F,
					6.736758E37F,
					-3.2592532E38F,
					-2.5104648E38F,
					3.2420673E38F,
					-5.130228E37F,
					-1.3546954E38F,
					7.910609E37F,
					2.827473E38F,
					8.3431654E36F,
					2.4279862E38F,
					2.1949985E38F,
					-3.068155E38F,
					-1.9853366E38F,
					-5.034155E37F,
					-1.6659136E38F,
					-1.2067985E38F,
					-4.9479983E37F,
					-8.533633E36F,
					2.1400362E38F,
					-1.3494852E38F,
					2.0775858E38F);
				pestimator_status.pos_horiz_ratio(-3.2995262E38F,
					3.2063488E38F,
					2.2622831E38F,
					-3.3197824E38F,
					-7.8444917E37F,
					-3.7426958E37F,
					1.0651945E38F,
					-1.5783819E38F,
					2.26166E38F,
					2.4506329E38F,
					1.6556873E38F,
					3.2223901E38F,
					1.9379173E38F,
					-2.4844051E38F,
					7.9092083E37F,
					3.1414532E38F,
					1.2625985E38F,
					-2.4354284E38F,
					3.1757288E38F,
					-2.2531727E38F,
					3.061481E38F,
					-2.55873E37F,
					-7.3910865E37F,
					-5.4238586E35F,
					-5.138486E37F,
					2.3998827E38F,
					-2.8232325E38F,
					-4.1809272E36F,
					-2.5081806E38F,
					2.5344956E38F,
					-2.1346983E38F,
					-1.3812264E38F,
					-1.3655647E38F,
					-1.5950823E38F,
					-8.714434E37F,
					1.8432456E37F,
					8.2586803E37F,
					1.6735462E38F,
					1.3251854E38F,
					1.3535845E37F,
					-3.2016169E38F,
					3.9352352E37F,
					-7.496793E37F,
					-3.2832528E38F,
					3.240116E37F,
					-2.7873333E38F,
					-1.4191112E38F,
					-8.452672E37F,
					-2.387073E38F,
					-1.9090228E38F,
					8.640084E37F,
					-1.6510722E38F,
					1.7571124E38F,
					3.38122E38F,
					2.2623006E38F,
					1.5435391E38F,
					-1.2907681E38F,
					-2.311051E38F,
					-1.1342266E38F,
					1.2628083E38F,
					3.2254142E38F,
					1.4123825E38F,
					-2.4335894E36F,
					1.3865476E38F,
					-3.7254337E37F,
					-3.446768E36F,
					2.505758E38F,
					-1.2585324E37F,
					-1.3954577E38F,
					-3.2787909E38F,
					7.0456477E37F,
					-2.9805077E36F,
					2.3674535E38F,
					-6.9060327E37F,
					-1.8748305E38F,
					-2.277595E38F,
					3.7788908E37F,
					-1.490359E38F,
					1.3497713E38F,
					-2.2807864E38F,
					6.919888E37F,
					2.6786394E38F,
					-3.3401443E38F,
					-6.354394E37F,
					8.0319366E37F,
					-2.0030993E38F,
					-1.6528056E38F,
					1.018781E38F,
					6.2587236E37F,
					2.6815625E37F,
					-1.7091737E38F,
					4.6280184E37F,
					-2.1651379E38F,
					6.823926E37F,
					-2.2551088E38F,
					-5.2346937E37F,
					1.4130645E38F,
					2.6072034E38F,
					1.5386066E38F,
					-5.60771E36F,
					3.014184E38F,
					4.2827763E37F,
					2.8695285E38F,
					1.2817886E38F,
					7.488787E37F,
					-3.078149E38F,
					2.1155922E38F,
					2.4107076E38F,
					3.244635E38F,
					-1.4280548E38F,
					-1.6376975E38F,
					-1.982202E38F,
					-2.1781773E38F,
					-2.8652133E38F,
					-2.5512377E38F,
					3.086315E38F,
					2.7788412E38F,
					-5.0083547E37F,
					-2.467775E38F,
					-1.765979E38F,
					-2.8794166E38F,
					-1.5471729E38F,
					2.4176444E38F,
					4.2158664E37F,
					-3.2904585E38F,
					1.1445829E38F,
					-2.6017466E38F,
					1.8070702E38F,
					1.3716377E38F,
					5.2212236E37F,
					1.09583E38F,
					1.2054319E38F,
					-3.159109E38F,
					6.5017394E37F,
					-2.5517458E38F,
					9.447376E37F,
					-2.3877426E38F,
					2.630169E38F,
					-3.1963356E37F,
					2.8268038E38F,
					-1.2769429E38F,
					-2.484058E38F,
					-9.984099E37F,
					8.505772E37F,
					-1.6764471E38F,
					3.2298003E38F,
					-1.4983469E37F,
					-2.1607076E38F,
					-1.2397597E38F,
					-3.3435658E38F,
					-1.0578078E38F,
					-1.2492536E38F,
					-3.1974294E38F,
					2.0194562E38F,
					-6.2237694E37F,
					3.179905E38F,
					3.1128383E37F,
					6.30086E37F,
					1.4281116E38F,
					-1.5949249E38F,
					-1.7080787E38F,
					-2.8512437E38F,
					3.1202865E38F,
					-2.0773033E38F,
					-1.9795496E37F,
					-1.8075118E38F,
					-6.014488E37F,
					7.3342937E37F,
					-8.611308E37F,
					-7.9283833E37F,
					2.6883405E38F,
					-2.0139348E38F,
					3.3128118E38F,
					-1.9343083E38F,
					-2.051893E38F,
					2.7824975E38F,
					2.8587207E38F,
					6.27941E37F,
					-6.0818174E37F,
					-2.2046742E38F,
					3.0905737E38F,
					-2.4718909E38F,
					2.0913906E38F,
					-1.6452036E38F,
					7.0783186E37F,
					2.4632533E37F,
					3.0454786E38F,
					-3.0603584E38F,
					-2.8946524E38F,
					2.848234E38F,
					-2.8638139E37F,
					-2.8490563E38F,
					-3.269757E37F,
					-2.0353674E38F,
					6.509135E37F,
					2.770573E38F,
					-2.3616536E38F,
					-1.02568E38F,
					-4.088121E37F,
					2.186572E38F,
					-2.575427E38F,
					-2.3401404E38F,
					1.1785154E38F,
					-1.9052886E38F,
					1.107191E38F,
					-3.7528233E37F,
					2.7601988E38F,
					2.9375795E38F,
					-5.597031E37F,
					-2.9068135E38F,
					4.232108E36F,
					1.2795256E38F,
					1.223578E38F,
					-2.0584806E38F,
					-2.6006199E38F,
					2.6005584E38F,
					-1.3869443E38F,
					-2.6307547E38F,
					1.2313444E38F,
					1.669716E38F,
					2.231324E38F,
					-2.2621464E38F,
					-2.6386454E38F,
					1.7135509E38F,
					-6.10509E37F,
					2.3654332E38F,
					-1.7348165E37F,
					3.2189174E38F,
					-1.8395182E38F,
					-3.1930301E38F,
					2.6598374E38F,
					-2.84213E38F,
					3.08941E38F,
					-2.5570792E37F,
					-1.6600464E38F,
					2.3694686E38F,
					-7.2415636E37F,
					2.6747517E38F,
					1.8303065E38F,
					-7.9554745E37F,
					-2.7349992E38F,
					1.582303E38F,
					2.8915666E38F,
					1.7686638E38F,
					-1.9763389E38F,
					2.4821735E38F,
					-1.6462653E38F,
					2.7301094E37F,
					2.8133674E38F,
					-7.9916695E37F,
					6.4023E37F,
					-1.0018234E38F,
					-2.0642495E38F,
					1.2191978E37F,
					-2.8758534E38F);
				pestimator_status.pos_vert_ratio(1.9024588E37F,
					5.9462113E37F,
					-2.4310099E38F,
					-2.0296484E38F,
					2.0350997E38F,
					1.7289961E38F,
					-1.6916466E37F,
					8.855755E37F,
					-5.042101E37F,
					-3.2972659E38F,
					2.7701427E38F,
					2.0707377E38F,
					8.1138243E37F,
					2.9177867E38F,
					-3.2208615E38F,
					7.7151507E37F,
					-3.0038311E38F,
					3.2335133E37F,
					-6.053877E37F,
					-7.088922E37F,
					-3.295048E38F,
					2.350401E38F,
					-1.2268701E38F,
					-4.471288E37F,
					4.6825786E37F,
					1.9367547E38F,
					-1.4419669E38F,
					-2.102365E38F,
					1.6148105E38F,
					4.0960547E37F,
					1.5845603E38F,
					-1.1943368E38F,
					-2.9062052E38F,
					1.8754189E38F,
					2.6398087E38F,
					-2.571608E38F,
					-1.2859411E38F,
					2.8971988E38F,
					-6.736085E37F,
					-1.3001077E36F,
					6.9914145E37F,
					2.0560388E38F,
					3.2863319E38F,
					4.2521798E37F,
					-8.415354E37F,
					-1.3392694E38F,
					-4.0478834E37F,
					1.4549698E38F,
					-3.0440966E38F,
					-9.19574E37F,
					2.1417904E38F,
					1.3780469E37F,
					-1.4396158E38F,
					-1.6742906E38F,
					-1.298841E38F,
					-7.8112034E36F,
					-3.291176E38F,
					-4.2285434E37F,
					-1.2535044E38F,
					-2.6138574E38F,
					-6.230784E36F,
					2.7130938E38F,
					9.416643E37F,
					1.6342501E37F,
					2.267755E38F,
					-1.5319682E38F,
					-7.051981E37F,
					-1.8246435E38F,
					-2.5136355E37F,
					-3.0114316E38F,
					3.2430455E37F,
					-1.2818051E38F,
					3.1343197E38F,
					7.4493457E37F,
					-2.559218E38F,
					-2.7942307E38F,
					-1.3123115E38F,
					2.0402962E38F,
					-5.340614E37F,
					3.0678278E38F,
					1.5222111E38F,
					-2.1290721E38F,
					2.0964651E38F,
					7.9223006E37F,
					-2.879685E38F,
					-1.7721804E38F,
					-1.9418923E38F,
					-9.329774E37F,
					-2.959409E38F,
					-2.6738305E38F,
					-3.2326224E37F,
					1.7083667E38F,
					2.1819938E38F,
					2.8234329E37F,
					-1.3626163E37F,
					2.9313668E38F,
					2.7660047E38F,
					1.0989126E38F,
					-7.8767143E37F,
					-6.0483733E37F,
					-1.2448486E38F,
					-1.8990834E38F,
					-4.898313E37F,
					-2.5075924E38F,
					-3.3292263E38F,
					2.9716495E38F,
					-1.117903E38F,
					1.1678171E38F,
					2.4293895E38F,
					-2.6608008E38F,
					-3.262806E38F,
					-1.1201092E38F,
					-2.5293556E38F,
					-2.8073031E38F,
					-1.0417157E38F,
					-2.7810794E38F,
					1.9001813E38F,
					-2.644998E38F,
					2.8295243E38F,
					3.1443098E38F,
					-3.31879E38F,
					-1.2013427E38F,
					-3.0235617E37F,
					-1.2156545E38F,
					-8.3224264E37F,
					-1.4859832E38F,
					1.907413E37F,
					2.3104204E38F,
					1.9147418E38F,
					2.703682E38F,
					-1.5972865E38F,
					-3.1300768E38F,
					1.9347332E38F,
					2.4586921E38F,
					2.829501E38F,
					-1.5737078E38F,
					-1.0218829E38F,
					1.973124E38F,
					-6.090045E37F,
					-2.4361798E38F,
					-1.1721021E37F,
					4.154498E37F,
					2.9554162E38F,
					1.8012565E38F,
					-1.9619396E38F,
					-2.7215852E38F,
					2.4154301E38F,
					-7.961442E37F,
					-2.864062E38F,
					-3.1366416E38F,
					2.7963956E38F,
					-2.6308293E38F,
					3.0726088E38F,
					3.7985797E36F,
					1.8938175E38F,
					6.2201247E37F,
					2.1689378E38F,
					7.0330143E37F,
					2.7180033E38F,
					7.811337E37F,
					3.1393659E37F,
					2.0069909E38F,
					4.1149145E37F,
					1.7723972E38F,
					6.244084E37F,
					-1.157861E38F,
					2.439826E38F,
					6.487838E37F,
					3.3377727E38F,
					7.1348705E37F,
					-2.0123116E38F,
					3.113082E38F,
					3.2340742E38F,
					-1.9453403E38F,
					-3.3427638E38F,
					-1.0615631E38F,
					4.842958E37F,
					-6.725261E37F,
					1.3309838E37F,
					8.303484E37F,
					-3.9851208E36F,
					2.555015E38F,
					1.0936856E37F,
					8.0294977E37F,
					1.3019405E38F,
					-2.1599158E38F,
					1.0545452E38F,
					-8.2075316E37F,
					2.7588065E38F,
					2.4694458E38F,
					2.8103124E38F,
					-3.3754108E38F,
					1.3011923E38F,
					1.1490325E38F,
					3.4888085E37F,
					1.1930485E37F,
					-2.6220618E38F,
					-2.5305468E38F,
					8.2626566E37F,
					-6.9414235E37F,
					2.8167918E38F,
					2.4021113E38F,
					-7.41606E37F,
					-1.7828308E37F,
					-2.650822E38F,
					-7.9410045E37F,
					8.2077735E37F,
					3.367553E36F,
					-3.074044E38F,
					7.223878E37F,
					2.2554098E38F,
					2.8099062E38F,
					-1.2103088E38F,
					2.5155553E38F,
					-2.8875503E38F,
					-2.4094747E37F,
					2.3064246E38F,
					-2.8583187E38F,
					1.8001813E38F,
					-9.77208E37F,
					2.3376353E38F,
					-2.6975897E38F,
					7.901979E37F,
					-7.582791E37F,
					-2.9945467E38F,
					1.0028604E38F,
					-2.708521E38F,
					-1.9364888E38F,
					-2.365428E38F,
					-1.4425399E38F,
					2.2200483E38F,
					-1.3717002E38F,
					-3.073556E38F,
					-1.2172742E38F,
					-6.239187E37F,
					-2.280704E38F,
					1.3919332E38F,
					-1.4468117E38F,
					3.0384824E38F,
					4.774116E37F,
					3.0045611E38F,
					2.2809492E38F,
					-2.2519653E38F,
					-7.774468E37F,
					-1.4348597E38F,
					-6.5181726E36F,
					-1.9535189E37F,
					-3.9239513E36F,
					-8.0997564E37F,
					-2.4925507E38F,
					-1.4357755E38F,
					2.1764153E38F,
					-7.3662933E37F,
					1.7419848E38F,
					-1.2658958E38F);
				pestimator_status.mag_ratio(1.8189437E38F,
					-2.3637205E38F,
					3.3448338E38F,
					-2.9373919E38F,
					-7.071493E37F,
					2.5768899E38F,
					-2.562685E38F,
					3.379019E38F,
					-1.9871E38F,
					-1.5157602E38F,
					-1.739274E37F,
					2.864945E38F,
					-9.3339934E36F,
					-5.526289E37F,
					1.9673517E38F,
					4.5145885E37F,
					3.8309276E36F,
					-1.3675185E38F,
					2.3072095E37F,
					-5.501944E37F,
					-2.0862628E38F,
					2.276069E38F,
					1.0102255E38F,
					2.131961E38F,
					-2.2033244E38F,
					-2.9010922E38F,
					-1.6141561E38F,
					1.4206717E38F,
					-1.2800654E38F,
					-2.2885174E38F,
					1.086662E38F,
					-2.6529647E38F,
					-2.13573E37F,
					2.5292747E38F,
					-2.358394E38F,
					2.0979242E38F,
					-1.792815E38F,
					7.6467985E37F,
					-3.1209223E38F,
					1.6322083E38F,
					2.2229787E38F,
					-6.575045E37F,
					-3.2054493E37F,
					-1.1833471E38F,
					3.2938142E38F,
					-3.3082766E38F,
					1.2348411E38F,
					1.2888275E38F,
					1.3768432E38F,
					5.081071E37F,
					-2.2249335E38F,
					2.9065484E38F,
					1.7427032E38F,
					2.2554451E38F,
					-2.8336005E38F,
					4.129868E37F,
					-1.859388E37F,
					6.5195656E37F,
					2.2448875E38F,
					-2.955207E38F,
					-1.4470413E38F,
					-2.048679E38F,
					2.3202677E38F,
					2.2986154E38F,
					-1.7531285E37F,
					-1.914949E38F,
					-2.253952E37F,
					3.2121812E38F,
					1.2345086E38F,
					1.7871509E38F,
					-1.6866118E38F,
					2.4159944E38F,
					-1.9598797E38F,
					9.709509E37F,
					7.764562E37F,
					3.0641123E38F,
					2.4907288E38F,
					1.7925066E38F,
					7.3774664E37F,
					-2.9329845E38F,
					-3.643127E37F,
					-2.0291721E38F,
					-3.1826997E38F,
					1.585953E37F,
					-2.7513328E38F,
					2.9524586E38F,
					-2.7169644E37F,
					2.9936751E38F,
					-1.2118156E38F,
					-2.7569243E38F,
					1.9578527E38F,
					-2.4395593E38F,
					-2.595826E38F,
					2.9382857E38F,
					3.2602205E38F,
					3.0050402E38F,
					5.0254078E36F,
					-6.850798E37F,
					2.1043925E38F,
					1.3390192E38F,
					-7.103904E37F,
					2.9624206E38F,
					1.7219776E38F,
					-4.489525E37F,
					-3.2000073E38F,
					-3.8392193E36F,
					-2.7093052E38F,
					1.6135894E38F,
					1.5321808E38F,
					2.6119263E38F,
					5.072038E37F,
					2.5341763E38F,
					1.3450473E38F,
					2.8512772E38F,
					-3.3165478E38F,
					6.5604473E37F,
					1.0999266E37F,
					-2.5199052E38F,
					-1.5656538E38F,
					-1.6362456E38F,
					2.7431982E37F,
					1.4932749E38F,
					-1.3787212E38F,
					-1.7496148E38F,
					-6.295277E37F,
					-6.5244993E37F,
					5.6035765E37F,
					-7.407219E37F,
					-6.6858377E37F,
					1.5389714E38F,
					-2.02739E37F,
					-8.4268615E37F,
					-2.4819114E38F,
					1.8142161E38F,
					-1.0305878E38F,
					5.725033E37F,
					-2.403431E38F,
					-2.7852598E38F,
					1.0926745E38F,
					-2.2460872E38F,
					-1.1967852E38F,
					2.931357E38F,
					-1.2980331E38F,
					-2.8306242E38F,
					-8.533052E37F,
					-1.6333073E38F,
					1.342327E38F,
					-1.4489049E38F,
					2.4313409E38F,
					-1.6600212E38F,
					-3.0558173E37F,
					-2.1294224E38F,
					-2.1055346E38F,
					1.6659883E38F,
					-1.831056E38F,
					8.3103796E37F,
					-1.0887305E38F,
					2.5507292E38F,
					5.8366345E37F,
					2.6538426E38F,
					-8.032099E37F,
					4.50306E37F,
					-2.8988048E38F,
					-2.7176224E38F,
					2.3947218E38F,
					1.6818651E38F,
					-2.445068E38F,
					8.723054E36F,
					1.322046E37F,
					-1.8194039E37F,
					-8.4899444E37F,
					-9.880531E37F,
					-3.201656E38F,
					-7.9022905E37F,
					2.1619824E38F,
					-1.9521915E38F,
					2.9611296E38F,
					-1.9510804E38F,
					-9.395717E37F,
					3.0695186E38F,
					-2.0699564E37F,
					-8.516737E37F,
					-2.8471883E38F,
					-1.0832127E38F,
					3.2178526E38F,
					4.7286065E37F,
					3.8096924E37F,
					1.7587098E38F,
					2.5228786E38F,
					-2.8412378E37F,
					1.8034641E37F,
					-2.249125E37F,
					7.6641415E37F,
					-2.539313E38F,
					-3.5657313E37F,
					-2.342425E38F,
					1.9622434E38F,
					-2.2887685E38F,
					-2.2546304E38F,
					2.191016E38F,
					1.9198246E38F,
					-2.6225184E38F,
					-5.6865206E35F,
					6.3043733E37F,
					-1.3827296E38F,
					-2.0768504E38F,
					1.0835271E38F,
					2.6540022E38F,
					-2.0327946E38F,
					6.34716E37F,
					2.9135523E38F,
					2.2992764E38F,
					-1.0510741E38F,
					-2.8382403E38F,
					-3.183065E38F,
					4.333735E37F,
					-9.40217E37F,
					-1.7728106E38F,
					-1.6713371E38F,
					3.0856048E38F,
					1.0585526E38F,
					-9.380049E37F,
					2.6951495E38F,
					-2.3145343E38F,
					-7.1595217E37F,
					-2.3921043E38F,
					-3.3543797E38F,
					3.182442E38F,
					2.1770429E38F,
					7.7564716E37F,
					2.9692707E38F,
					1.6385565E37F,
					-2.5502885E38F,
					2.6425992E37F,
					1.2809767E38F,
					-1.5094348E38F,
					-2.0858108E37F,
					-1.2718877E38F,
					1.5455169E38F,
					1.3175725E38F,
					-1.3007294E38F,
					2.9600023E38F,
					-2.7600938E38F,
					5.655189E37F,
					-2.018508E38F,
					-2.7821017E36F,
					9.2154E36F,
					1.3265873E38F,
					1.3734701E37F,
					3.0485005E38F,
					-1.7773611E38F,
					3.3916362E37F,
					-3.0849958E37F,
					-1.834766E38F,
					2.4979625E38F);
				pestimator_status.hagl_ratio(-1.2062295E38F,
					2.3795749E38F,
					-1.018629E38F,
					1.7003374E38F,
					-1.3659616E38F,
					-1.1698856E37F,
					-5.3103983E37F,
					-2.4619095E38F,
					-7.5864634E37F,
					-2.517591E38F,
					2.743623E38F,
					-2.7147587E38F,
					-1.5446852E37F,
					1.4179971E38F,
					2.4090055E38F,
					-2.7580998E38F,
					-3.0605373E38F,
					3.0755727E38F,
					-2.7297586E38F,
					-1.835141E38F,
					-2.3250734E38F,
					9.987032E37F,
					1.7646554E38F,
					3.3199706E38F,
					-1.544598E38F,
					-1.0766147E38F,
					2.2034966E38F,
					-1.2621719E38F,
					-1.3300136E38F,
					3.1932587E38F,
					3.1446754E38F,
					2.7275509E38F,
					-2.7630852E38F,
					-2.9290179E38F,
					2.385146E38F,
					3.1494864E38F,
					2.8696192E38F,
					-2.6321574E38F,
					-1.8048375E38F,
					2.6706354E38F,
					2.3156023E38F,
					3.2317612E38F,
					1.8349425E38F,
					1.2529421E38F,
					6.8216964E37F,
					-2.086913E38F,
					-4.1007655E37F,
					-7.233142E37F,
					-3.0058787E38F,
					1.3070527E38F,
					7.3750436E37F,
					2.9669322E38F,
					-1.6591683E38F,
					2.5283368E38F,
					1.2171433E37F,
					-4.3430597E37F,
					-2.5424497E37F,
					2.0156997E38F,
					1.560018E38F,
					4.2953387E37F,
					5.772402E37F,
					-1.8493329E37F,
					-3.2826559E38F,
					-1.0429196E38F,
					2.6944488E38F,
					-3.0395436E38F,
					-1.8043974E38F,
					-7.4496E37F,
					-2.0818313E38F,
					-2.3712725E38F,
					2.0143315E38F,
					6.6789473E37F,
					-2.9256885E38F,
					2.5849708E38F,
					1.5304981E38F,
					-2.486252E38F,
					-2.4323254E38F,
					-2.3637159E38F,
					-3.3066066E38F,
					1.9514907E38F,
					-2.897936E38F,
					-8.201051E37F,
					-1.9157833E38F,
					-2.225065E38F,
					2.6802797E38F,
					2.3661047E38F,
					2.3023417E38F,
					1.0620573E38F,
					1.5632443E38F,
					3.040262E38F,
					1.1993302E38F,
					2.8803626E38F,
					-3.037614E38F,
					-3.1887595E38F,
					-3.279895E38F,
					1.7125966E38F,
					-2.0754278E38F,
					-1.5605047E38F,
					9.327577E37F,
					-2.0231616E38F,
					-1.4390557E38F,
					7.4194033E37F,
					-1.8630338E37F,
					1.0543667E38F,
					9.495776E37F,
					1.7436145E38F,
					2.9164675E38F,
					2.331958E38F,
					-1.5203387E38F,
					-2.1986493E38F,
					5.960509E37F,
					-9.259882E37F,
					1.774177E38F,
					7.4939787E37F,
					-2.798399E38F,
					4.5787256E37F,
					1.7875683E38F,
					2.9019583E38F,
					-3.0736765E36F,
					-1.3894274E38F,
					-8.636542E37F,
					-6.722948E37F,
					-5.2817945E37F,
					-1.0980918E38F,
					-1.9244644E38F,
					-7.956145E37F,
					-3.284524E38F,
					-1.8719732E37F,
					1.4340396E36F,
					2.2759847E38F,
					-1.82825E38F,
					8.110108E37F,
					-3.3400926E38F,
					9.293115E37F,
					-3.2061565E38F,
					2.4861078E38F,
					-1.8385779E37F,
					2.0851493E38F,
					-2.230399E38F,
					-2.9943256E38F,
					1.0763004E38F,
					-2.9052716E38F,
					-8.1477745E37F,
					-1.1347503E38F,
					2.1947524E38F,
					3.303783E37F,
					3.3590475E38F,
					3.6657558E37F,
					3.1873939E38F,
					-5.802733E37F,
					2.7827354E38F,
					-4.4028096E37F,
					-1.3881961E38F,
					2.9490486E38F,
					1.409739E38F,
					-3.2315625E38F,
					2.8454906E38F,
					-3.0904833E38F,
					1.990643E38F,
					1.3223989E38F,
					8.74699E36F,
					-3.359823E38F,
					1.1602126E38F,
					-2.4771213E38F,
					-1.9447365E38F,
					2.1378579E38F,
					2.0094264E38F,
					6.2153244E37F,
					-1.715537E38F,
					1.634118E38F,
					-7.330875E37F,
					9.020107E37F,
					1.4963491E38F,
					7.0756667E37F,
					-3.07691E38F,
					-3.3474537E38F,
					-2.0055502E38F,
					-3.3506086E38F,
					-1.0848746E38F,
					-1.3570881E38F,
					2.6326906E38F,
					2.7758208E38F,
					9.216139E37F,
					3.3010928E38F,
					-1.5285602E38F,
					-1.7887213E38F,
					-1.8832049E38F,
					2.4973009E38F,
					-1.2791217E38F,
					-1.648675E38F,
					1.8391957E38F,
					2.5401432E38F,
					1.8247802E38F,
					-2.888583E38F,
					-1.0683226E38F,
					1.5116715E38F,
					2.561328E38F,
					-1.9469261E38F,
					2.3394912E38F,
					2.5934014E37F,
					-6.898195E37F,
					-1.8544732E38F,
					2.5200987E38F,
					-1.4115866E38F,
					2.0479686E38F,
					-1.6427452E38F,
					-3.3316837E38F,
					-3.1678238E38F,
					-2.0078732E38F,
					-1.2831108E38F,
					1.2861417E38F,
					-9.3173885E36F,
					-1.724213E38F,
					2.3597957E38F,
					-4.706663E37F,
					3.106516E38F,
					-1.5499596E38F,
					7.522396E37F,
					-2.2553193E36F,
					1.5155203E38F,
					-2.3295984E38F,
					2.7643847E38F,
					3.096424E38F,
					-2.9405306E38F,
					2.3503658E38F,
					-1.5725968E38F,
					-1.8614585E38F,
					1.4401161E38F,
					2.1615895E38F,
					8.925732E37F,
					3.870366E37F,
					-1.0566998E38F,
					-5.697726E37F,
					8.295E37F,
					-2.5981572E38F,
					-1.0958138E38F,
					-2.7160653E38F,
					1.741945E37F,
					-4.1116747E37F,
					1.1458835E38F,
					3.2497212E37F,
					-1.7246758E38F,
					-2.6892317E38F,
					-1.7353346E38F,
					6.914473E37F,
					2.7785802E38F,
					2.1330406E38F,
					1.0425978E38F,
					1.996707E38F,
					9.723824E37F,
					3.3135308E38F,
					-1.1639933E38F,
					6.264607E37F,
					-2.7478742E38F,
					-1.6239647E38F);
				pestimator_status.tas_ratio(-2.9737093E38F,
					1.6418613E38F,
					-1.7937507E38F,
					-1.843308E37F,
					-5.992557E37F,
					1.723951E38F,
					6.488473E37F,
					7.305128E37F,
					2.148533E36F,
					-1.766693E38F,
					-2.2630301E38F,
					-2.9355591E38F,
					-1.1410738E37F,
					2.5120906E38F,
					-9.631429E37F,
					1.871017E38F,
					1.2131574E38F,
					-2.1397021E38F,
					3.3357222E38F,
					-1.1716393E38F,
					2.377716E38F,
					-1.9729312E38F,
					-1.2838151E38F,
					-9.05721E37F,
					-3.435671E37F,
					-4.5385612E36F,
					-2.0854469E38F,
					-6.698925E37F,
					1.7953257E38F,
					-1.7911004E38F,
					5.3877437E37F,
					8.658316E37F,
					-1.3625229E38F,
					-6.8782955E37F,
					1.0065292E38F,
					-3.3971343E37F,
					-2.0693932E38F,
					-3.074216E38F,
					-5.8458803E37F,
					-3.389333E38F,
					-1.5815356E37F,
					-3.0984032E38F,
					2.7247482E38F,
					-4.778382E37F,
					1.9494896E38F,
					2.544504E38F,
					-1.7407423E38F,
					4.9256486E37F,
					-2.2247803E38F,
					2.6001351E38F,
					2.6734883E38F,
					-1.243784E38F,
					3.2746161E38F,
					-3.2914073E38F,
					2.4697673E38F,
					1.3520402E38F,
					-1.9014295E38F,
					-8.934204E37F,
					-2.591009E38F,
					2.3580439E38F,
					2.7164604E37F,
					1.9855057E38F,
					7.677306E37F,
					2.8294152E37F,
					-1.356253E38F,
					-3.9341752E37F,
					-7.1057247E37F,
					-3.2531472E38F,
					1.2501758E38F,
					-8.1098865E37F,
					-9.121844E37F,
					1.0473564E38F,
					7.966894E36F,
					2.2081662E38F,
					-6.0241845E37F,
					-9.772737E37F,
					2.0612183E38F,
					-5.9405586E37F,
					4.4928194E37F,
					7.9204926E36F,
					-1.1134748E38F,
					-5.903725E37F,
					-5.2071573E37F,
					1.924563E38F,
					-1.0533447E38F,
					2.9602443E38F,
					1.3693895E38F,
					2.792619E37F,
					3.2323015E38F,
					-4.499036E37F,
					2.9519883E38F,
					9.705607E37F,
					2.9593102E38F,
					1.2880159E38F,
					1.6703246E38F,
					2.6721831E38F,
					-1.9126263E37F,
					2.8815627E38F,
					-1.4107462E38F,
					-3.3171694E38F,
					-3.3447967E38F,
					1.2423975E38F,
					2.5468823E38F,
					2.810822E38F,
					3.3821693E38F,
					-1.2513095E38F,
					-3.1154278E38F,
					-1.1937415E38F,
					-1.8990734E38F,
					6.0896454E37F,
					-4.0979323E37F,
					-2.0208782E38F,
					3.3428468E38F,
					-1.896216E38F,
					3.3714567E38F,
					2.1510381E36F,
					1.4392498E38F,
					-2.7036764E38F,
					3.2192963E38F,
					3.0603507E38F,
					1.4563778E38F,
					2.117377E38F,
					1.6171263E38F,
					-1.3513119E38F,
					8.184683E37F,
					1.1985686E38F,
					-1.338888E36F,
					-2.1642704E38F,
					-3.2807392E38F,
					-1.6847048E38F,
					-3.1238556E38F,
					-3.3378997E38F,
					2.7278E38F,
					-4.9832633E37F,
					2.69703E38F,
					-9.672759E37F,
					-9.389555E37F,
					6.635512E37F,
					1.0858841E38F,
					-3.218326E38F,
					-1.4643014E38F,
					6.962411E37F,
					3.2019138E38F,
					-1.882599E38F,
					1.3400641E38F,
					-3.125537E38F,
					-1.110763E38F,
					-2.6619975E38F,
					1.721312E38F,
					-2.3071474E38F,
					1.6396921E38F,
					-2.911432E38F,
					-2.3253578E38F,
					2.8731394E38F,
					-1.8318963E38F,
					-2.163477E38F,
					-2.8221316E38F,
					2.8893812E38F,
					2.8091695E37F,
					-7.2162055E37F,
					4.8883244E37F,
					9.881788E37F,
					-2.503841E38F,
					-2.5996839E38F,
					1.6880299E38F,
					-8.824417E37F,
					2.9822002E38F,
					-5.5559554E36F,
					-2.4959497E38F,
					8.1534065E37F,
					3.1957076E37F,
					-8.685176E37F,
					-2.756302E38F,
					4.4736424E37F,
					-2.3466695E38F,
					-4.182598E37F,
					-1.3581529E38F,
					-2.527157E37F,
					2.6384135E38F,
					3.1947845E37F,
					-2.078038E38F,
					1.3561192E38F,
					-3.3821017E38F,
					-9.731408E36F,
					-2.2254134E38F,
					1.8548909E38F,
					-3.2835603E38F,
					-3.7702576E37F,
					1.7221255E36F,
					1.6922513E38F,
					2.5482428E38F,
					8.984223E37F,
					2.1349137E38F,
					4.1488835E37F,
					2.5743302E38F,
					-3.3421541E38F,
					-2.6399144E38F,
					-1.03507405E37F,
					-2.0680853E38F,
					1.6412076E38F,
					-2.8197448E38F,
					-2.8041989E38F,
					1.6738521E38F,
					7.671821E37F,
					-9.569473E37F,
					2.4323085E38F,
					2.5936164E37F,
					-1.8552395E38F,
					-9.176441E37F,
					-1.827805E38F,
					-3.0343416E38F,
					-2.7909514E38F,
					1.240695E38F,
					-2.5096535E38F,
					-7.9950404E37F,
					1.1155568E38F,
					3.2938696E38F,
					7.3902514E37F,
					8.997912E37F,
					1.2203563E38F,
					-2.8519788E38F,
					-2.0652243E38F,
					-1.4934492E38F,
					7.8175536E37F,
					1.202974E38F,
					-8.26488E37F,
					-1.6454746E38F,
					-1.5035972E38F,
					2.4204202E38F,
					1.7283185E38F,
					2.9484963E38F,
					-1.8456E38F,
					8.100393E37F,
					2.1520785E38F,
					6.971894E37F,
					-2.1843727E38F,
					1.3189842E38F,
					1.3809729E37F,
					-1.1459186E38F,
					-5.6320256E37F,
					1.2645545E38F,
					2.8431882E37F,
					2.5658502E38F,
					-1.3910186E38F,
					1.8739987E38F,
					-3.6865282E37F,
					2.8034142E38F,
					-9.873321E37F,
					-1.8318594E38F,
					4.693205E37F,
					3.2841302E38F,
					-1.2802296E38F,
					-2.0190033E38F,
					-2.3807314E38F,
					3.019492E38F);
				pestimator_status.pos_horiz_accuracy(2.22305E38F,
					4.2793217E37F,
					-1.291184E38F,
					1.2510416E38F,
					-7.1867057E37F,
					-1.5749542E38F,
					7.6265785E37F,
					2.0776429E36F,
					-2.2066207E38F,
					1.7784183E38F,
					-2.2230259E37F,
					3.3653157E37F,
					-2.8071948E38F,
					-4.8059803E37F,
					3.3130332E38F,
					1.3971556E38F,
					1.1952058E38F,
					-1.4748688E38F,
					5.6714434E37F,
					3.093007E38F,
					-1.2050206E38F,
					2.6643957E38F,
					-3.3147716E38F,
					3.244278E38F,
					1.6829712E38F,
					1.5710434E38F,
					1.9938544E38F,
					-1.2971449E38F,
					3.2942507E38F,
					-9.323867E37F,
					-3.032396E38F,
					-6.588599E37F,
					1.2889954E38F,
					-2.1308288E38F,
					1.8596317E38F,
					-3.025393E38F,
					-1.5483073E38F,
					-4.38045E37F,
					-2.4761822E38F,
					1.9958852E38F,
					-2.3902424E37F,
					-1.3364475E38F,
					7.66852E37F,
					-2.0717952E38F,
					3.6951985E37F,
					2.363706E38F,
					-2.7458369E38F,
					-2.7015561E38F,
					1.1540413E38F,
					-3.2284866E38F,
					1.8682525E38F,
					-2.9394317E38F,
					9.34918E37F,
					2.2365825E38F,
					8.601526E37F,
					-2.5647383E38F,
					-2.9463638E38F,
					-2.6670267E38F,
					-2.5244083E38F,
					1.7622917E38F,
					-2.5893157E38F,
					1.2168533E38F,
					-6.2260056E37F,
					-2.1057167E38F,
					2.186372E38F,
					-1.3518913E38F,
					-2.844775E38F,
					-1.7276709E38F,
					-1.0894607E38F,
					1.2857399E38F,
					4.5772536E37F,
					1.6754628E38F,
					2.9205988E38F,
					-1.3791237E38F,
					-8.244338E37F,
					1.4600755E38F,
					2.2526298E37F,
					2.1758754E38F,
					2.425218E38F,
					3.1721583E38F,
					-8.4538173E37F,
					1.0277348E38F,
					-6.313284E37F,
					1.8318326E35F,
					-4.2815137E37F,
					1.1243864E38F,
					3.1231605E38F,
					3.103287E38F,
					1.7805942E38F,
					6.644434E37F,
					2.4552482E38F,
					-3.8524225E36F,
					-1.1031398E38F,
					2.619597E38F,
					1.6633529E38F,
					-2.7303588E38F,
					-1.4530025E38F,
					-1.3313307E38F,
					-1.8394466E38F,
					-1.8943663E38F,
					1.0066511E38F,
					-7.462008E37F,
					3.538764E37F,
					1.404981E38F,
					-3.5382413E37F,
					-2.3095073E38F,
					-2.2885655E38F,
					-1.4998689E38F,
					-3.2475614E38F,
					3.3600941E38F,
					-1.5916478E38F,
					9.067914E37F,
					6.9189314E36F,
					-1.0979372E38F,
					3.0321568E38F,
					3.7196852E37F,
					-1.9967586E38F,
					-3.3531782E38F,
					-2.4045865E38F,
					-8.055444E37F,
					1.7230848E37F,
					5.5146274E37F,
					-3.9480214E36F,
					-1.1014067E37F,
					8.615303E37F,
					-4.6667705E37F,
					-2.7500333E38F,
					1.935592E36F,
					-2.0702334E37F,
					1.1747266E38F,
					1.0326765E37F,
					9.194333E37F,
					2.2569825E38F,
					1.4963489E38F,
					-1.1993532E38F,
					2.2497198E38F,
					2.5734419E38F,
					1.16861E37F,
					2.9228688E38F,
					9.972858E37F,
					3.2196078E38F,
					3.1807138E38F,
					-4.6749387E37F,
					-3.1779437E38F,
					2.3523435E38F,
					6.3568555E37F,
					2.505921E38F,
					2.0647193E37F,
					2.9309297E38F,
					-2.1652385E38F,
					-1.5590957E38F,
					-1.4821137E38F,
					1.1281145E37F,
					1.0959284E38F,
					2.5825276E38F,
					-1.4522188E38F,
					9.797145E37F,
					2.1603894E38F,
					6.0671847E37F,
					2.3598158E38F,
					-2.7189998E38F,
					-1.0589591E38F,
					1.7273357E37F,
					1.3652049E38F,
					3.2203357E38F,
					3.3941112E38F,
					-4.2286527E37F,
					-7.131265E36F,
					-8.3428016E37F,
					-2.891607E38F,
					-1.8245194E38F,
					-2.950181E38F,
					2.423321E38F,
					1.8847668E38F,
					1.6151417E38F,
					-1.278064E38F,
					-9.9383344E36F,
					1.9319452E38F,
					-3.2562966E38F,
					-3.0443558E38F,
					-2.8759433E38F,
					-2.14522E38F,
					-2.2204971E38F,
					3.218096E38F,
					2.6689978E38F,
					-1.8783295E37F,
					1.3113305E38F,
					-3.3132509E38F,
					-3.6113664E37F,
					3.257534E38F,
					-3.3279112E38F,
					-1.1746238E37F,
					1.7608914E38F,
					-1.0871262E38F,
					-2.4314025E38F,
					6.126012E37F,
					-1.4322782E38F,
					1.3477954E38F,
					3.1130187E38F,
					2.0490765E38F,
					3.144143E38F,
					2.1557009E38F,
					1.8424687E38F,
					-7.022256E37F,
					4.990176E37F,
					2.7982596E38F,
					-1.954089E38F,
					-2.2232762E38F,
					2.5689728E38F,
					5.124479E37F,
					1.165052E38F,
					2.4800057E38F,
					-3.1840894E38F,
					2.3449035E38F,
					-9.983282E37F,
					-2.6095227E38F,
					-8.511671E37F,
					2.1333535E37F,
					3.2900748E37F,
					-3.531902E37F,
					-2.2154654E38F,
					9.454947E37F,
					-1.7917138E38F,
					2.539309E38F,
					1.9960574E38F,
					-1.7895666E37F,
					3.1613001E38F,
					-2.7133793E38F,
					6.730916E37F,
					1.6889963E38F,
					3.2514041E38F,
					-2.31033E38F,
					-2.254478E38F,
					-2.1730117E38F,
					1.6219195E37F,
					-2.919006E38F,
					-2.8968932E37F,
					-2.6705285E38F,
					1.1923697E38F,
					-1.0618377E38F,
					6.2462495E37F,
					-1.0796117E38F,
					9.762575E37F,
					3.0398292E38F,
					9.328264E37F,
					7.1329543E37F,
					-2.8333563E38F,
					-1.2486658E38F,
					-4.0552029E37F,
					-3.9570038E37F,
					-1.2552383E38F,
					-2.3316901E38F,
					-2.3600026E38F,
					-2.6566831E38F,
					2.3650578E37F);
				pestimator_status.pos_vert_accuracy(-1.4823256E38F,
					5.1519217E37F,
					-1.1896476E38F,
					3.9616923E37F,
					-2.6514342E38F,
					-1.867344E38F,
					1.4676011E38F,
					2.573163E38F,
					2.1808306E38F,
					-1.5742582E38F,
					2.8699437E38F,
					-7.3217034E37F,
					9.75978E37F,
					-1.4380993E38F,
					1.0087223E38F,
					2.2390494E38F,
					-8.4044986E37F,
					2.4065907E38F,
					-1.9400605E38F,
					3.4045612E37F,
					2.954166E38F,
					-4.5658376E37F,
					1.7214304E38F,
					2.8643934E38F,
					2.269188E38F,
					2.3291262E38F,
					1.2808049E38F,
					2.9870617E38F,
					1.8804039E38F,
					2.7879237E38F,
					-2.184961E38F,
					1.2017364E38F,
					-8.663133E37F,
					-1.8430496E38F,
					3.031196E37F,
					1.5324151E38F,
					-1.7292225E38F,
					3.3341507E38F,
					2.6951672E38F,
					2.3402946E38F,
					3.8263742E37F,
					-2.580673E38F,
					1.6581189E37F,
					-1.8334684E38F,
					7.008982E37F,
					1.16009E37F,
					2.5920128E38F,
					2.261044E38F,
					2.3669941E36F,
					-1.4074216E38F,
					1.1326459E38F,
					-8.311484E37F,
					-2.9918966E38F,
					2.6253472E38F,
					1.6285781E38F,
					2.462433E38F,
					1.4738778E38F,
					-1.9365349E38F,
					1.8002772E38F,
					1.5921119E38F,
					1.8292567E38F,
					-2.8253628E38F,
					-3.066975E38F,
					7.223817E37F,
					2.568135E38F,
					-5.956236E37F,
					1.5722527E38F,
					-7.8965135E37F,
					-8.172159E37F,
					-8.616352E37F,
					-1.6035777E38F,
					5.9663907E37F,
					1.940631E37F,
					2.354286E38F,
					1.5831475E38F,
					1.2054931E38F,
					3.1601469E38F,
					2.5403513E37F,
					3.007312E38F,
					-3.3588735E38F,
					2.7320832E37F,
					8.0374727E37F,
					3.0033705E38F,
					2.7047706E37F,
					-5.088649E36F,
					-2.5716365E38F,
					2.2861713E38F,
					-2.0645215E38F,
					-2.0754355E38F,
					-2.6153658E37F,
					-1.4033988E38F,
					-4.5541347E37F,
					2.0399413E38F,
					-7.229543E37F,
					1.539765E38F,
					-1.1703358E38F,
					3.1112924E38F,
					1.8612248E37F,
					-2.5095158E38F,
					9.074077E37F,
					-1.342966E38F,
					2.4459649E38F,
					1.8638E38F,
					-8.989699E37F,
					-1.6790089E38F,
					-1.9332726E38F,
					-1.3793601E38F,
					-9.007484E37F,
					-2.7990453E38F,
					2.1374554E38F,
					-2.8798507E38F,
					5.7747833E37F,
					-3.2995521E38F,
					-2.7205814E38F,
					-8.728386E37F,
					1.1029457E38F,
					1.6174732E38F,
					-1.0205666E38F,
					-2.9908806E38F,
					2.5147868E38F,
					-9.62146E37F,
					-2.9525994E38F,
					5.8904843E37F,
					-3.0314475E38F,
					1.7826757E37F,
					2.1238528E38F,
					-1.2130799E38F,
					-1.4161718E37F,
					1.3047387E38F,
					6.652233E37F,
					2.5632116E38F,
					9.653998E37F,
					-3.194726E38F,
					-3.116071E38F,
					6.883489E36F,
					-2.8106205E38F,
					2.825495E38F,
					6.3986124E37F,
					3.0015812E38F,
					-2.393901E38F,
					1.9428538E36F,
					1.5460699E38F,
					-4.353578E37F,
					-1.6149253E38F,
					-1.4446938E38F,
					1.6698315E38F,
					-1.3049693E38F,
					-2.2753756E35F,
					-5.74568E37F,
					1.0231649E38F,
					1.1993617E38F,
					1.6588315E38F,
					-7.5849585E37F,
					6.357232E37F,
					-2.2903957E37F,
					2.5180317E38F,
					9.713505E37F,
					1.0840388E38F,
					1.695216E38F,
					-6.333918E37F,
					6.317851E37F,
					-2.188748E38F,
					1.3014635E38F,
					8.881613E37F,
					2.7803316E38F,
					1.7744885E38F,
					2.2352743E38F,
					1.0392786E38F,
					-2.7398398E38F,
					-3.123791E38F,
					-1.2702606E38F,
					8.976279E37F,
					-1.5125033E38F,
					3.2077619E38F,
					8.5678393E36F,
					-1.5581835E38F,
					4.0628443E37F,
					-3.1177658E38F,
					2.6139963E38F,
					2.3457207E38F,
					-1.713212E38F,
					-1.3051328E38F,
					9.55892E37F,
					-3.2743512E38F,
					2.1861728E38F,
					1.5078176E38F,
					3.329083E37F,
					1.0677149E38F,
					-1.598985E38F,
					-2.1635476E38F,
					5.483383E37F,
					-9.44E37F,
					-3.2206097E38F,
					2.3127687E38F,
					-3.129332E38F,
					-1.1548945E37F,
					-8.867108E37F,
					1.2081555E38F,
					4.1075398E37F,
					1.9218766E38F,
					-3.4378492E37F,
					-3.2163062E38F,
					-1.8732168E38F,
					2.3988775E38F,
					-1.7559979E38F,
					2.2019367E38F,
					5.1497084E37F,
					2.298869E38F,
					2.9481377E38F,
					1.6306188E38F,
					-1.2288108E38F,
					9.892988E37F,
					3.146038E38F,
					-3.7561106E37F,
					2.1695035E38F,
					-5.419956E37F,
					-2.0632892E38F,
					2.9286364E36F,
					2.6706435E38F,
					2.8150031E38F,
					2.8604386E38F,
					1.6522754E37F,
					-2.700422E38F,
					-2.1851084E38F,
					2.61039E38F,
					2.0863229E38F,
					2.6436423E38F,
					2.2488073E38F,
					2.6981831E38F,
					-2.7442374E38F,
					1.969207E38F,
					-9.985938E37F,
					-1.6478342E38F,
					-3.3333615E38F,
					-1.3217397E38F,
					1.7639812E38F,
					1.8360538E38F,
					2.0050995E38F,
					2.7335853E38F,
					-3.0664775E36F,
					1.77176E38F,
					5.768064E37F,
					1.1179042E38F,
					-3.3534839E38F,
					-2.5472682E38F,
					3.1334327E38F,
					9.457763E37F,
					4.774288E37F,
					-3.1089023E38F,
					1.2805911E38F,
					2.8321961E38F,
					-1.5666597E38F,
					2.2487897E38F,
					2.4912874E38F,
					-2.4008952E37F);
				pestimator_status.flags(ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
					ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE);
			}

			void on_ESTIMATOR_STATUS(const com::company::demo::ESTIMATOR_STATUS& pestimator_status) {
				assert(pestimator_status.time_usec() == 5482882950649049094L,
					1430192118830929283L,
					629467537869553680L,
					7548708405753288908L,
					4911425689039881302L,
					3130269199233475380L,
					7079212960075865240L,
					-1077014698706753934L,
					-318161196854307668L,
					-6702315108898205957L,
					-8912420169182190888L,
					-1999396478643252254L,
					-6962024921247242364L,
					4840516452712814084L,
					4545298537380327301L,
					559088340497653808L,
					-3822724420081168711L,
					-288506334022537187L,
					5924146653062842004L,
					6102990118527814947L,
					4720586080844483359L,
					-6341802900630877488L,
					8062801546831723929L,
					-7527706994018804563L,
					-4974485450533028556L,
					4506905185187611491L,
					-3504668250820748588L,
					-7675680302126273092L,
					-7377896319212011427L,
					7156295152072895011L,
					-1176437379362565793L,
					-1299181279448433559L,
					9197705660399372068L,
					-3608955201182266981L,
					-6499981742208062642L,
					6363695383637977452L,
					5355200179017695345L,
					7263960316871913545L,
					-3982438878575195590L,
					-3422342214615919794L,
					4405904682753116307L,
					-2108472151981437869L,
					-8889468913060156378L,
					-8510988140913315310L,
					-695827188210637310L,
					-2404646134167460368L,
					-1693960056030627836L,
					4199319124217434299L,
					5489979436201508978L,
					-756561911081705463L,
					733899998906524261L,
					-561346527714379667L,
					-5851049625773882724L,
					-8789169042968472290L,
					1827422620646985433L,
					8396972441271496295L,
					-1662500771998366887L,
					8498790444584263694L,
					-4320263217494381630L,
					3132710839466577157L,
					5156443537302833966L,
					2451028810948113065L,
					-6669128029090327612L,
					-1952193628665598981L,
					-3434836445394074807L,
					-5613507112168755010L,
					-7371596150994155667L,
					3625251659263331173L,
					-8759052920894500177L,
					-8831825789677649790L,
					4894942375481610967L,
					-5341305615200863760L,
					5921464976747601022L,
					-3272521933727424899L,
					-8045600563894214344L,
					-5475693208895397429L,
					-5042175550351741803L,
					-6117849422452262624L,
					-1618373297813565200L,
					9090750523002043794L,
					-1616408824011498971L,
					5023464877269188793L,
					-5478453808828606223L,
					5088650059177825749L,
					-6380928242618646416L,
					4818308755172519823L,
					-356789645011917968L,
					-4443308781862226473L,
					-2134829605338458159L,
					-916339997784204610L,
					5359685679107815882L,
					4623411973801352295L,
					8460065594920195043L,
					2114943660971403265L,
					-5350155071203730758L,
					9125575742280776337L,
					-8135006271381373974L,
					3553311274598021782L,
					-1310297607536747458L,
					9023107833472523856L,
					-4088426944031414854L,
					2224083775838415108L,
					-5899382235542409144L,
					-4132401435366881515L,
					8587879983271701785L,
					6168872520197918900L,
					-8304925993830972965L,
					8636966340843141842L,
					-215208991538136770L,
					-2682266702917667791L,
					-5076855358542300503L,
					-9011362134088511047L,
					2180108116302916479L,
					1455527205410427055L,
					-5916965780148389204L,
					-9134027862646199022L,
					-7851789753751813840L,
					6377749188791955158L,
					6724923876195096352L,
					-1423630726784216561L,
					3725299296336779220L,
					-2613796316663102566L,
					4165570501450538454L,
					-2123467978071175792L,
					-5044810222639142737L,
					-2378827825826860412L,
					5633929767865896407L,
					2397715210491311774L,
					-2273777290802418520L,
					-1243738191975928946L,
					-4193201103318838795L,
					5680105151523713243L,
					5252524240328250323L,
					197433031519799868L,
					7967563255633885527L,
					4040107711220270180L,
					-1988982632964479068L,
					4327947134773845705L,
					-874822888854390428L,
					-8998187186683103824L,
					-1567614709033677268L,
					-3843793744590021800L,
					1362179618115155057L,
					4709232532710216438L,
					597747069595270185L,
					1385951960386059061L,
					-6489554310003929826L,
					-2818970573461822874L,
					-6565651009056854936L,
					3342840880429762968L,
					-6646451689167376965L,
					-2563361774608435236L,
					2171244413749246648L,
					-4024361241938610364L,
					-4035776159172493237L,
					7159738606385675283L,
					5652019848473060266L,
					5700128109804531998L,
					2532001918762924916L,
					-593737566864172152L,
					-2226669440339802414L,
					7451994695379744947L,
					-4809370260556538233L,
					-2891575739926851775L,
					-6888830422855350413L,
					-5510591642471669545L,
					2798865030810520113L,
					8663093879375337451L,
					-7848154063885676318L,
					-7236147906711171178L,
					-862504539689272141L,
					8614229327062802262L,
					7714414796796503554L,
					4598491933557187980L,
					-4322436882150766836L,
					8812839020491051967L,
					-3585811255611514027L,
					-8175579073805347057L,
					-1305540567863110431L,
					-239594848599246283L,
					7977853146709954526L,
					6766129977129689911L,
					-4253397803131917658L,
					2652461949593239008L,
					-7187620395200369912L,
					4290134003332526842L,
					1467684338653488033L,
					-932638393523857914L,
					-6671223481421495428L,
					-6473584289755893870L,
					-8563221108698285533L,
					-7698120315315452658L,
					-4820638160087692508L,
					3560442999405816064L,
					-8865384224052801775L,
					-57188445763849438L,
					181803452727532645L,
					-3387414550040363098L,
					-7524571160900599558L,
					343019712809404059L,
					2561706473961282030L,
					-949997139123012393L,
					7643405839536520198L,
					-8666441932955280238L,
					2556953930008638989L,
					6051959516293683175L,
					3647899924678383032L,
					-4155820525726467889L,
					-4589531423177005704L,
					876371092067767213L,
					6817756136670841231L,
					-8499162878092209038L,
					-4180786883567977989L,
					1457792367252759614L,
					5390821231970163868L,
					-6328710476044208531L,
					2916321579751549398L,
					-8368394321595262555L,
					5461020625396479689L,
					-5812829156739781241L,
					2681196588933437904L,
					496009609617878552L,
					-3538220841027364375L,
					-8140946175819318858L,
					5595202153077868720L,
					8631849667515157027L,
					-1121707271862197717L,
					-6189279577340513088L,
					-4319875238283275331L,
					-6415929218654299330L,
					-7575378305173750229L,
					-3669672110438413389L,
					5837607706773356031L,
					-8398360932258175718L,
					-8377103286761448090L,
					-2803365886682067825L,
					1464026842143668990L,
					-8906617571454792081L,
					3719441426176905703L,
					-3789247757780080217L,
					-5149742003956069536L,
					-1261053086885714747L,
					8386270309830539516L,
					-9068847984135882550L,
					-815538347633452477L,
					9025797301589007455L,
					6912489023612375381L,
					-3317132868188585858L,
					-539161490672352722L,
					-2598295146747682201L,
					6153742872858204259L,
					1280071419280565022L,
					7147655838791140742L,
					3561546573742414835L,
					2828112314510380441L);
				assert(pestimator_status.vel_ratio() == -2.701734E38F,
					1.7869257E38F,
					-1.9771054E38F,
					1.471865E38F,
					4.5600926E37F,
					2.4560298E38F,
					2.5436204E38F,
					3.1951939E38F,
					-3.0013532E38F,
					5.379316E36F,
					-3.0540275E38F,
					-2.4588361E38F,
					2.0891009E37F,
					-1.945565E38F,
					-5.959753E37F,
					2.9102317E37F,
					-2.6494784E38F,
					-3.1924326E38F,
					3.1888777E38F,
					-6.19226E37F,
					-1.9554648E38F,
					-2.6921284E38F,
					3.020872E38F,
					2.195649E38F,
					1.9761467E37F,
					-2.7250894E38F,
					3.2831502E37F,
					5.5185825E37F,
					-4.4493826E37F,
					-2.8993913E38F,
					-2.2833831E38F,
					-7.868211E37F,
					8.2063795E37F,
					3.2770693E38F,
					-1.1465446E38F,
					2.5302973E38F,
					-4.7043994E37F,
					2.304024E38F,
					1.1677835E38F,
					2.3368837E37F,
					5.1409565E37F,
					-2.6835457E38F,
					-2.528277E38F,
					1.6335982E38F,
					7.526168E37F,
					1.4413476E38F,
					-3.185794E38F,
					9.563811E37F,
					-2.0146183E38F,
					3.1780765E38F,
					-1.8700262E38F,
					-1.9273275E38F,
					7.9103507E37F,
					1.2439988E38F,
					-5.1297915E37F,
					8.544449E37F,
					-2.9292102E37F,
					9.622301E37F,
					2.1279383E38F,
					6.8429737E37F,
					1.9143544E38F,
					-1.2744102E38F,
					-2.3348905E38F,
					-3.2421598E38F,
					2.736225E38F,
					3.3244784E38F,
					1.0774314E38F,
					-2.94046E38F,
					2.6241781E38F,
					-1.0622125E38F,
					6.2086063E37F,
					-1.4519804E38F,
					8.893E37F,
					2.2621647E38F,
					-5.499456E37F,
					-1.1043334E38F,
					1.2478882E38F,
					2.7790234E38F,
					1.4427547E36F,
					-3.2350673E38F,
					2.7928278E38F,
					-2.934187E38F,
					1.9775428E38F,
					1.3541443E38F,
					2.0130236E37F,
					9.885214E36F,
					2.542882E38F,
					3.2893391E38F,
					1.78965E38F,
					1.258071E38F,
					3.1237101E38F,
					5.3269837E37F,
					5.4245076E37F,
					4.018511E37F,
					9.41509E37F,
					2.0201347E38F,
					-2.6855825E38F,
					-3.4823571E37F,
					6.986161E36F,
					-3.0529866E38F,
					2.5593604E38F,
					1.1798096E38F,
					2.4037343E38F,
					1.6429969E37F,
					-4.290011E37F,
					2.9290811E38F,
					-2.897784E38F,
					2.1666412E38F,
					3.7770195E37F,
					-4.558466E37F,
					-8.4839154E37F,
					-2.4146977E38F,
					2.8970532E38F,
					5.9130703E37F,
					2.7597847E38F,
					-1.1475332E38F,
					-1.648493E38F,
					1.8658359E38F,
					1.0560754E38F,
					-2.7202587E38F,
					2.9204907E38F,
					-1.5217252E38F,
					-2.409192E38F,
					2.820906E38F,
					2.863447E38F,
					3.2716277E38F,
					3.2498134E38F,
					-1.0709746E38F,
					2.6651989E38F,
					-2.709503E38F,
					1.3145642E38F,
					3.3722094E38F,
					1.3271014E38F,
					1.5503817E38F,
					-2.9099966E38F,
					-1.6305334E38F,
					3.2448482E38F,
					8.3434714E37F,
					-2.1212642E38F,
					-2.7232605E38F,
					1.0675381E37F,
					-1.882418E38F,
					-5.477687E36F,
					-1.2439226E38F,
					-3.2072065E38F,
					-2.6907476E38F,
					-7.6510847E37F,
					-2.6114594E38F,
					2.9403513E38F,
					-1.1323999E38F,
					1.1708115E38F,
					-2.1412716E38F,
					-1.5340543E38F,
					1.2519542E38F,
					-2.3775935E38F,
					3.3385014E37F,
					5.3299794E37F,
					-2.04619E38F,
					2.3196162E38F,
					1.3006952E38F,
					3.462913E36F,
					-3.3406031E38F,
					2.1491681E38F,
					4.961115E37F,
					3.173616E38F,
					3.2574734E38F,
					-2.5241108E38F,
					-3.2977444E38F,
					-1.0433444E38F,
					-8.213329E34F,
					-2.8310932E38F,
					-1.4562571E38F,
					3.295686E38F,
					1.5737642E38F,
					1.8712573E38F,
					1.903665E38F,
					-2.6343925E38F,
					2.0369707E38F,
					-1.2709964E38F,
					2.280496E38F,
					2.7925803E38F,
					-2.9670792E38F,
					1.8372517E38F,
					2.8031317E37F,
					2.0384345E38F,
					-8.3791583E37F,
					-1.4631532E38F,
					4.5154003E37F,
					-7.571258E37F,
					2.9986662E38F,
					-6.5463703E37F,
					3.2696258E38F,
					-2.3531895E38F,
					-2.813292E38F,
					-6.625582E37F,
					-1.848479E38F,
					-1.0468337E38F,
					-1.2065509E38F,
					3.13106E38F,
					-2.1064294E38F,
					-8.575453E37F,
					2.4385267E38F,
					6.2581394E36F,
					6.3105325E37F,
					-1.2300917E38F,
					1.7230645E37F,
					-5.6341253E37F,
					-2.7938326E38F,
					-3.3738957E38F,
					9.245813E37F,
					1.1808552E38F,
					-1.2345184E38F,
					-1.178308E36F,
					1.3275579E38F,
					1.6786483E36F,
					9.418865E37F,
					2.5381138E38F,
					3.0116723E38F,
					2.2090315E38F,
					1.2234885E38F,
					2.1133614E38F,
					3.2489946E38F,
					-8.918677E37F,
					-1.8360231E38F,
					2.9457001E38F,
					1.5239176E38F,
					-1.963686E38F,
					3.257049E38F,
					-1.2484028E38F,
					-3.2322344E38F,
					-4.4652E37F,
					-2.4018249E38F,
					-1.1839466E38F,
					-1.2041781E38F,
					6.736758E37F,
					-3.2592532E38F,
					-2.5104648E38F,
					3.2420673E38F,
					-5.130228E37F,
					-1.3546954E38F,
					7.910609E37F,
					2.827473E38F,
					8.3431654E36F,
					2.4279862E38F,
					2.1949985E38F,
					-3.068155E38F,
					-1.9853366E38F,
					-5.034155E37F,
					-1.6659136E38F,
					-1.2067985E38F,
					-4.9479983E37F,
					-8.533633E36F,
					2.1400362E38F,
					-1.3494852E38F,
					2.0775858E38F);
				assert(pestimator_status.pos_horiz_ratio() == -3.2995262E38F,
					3.2063488E38F,
					2.2622831E38F,
					-3.3197824E38F,
					-7.8444917E37F,
					-3.7426958E37F,
					1.0651945E38F,
					-1.5783819E38F,
					2.26166E38F,
					2.4506329E38F,
					1.6556873E38F,
					3.2223901E38F,
					1.9379173E38F,
					-2.4844051E38F,
					7.9092083E37F,
					3.1414532E38F,
					1.2625985E38F,
					-2.4354284E38F,
					3.1757288E38F,
					-2.2531727E38F,
					3.061481E38F,
					-2.55873E37F,
					-7.3910865E37F,
					-5.4238586E35F,
					-5.138486E37F,
					2.3998827E38F,
					-2.8232325E38F,
					-4.1809272E36F,
					-2.5081806E38F,
					2.5344956E38F,
					-2.1346983E38F,
					-1.3812264E38F,
					-1.3655647E38F,
					-1.5950823E38F,
					-8.714434E37F,
					1.8432456E37F,
					8.2586803E37F,
					1.6735462E38F,
					1.3251854E38F,
					1.3535845E37F,
					-3.2016169E38F,
					3.9352352E37F,
					-7.496793E37F,
					-3.2832528E38F,
					3.240116E37F,
					-2.7873333E38F,
					-1.4191112E38F,
					-8.452672E37F,
					-2.387073E38F,
					-1.9090228E38F,
					8.640084E37F,
					-1.6510722E38F,
					1.7571124E38F,
					3.38122E38F,
					2.2623006E38F,
					1.5435391E38F,
					-1.2907681E38F,
					-2.311051E38F,
					-1.1342266E38F,
					1.2628083E38F,
					3.2254142E38F,
					1.4123825E38F,
					-2.4335894E36F,
					1.3865476E38F,
					-3.7254337E37F,
					-3.446768E36F,
					2.505758E38F,
					-1.2585324E37F,
					-1.3954577E38F,
					-3.2787909E38F,
					7.0456477E37F,
					-2.9805077E36F,
					2.3674535E38F,
					-6.9060327E37F,
					-1.8748305E38F,
					-2.277595E38F,
					3.7788908E37F,
					-1.490359E38F,
					1.3497713E38F,
					-2.2807864E38F,
					6.919888E37F,
					2.6786394E38F,
					-3.3401443E38F,
					-6.354394E37F,
					8.0319366E37F,
					-2.0030993E38F,
					-1.6528056E38F,
					1.018781E38F,
					6.2587236E37F,
					2.6815625E37F,
					-1.7091737E38F,
					4.6280184E37F,
					-2.1651379E38F,
					6.823926E37F,
					-2.2551088E38F,
					-5.2346937E37F,
					1.4130645E38F,
					2.6072034E38F,
					1.5386066E38F,
					-5.60771E36F,
					3.014184E38F,
					4.2827763E37F,
					2.8695285E38F,
					1.2817886E38F,
					7.488787E37F,
					-3.078149E38F,
					2.1155922E38F,
					2.4107076E38F,
					3.244635E38F,
					-1.4280548E38F,
					-1.6376975E38F,
					-1.982202E38F,
					-2.1781773E38F,
					-2.8652133E38F,
					-2.5512377E38F,
					3.086315E38F,
					2.7788412E38F,
					-5.0083547E37F,
					-2.467775E38F,
					-1.765979E38F,
					-2.8794166E38F,
					-1.5471729E38F,
					2.4176444E38F,
					4.2158664E37F,
					-3.2904585E38F,
					1.1445829E38F,
					-2.6017466E38F,
					1.8070702E38F,
					1.3716377E38F,
					5.2212236E37F,
					1.09583E38F,
					1.2054319E38F,
					-3.159109E38F,
					6.5017394E37F,
					-2.5517458E38F,
					9.447376E37F,
					-2.3877426E38F,
					2.630169E38F,
					-3.1963356E37F,
					2.8268038E38F,
					-1.2769429E38F,
					-2.484058E38F,
					-9.984099E37F,
					8.505772E37F,
					-1.6764471E38F,
					3.2298003E38F,
					-1.4983469E37F,
					-2.1607076E38F,
					-1.2397597E38F,
					-3.3435658E38F,
					-1.0578078E38F,
					-1.2492536E38F,
					-3.1974294E38F,
					2.0194562E38F,
					-6.2237694E37F,
					3.179905E38F,
					3.1128383E37F,
					6.30086E37F,
					1.4281116E38F,
					-1.5949249E38F,
					-1.7080787E38F,
					-2.8512437E38F,
					3.1202865E38F,
					-2.0773033E38F,
					-1.9795496E37F,
					-1.8075118E38F,
					-6.014488E37F,
					7.3342937E37F,
					-8.611308E37F,
					-7.9283833E37F,
					2.6883405E38F,
					-2.0139348E38F,
					3.3128118E38F,
					-1.9343083E38F,
					-2.051893E38F,
					2.7824975E38F,
					2.8587207E38F,
					6.27941E37F,
					-6.0818174E37F,
					-2.2046742E38F,
					3.0905737E38F,
					-2.4718909E38F,
					2.0913906E38F,
					-1.6452036E38F,
					7.0783186E37F,
					2.4632533E37F,
					3.0454786E38F,
					-3.0603584E38F,
					-2.8946524E38F,
					2.848234E38F,
					-2.8638139E37F,
					-2.8490563E38F,
					-3.269757E37F,
					-2.0353674E38F,
					6.509135E37F,
					2.770573E38F,
					-2.3616536E38F,
					-1.02568E38F,
					-4.088121E37F,
					2.186572E38F,
					-2.575427E38F,
					-2.3401404E38F,
					1.1785154E38F,
					-1.9052886E38F,
					1.107191E38F,
					-3.7528233E37F,
					2.7601988E38F,
					2.9375795E38F,
					-5.597031E37F,
					-2.9068135E38F,
					4.232108E36F,
					1.2795256E38F,
					1.223578E38F,
					-2.0584806E38F,
					-2.6006199E38F,
					2.6005584E38F,
					-1.3869443E38F,
					-2.6307547E38F,
					1.2313444E38F,
					1.669716E38F,
					2.231324E38F,
					-2.2621464E38F,
					-2.6386454E38F,
					1.7135509E38F,
					-6.10509E37F,
					2.3654332E38F,
					-1.7348165E37F,
					3.2189174E38F,
					-1.8395182E38F,
					-3.1930301E38F,
					2.6598374E38F,
					-2.84213E38F,
					3.08941E38F,
					-2.5570792E37F,
					-1.6600464E38F,
					2.3694686E38F,
					-7.2415636E37F,
					2.6747517E38F,
					1.8303065E38F,
					-7.9554745E37F,
					-2.7349992E38F,
					1.582303E38F,
					2.8915666E38F,
					1.7686638E38F,
					-1.9763389E38F,
					2.4821735E38F,
					-1.6462653E38F,
					2.7301094E37F,
					2.8133674E38F,
					-7.9916695E37F,
					6.4023E37F,
					-1.0018234E38F,
					-2.0642495E38F,
					1.2191978E37F,
					-2.8758534E38F);
				assert(pestimator_status.pos_vert_ratio() == 1.9024588E37F,
					5.9462113E37F,
					-2.4310099E38F,
					-2.0296484E38F,
					2.0350997E38F,
					1.7289961E38F,
					-1.6916466E37F,
					8.855755E37F,
					-5.042101E37F,
					-3.2972659E38F,
					2.7701427E38F,
					2.0707377E38F,
					8.1138243E37F,
					2.9177867E38F,
					-3.2208615E38F,
					7.7151507E37F,
					-3.0038311E38F,
					3.2335133E37F,
					-6.053877E37F,
					-7.088922E37F,
					-3.295048E38F,
					2.350401E38F,
					-1.2268701E38F,
					-4.471288E37F,
					4.6825786E37F,
					1.9367547E38F,
					-1.4419669E38F,
					-2.102365E38F,
					1.6148105E38F,
					4.0960547E37F,
					1.5845603E38F,
					-1.1943368E38F,
					-2.9062052E38F,
					1.8754189E38F,
					2.6398087E38F,
					-2.571608E38F,
					-1.2859411E38F,
					2.8971988E38F,
					-6.736085E37F,
					-1.3001077E36F,
					6.9914145E37F,
					2.0560388E38F,
					3.2863319E38F,
					4.2521798E37F,
					-8.415354E37F,
					-1.3392694E38F,
					-4.0478834E37F,
					1.4549698E38F,
					-3.0440966E38F,
					-9.19574E37F,
					2.1417904E38F,
					1.3780469E37F,
					-1.4396158E38F,
					-1.6742906E38F,
					-1.298841E38F,
					-7.8112034E36F,
					-3.291176E38F,
					-4.2285434E37F,
					-1.2535044E38F,
					-2.6138574E38F,
					-6.230784E36F,
					2.7130938E38F,
					9.416643E37F,
					1.6342501E37F,
					2.267755E38F,
					-1.5319682E38F,
					-7.051981E37F,
					-1.8246435E38F,
					-2.5136355E37F,
					-3.0114316E38F,
					3.2430455E37F,
					-1.2818051E38F,
					3.1343197E38F,
					7.4493457E37F,
					-2.559218E38F,
					-2.7942307E38F,
					-1.3123115E38F,
					2.0402962E38F,
					-5.340614E37F,
					3.0678278E38F,
					1.5222111E38F,
					-2.1290721E38F,
					2.0964651E38F,
					7.9223006E37F,
					-2.879685E38F,
					-1.7721804E38F,
					-1.9418923E38F,
					-9.329774E37F,
					-2.959409E38F,
					-2.6738305E38F,
					-3.2326224E37F,
					1.7083667E38F,
					2.1819938E38F,
					2.8234329E37F,
					-1.3626163E37F,
					2.9313668E38F,
					2.7660047E38F,
					1.0989126E38F,
					-7.8767143E37F,
					-6.0483733E37F,
					-1.2448486E38F,
					-1.8990834E38F,
					-4.898313E37F,
					-2.5075924E38F,
					-3.3292263E38F,
					2.9716495E38F,
					-1.117903E38F,
					1.1678171E38F,
					2.4293895E38F,
					-2.6608008E38F,
					-3.262806E38F,
					-1.1201092E38F,
					-2.5293556E38F,
					-2.8073031E38F,
					-1.0417157E38F,
					-2.7810794E38F,
					1.9001813E38F,
					-2.644998E38F,
					2.8295243E38F,
					3.1443098E38F,
					-3.31879E38F,
					-1.2013427E38F,
					-3.0235617E37F,
					-1.2156545E38F,
					-8.3224264E37F,
					-1.4859832E38F,
					1.907413E37F,
					2.3104204E38F,
					1.9147418E38F,
					2.703682E38F,
					-1.5972865E38F,
					-3.1300768E38F,
					1.9347332E38F,
					2.4586921E38F,
					2.829501E38F,
					-1.5737078E38F,
					-1.0218829E38F,
					1.973124E38F,
					-6.090045E37F,
					-2.4361798E38F,
					-1.1721021E37F,
					4.154498E37F,
					2.9554162E38F,
					1.8012565E38F,
					-1.9619396E38F,
					-2.7215852E38F,
					2.4154301E38F,
					-7.961442E37F,
					-2.864062E38F,
					-3.1366416E38F,
					2.7963956E38F,
					-2.6308293E38F,
					3.0726088E38F,
					3.7985797E36F,
					1.8938175E38F,
					6.2201247E37F,
					2.1689378E38F,
					7.0330143E37F,
					2.7180033E38F,
					7.811337E37F,
					3.1393659E37F,
					2.0069909E38F,
					4.1149145E37F,
					1.7723972E38F,
					6.244084E37F,
					-1.157861E38F,
					2.439826E38F,
					6.487838E37F,
					3.3377727E38F,
					7.1348705E37F,
					-2.0123116E38F,
					3.113082E38F,
					3.2340742E38F,
					-1.9453403E38F,
					-3.3427638E38F,
					-1.0615631E38F,
					4.842958E37F,
					-6.725261E37F,
					1.3309838E37F,
					8.303484E37F,
					-3.9851208E36F,
					2.555015E38F,
					1.0936856E37F,
					8.0294977E37F,
					1.3019405E38F,
					-2.1599158E38F,
					1.0545452E38F,
					-8.2075316E37F,
					2.7588065E38F,
					2.4694458E38F,
					2.8103124E38F,
					-3.3754108E38F,
					1.3011923E38F,
					1.1490325E38F,
					3.4888085E37F,
					1.1930485E37F,
					-2.6220618E38F,
					-2.5305468E38F,
					8.2626566E37F,
					-6.9414235E37F,
					2.8167918E38F,
					2.4021113E38F,
					-7.41606E37F,
					-1.7828308E37F,
					-2.650822E38F,
					-7.9410045E37F,
					8.2077735E37F,
					3.367553E36F,
					-3.074044E38F,
					7.223878E37F,
					2.2554098E38F,
					2.8099062E38F,
					-1.2103088E38F,
					2.5155553E38F,
					-2.8875503E38F,
					-2.4094747E37F,
					2.3064246E38F,
					-2.8583187E38F,
					1.8001813E38F,
					-9.77208E37F,
					2.3376353E38F,
					-2.6975897E38F,
					7.901979E37F,
					-7.582791E37F,
					-2.9945467E38F,
					1.0028604E38F,
					-2.708521E38F,
					-1.9364888E38F,
					-2.365428E38F,
					-1.4425399E38F,
					2.2200483E38F,
					-1.3717002E38F,
					-3.073556E38F,
					-1.2172742E38F,
					-6.239187E37F,
					-2.280704E38F,
					1.3919332E38F,
					-1.4468117E38F,
					3.0384824E38F,
					4.774116E37F,
					3.0045611E38F,
					2.2809492E38F,
					-2.2519653E38F,
					-7.774468E37F,
					-1.4348597E38F,
					-6.5181726E36F,
					-1.9535189E37F,
					-3.9239513E36F,
					-8.0997564E37F,
					-2.4925507E38F,
					-1.4357755E38F,
					2.1764153E38F,
					-7.3662933E37F,
					1.7419848E38F,
					-1.2658958E38F);
				assert(pestimator_status.mag_ratio() == 1.8189437E38F,
					-2.3637205E38F,
					3.3448338E38F,
					-2.9373919E38F,
					-7.071493E37F,
					2.5768899E38F,
					-2.562685E38F,
					3.379019E38F,
					-1.9871E38F,
					-1.5157602E38F,
					-1.739274E37F,
					2.864945E38F,
					-9.3339934E36F,
					-5.526289E37F,
					1.9673517E38F,
					4.5145885E37F,
					3.8309276E36F,
					-1.3675185E38F,
					2.3072095E37F,
					-5.501944E37F,
					-2.0862628E38F,
					2.276069E38F,
					1.0102255E38F,
					2.131961E38F,
					-2.2033244E38F,
					-2.9010922E38F,
					-1.6141561E38F,
					1.4206717E38F,
					-1.2800654E38F,
					-2.2885174E38F,
					1.086662E38F,
					-2.6529647E38F,
					-2.13573E37F,
					2.5292747E38F,
					-2.358394E38F,
					2.0979242E38F,
					-1.792815E38F,
					7.6467985E37F,
					-3.1209223E38F,
					1.6322083E38F,
					2.2229787E38F,
					-6.575045E37F,
					-3.2054493E37F,
					-1.1833471E38F,
					3.2938142E38F,
					-3.3082766E38F,
					1.2348411E38F,
					1.2888275E38F,
					1.3768432E38F,
					5.081071E37F,
					-2.2249335E38F,
					2.9065484E38F,
					1.7427032E38F,
					2.2554451E38F,
					-2.8336005E38F,
					4.129868E37F,
					-1.859388E37F,
					6.5195656E37F,
					2.2448875E38F,
					-2.955207E38F,
					-1.4470413E38F,
					-2.048679E38F,
					2.3202677E38F,
					2.2986154E38F,
					-1.7531285E37F,
					-1.914949E38F,
					-2.253952E37F,
					3.2121812E38F,
					1.2345086E38F,
					1.7871509E38F,
					-1.6866118E38F,
					2.4159944E38F,
					-1.9598797E38F,
					9.709509E37F,
					7.764562E37F,
					3.0641123E38F,
					2.4907288E38F,
					1.7925066E38F,
					7.3774664E37F,
					-2.9329845E38F,
					-3.643127E37F,
					-2.0291721E38F,
					-3.1826997E38F,
					1.585953E37F,
					-2.7513328E38F,
					2.9524586E38F,
					-2.7169644E37F,
					2.9936751E38F,
					-1.2118156E38F,
					-2.7569243E38F,
					1.9578527E38F,
					-2.4395593E38F,
					-2.595826E38F,
					2.9382857E38F,
					3.2602205E38F,
					3.0050402E38F,
					5.0254078E36F,
					-6.850798E37F,
					2.1043925E38F,
					1.3390192E38F,
					-7.103904E37F,
					2.9624206E38F,
					1.7219776E38F,
					-4.489525E37F,
					-3.2000073E38F,
					-3.8392193E36F,
					-2.7093052E38F,
					1.6135894E38F,
					1.5321808E38F,
					2.6119263E38F,
					5.072038E37F,
					2.5341763E38F,
					1.3450473E38F,
					2.8512772E38F,
					-3.3165478E38F,
					6.5604473E37F,
					1.0999266E37F,
					-2.5199052E38F,
					-1.5656538E38F,
					-1.6362456E38F,
					2.7431982E37F,
					1.4932749E38F,
					-1.3787212E38F,
					-1.7496148E38F,
					-6.295277E37F,
					-6.5244993E37F,
					5.6035765E37F,
					-7.407219E37F,
					-6.6858377E37F,
					1.5389714E38F,
					-2.02739E37F,
					-8.4268615E37F,
					-2.4819114E38F,
					1.8142161E38F,
					-1.0305878E38F,
					5.725033E37F,
					-2.403431E38F,
					-2.7852598E38F,
					1.0926745E38F,
					-2.2460872E38F,
					-1.1967852E38F,
					2.931357E38F,
					-1.2980331E38F,
					-2.8306242E38F,
					-8.533052E37F,
					-1.6333073E38F,
					1.342327E38F,
					-1.4489049E38F,
					2.4313409E38F,
					-1.6600212E38F,
					-3.0558173E37F,
					-2.1294224E38F,
					-2.1055346E38F,
					1.6659883E38F,
					-1.831056E38F,
					8.3103796E37F,
					-1.0887305E38F,
					2.5507292E38F,
					5.8366345E37F,
					2.6538426E38F,
					-8.032099E37F,
					4.50306E37F,
					-2.8988048E38F,
					-2.7176224E38F,
					2.3947218E38F,
					1.6818651E38F,
					-2.445068E38F,
					8.723054E36F,
					1.322046E37F,
					-1.8194039E37F,
					-8.4899444E37F,
					-9.880531E37F,
					-3.201656E38F,
					-7.9022905E37F,
					2.1619824E38F,
					-1.9521915E38F,
					2.9611296E38F,
					-1.9510804E38F,
					-9.395717E37F,
					3.0695186E38F,
					-2.0699564E37F,
					-8.516737E37F,
					-2.8471883E38F,
					-1.0832127E38F,
					3.2178526E38F,
					4.7286065E37F,
					3.8096924E37F,
					1.7587098E38F,
					2.5228786E38F,
					-2.8412378E37F,
					1.8034641E37F,
					-2.249125E37F,
					7.6641415E37F,
					-2.539313E38F,
					-3.5657313E37F,
					-2.342425E38F,
					1.9622434E38F,
					-2.2887685E38F,
					-2.2546304E38F,
					2.191016E38F,
					1.9198246E38F,
					-2.6225184E38F,
					-5.6865206E35F,
					6.3043733E37F,
					-1.3827296E38F,
					-2.0768504E38F,
					1.0835271E38F,
					2.6540022E38F,
					-2.0327946E38F,
					6.34716E37F,
					2.9135523E38F,
					2.2992764E38F,
					-1.0510741E38F,
					-2.8382403E38F,
					-3.183065E38F,
					4.333735E37F,
					-9.40217E37F,
					-1.7728106E38F,
					-1.6713371E38F,
					3.0856048E38F,
					1.0585526E38F,
					-9.380049E37F,
					2.6951495E38F,
					-2.3145343E38F,
					-7.1595217E37F,
					-2.3921043E38F,
					-3.3543797E38F,
					3.182442E38F,
					2.1770429E38F,
					7.7564716E37F,
					2.9692707E38F,
					1.6385565E37F,
					-2.5502885E38F,
					2.6425992E37F,
					1.2809767E38F,
					-1.5094348E38F,
					-2.0858108E37F,
					-1.2718877E38F,
					1.5455169E38F,
					1.3175725E38F,
					-1.3007294E38F,
					2.9600023E38F,
					-2.7600938E38F,
					5.655189E37F,
					-2.018508E38F,
					-2.7821017E36F,
					9.2154E36F,
					1.3265873E38F,
					1.3734701E37F,
					3.0485005E38F,
					-1.7773611E38F,
					3.3916362E37F,
					-3.0849958E37F,
					-1.834766E38F,
					2.4979625E38F);
				assert(pestimator_status.hagl_ratio() == -1.2062295E38F,
					2.3795749E38F,
					-1.018629E38F,
					1.7003374E38F,
					-1.3659616E38F,
					-1.1698856E37F,
					-5.3103983E37F,
					-2.4619095E38F,
					-7.5864634E37F,
					-2.517591E38F,
					2.743623E38F,
					-2.7147587E38F,
					-1.5446852E37F,
					1.4179971E38F,
					2.4090055E38F,
					-2.7580998E38F,
					-3.0605373E38F,
					3.0755727E38F,
					-2.7297586E38F,
					-1.835141E38F,
					-2.3250734E38F,
					9.987032E37F,
					1.7646554E38F,
					3.3199706E38F,
					-1.544598E38F,
					-1.0766147E38F,
					2.2034966E38F,
					-1.2621719E38F,
					-1.3300136E38F,
					3.1932587E38F,
					3.1446754E38F,
					2.7275509E38F,
					-2.7630852E38F,
					-2.9290179E38F,
					2.385146E38F,
					3.1494864E38F,
					2.8696192E38F,
					-2.6321574E38F,
					-1.8048375E38F,
					2.6706354E38F,
					2.3156023E38F,
					3.2317612E38F,
					1.8349425E38F,
					1.2529421E38F,
					6.8216964E37F,
					-2.086913E38F,
					-4.1007655E37F,
					-7.233142E37F,
					-3.0058787E38F,
					1.3070527E38F,
					7.3750436E37F,
					2.9669322E38F,
					-1.6591683E38F,
					2.5283368E38F,
					1.2171433E37F,
					-4.3430597E37F,
					-2.5424497E37F,
					2.0156997E38F,
					1.560018E38F,
					4.2953387E37F,
					5.772402E37F,
					-1.8493329E37F,
					-3.2826559E38F,
					-1.0429196E38F,
					2.6944488E38F,
					-3.0395436E38F,
					-1.8043974E38F,
					-7.4496E37F,
					-2.0818313E38F,
					-2.3712725E38F,
					2.0143315E38F,
					6.6789473E37F,
					-2.9256885E38F,
					2.5849708E38F,
					1.5304981E38F,
					-2.486252E38F,
					-2.4323254E38F,
					-2.3637159E38F,
					-3.3066066E38F,
					1.9514907E38F,
					-2.897936E38F,
					-8.201051E37F,
					-1.9157833E38F,
					-2.225065E38F,
					2.6802797E38F,
					2.3661047E38F,
					2.3023417E38F,
					1.0620573E38F,
					1.5632443E38F,
					3.040262E38F,
					1.1993302E38F,
					2.8803626E38F,
					-3.037614E38F,
					-3.1887595E38F,
					-3.279895E38F,
					1.7125966E38F,
					-2.0754278E38F,
					-1.5605047E38F,
					9.327577E37F,
					-2.0231616E38F,
					-1.4390557E38F,
					7.4194033E37F,
					-1.8630338E37F,
					1.0543667E38F,
					9.495776E37F,
					1.7436145E38F,
					2.9164675E38F,
					2.331958E38F,
					-1.5203387E38F,
					-2.1986493E38F,
					5.960509E37F,
					-9.259882E37F,
					1.774177E38F,
					7.4939787E37F,
					-2.798399E38F,
					4.5787256E37F,
					1.7875683E38F,
					2.9019583E38F,
					-3.0736765E36F,
					-1.3894274E38F,
					-8.636542E37F,
					-6.722948E37F,
					-5.2817945E37F,
					-1.0980918E38F,
					-1.9244644E38F,
					-7.956145E37F,
					-3.284524E38F,
					-1.8719732E37F,
					1.4340396E36F,
					2.2759847E38F,
					-1.82825E38F,
					8.110108E37F,
					-3.3400926E38F,
					9.293115E37F,
					-3.2061565E38F,
					2.4861078E38F,
					-1.8385779E37F,
					2.0851493E38F,
					-2.230399E38F,
					-2.9943256E38F,
					1.0763004E38F,
					-2.9052716E38F,
					-8.1477745E37F,
					-1.1347503E38F,
					2.1947524E38F,
					3.303783E37F,
					3.3590475E38F,
					3.6657558E37F,
					3.1873939E38F,
					-5.802733E37F,
					2.7827354E38F,
					-4.4028096E37F,
					-1.3881961E38F,
					2.9490486E38F,
					1.409739E38F,
					-3.2315625E38F,
					2.8454906E38F,
					-3.0904833E38F,
					1.990643E38F,
					1.3223989E38F,
					8.74699E36F,
					-3.359823E38F,
					1.1602126E38F,
					-2.4771213E38F,
					-1.9447365E38F,
					2.1378579E38F,
					2.0094264E38F,
					6.2153244E37F,
					-1.715537E38F,
					1.634118E38F,
					-7.330875E37F,
					9.020107E37F,
					1.4963491E38F,
					7.0756667E37F,
					-3.07691E38F,
					-3.3474537E38F,
					-2.0055502E38F,
					-3.3506086E38F,
					-1.0848746E38F,
					-1.3570881E38F,
					2.6326906E38F,
					2.7758208E38F,
					9.216139E37F,
					3.3010928E38F,
					-1.5285602E38F,
					-1.7887213E38F,
					-1.8832049E38F,
					2.4973009E38F,
					-1.2791217E38F,
					-1.648675E38F,
					1.8391957E38F,
					2.5401432E38F,
					1.8247802E38F,
					-2.888583E38F,
					-1.0683226E38F,
					1.5116715E38F,
					2.561328E38F,
					-1.9469261E38F,
					2.3394912E38F,
					2.5934014E37F,
					-6.898195E37F,
					-1.8544732E38F,
					2.5200987E38F,
					-1.4115866E38F,
					2.0479686E38F,
					-1.6427452E38F,
					-3.3316837E38F,
					-3.1678238E38F,
					-2.0078732E38F,
					-1.2831108E38F,
					1.2861417E38F,
					-9.3173885E36F,
					-1.724213E38F,
					2.3597957E38F,
					-4.706663E37F,
					3.106516E38F,
					-1.5499596E38F,
					7.522396E37F,
					-2.2553193E36F,
					1.5155203E38F,
					-2.3295984E38F,
					2.7643847E38F,
					3.096424E38F,
					-2.9405306E38F,
					2.3503658E38F,
					-1.5725968E38F,
					-1.8614585E38F,
					1.4401161E38F,
					2.1615895E38F,
					8.925732E37F,
					3.870366E37F,
					-1.0566998E38F,
					-5.697726E37F,
					8.295E37F,
					-2.5981572E38F,
					-1.0958138E38F,
					-2.7160653E38F,
					1.741945E37F,
					-4.1116747E37F,
					1.1458835E38F,
					3.2497212E37F,
					-1.7246758E38F,
					-2.6892317E38F,
					-1.7353346E38F,
					6.914473E37F,
					2.7785802E38F,
					2.1330406E38F,
					1.0425978E38F,
					1.996707E38F,
					9.723824E37F,
					3.3135308E38F,
					-1.1639933E38F,
					6.264607E37F,
					-2.7478742E38F,
					-1.6239647E38F);
				assert(pestimator_status.tas_ratio() == -2.9737093E38F,
					1.6418613E38F,
					-1.7937507E38F,
					-1.843308E37F,
					-5.992557E37F,
					1.723951E38F,
					6.488473E37F,
					7.305128E37F,
					2.148533E36F,
					-1.766693E38F,
					-2.2630301E38F,
					-2.9355591E38F,
					-1.1410738E37F,
					2.5120906E38F,
					-9.631429E37F,
					1.871017E38F,
					1.2131574E38F,
					-2.1397021E38F,
					3.3357222E38F,
					-1.1716393E38F,
					2.377716E38F,
					-1.9729312E38F,
					-1.2838151E38F,
					-9.05721E37F,
					-3.435671E37F,
					-4.5385612E36F,
					-2.0854469E38F,
					-6.698925E37F,
					1.7953257E38F,
					-1.7911004E38F,
					5.3877437E37F,
					8.658316E37F,
					-1.3625229E38F,
					-6.8782955E37F,
					1.0065292E38F,
					-3.3971343E37F,
					-2.0693932E38F,
					-3.074216E38F,
					-5.8458803E37F,
					-3.389333E38F,
					-1.5815356E37F,
					-3.0984032E38F,
					2.7247482E38F,
					-4.778382E37F,
					1.9494896E38F,
					2.544504E38F,
					-1.7407423E38F,
					4.9256486E37F,
					-2.2247803E38F,
					2.6001351E38F,
					2.6734883E38F,
					-1.243784E38F,
					3.2746161E38F,
					-3.2914073E38F,
					2.4697673E38F,
					1.3520402E38F,
					-1.9014295E38F,
					-8.934204E37F,
					-2.591009E38F,
					2.3580439E38F,
					2.7164604E37F,
					1.9855057E38F,
					7.677306E37F,
					2.8294152E37F,
					-1.356253E38F,
					-3.9341752E37F,
					-7.1057247E37F,
					-3.2531472E38F,
					1.2501758E38F,
					-8.1098865E37F,
					-9.121844E37F,
					1.0473564E38F,
					7.966894E36F,
					2.2081662E38F,
					-6.0241845E37F,
					-9.772737E37F,
					2.0612183E38F,
					-5.9405586E37F,
					4.4928194E37F,
					7.9204926E36F,
					-1.1134748E38F,
					-5.903725E37F,
					-5.2071573E37F,
					1.924563E38F,
					-1.0533447E38F,
					2.9602443E38F,
					1.3693895E38F,
					2.792619E37F,
					3.2323015E38F,
					-4.499036E37F,
					2.9519883E38F,
					9.705607E37F,
					2.9593102E38F,
					1.2880159E38F,
					1.6703246E38F,
					2.6721831E38F,
					-1.9126263E37F,
					2.8815627E38F,
					-1.4107462E38F,
					-3.3171694E38F,
					-3.3447967E38F,
					1.2423975E38F,
					2.5468823E38F,
					2.810822E38F,
					3.3821693E38F,
					-1.2513095E38F,
					-3.1154278E38F,
					-1.1937415E38F,
					-1.8990734E38F,
					6.0896454E37F,
					-4.0979323E37F,
					-2.0208782E38F,
					3.3428468E38F,
					-1.896216E38F,
					3.3714567E38F,
					2.1510381E36F,
					1.4392498E38F,
					-2.7036764E38F,
					3.2192963E38F,
					3.0603507E38F,
					1.4563778E38F,
					2.117377E38F,
					1.6171263E38F,
					-1.3513119E38F,
					8.184683E37F,
					1.1985686E38F,
					-1.338888E36F,
					-2.1642704E38F,
					-3.2807392E38F,
					-1.6847048E38F,
					-3.1238556E38F,
					-3.3378997E38F,
					2.7278E38F,
					-4.9832633E37F,
					2.69703E38F,
					-9.672759E37F,
					-9.389555E37F,
					6.635512E37F,
					1.0858841E38F,
					-3.218326E38F,
					-1.4643014E38F,
					6.962411E37F,
					3.2019138E38F,
					-1.882599E38F,
					1.3400641E38F,
					-3.125537E38F,
					-1.110763E38F,
					-2.6619975E38F,
					1.721312E38F,
					-2.3071474E38F,
					1.6396921E38F,
					-2.911432E38F,
					-2.3253578E38F,
					2.8731394E38F,
					-1.8318963E38F,
					-2.163477E38F,
					-2.8221316E38F,
					2.8893812E38F,
					2.8091695E37F,
					-7.2162055E37F,
					4.8883244E37F,
					9.881788E37F,
					-2.503841E38F,
					-2.5996839E38F,
					1.6880299E38F,
					-8.824417E37F,
					2.9822002E38F,
					-5.5559554E36F,
					-2.4959497E38F,
					8.1534065E37F,
					3.1957076E37F,
					-8.685176E37F,
					-2.756302E38F,
					4.4736424E37F,
					-2.3466695E38F,
					-4.182598E37F,
					-1.3581529E38F,
					-2.527157E37F,
					2.6384135E38F,
					3.1947845E37F,
					-2.078038E38F,
					1.3561192E38F,
					-3.3821017E38F,
					-9.731408E36F,
					-2.2254134E38F,
					1.8548909E38F,
					-3.2835603E38F,
					-3.7702576E37F,
					1.7221255E36F,
					1.6922513E38F,
					2.5482428E38F,
					8.984223E37F,
					2.1349137E38F,
					4.1488835E37F,
					2.5743302E38F,
					-3.3421541E38F,
					-2.6399144E38F,
					-1.03507405E37F,
					-2.0680853E38F,
					1.6412076E38F,
					-2.8197448E38F,
					-2.8041989E38F,
					1.6738521E38F,
					7.671821E37F,
					-9.569473E37F,
					2.4323085E38F,
					2.5936164E37F,
					-1.8552395E38F,
					-9.176441E37F,
					-1.827805E38F,
					-3.0343416E38F,
					-2.7909514E38F,
					1.240695E38F,
					-2.5096535E38F,
					-7.9950404E37F,
					1.1155568E38F,
					3.2938696E38F,
					7.3902514E37F,
					8.997912E37F,
					1.2203563E38F,
					-2.8519788E38F,
					-2.0652243E38F,
					-1.4934492E38F,
					7.8175536E37F,
					1.202974E38F,
					-8.26488E37F,
					-1.6454746E38F,
					-1.5035972E38F,
					2.4204202E38F,
					1.7283185E38F,
					2.9484963E38F,
					-1.8456E38F,
					8.100393E37F,
					2.1520785E38F,
					6.971894E37F,
					-2.1843727E38F,
					1.3189842E38F,
					1.3809729E37F,
					-1.1459186E38F,
					-5.6320256E37F,
					1.2645545E38F,
					2.8431882E37F,
					2.5658502E38F,
					-1.3910186E38F,
					1.8739987E38F,
					-3.6865282E37F,
					2.8034142E38F,
					-9.873321E37F,
					-1.8318594E38F,
					4.693205E37F,
					3.2841302E38F,
					-1.2802296E38F,
					-2.0190033E38F,
					-2.3807314E38F,
					3.019492E38F);
				assert(pestimator_status.pos_horiz_accuracy() == 2.22305E38F,
					4.2793217E37F,
					-1.291184E38F,
					1.2510416E38F,
					-7.1867057E37F,
					-1.5749542E38F,
					7.6265785E37F,
					2.0776429E36F,
					-2.2066207E38F,
					1.7784183E38F,
					-2.2230259E37F,
					3.3653157E37F,
					-2.8071948E38F,
					-4.8059803E37F,
					3.3130332E38F,
					1.3971556E38F,
					1.1952058E38F,
					-1.4748688E38F,
					5.6714434E37F,
					3.093007E38F,
					-1.2050206E38F,
					2.6643957E38F,
					-3.3147716E38F,
					3.244278E38F,
					1.6829712E38F,
					1.5710434E38F,
					1.9938544E38F,
					-1.2971449E38F,
					3.2942507E38F,
					-9.323867E37F,
					-3.032396E38F,
					-6.588599E37F,
					1.2889954E38F,
					-2.1308288E38F,
					1.8596317E38F,
					-3.025393E38F,
					-1.5483073E38F,
					-4.38045E37F,
					-2.4761822E38F,
					1.9958852E38F,
					-2.3902424E37F,
					-1.3364475E38F,
					7.66852E37F,
					-2.0717952E38F,
					3.6951985E37F,
					2.363706E38F,
					-2.7458369E38F,
					-2.7015561E38F,
					1.1540413E38F,
					-3.2284866E38F,
					1.8682525E38F,
					-2.9394317E38F,
					9.34918E37F,
					2.2365825E38F,
					8.601526E37F,
					-2.5647383E38F,
					-2.9463638E38F,
					-2.6670267E38F,
					-2.5244083E38F,
					1.7622917E38F,
					-2.5893157E38F,
					1.2168533E38F,
					-6.2260056E37F,
					-2.1057167E38F,
					2.186372E38F,
					-1.3518913E38F,
					-2.844775E38F,
					-1.7276709E38F,
					-1.0894607E38F,
					1.2857399E38F,
					4.5772536E37F,
					1.6754628E38F,
					2.9205988E38F,
					-1.3791237E38F,
					-8.244338E37F,
					1.4600755E38F,
					2.2526298E37F,
					2.1758754E38F,
					2.425218E38F,
					3.1721583E38F,
					-8.4538173E37F,
					1.0277348E38F,
					-6.313284E37F,
					1.8318326E35F,
					-4.2815137E37F,
					1.1243864E38F,
					3.1231605E38F,
					3.103287E38F,
					1.7805942E38F,
					6.644434E37F,
					2.4552482E38F,
					-3.8524225E36F,
					-1.1031398E38F,
					2.619597E38F,
					1.6633529E38F,
					-2.7303588E38F,
					-1.4530025E38F,
					-1.3313307E38F,
					-1.8394466E38F,
					-1.8943663E38F,
					1.0066511E38F,
					-7.462008E37F,
					3.538764E37F,
					1.404981E38F,
					-3.5382413E37F,
					-2.3095073E38F,
					-2.2885655E38F,
					-1.4998689E38F,
					-3.2475614E38F,
					3.3600941E38F,
					-1.5916478E38F,
					9.067914E37F,
					6.9189314E36F,
					-1.0979372E38F,
					3.0321568E38F,
					3.7196852E37F,
					-1.9967586E38F,
					-3.3531782E38F,
					-2.4045865E38F,
					-8.055444E37F,
					1.7230848E37F,
					5.5146274E37F,
					-3.9480214E36F,
					-1.1014067E37F,
					8.615303E37F,
					-4.6667705E37F,
					-2.7500333E38F,
					1.935592E36F,
					-2.0702334E37F,
					1.1747266E38F,
					1.0326765E37F,
					9.194333E37F,
					2.2569825E38F,
					1.4963489E38F,
					-1.1993532E38F,
					2.2497198E38F,
					2.5734419E38F,
					1.16861E37F,
					2.9228688E38F,
					9.972858E37F,
					3.2196078E38F,
					3.1807138E38F,
					-4.6749387E37F,
					-3.1779437E38F,
					2.3523435E38F,
					6.3568555E37F,
					2.505921E38F,
					2.0647193E37F,
					2.9309297E38F,
					-2.1652385E38F,
					-1.5590957E38F,
					-1.4821137E38F,
					1.1281145E37F,
					1.0959284E38F,
					2.5825276E38F,
					-1.4522188E38F,
					9.797145E37F,
					2.1603894E38F,
					6.0671847E37F,
					2.3598158E38F,
					-2.7189998E38F,
					-1.0589591E38F,
					1.7273357E37F,
					1.3652049E38F,
					3.2203357E38F,
					3.3941112E38F,
					-4.2286527E37F,
					-7.131265E36F,
					-8.3428016E37F,
					-2.891607E38F,
					-1.8245194E38F,
					-2.950181E38F,
					2.423321E38F,
					1.8847668E38F,
					1.6151417E38F,
					-1.278064E38F,
					-9.9383344E36F,
					1.9319452E38F,
					-3.2562966E38F,
					-3.0443558E38F,
					-2.8759433E38F,
					-2.14522E38F,
					-2.2204971E38F,
					3.218096E38F,
					2.6689978E38F,
					-1.8783295E37F,
					1.3113305E38F,
					-3.3132509E38F,
					-3.6113664E37F,
					3.257534E38F,
					-3.3279112E38F,
					-1.1746238E37F,
					1.7608914E38F,
					-1.0871262E38F,
					-2.4314025E38F,
					6.126012E37F,
					-1.4322782E38F,
					1.3477954E38F,
					3.1130187E38F,
					2.0490765E38F,
					3.144143E38F,
					2.1557009E38F,
					1.8424687E38F,
					-7.022256E37F,
					4.990176E37F,
					2.7982596E38F,
					-1.954089E38F,
					-2.2232762E38F,
					2.5689728E38F,
					5.124479E37F,
					1.165052E38F,
					2.4800057E38F,
					-3.1840894E38F,
					2.3449035E38F,
					-9.983282E37F,
					-2.6095227E38F,
					-8.511671E37F,
					2.1333535E37F,
					3.2900748E37F,
					-3.531902E37F,
					-2.2154654E38F,
					9.454947E37F,
					-1.7917138E38F,
					2.539309E38F,
					1.9960574E38F,
					-1.7895666E37F,
					3.1613001E38F,
					-2.7133793E38F,
					6.730916E37F,
					1.6889963E38F,
					3.2514041E38F,
					-2.31033E38F,
					-2.254478E38F,
					-2.1730117E38F,
					1.6219195E37F,
					-2.919006E38F,
					-2.8968932E37F,
					-2.6705285E38F,
					1.1923697E38F,
					-1.0618377E38F,
					6.2462495E37F,
					-1.0796117E38F,
					9.762575E37F,
					3.0398292E38F,
					9.328264E37F,
					7.1329543E37F,
					-2.8333563E38F,
					-1.2486658E38F,
					-4.0552029E37F,
					-3.9570038E37F,
					-1.2552383E38F,
					-2.3316901E38F,
					-2.3600026E38F,
					-2.6566831E38F,
					2.3650578E37F);
				assert(pestimator_status.pos_vert_accuracy() == -1.4823256E38F,
					5.1519217E37F,
					-1.1896476E38F,
					3.9616923E37F,
					-2.6514342E38F,
					-1.867344E38F,
					1.4676011E38F,
					2.573163E38F,
					2.1808306E38F,
					-1.5742582E38F,
					2.8699437E38F,
					-7.3217034E37F,
					9.75978E37F,
					-1.4380993E38F,
					1.0087223E38F,
					2.2390494E38F,
					-8.4044986E37F,
					2.4065907E38F,
					-1.9400605E38F,
					3.4045612E37F,
					2.954166E38F,
					-4.5658376E37F,
					1.7214304E38F,
					2.8643934E38F,
					2.269188E38F,
					2.3291262E38F,
					1.2808049E38F,
					2.9870617E38F,
					1.8804039E38F,
					2.7879237E38F,
					-2.184961E38F,
					1.2017364E38F,
					-8.663133E37F,
					-1.8430496E38F,
					3.031196E37F,
					1.5324151E38F,
					-1.7292225E38F,
					3.3341507E38F,
					2.6951672E38F,
					2.3402946E38F,
					3.8263742E37F,
					-2.580673E38F,
					1.6581189E37F,
					-1.8334684E38F,
					7.008982E37F,
					1.16009E37F,
					2.5920128E38F,
					2.261044E38F,
					2.3669941E36F,
					-1.4074216E38F,
					1.1326459E38F,
					-8.311484E37F,
					-2.9918966E38F,
					2.6253472E38F,
					1.6285781E38F,
					2.462433E38F,
					1.4738778E38F,
					-1.9365349E38F,
					1.8002772E38F,
					1.5921119E38F,
					1.8292567E38F,
					-2.8253628E38F,
					-3.066975E38F,
					7.223817E37F,
					2.568135E38F,
					-5.956236E37F,
					1.5722527E38F,
					-7.8965135E37F,
					-8.172159E37F,
					-8.616352E37F,
					-1.6035777E38F,
					5.9663907E37F,
					1.940631E37F,
					2.354286E38F,
					1.5831475E38F,
					1.2054931E38F,
					3.1601469E38F,
					2.5403513E37F,
					3.007312E38F,
					-3.3588735E38F,
					2.7320832E37F,
					8.0374727E37F,
					3.0033705E38F,
					2.7047706E37F,
					-5.088649E36F,
					-2.5716365E38F,
					2.2861713E38F,
					-2.0645215E38F,
					-2.0754355E38F,
					-2.6153658E37F,
					-1.4033988E38F,
					-4.5541347E37F,
					2.0399413E38F,
					-7.229543E37F,
					1.539765E38F,
					-1.1703358E38F,
					3.1112924E38F,
					1.8612248E37F,
					-2.5095158E38F,
					9.074077E37F,
					-1.342966E38F,
					2.4459649E38F,
					1.8638E38F,
					-8.989699E37F,
					-1.6790089E38F,
					-1.9332726E38F,
					-1.3793601E38F,
					-9.007484E37F,
					-2.7990453E38F,
					2.1374554E38F,
					-2.8798507E38F,
					5.7747833E37F,
					-3.2995521E38F,
					-2.7205814E38F,
					-8.728386E37F,
					1.1029457E38F,
					1.6174732E38F,
					-1.0205666E38F,
					-2.9908806E38F,
					2.5147868E38F,
					-9.62146E37F,
					-2.9525994E38F,
					5.8904843E37F,
					-3.0314475E38F,
					1.7826757E37F,
					2.1238528E38F,
					-1.2130799E38F,
					-1.4161718E37F,
					1.3047387E38F,
					6.652233E37F,
					2.5632116E38F,
					9.653998E37F,
					-3.194726E38F,
					-3.116071E38F,
					6.883489E36F,
					-2.8106205E38F,
					2.825495E38F,
					6.3986124E37F,
					3.0015812E38F,
					-2.393901E38F,
					1.9428538E36F,
					1.5460699E38F,
					-4.353578E37F,
					-1.6149253E38F,
					-1.4446938E38F,
					1.6698315E38F,
					-1.3049693E38F,
					-2.2753756E35F,
					-5.74568E37F,
					1.0231649E38F,
					1.1993617E38F,
					1.6588315E38F,
					-7.5849585E37F,
					6.357232E37F,
					-2.2903957E37F,
					2.5180317E38F,
					9.713505E37F,
					1.0840388E38F,
					1.695216E38F,
					-6.333918E37F,
					6.317851E37F,
					-2.188748E38F,
					1.3014635E38F,
					8.881613E37F,
					2.7803316E38F,
					1.7744885E38F,
					2.2352743E38F,
					1.0392786E38F,
					-2.7398398E38F,
					-3.123791E38F,
					-1.2702606E38F,
					8.976279E37F,
					-1.5125033E38F,
					3.2077619E38F,
					8.5678393E36F,
					-1.5581835E38F,
					4.0628443E37F,
					-3.1177658E38F,
					2.6139963E38F,
					2.3457207E38F,
					-1.713212E38F,
					-1.3051328E38F,
					9.55892E37F,
					-3.2743512E38F,
					2.1861728E38F,
					1.5078176E38F,
					3.329083E37F,
					1.0677149E38F,
					-1.598985E38F,
					-2.1635476E38F,
					5.483383E37F,
					-9.44E37F,
					-3.2206097E38F,
					2.3127687E38F,
					-3.129332E38F,
					-1.1548945E37F,
					-8.867108E37F,
					1.2081555E38F,
					4.1075398E37F,
					1.9218766E38F,
					-3.4378492E37F,
					-3.2163062E38F,
					-1.8732168E38F,
					2.3988775E38F,
					-1.7559979E38F,
					2.2019367E38F,
					5.1497084E37F,
					2.298869E38F,
					2.9481377E38F,
					1.6306188E38F,
					-1.2288108E38F,
					9.892988E37F,
					3.146038E38F,
					-3.7561106E37F,
					2.1695035E38F,
					-5.419956E37F,
					-2.0632892E38F,
					2.9286364E36F,
					2.6706435E38F,
					2.8150031E38F,
					2.8604386E38F,
					1.6522754E37F,
					-2.700422E38F,
					-2.1851084E38F,
					2.61039E38F,
					2.0863229E38F,
					2.6436423E38F,
					2.2488073E38F,
					2.6981831E38F,
					-2.7442374E38F,
					1.969207E38F,
					-9.985938E37F,
					-1.6478342E38F,
					-3.3333615E38F,
					-1.3217397E38F,
					1.7639812E38F,
					1.8360538E38F,
					2.0050995E38F,
					2.7335853E38F,
					-3.0664775E36F,
					1.77176E38F,
					5.768064E37F,
					1.1179042E38F,
					-3.3534839E38F,
					-2.5472682E38F,
					3.1334327E38F,
					9.457763E37F,
					4.774288E37F,
					-3.1089023E38F,
					1.2805911E38F,
					2.8321961E38F,
					-1.5666597E38F,
					2.2487897E38F,
					2.4912874E38F,
					-2.4008952E37F);
				const auto flags = pestimator_status.flags();
				assert(flags.IS_EXISTS);
				{
					auto fld = flags.CASE.EXISTS;

					for (auto item = pestimator_status.flags(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_GPS_GLITCH,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_ATTITUDE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_VERT,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_PRED_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_REL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_AGL,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_VELOCITY_HORIZ,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_VERT_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_POS_HORIZ_ABS,
						ESTIMATOR_STATUS_FLAGS::ESTIMATOR_CONST_POS_MODE), false;);

				}

				printf("ESTIMATOR_STATUS \n");
			}

			void fill(const com::company::demo::HWSTATUS& phwstatus) {

				phwstatus.Vcc(8826,
					-32267,
					31920,
					23041,
					13546,
					-22879,
					851,
					-10548,
					-8080,
					31009,
					-26842,
					27533,
					11360,
					17326,
					-25976,
					-13893,
					11421,
					24915,
					24834,
					25671,
					30418,
					30692,
					-15526,
					-29182,
					-26698,
					-5744,
					-23022,
					-4922,
					-11361,
					-4450,
					21315,
					-14801,
					-32107,
					17254,
					4221,
					13731,
					-5860,
					20809,
					-19809,
					21946,
					-32235,
					-20376,
					-25263,
					28344,
					315,
					-4436,
					-28212,
					19691,
					-23059,
					-22721,
					26280,
					-18553,
					29362,
					20003,
					-16478,
					32124,
					6791,
					29428,
					-22118,
					28187,
					7669,
					-2322,
					-28003,
					1355,
					24998,
					18235,
					32161,
					30851,
					-5812,
					-29514,
					-16202,
					-22272,
					27684,
					-25716,
					-26330,
					9049,
					-25322,
					-22273,
					29215,
					2672,
					-22919,
					-27858,
					-24696,
					-28631,
					-24696,
					16243,
					591,
					-11586,
					5892,
					9820,
					17564,
					-27995,
					-11990,
					23600,
					25147,
					29950,
					20914,
					9038,
					-2332,
					-28807,
					14980,
					6887,
					2656,
					-31003,
					-10110,
					-20029,
					-14284,
					-14086,
					1440,
					28331,
					4247,
					-31056,
					17430,
					-11021,
					31644,
					18252,
					13720,
					-17473,
					11996,
					-10187,
					-21727,
					-24271,
					22031,
					-14880,
					10739,
					11604,
					29709,
					9251,
					-27874,
					-25810,
					29557,
					480,
					-2226,
					29345,
					-20138,
					2504,
					-10789,
					19092,
					24772,
					-16609,
					19416,
					14124,
					436,
					3454,
					-24802,
					-6526,
					20467,
					30141,
					-27882,
					3376,
					7224,
					30815,
					20411,
					7157,
					22282,
					17120,
					26642,
					-20408,
					-5611,
					25077,
					27111,
					-13970,
					25953,
					1600,
					19496,
					19730,
					17041,
					9400,
					-21661,
					19646,
					22825,
					-8746,
					29666,
					12774,
					-16927,
					-26035,
					21152,
					32134,
					5833,
					21342,
					-6439,
					-20240,
					-2285,
					-13748,
					-25673,
					13759,
					-30922,
					13299,
					-17641,
					4607,
					5750,
					-12822,
					19067,
					29677,
					-28219,
					16918,
					-15937,
					-1615,
					14875,
					-14384,
					282,
					-31622,
					-29265,
					-2586,
					25531,
					6809,
					-111,
					-27393,
					-19260,
					-5696,
					-11994,
					13650,
					-11244,
					-32560,
					-20368,
					-32189,
					17183,
					14944,
					-17903,
					32349,
					32432,
					-2942,
					2091,
					-31303,
					1214,
					-20136,
					-31420,
					2442,
					24978,
					-23889,
					-12285,
					805,
					-18671,
					-3233,
					-13528,
					-11705,
					-11014,
					-16403,
					15098,
					25564,
					-26325,
					32216,
					6529,
					-23611,
					8141,
					-15661,
					-28805,
					18734,
					29528,
					-28155,
					29787,
					25804,
					15859,
					-25493,
					-22602);
				phwstatus.I2Cerr(82,
					111,
					61,
					-84,
					-103,
					-124,
					-25,
					9,
					-46,
					107,
					92,
					-16,
					-63,
					-114,
					94,
					-55,
					-4,
					-87,
					46,
					1,
					1,
					-113,
					-64,
					85,
					52,
					127,
					100,
					53,
					33,
					-18,
					48,
					117,
					-80,
					47,
					125,
					20,
					-26,
					-16,
					-85,
					-67,
					91,
					-34,
					-128,
					-97,
					124,
					-100,
					-84,
					-95,
					97,
					-92,
					26,
					-25,
					-7,
					81,
					-8,
					-34,
					-2,
					-44,
					-60,
					-48,
					-113,
					78,
					78,
					112,
					-113,
					-30,
					-62,
					-103,
					85,
					-119,
					-37,
					75,
					-44,
					77,
					123,
					6,
					27,
					-10,
					74,
					-68,
					118,
					86,
					-76,
					-96,
					78,
					75,
					52,
					-7,
					-50,
					-9,
					-19,
					-49,
					68,
					-111,
					-92,
					44,
					-83,
					-36,
					-9,
					-78,
					-10,
					-124,
					-45,
					103,
					-102,
					-112,
					-97,
					-105,
					64,
					53,
					34,
					98,
					20,
					58,
					72,
					108,
					-35,
					44,
					15,
					-77,
					-1,
					31,
					67,
					87,
					-72,
					-120,
					32,
					-69,
					-37,
					-52,
					-48,
					-74,
					-112,
					-38,
					73,
					-34,
					-27,
					-37,
					-91,
					31,
					-105,
					126,
					86,
					-127,
					23,
					104,
					-128,
					89,
					-114,
					-1,
					-44,
					-119,
					39,
					15,
					-93,
					-49,
					-60,
					-44,
					15,
					60,
					-63,
					1,
					119,
					-119,
					57,
					94,
					18,
					-9,
					-59,
					-83,
					-70,
					-78,
					81,
					-59,
					-124,
					-73,
					-115,
					24,
					-103,
					101,
					-120,
					-17,
					-105,
					-35,
					108,
					-33,
					-62,
					19,
					-74,
					-106,
					-79,
					-9,
					75,
					-47,
					41,
					15,
					70,
					-89,
					59,
					-32,
					62,
					113,
					-16,
					-119,
					-54,
					-104,
					124,
					-76,
					66,
					100,
					-29,
					23,
					-19,
					125,
					71,
					113,
					-109,
					28,
					69,
					101,
					-31,
					51,
					-110,
					-27,
					52,
					11,
					-25,
					-7,
					108,
					86,
					5,
					36,
					90,
					73,
					-14,
					102,
					86,
					20,
					125,
					118,
					-116,
					-70,
					-40,
					64,
					-87,
					-97,
					-113,
					-60,
					-114,
					-15,
					59,
					-128,
					-101,
					26,
					107);
			}

			void on_HWSTATUS(const com::company::demo::HWSTATUS& phwstatus) {
				assert(phwstatus.Vcc() == 8826,
					-32267,
					31920,
					23041,
					13546,
					-22879,
					851,
					-10548,
					-8080,
					31009,
					-26842,
					27533,
					11360,
					17326,
					-25976,
					-13893,
					11421,
					24915,
					24834,
					25671,
					30418,
					30692,
					-15526,
					-29182,
					-26698,
					-5744,
					-23022,
					-4922,
					-11361,
					-4450,
					21315,
					-14801,
					-32107,
					17254,
					4221,
					13731,
					-5860,
					20809,
					-19809,
					21946,
					-32235,
					-20376,
					-25263,
					28344,
					315,
					-4436,
					-28212,
					19691,
					-23059,
					-22721,
					26280,
					-18553,
					29362,
					20003,
					-16478,
					32124,
					6791,
					29428,
					-22118,
					28187,
					7669,
					-2322,
					-28003,
					1355,
					24998,
					18235,
					32161,
					30851,
					-5812,
					-29514,
					-16202,
					-22272,
					27684,
					-25716,
					-26330,
					9049,
					-25322,
					-22273,
					29215,
					2672,
					-22919,
					-27858,
					-24696,
					-28631,
					-24696,
					16243,
					591,
					-11586,
					5892,
					9820,
					17564,
					-27995,
					-11990,
					23600,
					25147,
					29950,
					20914,
					9038,
					-2332,
					-28807,
					14980,
					6887,
					2656,
					-31003,
					-10110,
					-20029,
					-14284,
					-14086,
					1440,
					28331,
					4247,
					-31056,
					17430,
					-11021,
					31644,
					18252,
					13720,
					-17473,
					11996,
					-10187,
					-21727,
					-24271,
					22031,
					-14880,
					10739,
					11604,
					29709,
					9251,
					-27874,
					-25810,
					29557,
					480,
					-2226,
					29345,
					-20138,
					2504,
					-10789,
					19092,
					24772,
					-16609,
					19416,
					14124,
					436,
					3454,
					-24802,
					-6526,
					20467,
					30141,
					-27882,
					3376,
					7224,
					30815,
					20411,
					7157,
					22282,
					17120,
					26642,
					-20408,
					-5611,
					25077,
					27111,
					-13970,
					25953,
					1600,
					19496,
					19730,
					17041,
					9400,
					-21661,
					19646,
					22825,
					-8746,
					29666,
					12774,
					-16927,
					-26035,
					21152,
					32134,
					5833,
					21342,
					-6439,
					-20240,
					-2285,
					-13748,
					-25673,
					13759,
					-30922,
					13299,
					-17641,
					4607,
					5750,
					-12822,
					19067,
					29677,
					-28219,
					16918,
					-15937,
					-1615,
					14875,
					-14384,
					282,
					-31622,
					-29265,
					-2586,
					25531,
					6809,
					-111,
					-27393,
					-19260,
					-5696,
					-11994,
					13650,
					-11244,
					-32560,
					-20368,
					-32189,
					17183,
					14944,
					-17903,
					32349,
					32432,
					-2942,
					2091,
					-31303,
					1214,
					-20136,
					-31420,
					2442,
					24978,
					-23889,
					-12285,
					805,
					-18671,
					-3233,
					-13528,
					-11705,
					-11014,
					-16403,
					15098,
					25564,
					-26325,
					32216,
					6529,
					-23611,
					8141,
					-15661,
					-28805,
					18734,
					29528,
					-28155,
					29787,
					25804,
					15859,
					-25493,
					-22602);
				assert(phwstatus.I2Cerr() == 82,
					111,
					61,
					-84,
					-103,
					-124,
					-25,
					9,
					-46,
					107,
					92,
					-16,
					-63,
					-114,
					94,
					-55,
					-4,
					-87,
					46,
					1,
					1,
					-113,
					-64,
					85,
					52,
					127,
					100,
					53,
					33,
					-18,
					48,
					117,
					-80,
					47,
					125,
					20,
					-26,
					-16,
					-85,
					-67,
					91,
					-34,
					-128,
					-97,
					124,
					-100,
					-84,
					-95,
					97,
					-92,
					26,
					-25,
					-7,
					81,
					-8,
					-34,
					-2,
					-44,
					-60,
					-48,
					-113,
					78,
					78,
					112,
					-113,
					-30,
					-62,
					-103,
					85,
					-119,
					-37,
					75,
					-44,
					77,
					123,
					6,
					27,
					-10,
					74,
					-68,
					118,
					86,
					-76,
					-96,
					78,
					75,
					52,
					-7,
					-50,
					-9,
					-19,
					-49,
					68,
					-111,
					-92,
					44,
					-83,
					-36,
					-9,
					-78,
					-10,
					-124,
					-45,
					103,
					-102,
					-112,
					-97,
					-105,
					64,
					53,
					34,
					98,
					20,
					58,
					72,
					108,
					-35,
					44,
					15,
					-77,
					-1,
					31,
					67,
					87,
					-72,
					-120,
					32,
					-69,
					-37,
					-52,
					-48,
					-74,
					-112,
					-38,
					73,
					-34,
					-27,
					-37,
					-91,
					31,
					-105,
					126,
					86,
					-127,
					23,
					104,
					-128,
					89,
					-114,
					-1,
					-44,
					-119,
					39,
					15,
					-93,
					-49,
					-60,
					-44,
					15,
					60,
					-63,
					1,
					119,
					-119,
					57,
					94,
					18,
					-9,
					-59,
					-83,
					-70,
					-78,
					81,
					-59,
					-124,
					-73,
					-115,
					24,
					-103,
					101,
					-120,
					-17,
					-105,
					-35,
					108,
					-33,
					-62,
					19,
					-74,
					-106,
					-79,
					-9,
					75,
					-47,
					41,
					15,
					70,
					-89,
					59,
					-32,
					62,
					113,
					-16,
					-119,
					-54,
					-104,
					124,
					-76,
					66,
					100,
					-29,
					23,
					-19,
					125,
					71,
					113,
					-109,
					28,
					69,
					101,
					-31,
					51,
					-110,
					-27,
					52,
					11,
					-25,
					-7,
					108,
					86,
					5,
					36,
					90,
					73,
					-14,
					102,
					86,
					20,
					125,
					118,
					-116,
					-70,
					-40,
					64,
					-87,
					-97,
					-113,
					-60,
					-114,
					-15,
					59,
					-128,
					-101,
					26,
					107);
				printf("HWSTATUS \n");
			}

			void fill(const com::company::demo::TIMESYNC& ptimesync) {

				ptimesync.tc1(8577141000324405955L,
					-3874422553175560206L,
					-5002961315715632918L,
					3647537603986018402L,
					299741746734216711L,
					3390263721179989870L,
					-2225760384181492324L,
					2730656714854676341L,
					-1597268452313220251L,
					-1678475565429749165L,
					-2357252737463365790L,
					-2501729242727448917L,
					9104693175696879639L,
					7308409624822483309L,
					-7006017586474157709L,
					5588830572501642097L,
					-54743922154610296L,
					2528550580348306522L,
					47784239955284177L,
					-4996750409366094903L,
					8251704523741800846L,
					-8463182683369011579L,
					4099869327619036217L,
					3671275298240567503L,
					-867223935295287526L,
					-371565289609164216L,
					181648124454030864L,
					3483131717310901532L,
					734136643616391913L,
					2902510652603686043L,
					-2019573687044727585L,
					-5386693534904455772L,
					-4488275876518106703L,
					-378735650642401815L,
					7736527628452023020L,
					4926339999292344063L,
					320248656685342069L,
					8375882969197341026L,
					-7256720916208083704L,
					2179437056327476857L,
					5849876441734798297L,
					5221672435064481122L,
					-3592760496688530907L,
					2258158102049251245L,
					-2334855409891065035L,
					7525073344165343336L,
					7282190380392705931L,
					-8246615762896185243L,
					4925412164595457893L,
					4685386835458988022L,
					4709835939776187632L,
					-5482217969306345854L,
					-7513672724563455168L,
					-2413388534706623541L,
					8354622825753664690L,
					1110370800697072348L,
					-2168792513759739278L,
					-195691205737872693L,
					-1021783201442882109L,
					8707852949084238910L,
					981679502569954563L,
					-5371593256631236606L,
					6005066747474065006L,
					-3654698280753643897L,
					-3586481880428461692L,
					1726633241684617016L,
					-2051196033439797104L,
					-1340215366049261256L,
					775762897845742883L,
					7863715332154556772L,
					-8069129159706290714L,
					3417702886875280289L,
					6290414968214239761L,
					-6328844846626059201L,
					-6239302106857018734L,
					-4605575224468673523L,
					-6782890628661159943L,
					5192792305931527303L,
					-4042908543069623683L,
					8703300080112575019L,
					7195936216829749857L,
					-9080668934623314588L,
					7404829058321530127L,
					-30372342557567440L,
					7244070478964294884L,
					-4618303272962083366L,
					-1421231724103888687L,
					3564306946016775117L,
					-7263976539792041235L,
					-5321140770233857808L,
					-6288151658976561078L,
					3503954664351640981L,
					7671101311121979501L,
					-1060763525434127503L,
					-4197475416809072046L,
					-164124250924822073L,
					1686528450436197977L,
					-3289848494205065483L,
					-3827679699823726884L,
					-1602891652150854037L,
					8037938611890818093L,
					-137477118331879407L,
					-3490434969375114031L,
					-230871734880906241L,
					-7061837616485893859L,
					4821234075235844100L,
					6761573042410916866L,
					-8205165519273338065L,
					5673772882897743779L,
					785472802365485818L,
					-8443609669447513849L,
					9120116825395614729L,
					6032725194859515698L,
					-7835271349722616256L,
					-1059805867314449086L,
					-2115537585914699424L,
					4723379339516200443L,
					5252778929764218586L,
					-5469440377207647479L,
					7678093067353965848L,
					1187726912198729988L,
					5805542574209243452L,
					-4764005392381974672L,
					7607782324442743872L,
					6932940749715783377L,
					-3460629456611141958L,
					-374206110577204722L,
					597451674312665406L,
					7879023883977127161L,
					3758716266220432116L,
					2075778065010236951L,
					4909694557988984093L,
					-8707759424284763214L,
					-3680875733618887243L,
					3186980284214969370L,
					-8489922122668380743L,
					-8233136257195672109L,
					1738730404531516641L,
					5089803934406532599L,
					5918959221988743750L,
					-5101467358118459891L,
					-5098819075386392L,
					1809859528807201253L,
					-8054652628400148162L,
					-31979852158834785L,
					673484531485556302L,
					5951761473930131097L,
					-346674392909739820L,
					6032903559405082717L,
					4257408865753021818L,
					-3637160658058902864L,
					4207960352946043759L,
					6849029623231024605L,
					4177451886248742123L,
					5839135175978819451L,
					-2146340942686319698L,
					-7960344572939826763L,
					5025220037906599817L,
					8404388907607445145L,
					-5072395283692010112L,
					-9005493023596484489L,
					116576428918198745L,
					-4836225867206473792L,
					4839330344170901817L,
					131015328461087507L,
					7609454279359479795L,
					-9212503145480699917L,
					-6903426081645297396L,
					-5332134872825024731L,
					-9145341051639639931L,
					-7131424672911692980L,
					-5766713430351966279L,
					1998850860179019479L,
					-3805370486156025393L,
					-5235192275587629921L,
					5047315901190939589L,
					332517110818401208L,
					-3973992793716450888L,
					6992004929960203404L,
					4273680860851716393L,
					8966165094797805895L,
					-7171411861107982507L,
					5090002967305096928L,
					7836913584408407045L,
					7409037477869373767L,
					7897842426092118843L,
					519877941367520353L,
					-4571840578597007067L,
					-7681123840955262214L,
					9161775932195772216L,
					-2829629024624053903L,
					8042657722314208796L,
					-7050170201512384228L,
					6535693907608330830L,
					1324165721607019731L,
					6602227694374014590L,
					-6806057678871267184L,
					7431426283076021818L,
					5484828466058617309L,
					5003449255257430034L,
					5231050137088622684L,
					-7456381030086354940L,
					-1042231857619033841L,
					4986458400683648162L,
					-4471206014771060431L,
					-4715523151286152731L,
					-2079736694575015326L,
					-141580633041183111L,
					-7261266446992188890L,
					3092650676117459704L,
					468532337766438447L,
					3201770417196201687L,
					1012280198962523224L,
					-733504265873364972L,
					-4311060522876046703L,
					4734547753098474801L,
					-1081464022430837838L,
					1291687520269792196L,
					2284697595001497251L,
					7456256062388146401L,
					4001688598021903457L,
					2377493487909664731L,
					7968020130276616344L,
					8616856526144785277L,
					-6145759422180875093L,
					-1974967781040340173L,
					1733759664100552780L,
					-6132425591272139004L,
					5285703345360549196L,
					7667773447679686805L,
					3016065651710094366L,
					6531168355735770263L,
					3157125414709455840L,
					5465174761676022812L,
					-197850923556067382L,
					-2778087521413152087L,
					5142740421238289456L,
					-6233804149537728179L,
					-6223274209023550864L,
					-5088183295382735250L,
					-4308920451399827371L,
					-3244697752006614967L,
					-743821021624223646L,
					-6750005902768095502L,
					-7909714003243467667L,
					-4433452867162714446L,
					-9029412163298246453L,
					6347689991312594433L,
					2486425811431706064L,
					3116757503336958297L,
					-46555079199469794L,
					2529581024655691626L,
					-159199526509151147L,
					-7581764929405206452L,
					8415065852932569093L);
				ptimesync.ts1(5426235549495724783L,
					-2356031014580483182L,
					-2752927867546704275L,
					3766619015929236622L,
					-747329026165776691L,
					6386579090444584868L,
					6288068118138603570L,
					4567105225538464837L,
					-2209351203246921777L,
					-8389285460140887719L,
					8010330330033864684L,
					1798679646222210763L,
					2918100733545293973L,
					880018807563596962L,
					368067161646266041L,
					-6384497872726214629L,
					3946784978123017596L,
					1439197257047837230L,
					-6446367478617186911L,
					117327404314662530L,
					1982620795290463929L,
					1134907339312453398L,
					-1275565477483171451L,
					-1514151085395986325L,
					-2220325779493314849L,
					1417960819405733391L,
					-5498391370851802567L,
					6523679095518105745L,
					-8740938373276245412L,
					-216639467302480381L,
					-3640259529355424003L,
					3880038986009290020L,
					-8953628325061789202L,
					-6793019382403323008L,
					6816772356444705281L,
					-8605410915870516444L,
					-5754216101735163343L,
					6286131075363979535L,
					8657669268086631590L,
					-7584230939094244116L,
					-526524271921001521L,
					-3997583990889056432L,
					-8168070581535363695L,
					-1053432140098090448L,
					6548834375935485759L,
					4509523945471541260L,
					5944560868825379247L,
					-1081021930400288823L,
					6332524740322785663L,
					5519080310467219699L,
					-5912185710893699756L,
					-2683032858374286618L,
					4321954053833952830L,
					-2133284724085629730L,
					-8350538023760857505L,
					2273530161278879131L,
					-2233896113599865509L,
					-8213383385886031526L,
					1372261166277279577L,
					2750210063899789648L,
					-5893222160110766816L,
					-8433461314090273961L,
					-5523362164455533288L,
					6803275298362507257L,
					-8797681125035116988L,
					-380429964899487264L,
					-2810047655820950425L,
					3058088440567997065L,
					-8007908980808378297L,
					1187298857923639148L,
					5533782493134747077L,
					7533157724654607618L,
					-2910500594169637342L,
					3467416907394207178L,
					935507879342790587L,
					-5148933917363200623L,
					1230108357557070420L,
					-8264579629335955001L,
					9067782201626669697L,
					6593102406805727773L,
					1881096645895884795L,
					4164111148182605042L,
					8043119640255534147L,
					-4630288049784132344L,
					7485795579740760869L,
					-7372343754946455414L,
					-5190471986651801280L,
					-3922459162504695198L,
					-308266946056132195L,
					5311297008234181663L,
					-8992980050404117823L,
					-2035058551662503527L,
					-6287049683498345000L,
					3300886619111365694L,
					-7158043028993875299L,
					-6363942130044388019L,
					1289269808084884489L,
					1134374767559098220L,
					-1741526644285754535L,
					-8108785131212858405L,
					-4841326068472300522L,
					-1083811878089161143L,
					6675763578909447163L,
					-5638969524334238483L,
					3374016061835737946L,
					3638483210885334654L,
					1655817902072788895L,
					3395625909378310736L,
					8604661678417307281L,
					7312099097067832555L,
					2115507079729915377L,
					-1081694307743387921L,
					7389171943855435338L,
					5667266033765674645L,
					1826143895120710575L,
					5938213969793987447L,
					-594885327272368688L,
					-4475907217208910056L,
					1287722783259026516L,
					2241103953813277673L,
					-5360928260274504596L,
					9196356387888493486L,
					5330154865135486289L,
					-481212660033118613L,
					-8968078963314147053L,
					-5494776217195176853L,
					-1860612508135072140L,
					-1249730226900028891L,
					4226491332293990556L,
					-5548693400587515593L,
					8226986670642867683L,
					-5826983025999306011L,
					-4060130217881532862L,
					-1829650864357302916L,
					6556782164462510164L,
					-2586726856823834253L,
					-4952916237128214297L,
					-2727734881167593614L,
					-5977593249176543039L,
					-2307794390085334554L,
					-5972583645179763968L,
					-4382844619440574402L,
					8485261842063395218L,
					876280208717042780L,
					-6005201961036573523L,
					-7362473007701369726L,
					3244925548289978194L,
					-233713350453697718L,
					-8066224040282302970L,
					-2202394160633232689L,
					-1842455643184385651L,
					3388749192332808841L,
					-8274354810534410423L,
					-3986573846809532506L,
					-5907727000145687127L,
					-329559440067966178L,
					1690494219709646258L,
					7885843042815379238L,
					-185906244329059600L,
					-4418941713632982522L,
					5918016731770415284L,
					1807499564792238382L,
					-7076327153955418714L,
					-3226849668156404554L,
					-2434431839387553171L,
					2300164851821205325L,
					-1518864959569049202L,
					2822411841933244350L,
					3586959055025888774L,
					3385179323094456137L,
					9128461663312361117L,
					-169651868372001288L,
					-3721311690523071645L,
					-8463707854203042911L,
					-1762343405764860682L,
					-3628865201153572525L,
					202340061533182286L,
					9175974995048011072L,
					-7312295200331194309L,
					616097355197168951L,
					-6115561946446602127L,
					-4937930740876197585L,
					4556879196776167218L,
					6911288624745870141L,
					1994171031645608262L,
					2490631382325238892L,
					2594254411252649091L,
					5048954592193052682L,
					-1848247515085558674L,
					-3481154835513242676L,
					-3724067552366479234L,
					-2055451429871311419L,
					-4104791240861577942L,
					6759483796970781243L,
					7763638809716738514L,
					6731284810492901645L,
					-6996178353369979185L,
					4632881517632486362L,
					2604660403800287457L,
					2651810137074814088L,
					2736754214781415652L,
					4992558607937798631L,
					-6411195311520495018L,
					-5484467418751118461L,
					233619121314477993L,
					-4302932425204229107L,
					1165194583799592913L,
					-8154403389523409639L,
					4576356017058890555L,
					7980043576220254634L,
					3066898541348810782L,
					7087201722774824059L,
					2990987972381051850L,
					-7261221116084065780L,
					6317070580297030120L,
					7098524815434477494L,
					2911285172048866786L,
					5969470868738412135L,
					-8071621286944519777L,
					8759335704503982737L,
					4618244672072139896L,
					-6431477115372523113L,
					-1256397061260715203L,
					-3462434293570486569L,
					4448698174233225414L,
					-865061759858682600L,
					8825535827068085824L,
					7469886967477100205L,
					-2629987146917576860L,
					8738211718360779766L,
					-2235974860963327634L,
					-182912078893631871L,
					8296769789372413523L,
					-3945287026437127151L,
					-8955828094836615510L,
					-1729660868795685100L,
					-2144019351030058815L,
					2229673868795934662L,
					249682872579801854L,
					8720176249289524159L,
					316227073135399154L,
					309747993617476911L,
					7505506690329022247L,
					-3726733817186812686L,
					-3664102129058586877L,
					-1549627307801643773L,
					7034519792778989716L,
					-880755256424277737L,
					-7326843267158724434L,
					5975216501420933170L,
					6268465319864422746L,
					-3526976794203065985L,
					-3819441388813891484L,
					-2173751744279567018L,
					-4984087716781946509L);
			}

			void on_TIMESYNC(const com::company::demo::TIMESYNC& ptimesync) {
				assert(ptimesync.tc1() == 8577141000324405955L,
					-3874422553175560206L,
					-5002961315715632918L,
					3647537603986018402L,
					299741746734216711L,
					3390263721179989870L,
					-2225760384181492324L,
					2730656714854676341L,
					-1597268452313220251L,
					-1678475565429749165L,
					-2357252737463365790L,
					-2501729242727448917L,
					9104693175696879639L,
					7308409624822483309L,
					-7006017586474157709L,
					5588830572501642097L,
					-54743922154610296L,
					2528550580348306522L,
					47784239955284177L,
					-4996750409366094903L,
					8251704523741800846L,
					-8463182683369011579L,
					4099869327619036217L,
					3671275298240567503L,
					-867223935295287526L,
					-371565289609164216L,
					181648124454030864L,
					3483131717310901532L,
					734136643616391913L,
					2902510652603686043L,
					-2019573687044727585L,
					-5386693534904455772L,
					-4488275876518106703L,
					-378735650642401815L,
					7736527628452023020L,
					4926339999292344063L,
					320248656685342069L,
					8375882969197341026L,
					-7256720916208083704L,
					2179437056327476857L,
					5849876441734798297L,
					5221672435064481122L,
					-3592760496688530907L,
					2258158102049251245L,
					-2334855409891065035L,
					7525073344165343336L,
					7282190380392705931L,
					-8246615762896185243L,
					4925412164595457893L,
					4685386835458988022L,
					4709835939776187632L,
					-5482217969306345854L,
					-7513672724563455168L,
					-2413388534706623541L,
					8354622825753664690L,
					1110370800697072348L,
					-2168792513759739278L,
					-195691205737872693L,
					-1021783201442882109L,
					8707852949084238910L,
					981679502569954563L,
					-5371593256631236606L,
					6005066747474065006L,
					-3654698280753643897L,
					-3586481880428461692L,
					1726633241684617016L,
					-2051196033439797104L,
					-1340215366049261256L,
					775762897845742883L,
					7863715332154556772L,
					-8069129159706290714L,
					3417702886875280289L,
					6290414968214239761L,
					-6328844846626059201L,
					-6239302106857018734L,
					-4605575224468673523L,
					-6782890628661159943L,
					5192792305931527303L,
					-4042908543069623683L,
					8703300080112575019L,
					7195936216829749857L,
					-9080668934623314588L,
					7404829058321530127L,
					-30372342557567440L,
					7244070478964294884L,
					-4618303272962083366L,
					-1421231724103888687L,
					3564306946016775117L,
					-7263976539792041235L,
					-5321140770233857808L,
					-6288151658976561078L,
					3503954664351640981L,
					7671101311121979501L,
					-1060763525434127503L,
					-4197475416809072046L,
					-164124250924822073L,
					1686528450436197977L,
					-3289848494205065483L,
					-3827679699823726884L,
					-1602891652150854037L,
					8037938611890818093L,
					-137477118331879407L,
					-3490434969375114031L,
					-230871734880906241L,
					-7061837616485893859L,
					4821234075235844100L,
					6761573042410916866L,
					-8205165519273338065L,
					5673772882897743779L,
					785472802365485818L,
					-8443609669447513849L,
					9120116825395614729L,
					6032725194859515698L,
					-7835271349722616256L,
					-1059805867314449086L,
					-2115537585914699424L,
					4723379339516200443L,
					5252778929764218586L,
					-5469440377207647479L,
					7678093067353965848L,
					1187726912198729988L,
					5805542574209243452L,
					-4764005392381974672L,
					7607782324442743872L,
					6932940749715783377L,
					-3460629456611141958L,
					-374206110577204722L,
					597451674312665406L,
					7879023883977127161L,
					3758716266220432116L,
					2075778065010236951L,
					4909694557988984093L,
					-8707759424284763214L,
					-3680875733618887243L,
					3186980284214969370L,
					-8489922122668380743L,
					-8233136257195672109L,
					1738730404531516641L,
					5089803934406532599L,
					5918959221988743750L,
					-5101467358118459891L,
					-5098819075386392L,
					1809859528807201253L,
					-8054652628400148162L,
					-31979852158834785L,
					673484531485556302L,
					5951761473930131097L,
					-346674392909739820L,
					6032903559405082717L,
					4257408865753021818L,
					-3637160658058902864L,
					4207960352946043759L,
					6849029623231024605L,
					4177451886248742123L,
					5839135175978819451L,
					-2146340942686319698L,
					-7960344572939826763L,
					5025220037906599817L,
					8404388907607445145L,
					-5072395283692010112L,
					-9005493023596484489L,
					116576428918198745L,
					-4836225867206473792L,
					4839330344170901817L,
					131015328461087507L,
					7609454279359479795L,
					-9212503145480699917L,
					-6903426081645297396L,
					-5332134872825024731L,
					-9145341051639639931L,
					-7131424672911692980L,
					-5766713430351966279L,
					1998850860179019479L,
					-3805370486156025393L,
					-5235192275587629921L,
					5047315901190939589L,
					332517110818401208L,
					-3973992793716450888L,
					6992004929960203404L,
					4273680860851716393L,
					8966165094797805895L,
					-7171411861107982507L,
					5090002967305096928L,
					7836913584408407045L,
					7409037477869373767L,
					7897842426092118843L,
					519877941367520353L,
					-4571840578597007067L,
					-7681123840955262214L,
					9161775932195772216L,
					-2829629024624053903L,
					8042657722314208796L,
					-7050170201512384228L,
					6535693907608330830L,
					1324165721607019731L,
					6602227694374014590L,
					-6806057678871267184L,
					7431426283076021818L,
					5484828466058617309L,
					5003449255257430034L,
					5231050137088622684L,
					-7456381030086354940L,
					-1042231857619033841L,
					4986458400683648162L,
					-4471206014771060431L,
					-4715523151286152731L,
					-2079736694575015326L,
					-141580633041183111L,
					-7261266446992188890L,
					3092650676117459704L,
					468532337766438447L,
					3201770417196201687L,
					1012280198962523224L,
					-733504265873364972L,
					-4311060522876046703L,
					4734547753098474801L,
					-1081464022430837838L,
					1291687520269792196L,
					2284697595001497251L,
					7456256062388146401L,
					4001688598021903457L,
					2377493487909664731L,
					7968020130276616344L,
					8616856526144785277L,
					-6145759422180875093L,
					-1974967781040340173L,
					1733759664100552780L,
					-6132425591272139004L,
					5285703345360549196L,
					7667773447679686805L,
					3016065651710094366L,
					6531168355735770263L,
					3157125414709455840L,
					5465174761676022812L,
					-197850923556067382L,
					-2778087521413152087L,
					5142740421238289456L,
					-6233804149537728179L,
					-6223274209023550864L,
					-5088183295382735250L,
					-4308920451399827371L,
					-3244697752006614967L,
					-743821021624223646L,
					-6750005902768095502L,
					-7909714003243467667L,
					-4433452867162714446L,
					-9029412163298246453L,
					6347689991312594433L,
					2486425811431706064L,
					3116757503336958297L,
					-46555079199469794L,
					2529581024655691626L,
					-159199526509151147L,
					-7581764929405206452L,
					8415065852932569093L);
				assert(ptimesync.ts1() == 5426235549495724783L,
					-2356031014580483182L,
					-2752927867546704275L,
					3766619015929236622L,
					-747329026165776691L,
					6386579090444584868L,
					6288068118138603570L,
					4567105225538464837L,
					-2209351203246921777L,
					-8389285460140887719L,
					8010330330033864684L,
					1798679646222210763L,
					2918100733545293973L,
					880018807563596962L,
					368067161646266041L,
					-6384497872726214629L,
					3946784978123017596L,
					1439197257047837230L,
					-6446367478617186911L,
					117327404314662530L,
					1982620795290463929L,
					1134907339312453398L,
					-1275565477483171451L,
					-1514151085395986325L,
					-2220325779493314849L,
					1417960819405733391L,
					-5498391370851802567L,
					6523679095518105745L,
					-8740938373276245412L,
					-216639467302480381L,
					-3640259529355424003L,
					3880038986009290020L,
					-8953628325061789202L,
					-6793019382403323008L,
					6816772356444705281L,
					-8605410915870516444L,
					-5754216101735163343L,
					6286131075363979535L,
					8657669268086631590L,
					-7584230939094244116L,
					-526524271921001521L,
					-3997583990889056432L,
					-8168070581535363695L,
					-1053432140098090448L,
					6548834375935485759L,
					4509523945471541260L,
					5944560868825379247L,
					-1081021930400288823L,
					6332524740322785663L,
					5519080310467219699L,
					-5912185710893699756L,
					-2683032858374286618L,
					4321954053833952830L,
					-2133284724085629730L,
					-8350538023760857505L,
					2273530161278879131L,
					-2233896113599865509L,
					-8213383385886031526L,
					1372261166277279577L,
					2750210063899789648L,
					-5893222160110766816L,
					-8433461314090273961L,
					-5523362164455533288L,
					6803275298362507257L,
					-8797681125035116988L,
					-380429964899487264L,
					-2810047655820950425L,
					3058088440567997065L,
					-8007908980808378297L,
					1187298857923639148L,
					5533782493134747077L,
					7533157724654607618L,
					-2910500594169637342L,
					3467416907394207178L,
					935507879342790587L,
					-5148933917363200623L,
					1230108357557070420L,
					-8264579629335955001L,
					9067782201626669697L,
					6593102406805727773L,
					1881096645895884795L,
					4164111148182605042L,
					8043119640255534147L,
					-4630288049784132344L,
					7485795579740760869L,
					-7372343754946455414L,
					-5190471986651801280L,
					-3922459162504695198L,
					-308266946056132195L,
					5311297008234181663L,
					-8992980050404117823L,
					-2035058551662503527L,
					-6287049683498345000L,
					3300886619111365694L,
					-7158043028993875299L,
					-6363942130044388019L,
					1289269808084884489L,
					1134374767559098220L,
					-1741526644285754535L,
					-8108785131212858405L,
					-4841326068472300522L,
					-1083811878089161143L,
					6675763578909447163L,
					-5638969524334238483L,
					3374016061835737946L,
					3638483210885334654L,
					1655817902072788895L,
					3395625909378310736L,
					8604661678417307281L,
					7312099097067832555L,
					2115507079729915377L,
					-1081694307743387921L,
					7389171943855435338L,
					5667266033765674645L,
					1826143895120710575L,
					5938213969793987447L,
					-594885327272368688L,
					-4475907217208910056L,
					1287722783259026516L,
					2241103953813277673L,
					-5360928260274504596L,
					9196356387888493486L,
					5330154865135486289L,
					-481212660033118613L,
					-8968078963314147053L,
					-5494776217195176853L,
					-1860612508135072140L,
					-1249730226900028891L,
					4226491332293990556L,
					-5548693400587515593L,
					8226986670642867683L,
					-5826983025999306011L,
					-4060130217881532862L,
					-1829650864357302916L,
					6556782164462510164L,
					-2586726856823834253L,
					-4952916237128214297L,
					-2727734881167593614L,
					-5977593249176543039L,
					-2307794390085334554L,
					-5972583645179763968L,
					-4382844619440574402L,
					8485261842063395218L,
					876280208717042780L,
					-6005201961036573523L,
					-7362473007701369726L,
					3244925548289978194L,
					-233713350453697718L,
					-8066224040282302970L,
					-2202394160633232689L,
					-1842455643184385651L,
					3388749192332808841L,
					-8274354810534410423L,
					-3986573846809532506L,
					-5907727000145687127L,
					-329559440067966178L,
					1690494219709646258L,
					7885843042815379238L,
					-185906244329059600L,
					-4418941713632982522L,
					5918016731770415284L,
					1807499564792238382L,
					-7076327153955418714L,
					-3226849668156404554L,
					-2434431839387553171L,
					2300164851821205325L,
					-1518864959569049202L,
					2822411841933244350L,
					3586959055025888774L,
					3385179323094456137L,
					9128461663312361117L,
					-169651868372001288L,
					-3721311690523071645L,
					-8463707854203042911L,
					-1762343405764860682L,
					-3628865201153572525L,
					202340061533182286L,
					9175974995048011072L,
					-7312295200331194309L,
					616097355197168951L,
					-6115561946446602127L,
					-4937930740876197585L,
					4556879196776167218L,
					6911288624745870141L,
					1994171031645608262L,
					2490631382325238892L,
					2594254411252649091L,
					5048954592193052682L,
					-1848247515085558674L,
					-3481154835513242676L,
					-3724067552366479234L,
					-2055451429871311419L,
					-4104791240861577942L,
					6759483796970781243L,
					7763638809716738514L,
					6731284810492901645L,
					-6996178353369979185L,
					4632881517632486362L,
					2604660403800287457L,
					2651810137074814088L,
					2736754214781415652L,
					4992558607937798631L,
					-6411195311520495018L,
					-5484467418751118461L,
					233619121314477993L,
					-4302932425204229107L,
					1165194583799592913L,
					-8154403389523409639L,
					4576356017058890555L,
					7980043576220254634L,
					3066898541348810782L,
					7087201722774824059L,
					2990987972381051850L,
					-7261221116084065780L,
					6317070580297030120L,
					7098524815434477494L,
					2911285172048866786L,
					5969470868738412135L,
					-8071621286944519777L,
					8759335704503982737L,
					4618244672072139896L,
					-6431477115372523113L,
					-1256397061260715203L,
					-3462434293570486569L,
					4448698174233225414L,
					-865061759858682600L,
					8825535827068085824L,
					7469886967477100205L,
					-2629987146917576860L,
					8738211718360779766L,
					-2235974860963327634L,
					-182912078893631871L,
					8296769789372413523L,
					-3945287026437127151L,
					-8955828094836615510L,
					-1729660868795685100L,
					-2144019351030058815L,
					2229673868795934662L,
					249682872579801854L,
					8720176249289524159L,
					316227073135399154L,
					309747993617476911L,
					7505506690329022247L,
					-3726733817186812686L,
					-3664102129058586877L,
					-1549627307801643773L,
					7034519792778989716L,
					-880755256424277737L,
					-7326843267158724434L,
					5975216501420933170L,
					6268465319864422746L,
					-3526976794203065985L,
					-3819441388813891484L,
					-2173751744279567018L,
					-4984087716781946509L);
				printf("TIMESYNC \n");
			}

			void fill(const com::company::demo::PARAM_EXT_REQUEST_LIST& pparam_ext_request_list) {

				pparam_ext_request_list.target_system(-23,
					-22,
					-27,
					-107,
					-105,
					-52,
					33,
					33,
					-76,
					59,
					-76,
					-109,
					-22,
					-23,
					81,
					83,
					29,
					-16,
					42,
					10,
					-23,
					-50,
					38,
					110,
					-66,
					-41,
					-66,
					-118,
					99,
					92,
					47,
					112,
					13,
					-104,
					-7,
					-20,
					34,
					118,
					99,
					-32,
					55,
					88,
					-37,
					22,
					31,
					95,
					-118,
					24,
					73,
					35,
					-19,
					0,
					44,
					-104,
					59,
					39,
					-96,
					-63,
					-43,
					102,
					64,
					-57,
					-19,
					-20,
					-28,
					121,
					-52,
					12,
					-46,
					112,
					-22,
					34,
					-70,
					39,
					89,
					-5,
					-34,
					91,
					4,
					-54,
					-12,
					47,
					-59,
					9,
					-14,
					84,
					-30,
					-63,
					-106,
					61,
					-119,
					-110,
					92,
					16,
					-30,
					-73,
					50,
					-112,
					-15,
					55,
					112,
					-29,
					-43,
					121,
					-89,
					-15,
					123,
					-51,
					88,
					3,
					-127,
					-121,
					44,
					-79,
					71,
					105,
					-91,
					-51,
					109,
					-13,
					33,
					55,
					-86,
					-69,
					-123,
					-98,
					-117,
					80,
					-32,
					1,
					-18,
					-47,
					11,
					-19,
					-115,
					107,
					36,
					-104,
					49,
					65,
					15,
					-41,
					-59,
					-24,
					20,
					-128,
					115,
					72,
					-6,
					9,
					-56,
					119,
					21,
					-116,
					28,
					13,
					68,
					-19,
					105,
					95,
					-75,
					42,
					7,
					-30,
					-68,
					14,
					27,
					-91,
					105,
					-102,
					-128,
					15,
					89,
					-39,
					-104,
					-33,
					102,
					9,
					26,
					-102,
					82,
					-20,
					81,
					-45,
					-100,
					-35,
					79,
					28,
					107,
					-24,
					107,
					-70,
					-120,
					-127,
					-70,
					66,
					67,
					116,
					116,
					66,
					-124,
					80,
					-36,
					125,
					-109,
					22,
					31,
					95,
					-48,
					-116,
					-125,
					-111,
					-42,
					-81,
					10,
					-123,
					-31,
					-17,
					-86,
					-99,
					5,
					-5,
					59,
					-20,
					63,
					49,
					24,
					35,
					-55,
					-76,
					-17,
					30,
					26,
					115,
					25,
					-15,
					-125,
					96,
					118,
					-45,
					41,
					-118,
					-76,
					-82,
					-124,
					125,
					-79,
					63,
					-51,
					27,
					46,
					-58,
					-46,
					-87,
					-9);
				pparam_ext_request_list.target_component(-9,
					-95,
					-117,
					107,
					-7,
					-85,
					43,
					26,
					15,
					16,
					-26,
					-124,
					-72,
					127,
					14,
					-92,
					-91,
					-41,
					-63,
					-20,
					21,
					107,
					-86,
					83,
					24,
					85,
					-23,
					86,
					105,
					108,
					-48,
					-88,
					-34,
					-19,
					-50,
					111,
					19,
					107,
					106,
					-57,
					-44,
					-20,
					48,
					121,
					-85,
					55,
					-20,
					-51,
					-112,
					-27,
					93,
					34,
					105,
					25,
					108,
					125,
					89,
					-119,
					88,
					-98,
					92,
					-66,
					-9,
					12,
					-70,
					63,
					-35,
					-111,
					-27,
					-106,
					-110,
					114,
					-49,
					-118,
					43,
					40,
					-104,
					-6,
					-39,
					-102,
					33,
					-38,
					-32,
					-79,
					-50,
					-71,
					0,
					109,
					-12,
					-54,
					-100,
					-91,
					-95,
					-111,
					-112,
					81,
					65,
					48,
					-32,
					-114,
					61,
					-111,
					117,
					-83,
					-108,
					-39,
					74,
					-116,
					79,
					-27,
					-84,
					28,
					24,
					7,
					26,
					-77,
					-126,
					79,
					59,
					90,
					74,
					-79,
					17,
					-85,
					108,
					-31,
					85,
					13,
					48,
					41,
					-123,
					-71,
					43,
					-3,
					66,
					95,
					2,
					108,
					121,
					10,
					-43,
					-101,
					-65,
					67,
					92,
					19,
					-10,
					26,
					-124,
					-10,
					47,
					110,
					70,
					120,
					45,
					103,
					-68,
					101,
					60,
					-98,
					-100,
					67,
					-123,
					-69,
					34,
					106,
					45,
					76,
					-98,
					-11,
					72,
					58,
					-29,
					-51,
					85,
					33,
					-57,
					-20,
					-119,
					-53,
					61,
					-35,
					-106,
					99,
					-13,
					93,
					-89,
					-74,
					4,
					-81,
					87,
					-106,
					-22,
					51,
					65,
					-123,
					121,
					101,
					99,
					-66,
					-56,
					19,
					35,
					17,
					74,
					48,
					-123,
					-63,
					-104,
					51,
					54,
					63,
					116,
					-27,
					-103,
					9,
					95,
					8,
					-114,
					74,
					-46,
					-79,
					106,
					-116,
					-128,
					92,
					19,
					-33,
					-79,
					-118,
					-26,
					-70,
					-95,
					122,
					50,
					-24,
					-69,
					104,
					-74,
					14,
					-99,
					-103,
					-94,
					-70,
					-94,
					-107,
					-114,
					23,
					31,
					-107,
					-72,
					73,
					-4,
					-15,
					-11);
			}

			void on_PARAM_EXT_REQUEST_LIST(const com::company::demo::PARAM_EXT_REQUEST_LIST& pparam_ext_request_list) {
				assert(pparam_ext_request_list.target_system() == -23,
					-22,
					-27,
					-107,
					-105,
					-52,
					33,
					33,
					-76,
					59,
					-76,
					-109,
					-22,
					-23,
					81,
					83,
					29,
					-16,
					42,
					10,
					-23,
					-50,
					38,
					110,
					-66,
					-41,
					-66,
					-118,
					99,
					92,
					47,
					112,
					13,
					-104,
					-7,
					-20,
					34,
					118,
					99,
					-32,
					55,
					88,
					-37,
					22,
					31,
					95,
					-118,
					24,
					73,
					35,
					-19,
					0,
					44,
					-104,
					59,
					39,
					-96,
					-63,
					-43,
					102,
					64,
					-57,
					-19,
					-20,
					-28,
					121,
					-52,
					12,
					-46,
					112,
					-22,
					34,
					-70,
					39,
					89,
					-5,
					-34,
					91,
					4,
					-54,
					-12,
					47,
					-59,
					9,
					-14,
					84,
					-30,
					-63,
					-106,
					61,
					-119,
					-110,
					92,
					16,
					-30,
					-73,
					50,
					-112,
					-15,
					55,
					112,
					-29,
					-43,
					121,
					-89,
					-15,
					123,
					-51,
					88,
					3,
					-127,
					-121,
					44,
					-79,
					71,
					105,
					-91,
					-51,
					109,
					-13,
					33,
					55,
					-86,
					-69,
					-123,
					-98,
					-117,
					80,
					-32,
					1,
					-18,
					-47,
					11,
					-19,
					-115,
					107,
					36,
					-104,
					49,
					65,
					15,
					-41,
					-59,
					-24,
					20,
					-128,
					115,
					72,
					-6,
					9,
					-56,
					119,
					21,
					-116,
					28,
					13,
					68,
					-19,
					105,
					95,
					-75,
					42,
					7,
					-30,
					-68,
					14,
					27,
					-91,
					105,
					-102,
					-128,
					15,
					89,
					-39,
					-104,
					-33,
					102,
					9,
					26,
					-102,
					82,
					-20,
					81,
					-45,
					-100,
					-35,
					79,
					28,
					107,
					-24,
					107,
					-70,
					-120,
					-127,
					-70,
					66,
					67,
					116,
					116,
					66,
					-124,
					80,
					-36,
					125,
					-109,
					22,
					31,
					95,
					-48,
					-116,
					-125,
					-111,
					-42,
					-81,
					10,
					-123,
					-31,
					-17,
					-86,
					-99,
					5,
					-5,
					59,
					-20,
					63,
					49,
					24,
					35,
					-55,
					-76,
					-17,
					30,
					26,
					115,
					25,
					-15,
					-125,
					96,
					118,
					-45,
					41,
					-118,
					-76,
					-82,
					-124,
					125,
					-79,
					63,
					-51,
					27,
					46,
					-58,
					-46,
					-87,
					-9);
				assert(pparam_ext_request_list.target_component() == -9,
					-95,
					-117,
					107,
					-7,
					-85,
					43,
					26,
					15,
					16,
					-26,
					-124,
					-72,
					127,
					14,
					-92,
					-91,
					-41,
					-63,
					-20,
					21,
					107,
					-86,
					83,
					24,
					85,
					-23,
					86,
					105,
					108,
					-48,
					-88,
					-34,
					-19,
					-50,
					111,
					19,
					107,
					106,
					-57,
					-44,
					-20,
					48,
					121,
					-85,
					55,
					-20,
					-51,
					-112,
					-27,
					93,
					34,
					105,
					25,
					108,
					125,
					89,
					-119,
					88,
					-98,
					92,
					-66,
					-9,
					12,
					-70,
					63,
					-35,
					-111,
					-27,
					-106,
					-110,
					114,
					-49,
					-118,
					43,
					40,
					-104,
					-6,
					-39,
					-102,
					33,
					-38,
					-32,
					-79,
					-50,
					-71,
					0,
					109,
					-12,
					-54,
					-100,
					-91,
					-95,
					-111,
					-112,
					81,
					65,
					48,
					-32,
					-114,
					61,
					-111,
					117,
					-83,
					-108,
					-39,
					74,
					-116,
					79,
					-27,
					-84,
					28,
					24,
					7,
					26,
					-77,
					-126,
					79,
					59,
					90,
					74,
					-79,
					17,
					-85,
					108,
					-31,
					85,
					13,
					48,
					41,
					-123,
					-71,
					43,
					-3,
					66,
					95,
					2,
					108,
					121,
					10,
					-43,
					-101,
					-65,
					67,
					92,
					19,
					-10,
					26,
					-124,
					-10,
					47,
					110,
					70,
					120,
					45,
					103,
					-68,
					101,
					60,
					-98,
					-100,
					67,
					-123,
					-69,
					34,
					106,
					45,
					76,
					-98,
					-11,
					72,
					58,
					-29,
					-51,
					85,
					33,
					-57,
					-20,
					-119,
					-53,
					61,
					-35,
					-106,
					99,
					-13,
					93,
					-89,
					-74,
					4,
					-81,
					87,
					-106,
					-22,
					51,
					65,
					-123,
					121,
					101,
					99,
					-66,
					-56,
					19,
					35,
					17,
					74,
					48,
					-123,
					-63,
					-104,
					51,
					54,
					63,
					116,
					-27,
					-103,
					9,
					95,
					8,
					-114,
					74,
					-46,
					-79,
					106,
					-116,
					-128,
					92,
					19,
					-33,
					-79,
					-118,
					-26,
					-70,
					-95,
					122,
					50,
					-24,
					-69,
					104,
					-74,
					14,
					-99,
					-103,
					-94,
					-70,
					-94,
					-107,
					-114,
					23,
					31,
					-107,
					-72,
					73,
					-4,
					-15,
					-11);
				printf("PARAM_EXT_REQUEST_LIST \n");
			}

			void fill(const org::unirail::test::GLOBAL_POSITION_INT_COV& pglobal_position_int_cov) {

				pglobal_position_int_cov.time_usec(-3622103860883612699L,
					-8808173187519844688L,
					-8309136486237720563L,
					7246974868663220808L,
					-962151864937682258L,
					-7166971782125889782L,
					-1055550149372769834L,
					-5707535132180788724L,
					-4688315353578101868L,
					2779316481419870271L,
					8512141799940458582L,
					549154705308033914L,
					-2511214384287493561L,
					-6204160082145575716L,
					-8977046137286721372L,
					422578093976399767L,
					-4989961798847244751L,
					-5699073967080260542L,
					-6522418415180480543L,
					-7582701146777328517L,
					-2046174906547187635L,
					-1278881861629298695L,
					3327246548329535739L,
					-6595996154156927616L,
					-6860359418204346972L,
					-8243594090791251048L,
					6850995162027067163L,
					1117876259132551967L,
					4146604625195188764L,
					7512375967513761996L,
					5400556276261085166L,
					-9168165228080639958L,
					892836304188147731L,
					3294904830342191314L,
					-4027072557812896436L,
					-3254116365607113974L,
					770134999194154814L,
					-2220197999797445137L,
					3155980860344633635L,
					-4219512771333693918L,
					2837433144523689954L,
					1355196618113432125L,
					-4548699477914761095L,
					-3175701068107660905L,
					670699935510592953L,
					-8010393514118252661L,
					-6357335620131370333L,
					-5070449007685125096L,
					1459507987226865241L,
					-5070255632412422019L,
					1033691590245434861L,
					4232533555398935338L,
					-6923634963246819255L,
					1285184824780257368L,
					8179574145372333282L,
					1525880053964137820L,
					-2475122068224756023L,
					-4170454982909426951L,
					-2944577389012274971L,
					4613895015928707425L,
					-7491531320906322013L,
					-8347167402256585448L,
					-4594745133941636235L,
					6983320517635332029L,
					-7757536371119463736L,
					2997028486396263729L,
					849254670949725309L,
					3664538693284410816L,
					8148005391171034565L,
					-5863457622973673996L,
					8700679384345621160L,
					1676781099962855708L,
					3904020348216385958L,
					-1070284614792786795L,
					-1747978289186116631L,
					4845370364374004922L,
					-8291306710906651925L,
					-5203541567240782600L,
					2520669500932185562L,
					5725469712722182901L,
					-2944668479344577882L,
					3542887267654008030L,
					2883347397962296563L,
					-5329542616432527242L,
					7498651864814558470L,
					-5245194505010235425L,
					8450395812390866489L,
					-5475461983856838123L,
					2533515846341914955L,
					2011382035389422110L,
					7696576199757218351L,
					2360178568648839953L,
					2056372680631911343L,
					-2246530966981517534L,
					-544140051111127278L,
					-3406294553839561119L,
					7692569858549404732L,
					5118764508070714767L,
					7895039166877551445L,
					-3391557068710331298L,
					-195524643550855603L,
					-5741496051119034067L,
					4139759815244393945L,
					7851251325470182899L,
					-7488209192418332732L,
					-8176724580814454017L,
					-4965115123894837883L,
					8327822068354961291L,
					-2358072193399353772L,
					-7521249245627483858L,
					5790785163132110693L,
					-8738515574624789779L,
					-6545156629839594218L,
					2793142630755344162L,
					-8516152648077671981L,
					3656949336084600823L,
					-607250666246718571L,
					1323481861538443424L,
					-6607003040895215781L,
					1660885998209475252L,
					-6603813107785023310L,
					8355345833036986202L,
					-2483504978628452391L,
					-5814517788014473377L,
					475012429470366859L,
					-134510707935980795L,
					-4723417685080964278L,
					-1481138624864140096L,
					7512641700191694324L,
					-1204813287666343647L,
					2671737406684970750L,
					-8772464704898732069L,
					-4151799371936563485L,
					-4569499379404432986L,
					-9189778233435518990L,
					350308237065076879L,
					483956146288392950L,
					-6786078883135259922L,
					7957493670868438090L,
					9088798638997216245L,
					5096213777864491864L,
					8089539055850252064L,
					1018871061222993189L,
					3214532030857067720L,
					-1140041643177147704L,
					-3927090214389482055L,
					3658563346912222902L,
					7855193014232866546L,
					-7953012422750280203L,
					2792198088390052216L,
					-5934278870088374355L,
					-7995189586018085916L,
					5922164683527725011L,
					7172355744113624324L,
					1020896703001918878L,
					7794086280047795675L,
					4825623651001251557L,
					-4237827453421386902L,
					-3723704016490384098L,
					5336748840930816446L,
					-6524747696092505883L,
					-4463530244883311155L,
					-1106356226282521166L,
					-3876282249472349251L,
					-6589108288553960058L,
					-3643759755919577190L,
					6295416890886925349L,
					-8548095490558242521L,
					-6981857587405658685L,
					-3407304682328036257L,
					-6545912690744650908L,
					1944964857945461186L,
					-6015424394831103996L,
					1849826472893234107L,
					-4343527837485171952L,
					276824741438775101L,
					6150577550952043182L,
					-8775810200850034141L,
					3569366765801843586L,
					-2388390250285520126L,
					-6422967364480851165L,
					5065085760011952119L,
					5197844637653829595L,
					-6529173476898900397L,
					1967185771057017544L,
					-8136314520109158170L,
					8442088259732888672L,
					-8592255011485608747L,
					4343916281812148845L,
					-6762302223071512885L,
					-3919200210441693903L,
					8371595842678172539L,
					3470918392939223328L,
					-1543565427889545888L,
					7186045139431633251L,
					5237737832261378586L,
					8866733004970011509L,
					3702511752862506072L,
					5089404363358816562L,
					8511900702808336691L,
					-4744798991597059075L,
					-8521065280106740415L,
					9020140285227817514L,
					2229362688452757469L,
					-3444911095917228274L,
					7008364138946397801L,
					-2723120610209102873L,
					-8943360846330281151L,
					-2713388161760044792L,
					-3000459496866644179L,
					-8331050132095143535L,
					7982401696126409427L,
					265186556071442118L,
					-8208505974178098101L,
					-4155629701168718017L,
					-5730332567205771637L,
					7998536196225743464L,
					5424235454391666037L,
					5824994232277713575L,
					-9102551179301532043L,
					340283989710022074L,
					7087636488067236998L,
					-4526552502734776124L,
					-148577558529677031L,
					6517055289102300480L,
					6505158442227890970L,
					-3854682926033159801L,
					3315119801274326719L,
					-656670108433216792L,
					6493952958637584312L,
					2530532787437396250L,
					-276419276883682103L,
					8959769603882829541L,
					-8088745269962568546L,
					877020380905985443L,
					-2095055572733409008L,
					4939340796254531124L,
					7471403771760791519L,
					-7497559444795625571L,
					-7171968095915886884L,
					5996301028988864502L,
					6999809410541397090L,
					2792136672655800357L,
					-1107365156179595820L,
					-7293298615236897238L,
					7259106114068446591L,
					6823468622343855625L,
					-5267780414008909839L,
					2067832648931645679L,
					-6193345202489501760L,
					492313988822312281L,
					141475313142156335L,
					-179605324231937012L,
					6528492322047977920L,
					-5758474266234784464L);
				pglobal_position_int_cov.lat(1890467551,
					999207708,
					1764256790,
					-1962467382,
					387434487,
					157392054,
					-2011425131,
					1234717271,
					1604476829,
					156130923,
					-1165024778,
					12693535,
					-1113713858,
					-486937652,
					1479922975,
					-2126490842,
					591793046,
					1129984646,
					856174081,
					-1494512941,
					1991829918,
					-1679962838,
					-989804655,
					-795965007,
					835197702,
					-1939999542,
					1723642541,
					-1271145067,
					-345399720,
					-872815093,
					872714407,
					1016033006,
					-1284729206,
					29916141,
					-1525964584,
					-774891627,
					-738770924,
					529074417,
					521167254,
					-5227915,
					1800575680,
					-282807516,
					-1359621859,
					-211069089,
					233696013,
					2009908891,
					-2096592113,
					-756520591,
					1074433634,
					-1160732926,
					-574316755,
					2083982361,
					-1702554257,
					511049385,
					1856645337,
					-1362199880,
					742723868,
					274646191,
					-1432647885,
					-1444372393,
					-1925939471,
					-1066774527,
					-1181743850,
					104746447,
					1561318041,
					-1691616800,
					2052658354,
					-703324705,
					-1068846425,
					-639371810,
					-1047082068,
					-1061669449,
					1944405043,
					337444886,
					-1897749426,
					-97834747,
					-1827733492,
					1884021516,
					1011613174,
					-1776965414,
					1959867992,
					-1516389120,
					-64669547,
					-1841999934,
					832678707,
					2126382269,
					-530914676,
					91010840,
					-1232113506,
					1899624437,
					-586312682,
					-989645481,
					785222044,
					-149412004,
					1089855801,
					-468858908,
					-1702549041,
					551690074,
					-1098330197,
					1760879753,
					-997852967,
					-1287353837,
					158843964,
					168074014,
					754563142,
					-757168865,
					1540716202,
					-2016635670,
					518059879,
					339374181,
					-699271229,
					-1853660531,
					162207803,
					-1184116998,
					-1932251108,
					-886457104,
					1443050920,
					25797703,
					1473189395,
					1908324510,
					-1007921268,
					1288135494,
					624664712,
					-1135062001,
					-1157129197,
					306604060,
					1370159165,
					1830686926,
					1658300874,
					1582129711,
					-1045061676,
					-426161485,
					1381295406,
					-1078186458,
					-2034020531,
					443901664,
					-1966040778,
					2106955488,
					-168146414,
					1936333525,
					-580699939,
					153636842,
					-197195484,
					1913323462,
					-848426123,
					22447823,
					411130669,
					-354473206,
					-2007633477,
					351558445,
					-226744721,
					1081860378,
					1333059187,
					1514561683,
					-825667777,
					-688442568,
					-1791448205,
					-217675359,
					1033675748,
					-671630565,
					-1381717303,
					1218886238,
					1851059884,
					-761913194,
					-93699096,
					703401852,
					678077972,
					-1490541983,
					-868341847,
					-1941279848,
					-2041334451,
					1835657153,
					866637050,
					-1472576495,
					1719439618,
					1851445379,
					1554566411,
					886276862,
					-118582998,
					-1518157539,
					1611374286,
					-1051903416,
					-1078165111,
					-250983705,
					1089841753,
					2136641713,
					201304599,
					-1687494715,
					-372527242,
					-643879972,
					807569445,
					1995167746,
					921769522,
					1202023648,
					-2065239706,
					-1334242764,
					-938549829,
					1500808010,
					-1414007914,
					1315522714,
					1793981697,
					-960520520,
					-1236732722,
					-422363754,
					1062716401,
					-670289718,
					2145195937,
					418453552,
					697510010,
					889803243,
					-2070278670,
					831440061,
					815277499,
					638909935,
					1170774309,
					1014514031,
					837644075,
					1373577829,
					1547750799,
					-1237967487,
					490788189,
					-1792211531,
					-1852003998,
					508667186,
					52588986,
					2072918553,
					-1584414334,
					1070173913,
					621166668,
					-820109519,
					1871041231,
					1279806080,
					1896686999,
					-1244575146,
					-1177751814,
					-1530776968,
					-334206872,
					-1950705649,
					857454639,
					-1514561605,
					-57846387,
					1929342052,
					1814680155,
					-1005398739,
					-570172956,
					903722575,
					-1160984379,
					-107967409,
					-665360369,
					-92502552,
					586502207,
					334564221,
					-358084260,
					324661476,
					984937275);
				pglobal_position_int_cov.lon(38640791,
					1989594661,
					1670328152,
					1709289180,
					-2092777749,
					-430718050,
					-1750247293,
					1973390851,
					-943240523,
					1777542107,
					-215387892,
					135525050,
					1978379170,
					662694131,
					-497496470,
					323986672,
					405792564,
					1567686857,
					201198709,
					1913709526,
					786848009,
					-939924682,
					-679367422,
					-1457367583,
					860791678,
					595712855,
					-1997426137,
					-1470622379,
					-569283231,
					252047743,
					-627743364,
					-894609455,
					-1571878153,
					-1875701189,
					-1912679004,
					921140401,
					1082484702,
					1121116576,
					343714836,
					-569822981,
					30521896,
					-237548020,
					-421787098,
					368726081,
					-290064040,
					1463373986,
					-940450870,
					-2073301130,
					1484430217,
					-1762337215,
					-539933008,
					2087523190,
					1945305848,
					2060745944,
					-1834516578,
					971665735,
					1730173611,
					-801355751,
					24789481,
					-1986068447,
					-1979970530,
					-1220445713,
					-1411992431,
					-1052794659,
					-1327179037,
					-1272526414,
					-1785457182,
					588991350,
					-1663831313,
					277708783,
					1435142194,
					1173802064,
					-356265516,
					484181151,
					1956271099,
					-506981013,
					2044750023,
					1492660129,
					1636857186,
					-476100023,
					1200416675,
					36749704,
					-1980122652,
					633750861,
					-964849799,
					1266351840,
					-818578485,
					-1379457243,
					864616288,
					1438337925,
					538170551,
					1357497198,
					-1500112545,
					-1667819599,
					1765182169,
					1947721196,
					1213033032,
					-1504068393,
					253244539,
					-1235063680,
					1035521941,
					-1678493259,
					-59291434,
					347158883,
					-272978334,
					1101612456,
					1650825739,
					1762320593,
					1658301782,
					1235962358,
					-1333160513,
					-239771464,
					1056650433,
					1001380269,
					-223117783,
					-323620792,
					1832121981,
					-20639064,
					-1154301126,
					-582969556,
					478000132,
					1088889441,
					1645965801,
					-1686098259,
					1445427382,
					789472082,
					1722154150,
					-1380868959,
					1814791617,
					-718996085,
					546980135,
					-951310907,
					-1496916617,
					1847196201,
					2047523088,
					-1597683955,
					-1805102628,
					-1621569635,
					1789969963,
					-327733362,
					-254473191,
					-89513162,
					-339826136,
					-1472804869,
					1521905190,
					334744898,
					1809241612,
					1702651803,
					-1939962557,
					-372527008,
					-655966313,
					-888272974,
					-1822269322,
					-441513842,
					-1905686287,
					80951974,
					-952199509,
					1724439722,
					-1966326751,
					-885172510,
					-946309152,
					-152441059,
					-1055816547,
					701197194,
					614916195,
					673047980,
					224014565,
					-2133241679,
					-1870832807,
					-570622902,
					1319425812,
					1468208168,
					-566524565,
					-1419648004,
					-1108170310,
					-1411419970,
					793459286,
					430664454,
					-158227320,
					559898666,
					1545046869,
					-1040803621,
					-1801895939,
					211958679,
					-1782279976,
					-339014795,
					-27526994,
					897314714,
					861585581,
					1240941889,
					-2037052166,
					820939540,
					-1527014369,
					559953329,
					-1235681026,
					-3527493,
					-1066786868,
					503849261,
					885514069,
					579472315,
					335967152,
					-812252821,
					-1589893119,
					-1607174954,
					-1427816686,
					-608646393,
					415534585,
					-1169184027,
					639943390,
					-809635235,
					579306261,
					1420579193,
					-1827229772,
					-1953698816,
					-1276058926,
					1316573833,
					-1661058169,
					-72798769,
					1711570736,
					480310184,
					1762118160,
					-287150777,
					-1850112809,
					-1198601091,
					-304046937,
					-2072983384,
					-1522123511,
					-1149138172,
					1071739550,
					-613871561,
					-67328728,
					946163586,
					637587873,
					1023486089,
					666971990,
					-627291230,
					-1382718872,
					2112519022,
					1254023959,
					-589099860,
					925118984,
					1056630929,
					865411719,
					-230004929,
					-612404883,
					881672097,
					1083157471,
					33112655,
					451907276,
					999808490,
					-1939817341,
					1583714967,
					-819737705,
					921630885,
					104380511);
				pglobal_position_int_cov.alt(871164336,
					1231009495,
					-942446394,
					1480633281,
					138333410,
					-160628405,
					76501944,
					-1882203490,
					803477615,
					1366337494,
					-1685239107,
					-1671345811,
					-125602022,
					1363542331,
					-1413563378,
					-1441216586,
					-1688832425,
					-1230084449,
					1050278347,
					651603717,
					1611161997,
					2135434964,
					-2035762223,
					-1640617149,
					-487760087,
					-681047252,
					-27844493,
					-649628999,
					630181542,
					-120440583,
					70828159,
					1250354663,
					-631394560,
					-525775234,
					1541927470,
					208872830,
					-732743862,
					1411700057,
					1046888854,
					-635907954,
					-1845431942,
					-1276805784,
					1338124657,
					-1478594217,
					804838114,
					1823561390,
					427990060,
					-395553835,
					-315383592,
					-460243236,
					-2104507130,
					2020636822,
					1114179765,
					-1137543954,
					-1657176852,
					1049019853,
					-1499756696,
					-851147056,
					-456054219,
					-1242080314,
					-1234349691,
					1482641777,
					-1549761283,
					2020447423,
					1334195443,
					1349392111,
					446093741,
					939231348,
					-1412883201,
					1037494863,
					1316351176,
					-838669816,
					1118724354,
					-938046291,
					2062671684,
					-1746098356,
					1323388130,
					-819823646,
					-451684553,
					-242948982,
					-1070584554,
					-311314274,
					-104650163,
					1925734203,
					-773513024,
					2017719752,
					-815267552,
					1903759060,
					-908772339,
					-1919905688,
					1324761420,
					332350606,
					859046920,
					-1048317723,
					-2116465844,
					-2110811517,
					-1548905088,
					1942471425,
					2046996978,
					-1911824223,
					1039531671,
					-290109862,
					-594788835,
					1588477135,
					2112124245,
					-1971723275,
					2064073719,
					795982119,
					-782908851,
					-1473329478,
					-1879803587,
					853861896,
					1320245471,
					-2109849159,
					800136448,
					-692998257,
					-1139292909,
					-643474734,
					1589847918,
					-997565430,
					-224079745,
					-2048566146,
					266156492,
					-1827015501,
					-359335312,
					-1928611534,
					1426441864,
					-1367521274,
					-1581234672,
					1337309237,
					-1961164750,
					-1819294938,
					-409969730,
					1147894730,
					238418908,
					966184470,
					718115931,
					1038806488,
					-405782791,
					-1173124419,
					1539610293,
					-398192146,
					-1028835423,
					-177205507,
					1179402376,
					1576985916,
					1739945556,
					-455693913,
					-236173791,
					-2098889707,
					-1759089186,
					1901601529,
					867518215,
					-11672300,
					1926552731,
					-1083908869,
					-1296530899,
					1418987524,
					-966401475,
					1094537048,
					-405981323,
					-1835620833,
					-1357218432,
					-1485513572,
					-2027177620,
					-1162867244,
					150330753,
					-1265187315,
					159923659,
					1257076128,
					1656623960,
					252864841,
					-2088470283,
					-1652521582,
					-893133076,
					1939256788,
					1324013550,
					1675111030,
					-2099044709,
					291800163,
					-34844989,
					-1867247139,
					1246815223,
					544265161,
					-503114417,
					-75117578,
					374419642,
					483538184,
					-902552031,
					429085656,
					-1899205542,
					15984455,
					110901149,
					791951474,
					896748168,
					-410930872,
					1743411420,
					1452377996,
					267841960,
					736111793,
					59278591,
					445461008,
					-1219260210,
					-252544525,
					-1123302458,
					854214529,
					-479275437,
					-295933181,
					96941426,
					-512041535,
					-180909004,
					-1601648517,
					61025757,
					-1761094675,
					-1679408757,
					-2121350093,
					-349057733,
					2104989446,
					-1842079816,
					-2112719181,
					1511741301,
					1046512223,
					605203077,
					1797528421,
					309769091,
					-228423185,
					-1704514378,
					2078579681,
					1441672178,
					1367277693,
					661849064,
					-1779313041,
					782410736,
					-126975255,
					-1155149276,
					1507719797,
					-1179684409,
					1760681755,
					-1682376304,
					-1513475272,
					-2042999552,
					1198830709,
					-1339246416,
					422698044,
					-941576491,
					172965477,
					2102417428,
					-307943869,
					1572024604,
					-1549604707,
					1738741298,
					114976749,
					1011393704,
					10956544,
					1870321424);
				pglobal_position_int_cov.relative_alt(347925204,
					-755890185,
					909553192,
					315700334,
					792690840,
					597081204,
					-488861741,
					-288734504,
					-1549174425,
					1977333217,
					-503432151,
					-1722369784,
					1026110943,
					-605722138,
					1778718529,
					643637287,
					-1434763230,
					-16128693,
					1790865554,
					228494876,
					-137840423,
					-1731973008,
					-1160589516,
					-622713560,
					2005377514,
					378628114,
					2138084370,
					-434333188,
					936728555,
					1873075703,
					-810954726,
					1614603234,
					1493673790,
					-1005565784,
					1612753292,
					-791871855,
					-639088051,
					1395064530,
					2124504977,
					451885761,
					-1695315897,
					-203430862,
					1836794501,
					-1682775541,
					-818797787,
					488087828,
					-1269188240,
					561001855,
					814295585,
					1497517557,
					-1624099749,
					373859155,
					56138924,
					-1361089419,
					1935407095,
					-2129215835,
					-2141797899,
					2066018587,
					1417088609,
					-1171953765,
					352342468,
					1434290801,
					-591719878,
					-766801719,
					-1845772752,
					484931622,
					-297337057,
					1491776844,
					1898187772,
					1079850981,
					1804701990,
					1524832630,
					-1848623608,
					-1174887196,
					85015051,
					1314949186,
					-793077338,
					-1380635266,
					1049806350,
					-1460031324,
					-697585992,
					167360382,
					-1105945140,
					-489263828,
					592596602,
					-1716294932,
					-1103970842,
					-983383592,
					1486304125,
					1508744435,
					-1840232909,
					2092096974,
					-890790758,
					188819462,
					749539468,
					-190935841,
					-1690324596,
					17277987,
					998172747,
					2032544115,
					33986042,
					1725716654,
					900398327,
					-76892176,
					1322894504,
					-822967597,
					-1479252055,
					-519762440,
					1330396532,
					-929625408,
					1959993078,
					184028708,
					-1941166912,
					1318401688,
					-1645105763,
					-1549597231,
					-298924177,
					-1664778138,
					1669014454,
					-1947607895,
					1612034885,
					-2081986022,
					183314186,
					862929243,
					-2125338983,
					543237440,
					634723240,
					435603984,
					1148869879,
					-150067518,
					-2034235094,
					604017084,
					-1143709467,
					1351779423,
					-1455019668,
					214019383,
					400721925,
					-58859222,
					2000778311,
					183567194,
					397184057,
					849021494,
					-108347971,
					-2081939235,
					-1502324605,
					-377104782,
					-1306446016,
					663900240,
					-1105331629,
					100376942,
					-246124208,
					-1948985629,
					-1640643683,
					-1287450837,
					502462341,
					366101911,
					79689346,
					-694597415,
					-2099270839,
					-90173688,
					-1665115686,
					744748690,
					848064931,
					-467351616,
					-1522406339,
					-1987142988,
					813772185,
					-169580666,
					-1405254243,
					-962705947,
					1264116832,
					-1057140078,
					990239326,
					-814802756,
					2071401884,
					-531832061,
					574267308,
					265742935,
					-1233315833,
					1452376451,
					-1795354346,
					1082285191,
					-1335151316,
					-130245218,
					-292977890,
					447661457,
					-1186254386,
					-198536257,
					958396421,
					891402208,
					2037013785,
					645065376,
					2138560895,
					2059933749,
					1999715746,
					-1177856059,
					-203177375,
					1643996339,
					1883886204,
					408519827,
					-729574642,
					2085091273,
					-191244951,
					-900063121,
					40701325,
					1595894616,
					1806032308,
					-1388302321,
					-760290155,
					831865038,
					2066678949,
					-2133603622,
					995020204,
					1314955583,
					-159565778,
					1804608674,
					-1510631106,
					-71230847,
					-1824824143,
					-340441541,
					179093053,
					544597741,
					1072491285,
					1040793372,
					-1941438698,
					-1557464287,
					-377466093,
					-797108321,
					-975008415,
					-820550061,
					-1172703710,
					492819824,
					-953700824,
					-1010943297,
					1625039201,
					1910554423,
					364557190,
					1781781601,
					1255679592,
					467152031,
					757263645,
					-1674386783,
					1257083148,
					-663069870,
					484440117,
					589506429,
					-2047777083,
					413880172,
					762219671,
					1427623897,
					-209977436,
					-392413965,
					-2143881034,
					-1238523377,
					-404430892);
				pglobal_position_int_cov.vx(3.1516041E38F,
					-3.1436394E38F,
					-2.3798592E38F,
					1.6439139E38F,
					2.0585311E38F,
					-1.844314E38F,
					3.454211E36F,
					2.5686676E38F,
					3.2441363E38F,
					2.8584742E38F,
					-1.5705573E38F,
					-1.9349108E38F,
					-2.4620963E38F,
					1.9263038E38F,
					-1.6301123E37F,
					-2.354283E38F,
					1.5418522E38F,
					-2.6753034E38F,
					-6.976387E37F,
					-8.331133E37F,
					-9.807221E37F,
					1.3222561E38F,
					-3.2269768E38F,
					-1.4742454E38F,
					-1.1091366E38F,
					1.1374808E38F,
					3.0432368E38F,
					-6.0257944E37F,
					-1.2978372E38F,
					-2.0455331E38F,
					-3.0485508E38F,
					1.8614317E38F,
					-4.205474E37F,
					-2.7965664E38F,
					-4.8038116E37F,
					-3.2360432E37F,
					-2.5868147E38F,
					-1.8540984E38F,
					-1.8622497E37F,
					2.251521E36F,
					1.9588725E38F,
					7.2686137E37F,
					-3.3152116E38F,
					-4.475741E37F,
					-2.93479E37F,
					-7.985644E37F,
					-3.3753954E38F,
					-9.530651E37F,
					1.8181349E38F,
					3.1653528E38F,
					-3.1707183E38F,
					3.3790186E38F,
					-1.4809848E38F,
					8.393874E37F,
					-2.0333705E37F,
					-3.2914434E38F,
					3.0685432E38F,
					4.5571415E37F,
					1.3155955E38F,
					2.5798436E38F,
					1.2276141E38F,
					2.412391E38F,
					3.3833039E38F,
					2.206459E38F,
					-2.0973654E38F,
					-2.1736565E38F,
					2.0124422E38F,
					-3.3634523E38F,
					-2.3639866E38F,
					-1.8933863E38F,
					-2.8892226E38F,
					-1.5303309E38F,
					2.963622E38F,
					8.45124E37F,
					-3.0732599E38F,
					-3.1902224E38F,
					-2.9204341E38F,
					2.9947712E38F,
					-1.0809587E38F,
					2.6472615E38F,
					1.198906E38F,
					-1.8420825E38F,
					2.0423238E38F,
					1.8664413E38F,
					-9.8307534E36F,
					2.317019E38F,
					1.5856623E38F,
					-1.6730565E38F,
					-1.2098739E38F,
					2.5292578E37F,
					7.7344E37F,
					7.723439E37F,
					2.1624574E38F,
					-2.4626618E37F,
					3.2208892E38F,
					3.1929772E38F,
					2.7017036E38F,
					-2.731251E38F,
					1.7981873E38F,
					2.3350497E38F,
					2.0705154E38F,
					-1.2553351E38F,
					2.2982853E37F,
					-1.6246629E38F,
					2.408443E37F,
					3.0795217E38F,
					3.0498049E38F,
					-2.5946207E35F,
					-1.1029913E38F,
					-2.2489994E38F,
					-1.4799973E38F,
					2.0684338E38F,
					-2.4402943E38F,
					2.9956636E38F,
					-3.1920562E38F,
					1.4160159E38F,
					-2.7601743E38F,
					2.4717728E38F,
					-3.1311615E38F,
					-5.698211E37F,
					2.9517052E38F,
					-2.0820751E38F,
					3.2111484E38F,
					-1.5939129E38F,
					2.4199624E38F,
					-1.2917872E38F,
					2.9178457E38F,
					-2.8621352E38F,
					2.4321169E38F,
					1.4394398E38F,
					-1.1782556E38F,
					-1.3103202E38F,
					1.2391114E38F,
					-5.452236E37F,
					-1.0323473E38F,
					5.9089525E37F,
					-1.6863543E38F,
					-2.0906895E38F,
					-6.773297E37F,
					-1.0768887E38F,
					-8.519498E37F,
					2.0277728E38F,
					-3.0217659E38F,
					-1.7162079E38F,
					3.1086967E38F,
					1.7022156E38F,
					-5.001518E37F,
					-2.7974801E38F,
					7.9423533E37F,
					-4.915105E37F,
					-4.898139E37F,
					9.228117E37F,
					-6.421358E36F,
					-5.372882E37F,
					3.1227455E38F,
					-2.186972E38F,
					2.9029511E38F,
					-1.7013602E38F,
					-1.4099549E38F,
					-1.7973391E38F,
					-6.9178624E37F,
					-2.995718E37F,
					1.0571452E38F,
					2.2829105E38F,
					1.6682873E38F,
					1.600907E38F,
					-3.148411E38F,
					3.4665047E37F,
					-1.8804457E38F,
					-1.916061E37F,
					-8.987211E37F,
					-4.0649308E37F,
					-1.7977766E38F,
					-1.7833576E38F,
					8.658661E37F,
					7.7928537E37F,
					-1.0699632E38F,
					-1.5418025E38F,
					2.4892336E38F,
					-7.1103314E36F,
					-2.7041117E37F,
					-1.2776819E38F,
					8.729092E37F,
					-1.5965002E38F,
					-1.9778797E38F,
					-3.678809E37F,
					2.4841715E38F,
					2.2357178E38F,
					-1.1980158E38F,
					2.3679447E37F,
					2.3846327E38F,
					-2.1272834E38F,
					1.6980223E38F,
					4.4555617E37F,
					-1.1016536E38F,
					-3.141864E38F,
					-3.1968412E38F,
					-1.6343335E38F,
					-2.01732E38F,
					-1.5738843E38F,
					-5.030261E37F,
					-2.0683612E38F,
					-1.9536808E38F,
					-7.3989054E37F,
					-8.3744416E37F,
					1.2493206E38F,
					-3.1928873E38F,
					2.4644495E38F,
					-3.070968E36F,
					-1.1396339E38F,
					-2.0372057E37F,
					1.2709502E38F,
					1.4705325E38F,
					2.1648298E38F,
					-3.2256037E38F,
					-4.7610213E37F,
					-3.0001945E38F,
					3.3400334E38F,
					1.7618017E38F,
					-7.8580687E37F,
					-8.2334824E37F,
					2.6313883E38F,
					3.0620112E38F,
					-2.9772957E38F,
					7.6281646E37F,
					3.0497457E38F,
					6.140844E37F,
					-2.0839374E35F,
					2.8731743E38F,
					1.1273021E38F,
					-2.9765587E37F,
					-4.821314E37F,
					-2.8184655E38F,
					-2.7196596E38F,
					-2.3448035E38F,
					-7.117783E37F,
					-9.997999E37F,
					-5.7977486E37F,
					2.4788826E37F,
					-2.9220352E38F,
					-1.444948E38F,
					2.6660556E37F,
					-2.1927258E38F,
					2.1695152E38F,
					2.1702933E38F,
					-1.8537006E37F,
					-2.0291046E38F,
					-8.690519E37F,
					9.649781E37F,
					8.344062E36F,
					-1.4270253E38F,
					-3.1798224E38F,
					-3.1263925E37F,
					-4.071805E37F,
					-5.084533E37F);
				pglobal_position_int_cov.vy(1.6126749E38F,
					-1.5304287E38F,
					-1.2236218E38F,
					9.71002E37F,
					2.0527271E38F,
					-1.0624355E38F,
					-8.023552E37F,
					9.722598E37F,
					-9.250799E37F,
					-3.127823E38F,
					-6.929828E37F,
					-1.8125053E38F,
					-2.9197007E38F,
					-2.7191166E38F,
					-2.096176E38F,
					-3.3853818E38F,
					-1.1501357E38F,
					6.7824043E37F,
					1.5977136E38F,
					1.8983593E38F,
					-1.6304507E38F,
					-1.4903573E38F,
					4.4669923E37F,
					1.7623818E38F,
					-1.3709906E38F,
					2.6457874E38F,
					-3.1608363E38F,
					2.274167E38F,
					-2.4615779E38F,
					-9.133671E37F,
					3.730911E37F,
					1.7054022E38F,
					-6.2027026E37F,
					-9.736117E37F,
					-8.882558E37F,
					-1.4002199E38F,
					-2.659731E37F,
					8.52227E37F,
					3.3912158E38F,
					-1.2154917E38F,
					8.2948687E37F,
					3.0847636E38F,
					1.5690467E38F,
					4.2970465E37F,
					1.4172901E38F,
					-1.0749618E38F,
					1.420109E38F,
					2.5199002E38F,
					-6.1957326E37F,
					6.150751E37F,
					-1.6209699E38F,
					-2.1811046E38F,
					-3.25209E38F,
					-1.8352999E38F,
					-2.5176348E38F,
					-3.0900561E38F,
					-1.2252064E38F,
					-2.0061603E38F,
					2.518232E38F,
					-8.202768E37F,
					-2.9371998E38F,
					-7.468145E36F,
					-2.1860642E37F,
					-2.087067E38F,
					-1.293533E38F,
					1.6664217E38F,
					-2.1690013E38F,
					-2.476466E38F,
					-3.3208418E38F,
					6.5249237E37F,
					8.4351925E37F,
					-2.0597116E38F,
					1.782913E38F,
					-1.1395577E38F,
					8.329986E37F,
					1.9838568E38F,
					-8.120557E37F,
					3.0052953E38F,
					2.6918112E38F,
					1.7580959E37F,
					-6.1345213E37F,
					-1.8611027E38F,
					2.2435838E38F,
					6.935281E37F,
					1.3662399E38F,
					-1.0844983E38F,
					4.6595216E37F,
					-2.540723E38F,
					-2.9577765E38F,
					-2.0919369E38F,
					-1.1998129E38F,
					-9.908242E37F,
					-2.2639696E38F,
					-3.0549152E37F,
					-3.1360027E38F,
					-2.4527471E38F,
					1.9625557E37F,
					8.2065824E37F,
					2.0063214E36F,
					1.6116698E38F,
					-1.5810639E37F,
					-1.0939338E37F,
					9.984964E37F,
					2.7174839E38F,
					-3.3614737E38F,
					-4.4951935E37F,
					3.2900243E38F,
					2.3996685E38F,
					-3.4073046E37F,
					2.2647316E38F,
					-2.2795E38F,
					6.290022E37F,
					-3.0212176E38F,
					-4.747127E37F,
					5.9281873E37F,
					3.2106113E38F,
					5.0393984E37F,
					-1.7644869E38F,
					2.9691968E36F,
					5.807077E37F,
					-9.9810625E36F,
					6.489298E37F,
					-2.0795891E38F,
					-2.7402908E38F,
					-2.0812018E38F,
					3.2341789E38F,
					1.9346265E38F,
					7.8801776E37F,
					1.669308E38F,
					-7.452818E37F,
					-1.4151755E38F,
					-5.1252336E37F,
					-2.157031E37F,
					1.8769928E38F,
					2.8162395E38F,
					1.1923582E38F,
					-2.2300345E38F,
					-3.1892544E38F,
					-1.3244888E37F,
					2.6754208E38F,
					9.876409E37F,
					2.6574312E37F,
					2.2582727E38F,
					-2.9903057E36F,
					-1.625854E38F,
					2.946847E38F,
					-7.808305E36F,
					3.3232294E38F,
					1.2207805E38F,
					3.159138E38F,
					-3.7498672E37F,
					-5.8932696E37F,
					-8.893188E37F,
					1.8998146E38F,
					-6.1453516E37F,
					1.6217892E38F,
					-1.6529308E38F,
					-2.0633032E38F,
					8.175391E37F,
					-1.854394E38F,
					-3.1185272E37F,
					3.3774122E38F,
					2.7427282E38F,
					-1.6222927E38F,
					1.0236705E38F,
					-6.250365E37F,
					-6.930722E37F,
					3.1621E38F,
					1.3508552E38F,
					-1.3900102E38F,
					-1.992511E38F,
					-8.2069566E37F,
					-1.1741435E37F,
					8.021886E37F,
					1.7587293E38F,
					1.507081E38F,
					2.2766713E38F,
					4.741054E37F,
					2.1917448E38F,
					-2.0149899E38F,
					2.2356E37F,
					3.2886017E38F,
					-2.1972537E38F,
					-4.4018872E36F,
					-1.3537894E38F,
					1.0616251E38F,
					1.9327867E38F,
					2.7367063E38F,
					-1.1241396E38F,
					1.1966259E37F,
					-4.656118E37F,
					-1.7522477E38F,
					1.4390686E38F,
					-2.183823E38F,
					-4.357928E37F,
					1.583708E38F,
					-3.8465965E37F,
					3.3340985E38F,
					-3.9627034E37F,
					-3.0379693E38F,
					-2.982635E38F,
					2.3955832E38F,
					1.2761726E38F,
					2.1294045E38F,
					-3.832035E37F,
					1.8670589E38F,
					1.778147E38F,
					-2.0377583E38F,
					3.1190675E38F,
					-2.001857E38F,
					-2.1127784E38F,
					8.812125E37F,
					-7.80474E37F,
					-3.0239367E38F,
					2.9904813E38F,
					-1.3237222E36F,
					1.2095358E38F,
					1.8599099E37F,
					8.2390494E37F,
					-3.2429792E38F,
					-1.3132303E38F,
					3.113663E38F,
					1.2648562E38F,
					1.9655217E38F,
					5.6376114E37F,
					-1.2652854E38F,
					-2.4270019E38F,
					6.153485E37F,
					2.1068213E38F,
					-2.4557804E38F,
					1.2808312E38F,
					-1.9387292E38F,
					-3.2642214E38F,
					1.6845918E38F,
					1.7472235E38F,
					2.8645232E38F,
					-2.2345303E38F,
					-1.1591383E38F,
					-6.936116E37F,
					-1.3238774E38F,
					-2.1907663E38F,
					-1.0701905E38F,
					3.3249337E38F,
					1.1473217E38F,
					-3.152278E38F,
					2.1943154E38F,
					2.9217229E38F,
					-8.786369E37F,
					-1.8319973E38F,
					3.0435498E38F,
					8.270706E37F,
					-2.8514202E38F,
					2.3760865E38F,
					1.5152558E37F,
					1.3253936E38F);
				pglobal_position_int_cov.vz(7.1832324E37F,
					5.1573016E37F,
					-1.715477E37F,
					1.3972659E38F,
					-3.0221967E38F,
					-2.8847783E38F,
					-3.667349E37F,
					2.19168E38F,
					2.0518838E38F,
					-4.91358E37F,
					-1.0934936E38F,
					-2.0079342E37F,
					-2.0297464E37F,
					-1.839698E38F,
					-5.7225085E37F,
					1.4893624E38F,
					-2.402921E38F,
					2.9714499E38F,
					-5.711696E37F,
					-1.921312E38F,
					-6.1543194E37F,
					-1.3854868E38F,
					1.5703657E38F,
					-2.5894538E38F,
					1.3321292E38F,
					-3.2040536E38F,
					3.252957E38F,
					1.0927101E38F,
					-1.2156457E38F,
					1.3841809E38F,
					-1.5784964E38F,
					3.2447654E37F,
					-2.2020618E38F,
					2.486502E38F,
					1.2713673E38F,
					-6.0998505E37F,
					-2.1417969E38F,
					2.6162693E37F,
					-2.1113818E38F,
					1.9180862E38F,
					2.8557574E38F,
					-3.3091232E38F,
					-2.5386202E38F,
					-2.9290838E38F,
					2.6210692E38F,
					2.911232E38F,
					1.0057644E38F,
					-3.129955E38F,
					3.0614074E38F,
					-9.503026E37F,
					1.2884962E38F,
					3.170925E38F,
					-2.6774916E38F,
					2.4850247E37F,
					-9.667355E36F,
					-2.2358335E38F,
					2.8858814E38F,
					-8.885817E37F,
					-2.458532E38F,
					3.28843E38F,
					-1.3188454E38F,
					-2.6095665E37F,
					2.0920348E38F,
					-2.7648188E38F,
					-1.8289876E38F,
					-1.502968E38F,
					2.203041E38F,
					-4.487084E37F,
					-3.0237227E38F,
					-1.0697179E38F,
					9.727236E37F,
					-2.7827584E38F,
					-8.239158E37F,
					2.2213052E38F,
					1.512094E38F,
					-3.0157343E38F,
					2.3531763E38F,
					-3.0866982E38F,
					1.2324273E38F,
					2.3281831E38F,
					2.176573E38F,
					1.5101202E38F,
					-1.0190604E38F,
					2.4542294E38F,
					-3.0808708E38F,
					1.8351814E38F,
					-1.4735724E38F,
					6.282577E37F,
					-9.340709E37F,
					-9.8214265E35F,
					2.35396E38F,
					3.2128477E38F,
					2.9067198E38F,
					-1.7783576E38F,
					3.0187E38F,
					-3.037267E38F,
					1.5470764E38F,
					-2.624426E38F,
					-1.6068307E38F,
					-9.117652E37F,
					-1.1781871E38F,
					-2.5268292E38F,
					-1.46785E38F,
					-1.0301249E38F,
					2.6991535E38F,
					3.2343365E38F,
					1.8858836E38F,
					2.4481931E38F,
					-5.4731753E37F,
					2.3570616E38F,
					-2.2057394E38F,
					-2.1116576E38F,
					-2.1094562E38F,
					2.408908E36F,
					1.4493292E38F,
					3.0516621E38F,
					-3.126735E38F,
					-1.1438525E38F,
					2.5782976E37F,
					1.9382481E38F,
					-1.5149596E38F,
					-6.150019E37F,
					1.8297871E38F,
					9.267346E37F,
					-1.1396718E38F,
					3.1346174E38F,
					1.1388041E38F,
					2.671603E38F,
					1.3857746E38F,
					-4.878725E37F,
					-2.7180867E38F,
					1.8411524E38F,
					-3.338857E38F,
					-5.415052E37F,
					2.927818E38F,
					7.1099607E37F,
					-3.2769135E38F,
					-1.9131973E38F,
					3.2186403E38F,
					-1.4264349E38F,
					-6.9095253E37F,
					-1.6966427E38F,
					2.055463E38F,
					3.0768456E38F,
					3.1152714E38F,
					2.6263852E38F,
					-5.481857E37F,
					2.0040913E38F,
					1.9982143E38F,
					-1.5468901E38F,
					-3.2490455E38F,
					-2.1691457E38F,
					2.526924E38F,
					2.731794E38F,
					-6.0048117E37F,
					-1.3886417E38F,
					-1.9643268E38F,
					-1.4237573E38F,
					2.8611219E38F,
					8.485713E37F,
					-2.9266266E38F,
					-1.2227937E38F,
					3.0264284E38F,
					-2.3468523E38F,
					-2.4514172E38F,
					2.621925E37F,
					1.0701853E38F,
					-2.9928257E38F,
					-6.031212E37F,
					7.4088924E37F,
					1.508028E38F,
					-3.1645362E38F,
					-4.410754E37F,
					2.4670564E38F,
					1.8140352E38F,
					5.1990134E37F,
					-1.2292873E38F,
					-2.4536886E38F,
					2.7938702E37F,
					9.407251E37F,
					1.6032976E38F,
					2.5201184E38F,
					2.9978777E38F,
					2.3849576E38F,
					8.943507E35F,
					1.8610318E38F,
					2.0640512E38F,
					4.4010583E37F,
					3.015487E38F,
					2.4968668E38F,
					-2.3825266E38F,
					1.725169E38F,
					-1.926094E38F,
					-7.38629E37F,
					-1.6143751E38F,
					2.5289685E37F,
					-8.808321E37F,
					-4.453093E35F,
					1.6171216E38F,
					1.2744783E37F,
					5.944869E37F,
					-9.1478776E36F,
					-3.3194327E38F,
					2.1930935E38F,
					3.2019862E38F,
					1.5082556E38F,
					-1.0724195E38F,
					-2.0549208E38F,
					2.8713247E38F,
					-1.1182843E38F,
					1.1986151E38F,
					-1.7454198E38F,
					2.7456792E37F,
					2.8654222E38F,
					2.1464982E38F,
					-1.6399407E38F,
					3.1415333E38F,
					-3.0364493E38F,
					5.746276E37F,
					8.107911E37F,
					-2.0043132E38F,
					-1.5204593E38F,
					-3.094365E38F,
					1.0150409E38F,
					7.910781E37F,
					-2.3572855E38F,
					3.4012493E38F,
					1.3846436E37F,
					1.4143308E38F,
					1.3528338E38F,
					-1.0244268E38F,
					-1.611209E38F,
					-3.3017664E38F,
					5.810479E37F,
					3.1368057E38F,
					2.3334945E38F,
					-3.554588E37F,
					-2.5827823E38F,
					3.6201548E37F,
					-2.5230638E38F,
					2.2966456E38F,
					-1.9829138E38F,
					2.5765455E38F,
					-2.583103E38F,
					3.2761762E38F,
					1.676432E38F,
					3.358002E38F,
					2.882226E38F,
					1.3373706E38F,
					-3.1443683E37F,
					-1.1013796E38F,
					6.1663576E37F,
					-1.7296389E38F,
					1.9385118E38F,
					-1.5791954E38F);
				for (const float src[] = { 2.0356063E38F,
										  -3.2030997E38F,
										  2.5345749E38F,
										  -9.51462E37F,
										  1.4992127E38F,
										  -6.769622E37F,
										  2.106287E38F,
										  -2.2420372E38F,
										  2.8574238E38F,
										  2.144839E38F,
										  1.4545057E37F,
										  -7.4422844E37F,
										  2.3822487E38F,
										  -2.1113704E38F,
										  2.7527053E38F,
										  -2.3662648E38F,
										  3.2877504E38F,
										  5.0694103E37F,
										  -2.5750929E38F,
										  4.954687E37F,
										  6.071344E37F,
										  3.3259971E38F,
										  -2.4157719E38F,
										  2.5661564E38F,
										  -2.175578E38F,
										  1.8224623E38F,
										  2.4321116E38F,
										  1.4361752E37F,
										  -2.8446806E38F,
										  -2.8992408E38F,
										  -2.6716298E38F,
										  -3.026122E37F,
										  2.014743E38F,
										  -7.107764E37F,
										  3.7613133E37F,
										  -3.218195E38F,
										  -1.897258E38F,
										  8.0676894E37F,
										  -2.0537289E38F,
										  1.5265593E38F,
										  -9.831308E37F,
										  2.6535915E38F,
										  2.7742045E38F,
										  -4.78559E36F,
										  -1.9729846E38F,
										  -2.7293298E38F,
										  4.720001E37F,
										  -5.5320227E37F,
										  2.863926E38F,
										  -1.3638225E38F,
										  -2.5257145E37F,
										  -1.3739651E38F,
										  -3.0254003E38F,
										  -4.7687266E37F,
										  1.986613E38F,
										  -8.78755E37F,
										  -2.6382312E38F,
										  -2.1894026E38F,
										  3.1246693E38F,
										  2.7737256E38F,
										  -2.183557E38F,
										  -3.9776703E37F,
										  -1.8644453E38F,
										  2.1776775E38F,
										  3.10215E38F,
										  1.8370075E38F,
										  1.8671994E38F,
										  2.512298E38F,
										  -9.802448E37F,
										  1.9277877E38F,
										  2.6448268E38F,
										  -1.0973259E38F,
										  2.4354207E38F,
										  -2.7665795E38F,
										  3.201412E38F,
										  2.1628717E38F,
										  -1.5438907E38F,
										  -6.5819274E37F,
										  1.2377463E37F,
										  9.405099E36F,
										  3.2515808E38F,
										  -1.6923839E38F,
										  -3.1505622E38F,
										  -3.6194817E37F,
										  -3.1495696E38F,
										  -1.910849E38F,
										  1.4490032E38F,
										  5.3890976E37F,
										  2.4885961E37F,
										  3.5333867E37F,
										  2.737149E38F,
										  1.3100105E38F,
										  3.3953415E38F,
										  -3.1155637E38F,
										  -9.753471E37F,
										  -2.8728766E37F,
										  1.7678975E37F,
										  9.347406E37F,
										  1.7073076E37F,
										  -3.2901813E38F,
										  -7.2023683E37F,
										  -2.516379E37F,
										  -1.6644319E38F,
										  1.0418864E38F,
										  2.2507858E38F,
										  -1.6955688E38F,
										  -2.4578102E38F,
										  2.7699105E38F,
										  2.140867E37F,
										  1.750152E38F,
										  1.3889917E38F,
										  -2.0910708E38F,
										  -1.0910872E38F,
										  -1.7199289E38F,
										  2.7425392E38F,
										  2.9473136E38F,
										  1.4078929E38F,
										  3.2007409E38F,
										  -1.8540112E38F,
										  -1.5348214E36F,
										  -9.762196E37F,
										  -6.2535744E37F,
										  -2.924854E38F,
										  -3.2199248E38F,
										  9.422357E36F,
										  4.0059085E37F,
										  3.2977715E38F,
										  -3.6409045E37F,
										  2.6390788E38F,
										  -1.7451212E38F,
										  -2.54896E38F,
										  -1.7362306E38F,
										  1.5620839E37F,
										  -9.442658E37F,
										  3.2957413E38F,
										  2.2694446E38F,
										  3.246609E38F,
										  -9.581942E37F,
										  2.0313452E38F,
										  -3.2996876E38F,
										  3.1937392E38F,
										  -2.8623914E38F,
										  -2.688608E38F,
										  -2.9315233E38F,
										  -9.940855E37F,
										  -2.11502E38F,
										  5.6423924E37F,
										  -2.2723947E38F,
										  2.6537963E38F,
										  3.35156E37F,
										  -1.541066E38F,
										  4.35752E36F,
										  -9.633394E37F,
										  -2.4367396E37F,
										  -8.806887E37F,
										  -1.1420668E38F,
										  1.975074E37F,
										  1.9793871E38F,
										  -3.2234103E38F,
										  2.169402E38F,
										  4.1705408E37F,
										  -3.3825544E38F,
										  -1.4935706E38F,
										  -1.3594385E38F,
										  -2.282433E38F,
										  -5.2332476E37F,
										  1.0502253E38F,
										  -2.6107335E38F,
										  1.3663176E38F,
										  2.925423E38F,
										  -1.6124321E38F,
										  -1.6076631E38F,
										  -2.9013462E38F,
										  -1.0304616E38F,
										  -5.729291E37F,
										  3.262881E38F,
										  3.942564E37F,
										  -2.5846006E38F,
										  1.508306E38F,
										  7.1871667E37F,
										  -3.2154106E38F,
										  6.477342E37F,
										  2.5587511E38F,
										  2.2339592E38F,
										  3.0652781E38F,
										  2.567916E38F,
										  2.2803387E38F,
										  1.3821355E38F,
										  2.2537132E38F,
										  5.401798E36F,
										  3.2766837E38F,
										  3.4951984E37F,
										  -5.598033E37F,
										  -5.4355277E35F,
										  2.7811948E38F,
										  -2.12239E38F,
										  1.3479997E38F,
										  -9.794631E37F,
										  -6.928597E37F,
										  2.7958105E38F,
										  -2.5528266E38F,
										  -2.1249582E38F,
										  -1.1725305E38F,
										  2.591414E38F,
										  8.527446E37F,
										  2.4465476E38F,
										  -2.798834E38F,
										  -3.0171368E38F,
										  2.1417874E38F,
										  -4.4435235E37F,
										  -1.2729341E38F,
										  2.1133409E38F,
										  2.3884955E38F,
										  2.5236664E38F,
										  2.3467375E38F,
										  -3.0773092E38F,
										  2.684137E38F,
										  -3.3441765E38F,
										  2.8871572E38F,
										  1.6006482E38F,
										  8.076581E37F,
										  8.2604976E37F,
										  -1.1674401E38F,
										  3.3033387E38F,
										  3.1422803E38F,
										  5.5782376E37F,
										  1.1953042E38F,
										  1.2132288E38F,
										  -1.5078028E38F,
										  2.6091497E37F,
										  -1.888648E38F,
										  -1.5178316E38F,
										  -1.9318472E38F,
										  2.6259473E37F,
										  -1.0866675E38F,
										  1.7589325E38F,
										  -9.237179E37F,
										  -3.9575993E37F,
										  -1.4985815E38F,
										  2.9374432E38F,
										  1.1461361E38F,
										  5.5978563E37F,
										  1.1689428E38F,
										  -2.171488E38F,
										  2.1142587E38F,
										  1.612861E38F,
										  -3.144717E38F,
										  -2.6316708E37F,
										  -7.3749174E37F,
										  8.53468E37F,
										  -6.564224E37F,
										  1.4586139E38F,
										  2.8018064E38F,
										  1.3971935E37F,
										  1.4946562E38F }; pglobal_position_int_cov.covariance(src), false;);

				pglobal_position_int_cov.estimator_type(MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
					MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE);
			}

			void on_GLOBAL_POSITION_INT_COV(const com::company::demo::GLOBAL_POSITION_INT_COV& pglobal_position_int_cov) {
				assert(pglobal_position_int_cov.time_usec() == -3622103860883612699L,
					-8808173187519844688L,
					-8309136486237720563L,
					7246974868663220808L,
					-962151864937682258L,
					-7166971782125889782L,
					-1055550149372769834L,
					-5707535132180788724L,
					-4688315353578101868L,
					2779316481419870271L,
					8512141799940458582L,
					549154705308033914L,
					-2511214384287493561L,
					-6204160082145575716L,
					-8977046137286721372L,
					422578093976399767L,
					-4989961798847244751L,
					-5699073967080260542L,
					-6522418415180480543L,
					-7582701146777328517L,
					-2046174906547187635L,
					-1278881861629298695L,
					3327246548329535739L,
					-6595996154156927616L,
					-6860359418204346972L,
					-8243594090791251048L,
					6850995162027067163L,
					1117876259132551967L,
					4146604625195188764L,
					7512375967513761996L,
					5400556276261085166L,
					-9168165228080639958L,
					892836304188147731L,
					3294904830342191314L,
					-4027072557812896436L,
					-3254116365607113974L,
					770134999194154814L,
					-2220197999797445137L,
					3155980860344633635L,
					-4219512771333693918L,
					2837433144523689954L,
					1355196618113432125L,
					-4548699477914761095L,
					-3175701068107660905L,
					670699935510592953L,
					-8010393514118252661L,
					-6357335620131370333L,
					-5070449007685125096L,
					1459507987226865241L,
					-5070255632412422019L,
					1033691590245434861L,
					4232533555398935338L,
					-6923634963246819255L,
					1285184824780257368L,
					8179574145372333282L,
					1525880053964137820L,
					-2475122068224756023L,
					-4170454982909426951L,
					-2944577389012274971L,
					4613895015928707425L,
					-7491531320906322013L,
					-8347167402256585448L,
					-4594745133941636235L,
					6983320517635332029L,
					-7757536371119463736L,
					2997028486396263729L,
					849254670949725309L,
					3664538693284410816L,
					8148005391171034565L,
					-5863457622973673996L,
					8700679384345621160L,
					1676781099962855708L,
					3904020348216385958L,
					-1070284614792786795L,
					-1747978289186116631L,
					4845370364374004922L,
					-8291306710906651925L,
					-5203541567240782600L,
					2520669500932185562L,
					5725469712722182901L,
					-2944668479344577882L,
					3542887267654008030L,
					2883347397962296563L,
					-5329542616432527242L,
					7498651864814558470L,
					-5245194505010235425L,
					8450395812390866489L,
					-5475461983856838123L,
					2533515846341914955L,
					2011382035389422110L,
					7696576199757218351L,
					2360178568648839953L,
					2056372680631911343L,
					-2246530966981517534L,
					-544140051111127278L,
					-3406294553839561119L,
					7692569858549404732L,
					5118764508070714767L,
					7895039166877551445L,
					-3391557068710331298L,
					-195524643550855603L,
					-5741496051119034067L,
					4139759815244393945L,
					7851251325470182899L,
					-7488209192418332732L,
					-8176724580814454017L,
					-4965115123894837883L,
					8327822068354961291L,
					-2358072193399353772L,
					-7521249245627483858L,
					5790785163132110693L,
					-8738515574624789779L,
					-6545156629839594218L,
					2793142630755344162L,
					-8516152648077671981L,
					3656949336084600823L,
					-607250666246718571L,
					1323481861538443424L,
					-6607003040895215781L,
					1660885998209475252L,
					-6603813107785023310L,
					8355345833036986202L,
					-2483504978628452391L,
					-5814517788014473377L,
					475012429470366859L,
					-134510707935980795L,
					-4723417685080964278L,
					-1481138624864140096L,
					7512641700191694324L,
					-1204813287666343647L,
					2671737406684970750L,
					-8772464704898732069L,
					-4151799371936563485L,
					-4569499379404432986L,
					-9189778233435518990L,
					350308237065076879L,
					483956146288392950L,
					-6786078883135259922L,
					7957493670868438090L,
					9088798638997216245L,
					5096213777864491864L,
					8089539055850252064L,
					1018871061222993189L,
					3214532030857067720L,
					-1140041643177147704L,
					-3927090214389482055L,
					3658563346912222902L,
					7855193014232866546L,
					-7953012422750280203L,
					2792198088390052216L,
					-5934278870088374355L,
					-7995189586018085916L,
					5922164683527725011L,
					7172355744113624324L,
					1020896703001918878L,
					7794086280047795675L,
					4825623651001251557L,
					-4237827453421386902L,
					-3723704016490384098L,
					5336748840930816446L,
					-6524747696092505883L,
					-4463530244883311155L,
					-1106356226282521166L,
					-3876282249472349251L,
					-6589108288553960058L,
					-3643759755919577190L,
					6295416890886925349L,
					-8548095490558242521L,
					-6981857587405658685L,
					-3407304682328036257L,
					-6545912690744650908L,
					1944964857945461186L,
					-6015424394831103996L,
					1849826472893234107L,
					-4343527837485171952L,
					276824741438775101L,
					6150577550952043182L,
					-8775810200850034141L,
					3569366765801843586L,
					-2388390250285520126L,
					-6422967364480851165L,
					5065085760011952119L,
					5197844637653829595L,
					-6529173476898900397L,
					1967185771057017544L,
					-8136314520109158170L,
					8442088259732888672L,
					-8592255011485608747L,
					4343916281812148845L,
					-6762302223071512885L,
					-3919200210441693903L,
					8371595842678172539L,
					3470918392939223328L,
					-1543565427889545888L,
					7186045139431633251L,
					5237737832261378586L,
					8866733004970011509L,
					3702511752862506072L,
					5089404363358816562L,
					8511900702808336691L,
					-4744798991597059075L,
					-8521065280106740415L,
					9020140285227817514L,
					2229362688452757469L,
					-3444911095917228274L,
					7008364138946397801L,
					-2723120610209102873L,
					-8943360846330281151L,
					-2713388161760044792L,
					-3000459496866644179L,
					-8331050132095143535L,
					7982401696126409427L,
					265186556071442118L,
					-8208505974178098101L,
					-4155629701168718017L,
					-5730332567205771637L,
					7998536196225743464L,
					5424235454391666037L,
					5824994232277713575L,
					-9102551179301532043L,
					340283989710022074L,
					7087636488067236998L,
					-4526552502734776124L,
					-148577558529677031L,
					6517055289102300480L,
					6505158442227890970L,
					-3854682926033159801L,
					3315119801274326719L,
					-656670108433216792L,
					6493952958637584312L,
					2530532787437396250L,
					-276419276883682103L,
					8959769603882829541L,
					-8088745269962568546L,
					877020380905985443L,
					-2095055572733409008L,
					4939340796254531124L,
					7471403771760791519L,
					-7497559444795625571L,
					-7171968095915886884L,
					5996301028988864502L,
					6999809410541397090L,
					2792136672655800357L,
					-1107365156179595820L,
					-7293298615236897238L,
					7259106114068446591L,
					6823468622343855625L,
					-5267780414008909839L,
					2067832648931645679L,
					-6193345202489501760L,
					492313988822312281L,
					141475313142156335L,
					-179605324231937012L,
					6528492322047977920L,
					-5758474266234784464L);
				assert(pglobal_position_int_cov.lat() == 1890467551,
					999207708,
					1764256790,
					-1962467382,
					387434487,
					157392054,
					-2011425131,
					1234717271,
					1604476829,
					156130923,
					-1165024778,
					12693535,
					-1113713858,
					-486937652,
					1479922975,
					-2126490842,
					591793046,
					1129984646,
					856174081,
					-1494512941,
					1991829918,
					-1679962838,
					-989804655,
					-795965007,
					835197702,
					-1939999542,
					1723642541,
					-1271145067,
					-345399720,
					-872815093,
					872714407,
					1016033006,
					-1284729206,
					29916141,
					-1525964584,
					-774891627,
					-738770924,
					529074417,
					521167254,
					-5227915,
					1800575680,
					-282807516,
					-1359621859,
					-211069089,
					233696013,
					2009908891,
					-2096592113,
					-756520591,
					1074433634,
					-1160732926,
					-574316755,
					2083982361,
					-1702554257,
					511049385,
					1856645337,
					-1362199880,
					742723868,
					274646191,
					-1432647885,
					-1444372393,
					-1925939471,
					-1066774527,
					-1181743850,
					104746447,
					1561318041,
					-1691616800,
					2052658354,
					-703324705,
					-1068846425,
					-639371810,
					-1047082068,
					-1061669449,
					1944405043,
					337444886,
					-1897749426,
					-97834747,
					-1827733492,
					1884021516,
					1011613174,
					-1776965414,
					1959867992,
					-1516389120,
					-64669547,
					-1841999934,
					832678707,
					2126382269,
					-530914676,
					91010840,
					-1232113506,
					1899624437,
					-586312682,
					-989645481,
					785222044,
					-149412004,
					1089855801,
					-468858908,
					-1702549041,
					551690074,
					-1098330197,
					1760879753,
					-997852967,
					-1287353837,
					158843964,
					168074014,
					754563142,
					-757168865,
					1540716202,
					-2016635670,
					518059879,
					339374181,
					-699271229,
					-1853660531,
					162207803,
					-1184116998,
					-1932251108,
					-886457104,
					1443050920,
					25797703,
					1473189395,
					1908324510,
					-1007921268,
					1288135494,
					624664712,
					-1135062001,
					-1157129197,
					306604060,
					1370159165,
					1830686926,
					1658300874,
					1582129711,
					-1045061676,
					-426161485,
					1381295406,
					-1078186458,
					-2034020531,
					443901664,
					-1966040778,
					2106955488,
					-168146414,
					1936333525,
					-580699939,
					153636842,
					-197195484,
					1913323462,
					-848426123,
					22447823,
					411130669,
					-354473206,
					-2007633477,
					351558445,
					-226744721,
					1081860378,
					1333059187,
					1514561683,
					-825667777,
					-688442568,
					-1791448205,
					-217675359,
					1033675748,
					-671630565,
					-1381717303,
					1218886238,
					1851059884,
					-761913194,
					-93699096,
					703401852,
					678077972,
					-1490541983,
					-868341847,
					-1941279848,
					-2041334451,
					1835657153,
					866637050,
					-1472576495,
					1719439618,
					1851445379,
					1554566411,
					886276862,
					-118582998,
					-1518157539,
					1611374286,
					-1051903416,
					-1078165111,
					-250983705,
					1089841753,
					2136641713,
					201304599,
					-1687494715,
					-372527242,
					-643879972,
					807569445,
					1995167746,
					921769522,
					1202023648,
					-2065239706,
					-1334242764,
					-938549829,
					1500808010,
					-1414007914,
					1315522714,
					1793981697,
					-960520520,
					-1236732722,
					-422363754,
					1062716401,
					-670289718,
					2145195937,
					418453552,
					697510010,
					889803243,
					-2070278670,
					831440061,
					815277499,
					638909935,
					1170774309,
					1014514031,
					837644075,
					1373577829,
					1547750799,
					-1237967487,
					490788189,
					-1792211531,
					-1852003998,
					508667186,
					52588986,
					2072918553,
					-1584414334,
					1070173913,
					621166668,
					-820109519,
					1871041231,
					1279806080,
					1896686999,
					-1244575146,
					-1177751814,
					-1530776968,
					-334206872,
					-1950705649,
					857454639,
					-1514561605,
					-57846387,
					1929342052,
					1814680155,
					-1005398739,
					-570172956,
					903722575,
					-1160984379,
					-107967409,
					-665360369,
					-92502552,
					586502207,
					334564221,
					-358084260,
					324661476,
					984937275);
				assert(pglobal_position_int_cov.lon() == 38640791,
					1989594661,
					1670328152,
					1709289180,
					-2092777749,
					-430718050,
					-1750247293,
					1973390851,
					-943240523,
					1777542107,
					-215387892,
					135525050,
					1978379170,
					662694131,
					-497496470,
					323986672,
					405792564,
					1567686857,
					201198709,
					1913709526,
					786848009,
					-939924682,
					-679367422,
					-1457367583,
					860791678,
					595712855,
					-1997426137,
					-1470622379,
					-569283231,
					252047743,
					-627743364,
					-894609455,
					-1571878153,
					-1875701189,
					-1912679004,
					921140401,
					1082484702,
					1121116576,
					343714836,
					-569822981,
					30521896,
					-237548020,
					-421787098,
					368726081,
					-290064040,
					1463373986,
					-940450870,
					-2073301130,
					1484430217,
					-1762337215,
					-539933008,
					2087523190,
					1945305848,
					2060745944,
					-1834516578,
					971665735,
					1730173611,
					-801355751,
					24789481,
					-1986068447,
					-1979970530,
					-1220445713,
					-1411992431,
					-1052794659,
					-1327179037,
					-1272526414,
					-1785457182,
					588991350,
					-1663831313,
					277708783,
					1435142194,
					1173802064,
					-356265516,
					484181151,
					1956271099,
					-506981013,
					2044750023,
					1492660129,
					1636857186,
					-476100023,
					1200416675,
					36749704,
					-1980122652,
					633750861,
					-964849799,
					1266351840,
					-818578485,
					-1379457243,
					864616288,
					1438337925,
					538170551,
					1357497198,
					-1500112545,
					-1667819599,
					1765182169,
					1947721196,
					1213033032,
					-1504068393,
					253244539,
					-1235063680,
					1035521941,
					-1678493259,
					-59291434,
					347158883,
					-272978334,
					1101612456,
					1650825739,
					1762320593,
					1658301782,
					1235962358,
					-1333160513,
					-239771464,
					1056650433,
					1001380269,
					-223117783,
					-323620792,
					1832121981,
					-20639064,
					-1154301126,
					-582969556,
					478000132,
					1088889441,
					1645965801,
					-1686098259,
					1445427382,
					789472082,
					1722154150,
					-1380868959,
					1814791617,
					-718996085,
					546980135,
					-951310907,
					-1496916617,
					1847196201,
					2047523088,
					-1597683955,
					-1805102628,
					-1621569635,
					1789969963,
					-327733362,
					-254473191,
					-89513162,
					-339826136,
					-1472804869,
					1521905190,
					334744898,
					1809241612,
					1702651803,
					-1939962557,
					-372527008,
					-655966313,
					-888272974,
					-1822269322,
					-441513842,
					-1905686287,
					80951974,
					-952199509,
					1724439722,
					-1966326751,
					-885172510,
					-946309152,
					-152441059,
					-1055816547,
					701197194,
					614916195,
					673047980,
					224014565,
					-2133241679,
					-1870832807,
					-570622902,
					1319425812,
					1468208168,
					-566524565,
					-1419648004,
					-1108170310,
					-1411419970,
					793459286,
					430664454,
					-158227320,
					559898666,
					1545046869,
					-1040803621,
					-1801895939,
					211958679,
					-1782279976,
					-339014795,
					-27526994,
					897314714,
					861585581,
					1240941889,
					-2037052166,
					820939540,
					-1527014369,
					559953329,
					-1235681026,
					-3527493,
					-1066786868,
					503849261,
					885514069,
					579472315,
					335967152,
					-812252821,
					-1589893119,
					-1607174954,
					-1427816686,
					-608646393,
					415534585,
					-1169184027,
					639943390,
					-809635235,
					579306261,
					1420579193,
					-1827229772,
					-1953698816,
					-1276058926,
					1316573833,
					-1661058169,
					-72798769,
					1711570736,
					480310184,
					1762118160,
					-287150777,
					-1850112809,
					-1198601091,
					-304046937,
					-2072983384,
					-1522123511,
					-1149138172,
					1071739550,
					-613871561,
					-67328728,
					946163586,
					637587873,
					1023486089,
					666971990,
					-627291230,
					-1382718872,
					2112519022,
					1254023959,
					-589099860,
					925118984,
					1056630929,
					865411719,
					-230004929,
					-612404883,
					881672097,
					1083157471,
					33112655,
					451907276,
					999808490,
					-1939817341,
					1583714967,
					-819737705,
					921630885,
					104380511);
				assert(pglobal_position_int_cov.alt() == 871164336,
					1231009495,
					-942446394,
					1480633281,
					138333410,
					-160628405,
					76501944,
					-1882203490,
					803477615,
					1366337494,
					-1685239107,
					-1671345811,
					-125602022,
					1363542331,
					-1413563378,
					-1441216586,
					-1688832425,
					-1230084449,
					1050278347,
					651603717,
					1611161997,
					2135434964,
					-2035762223,
					-1640617149,
					-487760087,
					-681047252,
					-27844493,
					-649628999,
					630181542,
					-120440583,
					70828159,
					1250354663,
					-631394560,
					-525775234,
					1541927470,
					208872830,
					-732743862,
					1411700057,
					1046888854,
					-635907954,
					-1845431942,
					-1276805784,
					1338124657,
					-1478594217,
					804838114,
					1823561390,
					427990060,
					-395553835,
					-315383592,
					-460243236,
					-2104507130,
					2020636822,
					1114179765,
					-1137543954,
					-1657176852,
					1049019853,
					-1499756696,
					-851147056,
					-456054219,
					-1242080314,
					-1234349691,
					1482641777,
					-1549761283,
					2020447423,
					1334195443,
					1349392111,
					446093741,
					939231348,
					-1412883201,
					1037494863,
					1316351176,
					-838669816,
					1118724354,
					-938046291,
					2062671684,
					-1746098356,
					1323388130,
					-819823646,
					-451684553,
					-242948982,
					-1070584554,
					-311314274,
					-104650163,
					1925734203,
					-773513024,
					2017719752,
					-815267552,
					1903759060,
					-908772339,
					-1919905688,
					1324761420,
					332350606,
					859046920,
					-1048317723,
					-2116465844,
					-2110811517,
					-1548905088,
					1942471425,
					2046996978,
					-1911824223,
					1039531671,
					-290109862,
					-594788835,
					1588477135,
					2112124245,
					-1971723275,
					2064073719,
					795982119,
					-782908851,
					-1473329478,
					-1879803587,
					853861896,
					1320245471,
					-2109849159,
					800136448,
					-692998257,
					-1139292909,
					-643474734,
					1589847918,
					-997565430,
					-224079745,
					-2048566146,
					266156492,
					-1827015501,
					-359335312,
					-1928611534,
					1426441864,
					-1367521274,
					-1581234672,
					1337309237,
					-1961164750,
					-1819294938,
					-409969730,
					1147894730,
					238418908,
					966184470,
					718115931,
					1038806488,
					-405782791,
					-1173124419,
					1539610293,
					-398192146,
					-1028835423,
					-177205507,
					1179402376,
					1576985916,
					1739945556,
					-455693913,
					-236173791,
					-2098889707,
					-1759089186,
					1901601529,
					867518215,
					-11672300,
					1926552731,
					-1083908869,
					-1296530899,
					1418987524,
					-966401475,
					1094537048,
					-405981323,
					-1835620833,
					-1357218432,
					-1485513572,
					-2027177620,
					-1162867244,
					150330753,
					-1265187315,
					159923659,
					1257076128,
					1656623960,
					252864841,
					-2088470283,
					-1652521582,
					-893133076,
					1939256788,
					1324013550,
					1675111030,
					-2099044709,
					291800163,
					-34844989,
					-1867247139,
					1246815223,
					544265161,
					-503114417,
					-75117578,
					374419642,
					483538184,
					-902552031,
					429085656,
					-1899205542,
					15984455,
					110901149,
					791951474,
					896748168,
					-410930872,
					1743411420,
					1452377996,
					267841960,
					736111793,
					59278591,
					445461008,
					-1219260210,
					-252544525,
					-1123302458,
					854214529,
					-479275437,
					-295933181,
					96941426,
					-512041535,
					-180909004,
					-1601648517,
					61025757,
					-1761094675,
					-1679408757,
					-2121350093,
					-349057733,
					2104989446,
					-1842079816,
					-2112719181,
					1511741301,
					1046512223,
					605203077,
					1797528421,
					309769091,
					-228423185,
					-1704514378,
					2078579681,
					1441672178,
					1367277693,
					661849064,
					-1779313041,
					782410736,
					-126975255,
					-1155149276,
					1507719797,
					-1179684409,
					1760681755,
					-1682376304,
					-1513475272,
					-2042999552,
					1198830709,
					-1339246416,
					422698044,
					-941576491,
					172965477,
					2102417428,
					-307943869,
					1572024604,
					-1549604707,
					1738741298,
					114976749,
					1011393704,
					10956544,
					1870321424);
				assert(pglobal_position_int_cov.relative_alt() == 347925204,
					-755890185,
					909553192,
					315700334,
					792690840,
					597081204,
					-488861741,
					-288734504,
					-1549174425,
					1977333217,
					-503432151,
					-1722369784,
					1026110943,
					-605722138,
					1778718529,
					643637287,
					-1434763230,
					-16128693,
					1790865554,
					228494876,
					-137840423,
					-1731973008,
					-1160589516,
					-622713560,
					2005377514,
					378628114,
					2138084370,
					-434333188,
					936728555,
					1873075703,
					-810954726,
					1614603234,
					1493673790,
					-1005565784,
					1612753292,
					-791871855,
					-639088051,
					1395064530,
					2124504977,
					451885761,
					-1695315897,
					-203430862,
					1836794501,
					-1682775541,
					-818797787,
					488087828,
					-1269188240,
					561001855,
					814295585,
					1497517557,
					-1624099749,
					373859155,
					56138924,
					-1361089419,
					1935407095,
					-2129215835,
					-2141797899,
					2066018587,
					1417088609,
					-1171953765,
					352342468,
					1434290801,
					-591719878,
					-766801719,
					-1845772752,
					484931622,
					-297337057,
					1491776844,
					1898187772,
					1079850981,
					1804701990,
					1524832630,
					-1848623608,
					-1174887196,
					85015051,
					1314949186,
					-793077338,
					-1380635266,
					1049806350,
					-1460031324,
					-697585992,
					167360382,
					-1105945140,
					-489263828,
					592596602,
					-1716294932,
					-1103970842,
					-983383592,
					1486304125,
					1508744435,
					-1840232909,
					2092096974,
					-890790758,
					188819462,
					749539468,
					-190935841,
					-1690324596,
					17277987,
					998172747,
					2032544115,
					33986042,
					1725716654,
					900398327,
					-76892176,
					1322894504,
					-822967597,
					-1479252055,
					-519762440,
					1330396532,
					-929625408,
					1959993078,
					184028708,
					-1941166912,
					1318401688,
					-1645105763,
					-1549597231,
					-298924177,
					-1664778138,
					1669014454,
					-1947607895,
					1612034885,
					-2081986022,
					183314186,
					862929243,
					-2125338983,
					543237440,
					634723240,
					435603984,
					1148869879,
					-150067518,
					-2034235094,
					604017084,
					-1143709467,
					1351779423,
					-1455019668,
					214019383,
					400721925,
					-58859222,
					2000778311,
					183567194,
					397184057,
					849021494,
					-108347971,
					-2081939235,
					-1502324605,
					-377104782,
					-1306446016,
					663900240,
					-1105331629,
					100376942,
					-246124208,
					-1948985629,
					-1640643683,
					-1287450837,
					502462341,
					366101911,
					79689346,
					-694597415,
					-2099270839,
					-90173688,
					-1665115686,
					744748690,
					848064931,
					-467351616,
					-1522406339,
					-1987142988,
					813772185,
					-169580666,
					-1405254243,
					-962705947,
					1264116832,
					-1057140078,
					990239326,
					-814802756,
					2071401884,
					-531832061,
					574267308,
					265742935,
					-1233315833,
					1452376451,
					-1795354346,
					1082285191,
					-1335151316,
					-130245218,
					-292977890,
					447661457,
					-1186254386,
					-198536257,
					958396421,
					891402208,
					2037013785,
					645065376,
					2138560895,
					2059933749,
					1999715746,
					-1177856059,
					-203177375,
					1643996339,
					1883886204,
					408519827,
					-729574642,
					2085091273,
					-191244951,
					-900063121,
					40701325,
					1595894616,
					1806032308,
					-1388302321,
					-760290155,
					831865038,
					2066678949,
					-2133603622,
					995020204,
					1314955583,
					-159565778,
					1804608674,
					-1510631106,
					-71230847,
					-1824824143,
					-340441541,
					179093053,
					544597741,
					1072491285,
					1040793372,
					-1941438698,
					-1557464287,
					-377466093,
					-797108321,
					-975008415,
					-820550061,
					-1172703710,
					492819824,
					-953700824,
					-1010943297,
					1625039201,
					1910554423,
					364557190,
					1781781601,
					1255679592,
					467152031,
					757263645,
					-1674386783,
					1257083148,
					-663069870,
					484440117,
					589506429,
					-2047777083,
					413880172,
					762219671,
					1427623897,
					-209977436,
					-392413965,
					-2143881034,
					-1238523377,
					-404430892);
				assert(pglobal_position_int_cov.vx() == 3.1516041E38F,
					-3.1436394E38F,
					-2.3798592E38F,
					1.6439139E38F,
					2.0585311E38F,
					-1.844314E38F,
					3.454211E36F,
					2.5686676E38F,
					3.2441363E38F,
					2.8584742E38F,
					-1.5705573E38F,
					-1.9349108E38F,
					-2.4620963E38F,
					1.9263038E38F,
					-1.6301123E37F,
					-2.354283E38F,
					1.5418522E38F,
					-2.6753034E38F,
					-6.976387E37F,
					-8.331133E37F,
					-9.807221E37F,
					1.3222561E38F,
					-3.2269768E38F,
					-1.4742454E38F,
					-1.1091366E38F,
					1.1374808E38F,
					3.0432368E38F,
					-6.0257944E37F,
					-1.2978372E38F,
					-2.0455331E38F,
					-3.0485508E38F,
					1.8614317E38F,
					-4.205474E37F,
					-2.7965664E38F,
					-4.8038116E37F,
					-3.2360432E37F,
					-2.5868147E38F,
					-1.8540984E38F,
					-1.8622497E37F,
					2.251521E36F,
					1.9588725E38F,
					7.2686137E37F,
					-3.3152116E38F,
					-4.475741E37F,
					-2.93479E37F,
					-7.985644E37F,
					-3.3753954E38F,
					-9.530651E37F,
					1.8181349E38F,
					3.1653528E38F,
					-3.1707183E38F,
					3.3790186E38F,
					-1.4809848E38F,
					8.393874E37F,
					-2.0333705E37F,
					-3.2914434E38F,
					3.0685432E38F,
					4.5571415E37F,
					1.3155955E38F,
					2.5798436E38F,
					1.2276141E38F,
					2.412391E38F,
					3.3833039E38F,
					2.206459E38F,
					-2.0973654E38F,
					-2.1736565E38F,
					2.0124422E38F,
					-3.3634523E38F,
					-2.3639866E38F,
					-1.8933863E38F,
					-2.8892226E38F,
					-1.5303309E38F,
					2.963622E38F,
					8.45124E37F,
					-3.0732599E38F,
					-3.1902224E38F,
					-2.9204341E38F,
					2.9947712E38F,
					-1.0809587E38F,
					2.6472615E38F,
					1.198906E38F,
					-1.8420825E38F,
					2.0423238E38F,
					1.8664413E38F,
					-9.8307534E36F,
					2.317019E38F,
					1.5856623E38F,
					-1.6730565E38F,
					-1.2098739E38F,
					2.5292578E37F,
					7.7344E37F,
					7.723439E37F,
					2.1624574E38F,
					-2.4626618E37F,
					3.2208892E38F,
					3.1929772E38F,
					2.7017036E38F,
					-2.731251E38F,
					1.7981873E38F,
					2.3350497E38F,
					2.0705154E38F,
					-1.2553351E38F,
					2.2982853E37F,
					-1.6246629E38F,
					2.408443E37F,
					3.0795217E38F,
					3.0498049E38F,
					-2.5946207E35F,
					-1.1029913E38F,
					-2.2489994E38F,
					-1.4799973E38F,
					2.0684338E38F,
					-2.4402943E38F,
					2.9956636E38F,
					-3.1920562E38F,
					1.4160159E38F,
					-2.7601743E38F,
					2.4717728E38F,
					-3.1311615E38F,
					-5.698211E37F,
					2.9517052E38F,
					-2.0820751E38F,
					3.2111484E38F,
					-1.5939129E38F,
					2.4199624E38F,
					-1.2917872E38F,
					2.9178457E38F,
					-2.8621352E38F,
					2.4321169E38F,
					1.4394398E38F,
					-1.1782556E38F,
					-1.3103202E38F,
					1.2391114E38F,
					-5.452236E37F,
					-1.0323473E38F,
					5.9089525E37F,
					-1.6863543E38F,
					-2.0906895E38F,
					-6.773297E37F,
					-1.0768887E38F,
					-8.519498E37F,
					2.0277728E38F,
					-3.0217659E38F,
					-1.7162079E38F,
					3.1086967E38F,
					1.7022156E38F,
					-5.001518E37F,
					-2.7974801E38F,
					7.9423533E37F,
					-4.915105E37F,
					-4.898139E37F,
					9.228117E37F,
					-6.421358E36F,
					-5.372882E37F,
					3.1227455E38F,
					-2.186972E38F,
					2.9029511E38F,
					-1.7013602E38F,
					-1.4099549E38F,
					-1.7973391E38F,
					-6.9178624E37F,
					-2.995718E37F,
					1.0571452E38F,
					2.2829105E38F,
					1.6682873E38F,
					1.600907E38F,
					-3.148411E38F,
					3.4665047E37F,
					-1.8804457E38F,
					-1.916061E37F,
					-8.987211E37F,
					-4.0649308E37F,
					-1.7977766E38F,
					-1.7833576E38F,
					8.658661E37F,
					7.7928537E37F,
					-1.0699632E38F,
					-1.5418025E38F,
					2.4892336E38F,
					-7.1103314E36F,
					-2.7041117E37F,
					-1.2776819E38F,
					8.729092E37F,
					-1.5965002E38F,
					-1.9778797E38F,
					-3.678809E37F,
					2.4841715E38F,
					2.2357178E38F,
					-1.1980158E38F,
					2.3679447E37F,
					2.3846327E38F,
					-2.1272834E38F,
					1.6980223E38F,
					4.4555617E37F,
					-1.1016536E38F,
					-3.141864E38F,
					-3.1968412E38F,
					-1.6343335E38F,
					-2.01732E38F,
					-1.5738843E38F,
					-5.030261E37F,
					-2.0683612E38F,
					-1.9536808E38F,
					-7.3989054E37F,
					-8.3744416E37F,
					1.2493206E38F,
					-3.1928873E38F,
					2.4644495E38F,
					-3.070968E36F,
					-1.1396339E38F,
					-2.0372057E37F,
					1.2709502E38F,
					1.4705325E38F,
					2.1648298E38F,
					-3.2256037E38F,
					-4.7610213E37F,
					-3.0001945E38F,
					3.3400334E38F,
					1.7618017E38F,
					-7.8580687E37F,
					-8.2334824E37F,
					2.6313883E38F,
					3.0620112E38F,
					-2.9772957E38F,
					7.6281646E37F,
					3.0497457E38F,
					6.140844E37F,
					-2.0839374E35F,
					2.8731743E38F,
					1.1273021E38F,
					-2.9765587E37F,
					-4.821314E37F,
					-2.8184655E38F,
					-2.7196596E38F,
					-2.3448035E38F,
					-7.117783E37F,
					-9.997999E37F,
					-5.7977486E37F,
					2.4788826E37F,
					-2.9220352E38F,
					-1.444948E38F,
					2.6660556E37F,
					-2.1927258E38F,
					2.1695152E38F,
					2.1702933E38F,
					-1.8537006E37F,
					-2.0291046E38F,
					-8.690519E37F,
					9.649781E37F,
					8.344062E36F,
					-1.4270253E38F,
					-3.1798224E38F,
					-3.1263925E37F,
					-4.071805E37F,
					-5.084533E37F);
				assert(pglobal_position_int_cov.vy() == 1.6126749E38F,
					-1.5304287E38F,
					-1.2236218E38F,
					9.71002E37F,
					2.0527271E38F,
					-1.0624355E38F,
					-8.023552E37F,
					9.722598E37F,
					-9.250799E37F,
					-3.127823E38F,
					-6.929828E37F,
					-1.8125053E38F,
					-2.9197007E38F,
					-2.7191166E38F,
					-2.096176E38F,
					-3.3853818E38F,
					-1.1501357E38F,
					6.7824043E37F,
					1.5977136E38F,
					1.8983593E38F,
					-1.6304507E38F,
					-1.4903573E38F,
					4.4669923E37F,
					1.7623818E38F,
					-1.3709906E38F,
					2.6457874E38F,
					-3.1608363E38F,
					2.274167E38F,
					-2.4615779E38F,
					-9.133671E37F,
					3.730911E37F,
					1.7054022E38F,
					-6.2027026E37F,
					-9.736117E37F,
					-8.882558E37F,
					-1.4002199E38F,
					-2.659731E37F,
					8.52227E37F,
					3.3912158E38F,
					-1.2154917E38F,
					8.2948687E37F,
					3.0847636E38F,
					1.5690467E38F,
					4.2970465E37F,
					1.4172901E38F,
					-1.0749618E38F,
					1.420109E38F,
					2.5199002E38F,
					-6.1957326E37F,
					6.150751E37F,
					-1.6209699E38F,
					-2.1811046E38F,
					-3.25209E38F,
					-1.8352999E38F,
					-2.5176348E38F,
					-3.0900561E38F,
					-1.2252064E38F,
					-2.0061603E38F,
					2.518232E38F,
					-8.202768E37F,
					-2.9371998E38F,
					-7.468145E36F,
					-2.1860642E37F,
					-2.087067E38F,
					-1.293533E38F,
					1.6664217E38F,
					-2.1690013E38F,
					-2.476466E38F,
					-3.3208418E38F,
					6.5249237E37F,
					8.4351925E37F,
					-2.0597116E38F,
					1.782913E38F,
					-1.1395577E38F,
					8.329986E37F,
					1.9838568E38F,
					-8.120557E37F,
					3.0052953E38F,
					2.6918112E38F,
					1.7580959E37F,
					-6.1345213E37F,
					-1.8611027E38F,
					2.2435838E38F,
					6.935281E37F,
					1.3662399E38F,
					-1.0844983E38F,
					4.6595216E37F,
					-2.540723E38F,
					-2.9577765E38F,
					-2.0919369E38F,
					-1.1998129E38F,
					-9.908242E37F,
					-2.2639696E38F,
					-3.0549152E37F,
					-3.1360027E38F,
					-2.4527471E38F,
					1.9625557E37F,
					8.2065824E37F,
					2.0063214E36F,
					1.6116698E38F,
					-1.5810639E37F,
					-1.0939338E37F,
					9.984964E37F,
					2.7174839E38F,
					-3.3614737E38F,
					-4.4951935E37F,
					3.2900243E38F,
					2.3996685E38F,
					-3.4073046E37F,
					2.2647316E38F,
					-2.2795E38F,
					6.290022E37F,
					-3.0212176E38F,
					-4.747127E37F,
					5.9281873E37F,
					3.2106113E38F,
					5.0393984E37F,
					-1.7644869E38F,
					2.9691968E36F,
					5.807077E37F,
					-9.9810625E36F,
					6.489298E37F,
					-2.0795891E38F,
					-2.7402908E38F,
					-2.0812018E38F,
					3.2341789E38F,
					1.9346265E38F,
					7.8801776E37F,
					1.669308E38F,
					-7.452818E37F,
					-1.4151755E38F,
					-5.1252336E37F,
					-2.157031E37F,
					1.8769928E38F,
					2.8162395E38F,
					1.1923582E38F,
					-2.2300345E38F,
					-3.1892544E38F,
					-1.3244888E37F,
					2.6754208E38F,
					9.876409E37F,
					2.6574312E37F,
					2.2582727E38F,
					-2.9903057E36F,
					-1.625854E38F,
					2.946847E38F,
					-7.808305E36F,
					3.3232294E38F,
					1.2207805E38F,
					3.159138E38F,
					-3.7498672E37F,
					-5.8932696E37F,
					-8.893188E37F,
					1.8998146E38F,
					-6.1453516E37F,
					1.6217892E38F,
					-1.6529308E38F,
					-2.0633032E38F,
					8.175391E37F,
					-1.854394E38F,
					-3.1185272E37F,
					3.3774122E38F,
					2.7427282E38F,
					-1.6222927E38F,
					1.0236705E38F,
					-6.250365E37F,
					-6.930722E37F,
					3.1621E38F,
					1.3508552E38F,
					-1.3900102E38F,
					-1.992511E38F,
					-8.2069566E37F,
					-1.1741435E37F,
					8.021886E37F,
					1.7587293E38F,
					1.507081E38F,
					2.2766713E38F,
					4.741054E37F,
					2.1917448E38F,
					-2.0149899E38F,
					2.2356E37F,
					3.2886017E38F,
					-2.1972537E38F,
					-4.4018872E36F,
					-1.3537894E38F,
					1.0616251E38F,
					1.9327867E38F,
					2.7367063E38F,
					-1.1241396E38F,
					1.1966259E37F,
					-4.656118E37F,
					-1.7522477E38F,
					1.4390686E38F,
					-2.183823E38F,
					-4.357928E37F,
					1.583708E38F,
					-3.8465965E37F,
					3.3340985E38F,
					-3.9627034E37F,
					-3.0379693E38F,
					-2.982635E38F,
					2.3955832E38F,
					1.2761726E38F,
					2.1294045E38F,
					-3.832035E37F,
					1.8670589E38F,
					1.778147E38F,
					-2.0377583E38F,
					3.1190675E38F,
					-2.001857E38F,
					-2.1127784E38F,
					8.812125E37F,
					-7.80474E37F,
					-3.0239367E38F,
					2.9904813E38F,
					-1.3237222E36F,
					1.2095358E38F,
					1.8599099E37F,
					8.2390494E37F,
					-3.2429792E38F,
					-1.3132303E38F,
					3.113663E38F,
					1.2648562E38F,
					1.9655217E38F,
					5.6376114E37F,
					-1.2652854E38F,
					-2.4270019E38F,
					6.153485E37F,
					2.1068213E38F,
					-2.4557804E38F,
					1.2808312E38F,
					-1.9387292E38F,
					-3.2642214E38F,
					1.6845918E38F,
					1.7472235E38F,
					2.8645232E38F,
					-2.2345303E38F,
					-1.1591383E38F,
					-6.936116E37F,
					-1.3238774E38F,
					-2.1907663E38F,
					-1.0701905E38F,
					3.3249337E38F,
					1.1473217E38F,
					-3.152278E38F,
					2.1943154E38F,
					2.9217229E38F,
					-8.786369E37F,
					-1.8319973E38F,
					3.0435498E38F,
					8.270706E37F,
					-2.8514202E38F,
					2.3760865E38F,
					1.5152558E37F,
					1.3253936E38F);
				assert(pglobal_position_int_cov.vz() == 7.1832324E37F,
					5.1573016E37F,
					-1.715477E37F,
					1.3972659E38F,
					-3.0221967E38F,
					-2.8847783E38F,
					-3.667349E37F,
					2.19168E38F,
					2.0518838E38F,
					-4.91358E37F,
					-1.0934936E38F,
					-2.0079342E37F,
					-2.0297464E37F,
					-1.839698E38F,
					-5.7225085E37F,
					1.4893624E38F,
					-2.402921E38F,
					2.9714499E38F,
					-5.711696E37F,
					-1.921312E38F,
					-6.1543194E37F,
					-1.3854868E38F,
					1.5703657E38F,
					-2.5894538E38F,
					1.3321292E38F,
					-3.2040536E38F,
					3.252957E38F,
					1.0927101E38F,
					-1.2156457E38F,
					1.3841809E38F,
					-1.5784964E38F,
					3.2447654E37F,
					-2.2020618E38F,
					2.486502E38F,
					1.2713673E38F,
					-6.0998505E37F,
					-2.1417969E38F,
					2.6162693E37F,
					-2.1113818E38F,
					1.9180862E38F,
					2.8557574E38F,
					-3.3091232E38F,
					-2.5386202E38F,
					-2.9290838E38F,
					2.6210692E38F,
					2.911232E38F,
					1.0057644E38F,
					-3.129955E38F,
					3.0614074E38F,
					-9.503026E37F,
					1.2884962E38F,
					3.170925E38F,
					-2.6774916E38F,
					2.4850247E37F,
					-9.667355E36F,
					-2.2358335E38F,
					2.8858814E38F,
					-8.885817E37F,
					-2.458532E38F,
					3.28843E38F,
					-1.3188454E38F,
					-2.6095665E37F,
					2.0920348E38F,
					-2.7648188E38F,
					-1.8289876E38F,
					-1.502968E38F,
					2.203041E38F,
					-4.487084E37F,
					-3.0237227E38F,
					-1.0697179E38F,
					9.727236E37F,
					-2.7827584E38F,
					-8.239158E37F,
					2.2213052E38F,
					1.512094E38F,
					-3.0157343E38F,
					2.3531763E38F,
					-3.0866982E38F,
					1.2324273E38F,
					2.3281831E38F,
					2.176573E38F,
					1.5101202E38F,
					-1.0190604E38F,
					2.4542294E38F,
					-3.0808708E38F,
					1.8351814E38F,
					-1.4735724E38F,
					6.282577E37F,
					-9.340709E37F,
					-9.8214265E35F,
					2.35396E38F,
					3.2128477E38F,
					2.9067198E38F,
					-1.7783576E38F,
					3.0187E38F,
					-3.037267E38F,
					1.5470764E38F,
					-2.624426E38F,
					-1.6068307E38F,
					-9.117652E37F,
					-1.1781871E38F,
					-2.5268292E38F,
					-1.46785E38F,
					-1.0301249E38F,
					2.6991535E38F,
					3.2343365E38F,
					1.8858836E38F,
					2.4481931E38F,
					-5.4731753E37F,
					2.3570616E38F,
					-2.2057394E38F,
					-2.1116576E38F,
					-2.1094562E38F,
					2.408908E36F,
					1.4493292E38F,
					3.0516621E38F,
					-3.126735E38F,
					-1.1438525E38F,
					2.5782976E37F,
					1.9382481E38F,
					-1.5149596E38F,
					-6.150019E37F,
					1.8297871E38F,
					9.267346E37F,
					-1.1396718E38F,
					3.1346174E38F,
					1.1388041E38F,
					2.671603E38F,
					1.3857746E38F,
					-4.878725E37F,
					-2.7180867E38F,
					1.8411524E38F,
					-3.338857E38F,
					-5.415052E37F,
					2.927818E38F,
					7.1099607E37F,
					-3.2769135E38F,
					-1.9131973E38F,
					3.2186403E38F,
					-1.4264349E38F,
					-6.9095253E37F,
					-1.6966427E38F,
					2.055463E38F,
					3.0768456E38F,
					3.1152714E38F,
					2.6263852E38F,
					-5.481857E37F,
					2.0040913E38F,
					1.9982143E38F,
					-1.5468901E38F,
					-3.2490455E38F,
					-2.1691457E38F,
					2.526924E38F,
					2.731794E38F,
					-6.0048117E37F,
					-1.3886417E38F,
					-1.9643268E38F,
					-1.4237573E38F,
					2.8611219E38F,
					8.485713E37F,
					-2.9266266E38F,
					-1.2227937E38F,
					3.0264284E38F,
					-2.3468523E38F,
					-2.4514172E38F,
					2.621925E37F,
					1.0701853E38F,
					-2.9928257E38F,
					-6.031212E37F,
					7.4088924E37F,
					1.508028E38F,
					-3.1645362E38F,
					-4.410754E37F,
					2.4670564E38F,
					1.8140352E38F,
					5.1990134E37F,
					-1.2292873E38F,
					-2.4536886E38F,
					2.7938702E37F,
					9.407251E37F,
					1.6032976E38F,
					2.5201184E38F,
					2.9978777E38F,
					2.3849576E38F,
					8.943507E35F,
					1.8610318E38F,
					2.0640512E38F,
					4.4010583E37F,
					3.015487E38F,
					2.4968668E38F,
					-2.3825266E38F,
					1.725169E38F,
					-1.926094E38F,
					-7.38629E37F,
					-1.6143751E38F,
					2.5289685E37F,
					-8.808321E37F,
					-4.453093E35F,
					1.6171216E38F,
					1.2744783E37F,
					5.944869E37F,
					-9.1478776E36F,
					-3.3194327E38F,
					2.1930935E38F,
					3.2019862E38F,
					1.5082556E38F,
					-1.0724195E38F,
					-2.0549208E38F,
					2.8713247E38F,
					-1.1182843E38F,
					1.1986151E38F,
					-1.7454198E38F,
					2.7456792E37F,
					2.8654222E38F,
					2.1464982E38F,
					-1.6399407E38F,
					3.1415333E38F,
					-3.0364493E38F,
					5.746276E37F,
					8.107911E37F,
					-2.0043132E38F,
					-1.5204593E38F,
					-3.094365E38F,
					1.0150409E38F,
					7.910781E37F,
					-2.3572855E38F,
					3.4012493E38F,
					1.3846436E37F,
					1.4143308E38F,
					1.3528338E38F,
					-1.0244268E38F,
					-1.611209E38F,
					-3.3017664E38F,
					5.810479E37F,
					3.1368057E38F,
					2.3334945E38F,
					-3.554588E37F,
					-2.5827823E38F,
					3.6201548E37F,
					-2.5230638E38F,
					2.2966456E38F,
					-1.9829138E38F,
					2.5765455E38F,
					-2.583103E38F,
					3.2761762E38F,
					1.676432E38F,
					3.358002E38F,
					2.882226E38F,
					1.3373706E38F,
					-3.1443683E37F,
					-1.1013796E38F,
					6.1663576E37F,
					-1.7296389E38F,
					1.9385118E38F,
					-1.5791954E38F);
				{

					const float exemplary[] = { 2.0356063E38F,
											   -3.2030997E38F,
											   2.5345749E38F,
											   -9.51462E37F,
											   1.4992127E38F,
											   -6.769622E37F,
											   2.106287E38F,
											   -2.2420372E38F,
											   2.8574238E38F,
											   2.144839E38F,
											   1.4545057E37F,
											   -7.4422844E37F,
											   2.3822487E38F,
											   -2.1113704E38F,
											   2.7527053E38F,
											   -2.3662648E38F,
											   3.2877504E38F,
											   5.0694103E37F,
											   -2.5750929E38F,
											   4.954687E37F,
											   6.071344E37F,
											   3.3259971E38F,
											   -2.4157719E38F,
											   2.5661564E38F,
											   -2.175578E38F,
											   1.8224623E38F,
											   2.4321116E38F,
											   1.4361752E37F,
											   -2.8446806E38F,
											   -2.8992408E38F,
											   -2.6716298E38F,
											   -3.026122E37F,
											   2.014743E38F,
											   -7.107764E37F,
											   3.7613133E37F,
											   -3.218195E38F,
											   -1.897258E38F,
											   8.0676894E37F,
											   -2.0537289E38F,
											   1.5265593E38F,
											   -9.831308E37F,
											   2.6535915E38F,
											   2.7742045E38F,
											   -4.78559E36F,
											   -1.9729846E38F,
											   -2.7293298E38F,
											   4.720001E37F,
											   -5.5320227E37F,
											   2.863926E38F,
											   -1.3638225E38F,
											   -2.5257145E37F,
											   -1.3739651E38F,
											   -3.0254003E38F,
											   -4.7687266E37F,
											   1.986613E38F,
											   -8.78755E37F,
											   -2.6382312E38F,
											   -2.1894026E38F,
											   3.1246693E38F,
											   2.7737256E38F,
											   -2.183557E38F,
											   -3.9776703E37F,
											   -1.8644453E38F,
											   2.1776775E38F,
											   3.10215E38F,
											   1.8370075E38F,
											   1.8671994E38F,
											   2.512298E38F,
											   -9.802448E37F,
											   1.9277877E38F,
											   2.6448268E38F,
											   -1.0973259E38F,
											   2.4354207E38F,
											   -2.7665795E38F,
											   3.201412E38F,
											   2.1628717E38F,
											   -1.5438907E38F,
											   -6.5819274E37F,
											   1.2377463E37F,
											   9.405099E36F,
											   3.2515808E38F,
											   -1.6923839E38F,
											   -3.1505622E38F,
											   -3.6194817E37F,
											   -3.1495696E38F,
											   -1.910849E38F,
											   1.4490032E38F,
											   5.3890976E37F,
											   2.4885961E37F,
											   3.5333867E37F,
											   2.737149E38F,
											   1.3100105E38F,
											   3.3953415E38F,
											   -3.1155637E38F,
											   -9.753471E37F,
											   -2.8728766E37F,
											   1.7678975E37F,
											   9.347406E37F,
											   1.7073076E37F,
											   -3.2901813E38F,
											   -7.2023683E37F,
											   -2.516379E37F,
											   -1.6644319E38F,
											   1.0418864E38F,
											   2.2507858E38F,
											   -1.6955688E38F,
											   -2.4578102E38F,
											   2.7699105E38F,
											   2.140867E37F,
											   1.750152E38F,
											   1.3889917E38F,
											   -2.0910708E38F,
											   -1.0910872E38F,
											   -1.7199289E38F,
											   2.7425392E38F,
											   2.9473136E38F,
											   1.4078929E38F,
											   3.2007409E38F,
											   -1.8540112E38F,
											   -1.5348214E36F,
											   -9.762196E37F,
											   -6.2535744E37F,
											   -2.924854E38F,
											   -3.2199248E38F,
											   9.422357E36F,
											   4.0059085E37F,
											   3.2977715E38F,
											   -3.6409045E37F,
											   2.6390788E38F,
											   -1.7451212E38F,
											   -2.54896E38F,
											   -1.7362306E38F,
											   1.5620839E37F,
											   -9.442658E37F,
											   3.2957413E38F,
											   2.2694446E38F,
											   3.246609E38F,
											   -9.581942E37F,
											   2.0313452E38F,
											   -3.2996876E38F,
											   3.1937392E38F,
											   -2.8623914E38F,
											   -2.688608E38F,
											   -2.9315233E38F,
											   -9.940855E37F,
											   -2.11502E38F,
											   5.6423924E37F,
											   -2.2723947E38F,
											   2.6537963E38F,
											   3.35156E37F,
											   -1.541066E38F,
											   4.35752E36F,
											   -9.633394E37F,
											   -2.4367396E37F,
											   -8.806887E37F,
											   -1.1420668E38F,
											   1.975074E37F,
											   1.9793871E38F,
											   -3.2234103E38F,
											   2.169402E38F,
											   4.1705408E37F,
											   -3.3825544E38F,
											   -1.4935706E38F,
											   -1.3594385E38F,
											   -2.282433E38F,
											   -5.2332476E37F,
											   1.0502253E38F,
											   -2.6107335E38F,
											   1.3663176E38F,
											   2.925423E38F,
											   -1.6124321E38F,
											   -1.6076631E38F,
											   -2.9013462E38F,
											   -1.0304616E38F,
											   -5.729291E37F,
											   3.262881E38F,
											   3.942564E37F,
											   -2.5846006E38F,
											   1.508306E38F,
											   7.1871667E37F,
											   -3.2154106E38F,
											   6.477342E37F,
											   2.5587511E38F,
											   2.2339592E38F,
											   3.0652781E38F,
											   2.567916E38F,
											   2.2803387E38F,
											   1.3821355E38F,
											   2.2537132E38F,
											   5.401798E36F,
											   3.2766837E38F,
											   3.4951984E37F,
											   -5.598033E37F,
											   -5.4355277E35F,
											   2.7811948E38F,
											   -2.12239E38F,
											   1.3479997E38F,
											   -9.794631E37F,
											   -6.928597E37F,
											   2.7958105E38F,
											   -2.5528266E38F,
											   -2.1249582E38F,
											   -1.1725305E38F,
											   2.591414E38F,
											   8.527446E37F,
											   2.4465476E38F,
											   -2.798834E38F,
											   -3.0171368E38F,
											   2.1417874E38F,
											   -4.4435235E37F,
											   -1.2729341E38F,
											   2.1133409E38F,
											   2.3884955E38F,
											   2.5236664E38F,
											   2.3467375E38F,
											   -3.0773092E38F,
											   2.684137E38F,
											   -3.3441765E38F,
											   2.8871572E38F,
											   1.6006482E38F,
											   8.076581E37F,
											   8.2604976E37F,
											   -1.1674401E38F,
											   3.3033387E38F,
											   3.1422803E38F,
											   5.5782376E37F,
											   1.1953042E38F,
											   1.2132288E38F,
											   -1.5078028E38F,
											   2.6091497E37F,
											   -1.888648E38F,
											   -1.5178316E38F,
											   -1.9318472E38F,
											   2.6259473E37F,
											   -1.0866675E38F,
											   1.7589325E38F,
											   -9.237179E37F,
											   -3.9575993E37F,
											   -1.4985815E38F,
											   2.9374432E38F,
											   1.1461361E38F,
											   5.5978563E37F,
											   1.1689428E38F,
											   -2.171488E38F,
											   2.1142587E38F,
											   1.612861E38F,
											   -3.144717E38F,
											   -2.6316708E37F,
											   -7.3749174E37F,
											   8.53468E37F,
											   -6.564224E37F,
											   1.4586139E38F,
											   2.8018064E38F,
											   1.3971935E37F,
											   1.4946562E38F };
					const auto  sample = pglobal_position_int_cov.covariance();

					for (size_t index = 0; index < com::company::demo::GLOBAL_POSITION_INT_COV::covariance_::len; index++)
						assert(sample.get(index) == exemplary[index]);
				}

				const auto estimator_type = pglobal_position_int_cov.estimator_type();
				assert(estimator_type.IS_EXISTS);
				{
					auto fld = estimator_type.CASE.EXISTS;

					for (auto item = pglobal_position_int_cov.estimator_type(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VIO,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_VISION,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_GPS_INS,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE,
						MAV_ESTIMATOR_TYPE::MAV_ESTIMATOR_TYPE_NAIVE), false;);

				}

				printf("GLOBAL_POSITION_INT_COV \n");
			}

			void fill(const com::company::demo::BUTTON_CHANGE& pbutton_change) {

				pbutton_change.time_boot_ms(-787846705,
					-399178347,
					-971739223,
					-816139748,
					-1167392811,
					2117669129,
					-32549916,
					1606064973,
					93356334,
					835810115,
					-209037925,
					-29518322,
					388172210,
					-448125532,
					1221480594,
					1925396176,
					830732108,
					182394105,
					-1129373136,
					-1671411139,
					1325577167,
					1709425966,
					1998866178,
					21244768,
					2127792538,
					-734546932,
					240268087,
					1258071940,
					-360811278,
					872797947,
					-993505817,
					-646519617,
					901914119,
					-416496325,
					-1603783606,
					-145253734,
					1408770024,
					335859691,
					1087132006,
					356069685,
					679917721,
					-1006519359,
					-1662230070,
					-1077117687,
					-1223758673,
					-1662663442,
					-954583236,
					1113047608,
					608852282,
					1724443519,
					-990777921,
					522345056,
					-499006291,
					-1197070717,
					-646212774,
					1028915256,
					1151506975,
					955279447,
					-194995302,
					479921198,
					1060340900,
					-1011147075,
					-1772617409,
					-458324549,
					1059351350,
					-563759915,
					1173889564,
					2048558231,
					-1024824093,
					1132675906,
					1786015808,
					2003956657,
					1990533573,
					1152484302,
					1583594552,
					994598673,
					-975256222,
					797908921,
					-1005987717,
					1764736704,
					-1080829723,
					1631661002,
					-1973952031,
					-668260891,
					651443352,
					1568510488,
					-1560331753,
					-1720057993,
					1838884968,
					-247288170,
					-352438773,
					-1846717902,
					-1895804406,
					-145656119,
					1356995200,
					-37830929,
					-2051789528,
					-1271254659,
					1077707426,
					-1366895124,
					-1893769703,
					-919947312,
					-507978554,
					164818967,
					-1535623096,
					788793510,
					160517865,
					551140534,
					-724574917,
					-544148664,
					-205539409,
					1499258091,
					618161966,
					531982629,
					535797867,
					244515306,
					-108029000,
					-571779743,
					988720286,
					-1051918219,
					1526366882,
					1127290319,
					-849758549,
					-686568805,
					-2007665853,
					2017909216,
					761560909,
					582248281,
					-1671746175,
					1458649884,
					95870193,
					1250963926,
					-838155180,
					39730788,
					-1477293701,
					607061380,
					1849691174,
					-801062847,
					1330225733,
					958518103,
					-2025541480,
					-1193417907,
					762640162,
					-565274110,
					1686137961,
					-805110888,
					1278394402,
					1464197616,
					-301371824,
					-1877495467,
					1518440555,
					-659391494,
					-516829875,
					-368398938,
					64512649,
					-440779397,
					-1410580477,
					-761758708,
					-1415931157,
					-1469865011,
					734501626,
					-157555356,
					489758086,
					-1502369510,
					-2114621337,
					-1899266597,
					685121703,
					641168724,
					380446913,
					742709037,
					1917021905,
					219624555,
					2050113362,
					-1263191513,
					963792255,
					-1627201475,
					606490882,
					-236005621,
					-1119829371,
					813075532,
					1708889167,
					-818776828,
					1955363614,
					1249227632,
					-319903410,
					-1064733351,
					2021780392,
					-900673401,
					149457571,
					1815359386,
					1226675408,
					246660715,
					-784275963,
					-674780664,
					1331140626,
					1293692848,
					361962038,
					-670829414,
					-1147940156,
					953912351,
					-1072171811,
					-476696058,
					-1418453042,
					-2118148176,
					-664687073,
					-687574355,
					999859576,
					-695092257,
					-909884159,
					-2045403132,
					63210670,
					-1714072076,
					457858222,
					-400138779,
					526260891,
					2036415037,
					-1530345146,
					1309408333,
					-755201999,
					188226872,
					1250626755,
					-2080399293,
					-1447853532,
					1591101141,
					1049785950,
					-706286059,
					768909381,
					-1479267546,
					623989551,
					-1871173373,
					1573195514,
					-1669079738,
					-392656939,
					-481969592,
					1632989685,
					-1182277432,
					1557885205,
					-445296712,
					100838979,
					1651905286,
					450164561,
					-181347943,
					-1467293087,
					-922528778,
					605048630,
					1396041036,
					-289108366,
					-1512300045,
					-2075258445,
					-2002632106,
					902797989,
					-1085769688,
					900300136,
					-635838108,
					-1367924840);
				pbutton_change.last_change_ms(-677106306,
					1128840738,
					-357821953,
					1510591783,
					344078241,
					-1344326000,
					-1836582104,
					254797795,
					335766950,
					328450356,
					-1864165052,
					1179508850,
					1643227920,
					-1962978132,
					-1308404099,
					711475850,
					-634344430,
					757674991,
					1664241904,
					-298662269,
					-900893481,
					-657671915,
					-458830525,
					-2021321083,
					-288395983,
					1004850936,
					-905392154,
					-112161656,
					-1629217515,
					1243807202,
					-1244541525,
					370721778,
					1421011536,
					165513381,
					-247946175,
					-1925176596,
					1517737918,
					1778404995,
					-1131291384,
					-1111886024,
					593553081,
					350409815,
					1185518318,
					-530937417,
					-1263887939,
					-222166162,
					-91997988,
					-627093011,
					2116693455,
					1928785890,
					387463200,
					-593522730,
					1289950368,
					1765002960,
					2082223423,
					-2119017116,
					-1528368295,
					1732536306,
					103507771,
					1103267477,
					482027759,
					-317366308,
					383456444,
					548167565,
					700121978,
					-1292237352,
					935327049,
					-1142311016,
					-2043764070,
					-2035398655,
					1617611177,
					-1429175803,
					-1127988623,
					-318765970,
					1545449288,
					-1048672239,
					-2083567488,
					-1686152507,
					968347336,
					813881052,
					-1278141823,
					136152866,
					-706100664,
					-251499538,
					-1876383470,
					-89684942,
					287770387,
					1700551925,
					-159527239,
					1502762290,
					1300477649,
					-183424044,
					-2096894727,
					268250545,
					-2092967336,
					-929073423,
					-1836149337,
					766092205,
					-841219090,
					1599089747,
					-2115676113,
					-125829790,
					2059679209,
					245241632,
					-402204182,
					247404478,
					344399478,
					-1169665040,
					2042084081,
					1550931486,
					-957635290,
					1729093608,
					1341488839,
					208550575,
					1952246859,
					501770662,
					-196559069,
					168369935,
					1731813706,
					1749330579,
					-2124083344,
					-342646143,
					306210540,
					-1696947637,
					2112932162,
					-1920375672,
					885397789,
					1686760213,
					2124249658,
					687256389,
					400221312,
					374319137,
					1244788886,
					-660475697,
					-579751199,
					-1381792064,
					31178395,
					1913224250,
					-959781637,
					-810646386,
					946241844,
					114769140,
					-849420977,
					269598840,
					-1095659477,
					141139307,
					1882769544,
					-1468770832,
					1050112406,
					522285377,
					-114298138,
					1155802839,
					-1459585892,
					1460340341,
					97828851,
					1439433712,
					582227027,
					1072541038,
					2011961742,
					395315667,
					922593684,
					-1409420790,
					1885800567,
					-294357265,
					-1873451876,
					1173032180,
					961068658,
					1955469163,
					-301278218,
					1994412032,
					-12862222,
					1697512377,
					591377919,
					-1636422530,
					-1724965943,
					-80974612,
					-715558209,
					2001267391,
					1130900636,
					-2064821441,
					1755016951,
					1808483662,
					-2020578164,
					1154299613,
					-1721861255,
					2108051561,
					1141558964,
					-886166323,
					2010410898,
					-983235790,
					-1872653276,
					1819425000,
					267307505,
					-188308494,
					-1942401964,
					-1259386464,
					-1121280093,
					-1649381226,
					-514687413,
					968666948,
					-2120505717,
					-1274762771,
					2030269896,
					-1825494488,
					-609651511,
					-1994264058,
					-856231944,
					-1767506618,
					234240222,
					-1359126294,
					1124268816,
					1755867819,
					1630115917,
					1095597798,
					41657334,
					-584087763,
					-1099754029,
					86611404,
					-2128247331,
					-69260723,
					-862322253,
					287090027,
					2093867846,
					-845917055,
					361602290,
					255837872,
					-245615357,
					-1652668513,
					2141750381,
					155238338,
					497585454,
					-234660221,
					1328672721,
					1450128786,
					-1184580172,
					1364515108,
					1670218942,
					487306222,
					658737419,
					1195382655,
					-339384534,
					1968598002,
					1691317384,
					-1760988598,
					555404292,
					1441525039,
					645168491,
					-1475551727,
					-1671199879,
					64819183,
					1994449910,
					3491342,
					1588655670,
					1237117041,
					718315774);
				pbutton_change.state(52,
					61,
					90,
					-90,
					-53,
					82,
					111,
					53,
					-33,
					-39,
					-72,
					-50,
					36,
					-12,
					-26,
					-22,
					3,
					-103,
					51,
					-124,
					48,
					-13,
					93,
					57,
					30,
					-121,
					44,
					-92,
					-111,
					95,
					-96,
					-20,
					-119,
					78,
					-64,
					-123,
					-90,
					108,
					124,
					-49,
					-8,
					-88,
					5,
					-50,
					90,
					29,
					-107,
					9,
					-94,
					6,
					43,
					-83,
					-54,
					-47,
					8,
					-36,
					-109,
					89,
					103,
					100,
					-84,
					-77,
					-80,
					80,
					-47,
					-48,
					-29,
					61,
					4,
					26,
					109,
					58,
					-32,
					125,
					-127,
					74,
					75,
					20,
					-117,
					20,
					21,
					-80,
					-72,
					99,
					0,
					118,
					40,
					115,
					-95,
					20,
					39,
					17,
					41,
					17,
					98,
					-61,
					-97,
					87,
					-18,
					-74,
					102,
					123,
					-2,
					-98,
					71,
					124,
					-108,
					-69,
					115,
					123,
					-28,
					30,
					30,
					35,
					29,
					-105,
					-87,
					97,
					31,
					-107,
					-29,
					-71,
					47,
					-91,
					17,
					41,
					9,
					-17,
					58,
					75,
					-48,
					33,
					-125,
					127,
					-10,
					55,
					-36,
					-38,
					-40,
					-52,
					41,
					-81,
					104,
					-91,
					35,
					-45,
					76,
					60,
					121,
					77,
					77,
					-18,
					-49,
					-24,
					-28,
					127,
					-49,
					32,
					117,
					-109,
					31,
					20,
					-30,
					-58,
					75,
					108,
					-20,
					-36,
					-38,
					-71,
					17,
					91,
					123,
					-113,
					58,
					-124,
					86,
					-28,
					44,
					-115,
					39,
					49,
					1,
					-116,
					86,
					-39,
					1,
					-52,
					-13,
					61,
					-37,
					-16,
					-36,
					63,
					20,
					112,
					34,
					-94,
					-85,
					-97,
					45,
					39,
					97,
					-4,
					-95,
					106,
					-19,
					80,
					30,
					-46,
					-25,
					-123,
					15,
					-101,
					-98,
					-86,
					-66,
					-118,
					24,
					9,
					-40,
					-8,
					-103,
					-27,
					-119,
					79,
					-5,
					92,
					13,
					71,
					-33,
					60,
					-25,
					36,
					52,
					28,
					-75,
					-63,
					79,
					120,
					108,
					-100,
					83,
					55,
					36,
					-52,
					119,
					12,
					66,
					50,
					-47,
					106,
					-68,
					-118,
					-25);
			}

			void on_BUTTON_CHANGE(const com::company::demo::BUTTON_CHANGE& pbutton_change) {
				assert(pbutton_change.time_boot_ms() == -787846705,
					-399178347,
					-971739223,
					-816139748,
					-1167392811,
					2117669129,
					-32549916,
					1606064973,
					93356334,
					835810115,
					-209037925,
					-29518322,
					388172210,
					-448125532,
					1221480594,
					1925396176,
					830732108,
					182394105,
					-1129373136,
					-1671411139,
					1325577167,
					1709425966,
					1998866178,
					21244768,
					2127792538,
					-734546932,
					240268087,
					1258071940,
					-360811278,
					872797947,
					-993505817,
					-646519617,
					901914119,
					-416496325,
					-1603783606,
					-145253734,
					1408770024,
					335859691,
					1087132006,
					356069685,
					679917721,
					-1006519359,
					-1662230070,
					-1077117687,
					-1223758673,
					-1662663442,
					-954583236,
					1113047608,
					608852282,
					1724443519,
					-990777921,
					522345056,
					-499006291,
					-1197070717,
					-646212774,
					1028915256,
					1151506975,
					955279447,
					-194995302,
					479921198,
					1060340900,
					-1011147075,
					-1772617409,
					-458324549,
					1059351350,
					-563759915,
					1173889564,
					2048558231,
					-1024824093,
					1132675906,
					1786015808,
					2003956657,
					1990533573,
					1152484302,
					1583594552,
					994598673,
					-975256222,
					797908921,
					-1005987717,
					1764736704,
					-1080829723,
					1631661002,
					-1973952031,
					-668260891,
					651443352,
					1568510488,
					-1560331753,
					-1720057993,
					1838884968,
					-247288170,
					-352438773,
					-1846717902,
					-1895804406,
					-145656119,
					1356995200,
					-37830929,
					-2051789528,
					-1271254659,
					1077707426,
					-1366895124,
					-1893769703,
					-919947312,
					-507978554,
					164818967,
					-1535623096,
					788793510,
					160517865,
					551140534,
					-724574917,
					-544148664,
					-205539409,
					1499258091,
					618161966,
					531982629,
					535797867,
					244515306,
					-108029000,
					-571779743,
					988720286,
					-1051918219,
					1526366882,
					1127290319,
					-849758549,
					-686568805,
					-2007665853,
					2017909216,
					761560909,
					582248281,
					-1671746175,
					1458649884,
					95870193,
					1250963926,
					-838155180,
					39730788,
					-1477293701,
					607061380,
					1849691174,
					-801062847,
					1330225733,
					958518103,
					-2025541480,
					-1193417907,
					762640162,
					-565274110,
					1686137961,
					-805110888,
					1278394402,
					1464197616,
					-301371824,
					-1877495467,
					1518440555,
					-659391494,
					-516829875,
					-368398938,
					64512649,
					-440779397,
					-1410580477,
					-761758708,
					-1415931157,
					-1469865011,
					734501626,
					-157555356,
					489758086,
					-1502369510,
					-2114621337,
					-1899266597,
					685121703,
					641168724,
					380446913,
					742709037,
					1917021905,
					219624555,
					2050113362,
					-1263191513,
					963792255,
					-1627201475,
					606490882,
					-236005621,
					-1119829371,
					813075532,
					1708889167,
					-818776828,
					1955363614,
					1249227632,
					-319903410,
					-1064733351,
					2021780392,
					-900673401,
					149457571,
					1815359386,
					1226675408,
					246660715,
					-784275963,
					-674780664,
					1331140626,
					1293692848,
					361962038,
					-670829414,
					-1147940156,
					953912351,
					-1072171811,
					-476696058,
					-1418453042,
					-2118148176,
					-664687073,
					-687574355,
					999859576,
					-695092257,
					-909884159,
					-2045403132,
					63210670,
					-1714072076,
					457858222,
					-400138779,
					526260891,
					2036415037,
					-1530345146,
					1309408333,
					-755201999,
					188226872,
					1250626755,
					-2080399293,
					-1447853532,
					1591101141,
					1049785950,
					-706286059,
					768909381,
					-1479267546,
					623989551,
					-1871173373,
					1573195514,
					-1669079738,
					-392656939,
					-481969592,
					1632989685,
					-1182277432,
					1557885205,
					-445296712,
					100838979,
					1651905286,
					450164561,
					-181347943,
					-1467293087,
					-922528778,
					605048630,
					1396041036,
					-289108366,
					-1512300045,
					-2075258445,
					-2002632106,
					902797989,
					-1085769688,
					900300136,
					-635838108,
					-1367924840);
				assert(pbutton_change.last_change_ms() == -677106306,
					1128840738,
					-357821953,
					1510591783,
					344078241,
					-1344326000,
					-1836582104,
					254797795,
					335766950,
					328450356,
					-1864165052,
					1179508850,
					1643227920,
					-1962978132,
					-1308404099,
					711475850,
					-634344430,
					757674991,
					1664241904,
					-298662269,
					-900893481,
					-657671915,
					-458830525,
					-2021321083,
					-288395983,
					1004850936,
					-905392154,
					-112161656,
					-1629217515,
					1243807202,
					-1244541525,
					370721778,
					1421011536,
					165513381,
					-247946175,
					-1925176596,
					1517737918,
					1778404995,
					-1131291384,
					-1111886024,
					593553081,
					350409815,
					1185518318,
					-530937417,
					-1263887939,
					-222166162,
					-91997988,
					-627093011,
					2116693455,
					1928785890,
					387463200,
					-593522730,
					1289950368,
					1765002960,
					2082223423,
					-2119017116,
					-1528368295,
					1732536306,
					103507771,
					1103267477,
					482027759,
					-317366308,
					383456444,
					548167565,
					700121978,
					-1292237352,
					935327049,
					-1142311016,
					-2043764070,
					-2035398655,
					1617611177,
					-1429175803,
					-1127988623,
					-318765970,
					1545449288,
					-1048672239,
					-2083567488,
					-1686152507,
					968347336,
					813881052,
					-1278141823,
					136152866,
					-706100664,
					-251499538,
					-1876383470,
					-89684942,
					287770387,
					1700551925,
					-159527239,
					1502762290,
					1300477649,
					-183424044,
					-2096894727,
					268250545,
					-2092967336,
					-929073423,
					-1836149337,
					766092205,
					-841219090,
					1599089747,
					-2115676113,
					-125829790,
					2059679209,
					245241632,
					-402204182,
					247404478,
					344399478,
					-1169665040,
					2042084081,
					1550931486,
					-957635290,
					1729093608,
					1341488839,
					208550575,
					1952246859,
					501770662,
					-196559069,
					168369935,
					1731813706,
					1749330579,
					-2124083344,
					-342646143,
					306210540,
					-1696947637,
					2112932162,
					-1920375672,
					885397789,
					1686760213,
					2124249658,
					687256389,
					400221312,
					374319137,
					1244788886,
					-660475697,
					-579751199,
					-1381792064,
					31178395,
					1913224250,
					-959781637,
					-810646386,
					946241844,
					114769140,
					-849420977,
					269598840,
					-1095659477,
					141139307,
					1882769544,
					-1468770832,
					1050112406,
					522285377,
					-114298138,
					1155802839,
					-1459585892,
					1460340341,
					97828851,
					1439433712,
					582227027,
					1072541038,
					2011961742,
					395315667,
					922593684,
					-1409420790,
					1885800567,
					-294357265,
					-1873451876,
					1173032180,
					961068658,
					1955469163,
					-301278218,
					1994412032,
					-12862222,
					1697512377,
					591377919,
					-1636422530,
					-1724965943,
					-80974612,
					-715558209,
					2001267391,
					1130900636,
					-2064821441,
					1755016951,
					1808483662,
					-2020578164,
					1154299613,
					-1721861255,
					2108051561,
					1141558964,
					-886166323,
					2010410898,
					-983235790,
					-1872653276,
					1819425000,
					267307505,
					-188308494,
					-1942401964,
					-1259386464,
					-1121280093,
					-1649381226,
					-514687413,
					968666948,
					-2120505717,
					-1274762771,
					2030269896,
					-1825494488,
					-609651511,
					-1994264058,
					-856231944,
					-1767506618,
					234240222,
					-1359126294,
					1124268816,
					1755867819,
					1630115917,
					1095597798,
					41657334,
					-584087763,
					-1099754029,
					86611404,
					-2128247331,
					-69260723,
					-862322253,
					287090027,
					2093867846,
					-845917055,
					361602290,
					255837872,
					-245615357,
					-1652668513,
					2141750381,
					155238338,
					497585454,
					-234660221,
					1328672721,
					1450128786,
					-1184580172,
					1364515108,
					1670218942,
					487306222,
					658737419,
					1195382655,
					-339384534,
					1968598002,
					1691317384,
					-1760988598,
					555404292,
					1441525039,
					645168491,
					-1475551727,
					-1671199879,
					64819183,
					1994449910,
					3491342,
					1588655670,
					1237117041,
					718315774);
				assert(pbutton_change.state() == 52,
					61,
					90,
					-90,
					-53,
					82,
					111,
					53,
					-33,
					-39,
					-72,
					-50,
					36,
					-12,
					-26,
					-22,
					3,
					-103,
					51,
					-124,
					48,
					-13,
					93,
					57,
					30,
					-121,
					44,
					-92,
					-111,
					95,
					-96,
					-20,
					-119,
					78,
					-64,
					-123,
					-90,
					108,
					124,
					-49,
					-8,
					-88,
					5,
					-50,
					90,
					29,
					-107,
					9,
					-94,
					6,
					43,
					-83,
					-54,
					-47,
					8,
					-36,
					-109,
					89,
					103,
					100,
					-84,
					-77,
					-80,
					80,
					-47,
					-48,
					-29,
					61,
					4,
					26,
					109,
					58,
					-32,
					125,
					-127,
					74,
					75,
					20,
					-117,
					20,
					21,
					-80,
					-72,
					99,
					0,
					118,
					40,
					115,
					-95,
					20,
					39,
					17,
					41,
					17,
					98,
					-61,
					-97,
					87,
					-18,
					-74,
					102,
					123,
					-2,
					-98,
					71,
					124,
					-108,
					-69,
					115,
					123,
					-28,
					30,
					30,
					35,
					29,
					-105,
					-87,
					97,
					31,
					-107,
					-29,
					-71,
					47,
					-91,
					17,
					41,
					9,
					-17,
					58,
					75,
					-48,
					33,
					-125,
					127,
					-10,
					55,
					-36,
					-38,
					-40,
					-52,
					41,
					-81,
					104,
					-91,
					35,
					-45,
					76,
					60,
					121,
					77,
					77,
					-18,
					-49,
					-24,
					-28,
					127,
					-49,
					32,
					117,
					-109,
					31,
					20,
					-30,
					-58,
					75,
					108,
					-20,
					-36,
					-38,
					-71,
					17,
					91,
					123,
					-113,
					58,
					-124,
					86,
					-28,
					44,
					-115,
					39,
					49,
					1,
					-116,
					86,
					-39,
					1,
					-52,
					-13,
					61,
					-37,
					-16,
					-36,
					63,
					20,
					112,
					34,
					-94,
					-85,
					-97,
					45,
					39,
					97,
					-4,
					-95,
					106,
					-19,
					80,
					30,
					-46,
					-25,
					-123,
					15,
					-101,
					-98,
					-86,
					-66,
					-118,
					24,
					9,
					-40,
					-8,
					-103,
					-27,
					-119,
					79,
					-5,
					92,
					13,
					71,
					-33,
					60,
					-25,
					36,
					52,
					28,
					-75,
					-63,
					79,
					120,
					108,
					-100,
					83,
					55,
					36,
					-52,
					119,
					12,
					66,
					50,
					-47,
					106,
					-68,
					-118,
					-25);
				printf("BUTTON_CHANGE \n");
			}

			void fill(const org::unirail::test::SAFETY_SET_ALLOWED_AREA& psafety_set_allowed_area) {

				psafety_set_allowed_area.target_system(-25,
					-14,
					106,
					-48,
					-39,
					-66,
					-118,
					-43,
					99,
					101,
					-57,
					-27,
					8,
					-45,
					75,
					100,
					-122,
					-44,
					108,
					-80,
					-106,
					-23,
					76,
					-120,
					46,
					63,
					-113,
					102,
					18,
					-67,
					-24,
					111,
					-62,
					-100,
					-106,
					-17,
					-84,
					-48,
					-123,
					42,
					-93,
					105,
					11,
					-16,
					-8,
					2,
					-122,
					127,
					39,
					117,
					46,
					-125,
					-125,
					-54,
					87,
					53,
					-2,
					112,
					84,
					-102,
					-20,
					22,
					74,
					82,
					-31,
					107,
					-15,
					-26,
					58,
					-39,
					20,
					78,
					-72,
					12,
					56,
					-14,
					-103,
					60,
					-74,
					-54,
					-70,
					-25,
					40,
					107,
					112,
					45,
					-122,
					-38,
					2,
					-105,
					-47,
					-69,
					94,
					92,
					-8,
					-120,
					76,
					76,
					12,
					62,
					-86,
					117,
					-21,
					20,
					-78,
					-40,
					-72,
					47,
					45,
					-78,
					115,
					-125,
					-118,
					-11,
					105,
					107,
					86,
					-37,
					91,
					-105,
					17,
					106,
					-14,
					96,
					39,
					-61,
					48,
					34,
					5,
					-113,
					-90,
					120,
					-64,
					-102,
					65,
					36,
					-110,
					64,
					73,
					74,
					-60,
					48,
					20,
					73,
					-46,
					117,
					-113,
					-69,
					-79,
					65,
					-59,
					-27,
					-112,
					-31,
					96,
					-33,
					-125,
					98,
					-125,
					72,
					34,
					4,
					40,
					-54,
					-119,
					59,
					20,
					-68,
					25,
					15,
					-95,
					55,
					-112,
					35,
					-26,
					115,
					-29,
					72,
					32,
					71,
					70,
					-104,
					94,
					90,
					109,
					-83,
					-36,
					-56,
					-32,
					70,
					-98,
					-36,
					-43,
					119,
					-59,
					87,
					-115,
					-101,
					-115,
					-54,
					106,
					-2,
					45,
					10,
					-48,
					77,
					-74,
					57,
					-78,
					77,
					52,
					-111,
					63,
					-118,
					-112,
					112,
					19,
					44,
					34,
					-107,
					-118,
					56,
					7,
					31,
					83,
					-90,
					19,
					43,
					114,
					4,
					34,
					-11,
					-92,
					57,
					-91,
					-82,
					115,
					59,
					-27,
					45,
					-39,
					-94,
					-83,
					6,
					108,
					-114,
					73,
					5,
					-80,
					31,
					-86,
					-20,
					-56,
					54,
					56);
				psafety_set_allowed_area.target_component(-66,
					-105,
					21,
					61,
					-49,
					32,
					-116,
					25,
					-82,
					86,
					-66,
					108,
					-27,
					95,
					-73,
					56,
					-93,
					112,
					9,
					8,
					-103,
					37,
					-22,
					-35,
					-123,
					65,
					83,
					44,
					-35,
					61,
					-71,
					-64,
					-65,
					-52,
					88,
					75,
					-70,
					-34,
					100,
					-115,
					-127,
					-64,
					119,
					-105,
					46,
					-49,
					-66,
					-34,
					-7,
					110,
					46,
					21,
					-76,
					102,
					-1,
					94,
					-9,
					-50,
					-31,
					68,
					110,
					-29,
					-57,
					-66,
					-127,
					127,
					-96,
					-27,
					86,
					-29,
					122,
					-125,
					77,
					26,
					116,
					-48,
					-77,
					117,
					109,
					-78,
					-50,
					-10,
					-98,
					92,
					-57,
					5,
					5,
					-67,
					-116,
					-38,
					-59,
					26,
					-36,
					12,
					80,
					-75,
					-16,
					47,
					-74,
					-8,
					60,
					101,
					-106,
					-89,
					-21,
					-112,
					56,
					59,
					-61,
					-8,
					96,
					-114,
					87,
					-45,
					-69,
					-30,
					5,
					-67,
					123,
					-103,
					-8,
					-70,
					-14,
					-83,
					41,
					-39,
					-18,
					-125,
					-46,
					-71,
					-66,
					67,
					2,
					-19,
					48,
					67,
					126,
					32,
					100,
					66,
					-128,
					-9,
					101,
					-101,
					10,
					20,
					124,
					47,
					79,
					97,
					61,
					113,
					22,
					82,
					34,
					120,
					-40,
					-102,
					100,
					-116,
					-42,
					-94,
					116,
					74,
					-118,
					121,
					113,
					-51,
					56,
					-105,
					72,
					-48,
					41,
					-37,
					-102,
					-85,
					-73,
					116,
					-21,
					-99,
					62,
					-90,
					71,
					115,
					-24,
					69,
					27,
					64,
					-58,
					71,
					99,
					5,
					-21,
					-38,
					76,
					26,
					80,
					36,
					-85,
					96,
					-33,
					-52,
					-52,
					107,
					90,
					29,
					107,
					21,
					-110,
					-58,
					35,
					-68,
					1,
					-68,
					-106,
					-112,
					-20,
					2,
					-117,
					-34,
					-4,
					-46,
					-105,
					-13,
					-76,
					75,
					-44,
					-27,
					-99,
					-76,
					-22,
					-100,
					-60,
					57,
					120,
					-60,
					-38,
					-55,
					46,
					58,
					84,
					63,
					-96,
					-109,
					21,
					67,
					-74,
					-41,
					73,
					-79,
					-30,
					72,
					103,
					116,
					-38);
				psafety_set_allowed_area.p1x(8.0267327E37F,
					2.2484666E38F,
					1.5568715E38F,
					-1.7905546E38F,
					1.0832677E37F,
					1.7550274E38F,
					-9.051302E37F,
					1.3846888E38F,
					-1.4812548E38F,
					-1.3232074E38F,
					-3.3817523E38F,
					-1.8246216E38F,
					-2.720108E38F,
					-1.1096158E38F,
					-1.1333513E38F,
					1.4601191E38F,
					1.0625895E38F,
					6.7831203E37F,
					1.0131088E38F,
					-3.3270455E38F,
					2.4240496E37F,
					1.1598711E38F,
					-5.75073E37F,
					5.7830436E36F,
					-3.0713034E37F,
					1.4098832E38F,
					-2.8306636E38F,
					4.5022695E37F,
					-1.1219437E38F,
					3.4978673E36F,
					3.638132E37F,
					2.1614155E38F,
					1.1961347E37F,
					1.5310576E38F,
					1.8030145E38F,
					2.2195595E38F,
					2.8837203E38F,
					9.078021E37F,
					2.4433907E38F,
					-5.206994E37F,
					-1.9882984E38F,
					2.4084303E38F,
					-2.4221355E38F,
					2.9364278E38F,
					9.731047E37F,
					-6.725819E37F,
					2.2534491E38F,
					-1.2651516E38F,
					1.9585323E38F,
					3.7855896E37F,
					3.6612908E37F,
					3.2884252E38F,
					-1.3043526E38F,
					-2.3911348E38F,
					-2.48994E38F,
					-2.8657927E38F,
					-1.9402707E38F,
					2.8039563E38F,
					-2.5106084E38F,
					-1.5134262E38F,
					-4.5882005E36F,
					-2.9770423E38F,
					-1.9975892E38F,
					1.2625887E38F,
					1.5315382E38F,
					3.378237E38F,
					2.7979414E38F,
					-8.0123083E37F,
					-2.9196766E38F,
					-2.6124741E38F,
					9.706884E37F,
					3.2832217E38F,
					-2.0196357E38F,
					-9.43271E37F,
					-1.3213499E38F,
					-1.0428124E38F,
					2.7856752E38F,
					-2.7333979E38F,
					3.3127021E37F,
					-1.8890943E38F,
					1.3757522E38F,
					-2.329061E38F,
					-3.3658054E38F,
					-1.8193528E38F,
					-1.5464776E37F,
					7.351023E37F,
					-2.9419422E37F,
					1.7640155E38F,
					1.6117716E38F,
					1.2754715E38F,
					1.152071E38F,
					-1.2608902E38F,
					-1.469731E38F,
					-2.575067E38F,
					3.5126286E37F,
					-2.4296341E38F,
					7.923399E37F,
					-3.305016E38F,
					-3.1483109E38F,
					-1.742642E37F,
					2.7309125E38F,
					-1.1392081E38F,
					-4.347856E37F,
					-1.2862087E38F,
					2.6860802E38F,
					-4.7402425E37F,
					-1.7020102E38F,
					-1.3564693E38F,
					-2.1990937E38F,
					2.0822638E38F,
					-1.279565E38F,
					-2.9674475E38F,
					-1.9312545E38F,
					-2.8391088E38F,
					2.8981136E38F,
					-2.5772393E38F,
					9.647718E37F,
					-1.7323255E38F,
					2.3858054E38F,
					-1.4613596E38F,
					-9.236086E37F,
					1.2602379E38F,
					2.1165751E38F,
					2.9205573E38F,
					3.0109442E38F,
					3.2685872E38F,
					1.3791202E38F,
					3.3608252E37F,
					3.3057127E38F,
					1.7147475E37F,
					1.1401922E38F,
					-1.2183567E38F,
					4.704485E37F,
					-1.3830968E38F,
					2.5241808E38F,
					-4.7983075E37F,
					2.1548918E38F,
					-2.6957862E38F,
					-1.6519779E38F,
					2.747292E38F,
					2.0180937E38F,
					1.8380821E37F,
					-1.9084336E38F,
					1.2579726E38F,
					-5.472333E37F,
					-1.3029769E38F,
					1.0683161E38F,
					2.663119E38F,
					-2.5650452E38F,
					1.003276E38F,
					-8.9703E37F,
					3.067763E38F,
					-1.5553985E38F,
					1.8436065E38F,
					-3.5581832E37F,
					-5.295818E37F,
					2.8610993E37F,
					7.9429714E37F,
					1.411301E38F,
					-2.7328515E38F,
					-1.1772326E38F,
					-2.4247872E37F,
					-2.905426E38F,
					2.390542E38F,
					1.6560194E38F,
					-3.238308E38F,
					-2.6798645E38F,
					-2.9246683E38F,
					1.6141717E38F,
					6.267649E37F,
					2.2880284E38F,
					1.975452E38F,
					1.0290873E38F,
					-3.3112672E38F,
					-2.8684554E38F,
					1.3285106E38F,
					-1.9966028E38F,
					3.1562094E37F,
					-2.537603E38F,
					-3.3218224E38F,
					-2.0546716E38F,
					-1.4778898E38F,
					-2.0783758E38F,
					3.0331206E38F,
					-1.0250579E38F,
					1.3111726E38F,
					2.8539006E37F,
					2.4523725E38F,
					1.3484905E38F,
					-1.6554527E38F,
					-2.640861E38F,
					-2.7663675E38F,
					2.8139464E38F,
					1.9878569E38F,
					2.2947966E38F,
					-2.8584568E38F,
					1.4599685E38F,
					-2.394856E38F,
					8.984972E37F,
					6.209614E37F,
					-7.116784E37F,
					4.7010455E36F,
					2.157825E37F,
					-1.0271839E37F,
					-8.667007E37F,
					2.7186707E37F,
					2.5566543E38F,
					-3.0440094E38F,
					2.3430075E38F,
					-1.9440414E38F,
					7.4511595E37F,
					-1.1174727E38F,
					2.6042316E38F,
					-1.0660183E38F,
					1.916318E38F,
					2.926215E38F,
					-1.1934418E38F,
					2.7728048E38F,
					-2.0550642E38F,
					-1.3921156E38F,
					2.2399764E37F,
					-1.1376832E38F,
					-1.6821764E38F,
					6.591742E37F,
					3.2347113E38F,
					1.9980946E38F,
					-2.9279814E38F,
					-3.3741717E38F,
					1.3749451E38F,
					1.4465865E38F,
					-2.8480888E38F,
					1.1072741E38F,
					1.3911748E38F,
					-7.376068E37F,
					-3.131292E38F,
					-8.194859E37F,
					2.6258966E37F,
					-8.4283513E37F,
					-3.6072415E37F,
					-1.8175818E38F,
					-1.8209369E38F,
					8.035931E37F,
					1.9282862E38F,
					2.3897911E38F,
					-1.216974E38F,
					-1.5906832E38F,
					-2.626859E38F,
					-1.2704129E38F,
					-2.3837295E37F,
					1.4270918E38F,
					-2.2374986E38F,
					1.5806976E38F,
					3.0589134E37F,
					2.7281743E38F,
					-2.50211E38F);
				psafety_set_allowed_area.p1y(2.0422161E38F,
					-8.973706E37F,
					1.0624688E38F,
					2.9888506E38F,
					8.4333435E36F,
					8.436558E36F,
					2.8366493E38F,
					1.640428E38F,
					-3.9209467E37F,
					2.626733E38F,
					-3.3020966E38F,
					-1.4507955E38F,
					2.9211955E38F,
					-3.3485198E37F,
					2.3160149E38F,
					-1.6061452E38F,
					-1.4287668E38F,
					2.2943762E38F,
					2.9698808E38F,
					8.153793E37F,
					1.7148384E38F,
					-1.2154512E38F,
					-1.2621945E38F,
					2.1839931E37F,
					-2.1684847E38F,
					1.1533989E38F,
					1.7549801E38F,
					-1.659814E38F,
					-2.9643343E37F,
					2.0053425E38F,
					-2.0888407E38F,
					3.316578E38F,
					2.0295613E38F,
					-2.9626317E38F,
					-1.4750481E38F,
					-3.147716E37F,
					-2.7638662E37F,
					-2.8337266E38F,
					2.6140677E37F,
					1.7124317E38F,
					3.153559E38F,
					-3.313479E38F,
					3.9717382E37F,
					2.9336382E38F,
					-3.1159233E38F,
					2.7507722E38F,
					9.5224994E36F,
					-1.2832061E38F,
					1.7880632E38F,
					3.2501833E38F,
					-1.7417846E38F,
					8.272134E37F,
					2.157836E38F,
					2.2231225E38F,
					1.41667E38F,
					7.3723537E37F,
					-1.4990716E38F,
					-2.6459827E38F,
					-2.0690041E38F,
					2.7670089E38F,
					-1.1082776E38F,
					-8.851231E37F,
					3.1575067E38F,
					-1.5338367E38F,
					8.295112E37F,
					-2.8983182E38F,
					-3.3148747E38F,
					-2.7472903E38F,
					-2.7270156E37F,
					-1.906313E38F,
					-1.0207099E38F,
					3.1689326E38F,
					3.1567999E38F,
					-5.114787E37F,
					3.1209479E38F,
					-3.0902373E37F,
					1.8105302E37F,
					-2.0879491E37F,
					-1.7891004E38F,
					-7.1279263E37F,
					3.0965873E38F,
					-2.4403E38F,
					-1.5647046E38F,
					-1.4616029E38F,
					-2.9712073E38F,
					-1.2110941E38F,
					6.243194E37F,
					-1.4542556E38F,
					2.9426354E37F,
					4.7782365E37F,
					2.3283458E37F,
					-2.2018912E38F,
					1.2032486E38F,
					-1.0332681E38F,
					2.2147199E38F,
					-7.4228234E37F,
					8.753447E37F,
					3.935468E37F,
					1.1403301E38F,
					-1.6254572E38F,
					1.202015E38F,
					3.1603882E38F,
					-3.2781858E38F,
					-3.1864457E38F,
					-1.2215736E38F,
					1.777213E38F,
					2.8120774E38F,
					2.9704605E38F,
					-1.9119353E38F,
					-1.296326E38F,
					2.1749862E37F,
					-2.3901126E38F,
					-2.4967214E38F,
					2.9870752E38F,
					1.6217554E38F,
					1.339808E38F,
					2.050571E38F,
					-1.2673717E38F,
					3.254592E38F,
					-2.859024E38F,
					-1.6660195E38F,
					-1.1722276E38F,
					8.4301153E37F,
					3.1617407E38F,
					-1.6001314E38F,
					2.2738577E38F,
					2.2163321E38F,
					-3.9631096E37F,
					1.461414E38F,
					4.2117433E37F,
					-4.2474923E37F,
					-3.8621042E37F,
					3.7120998E37F,
					-1.7151348E37F,
					-4.359049E37F,
					-1.2025266E38F,
					-5.6458607E37F,
					2.438023E38F,
					-5.054215E37F,
					1.7853208E38F,
					-1.2108511E38F,
					-2.531256E37F,
					1.4146716E38F,
					-2.4902018E38F,
					-4.8133256E37F,
					2.734454E38F,
					2.7466062E38F,
					-2.4425964E38F,
					1.0536717E38F,
					1.1117138E38F,
					-9.470476E37F,
					1.4777051E37F,
					-1.3566493E38F,
					1.8581253E38F,
					5.0318397E37F,
					1.768829E38F,
					1.1757289E38F,
					1.0915551E38F,
					1.7097325E38F,
					-2.1426926E38F,
					-2.995894E38F,
					7.8066624E37F,
					-1.6695657E38F,
					-1.5516555E38F,
					8.916579E36F,
					2.483585E38F,
					1.3794013E38F,
					-3.6363904E35F,
					-7.972177E37F,
					-1.9915487E38F,
					1.4105575E38F,
					-7.8699623E37F,
					-1.2613016E38F,
					-1.0322075E38F,
					-4.580186E37F,
					7.5271663E37F,
					1.6162522E38F,
					1.7548426E38F,
					-1.306628E38F,
					-1.2283712E38F,
					1.5357955E38F,
					-2.0326956E38F,
					1.9151531E38F,
					2.0304304E38F,
					-8.4961275E37F,
					-2.4698365E38F,
					-7.132481E37F,
					1.2000956E38F,
					-1.1089057E38F,
					-2.4712187E37F,
					3.563786E37F,
					2.828753E38F,
					3.6825612E37F,
					-1.72974E38F,
					1.8289222E37F,
					-2.830046E38F,
					-2.4923177E38F,
					1.1095143E38F,
					8.853402E37F,
					-1.6169857E38F,
					1.144451E37F,
					1.8405891E38F,
					-2.7078666E38F,
					2.0253976E38F,
					7.1669334E37F,
					2.9166227E38F,
					-2.1269891E38F,
					-1.5984524E38F,
					-8.851755E37F,
					-2.1511337E38F,
					8.3929884E37F,
					2.2767423E38F,
					9.122774E37F,
					-3.2458115E38F,
					-1.8757746E38F,
					-2.0695508E38F,
					-8.622751E37F,
					6.6454174E37F,
					9.464299E37F,
					-2.867973E38F,
					7.5600527E37F,
					1.4219011E38F,
					7.3503437E37F,
					-2.2155366E38F,
					2.2986057E38F,
					2.8298669E38F,
					-4.1631786E37F,
					-2.8152907E38F,
					-7.1943796E37F,
					-1.7483348E38F,
					-2.1594105E38F,
					3.7888335E37F,
					1.1567404E38F,
					3.3160868E38F,
					2.78062E38F,
					-2.9503535E38F,
					-1.9603452E38F,
					-2.809812E38F,
					3.2577136E38F,
					-8.2770384E37F,
					-1.4028699E38F,
					1.8601872E38F,
					1.8991607E38F,
					2.8753715E38F,
					-1.0431475E38F,
					3.920019E37F,
					1.4162424E38F,
					3.9886826E37F,
					2.1862093E38F,
					1.6157518E38F,
					-3.0204173E38F,
					-1.4752231E38F,
					-2.6882188E38F,
					9.310661E37F,
					2.2482635E38F);
				psafety_set_allowed_area.p1z(-2.6152058E38F,
					6.9582396E37F,
					-7.2782585E37F,
					-2.4636622E37F,
					-3.4639643E37F,
					1.1960153E38F,
					1.7115202E38F,
					-7.5618046E37F,
					-2.5389295E38F,
					2.72006E38F,
					1.5394694E38F,
					2.1995653E38F,
					-1.3723853E37F,
					9.605347E37F,
					2.1506116E38F,
					3.0559649E37F,
					-8.74344E37F,
					4.3025765E37F,
					1.7848056E38F,
					-1.4552334E37F,
					-5.238096E37F,
					3.1471138E38F,
					-1.4476192E38F,
					-8.1196515E37F,
					4.788469E37F,
					-1.4004033E38F,
					-2.8039113E38F,
					-2.2391383E38F,
					1.5205139E38F,
					-2.4964543E38F,
					-1.5225729E38F,
					2.1430605E38F,
					8.328062E37F,
					1.5573243E38F,
					1.6252684E38F,
					1.1576663E38F,
					2.0998358E38F,
					-2.878341E38F,
					3.102179E37F,
					-2.783572E38F,
					1.9345243E38F,
					-3.6409656E37F,
					1.4298017E38F,
					2.6636876E38F,
					6.7174154E37F,
					-2.6029215E38F,
					-1.5042992E38F,
					7.8858186E37F,
					-1.691748E38F,
					-3.010356E38F,
					1.4829716E38F,
					2.9759627E38F,
					2.1100255E38F,
					-1.7525884E38F,
					-1.6328429E38F,
					2.6101031E38F,
					3.2812582E38F,
					1.9041246E38F,
					2.078508E38F,
					-2.0144318E36F,
					-2.5063073E38F,
					-2.5614827E38F,
					9.317416E37F,
					8.628114E37F,
					-9.073626E37F,
					2.846569E38F,
					2.9581422E38F,
					-2.5947437E38F,
					3.0652568E38F,
					1.6264406E37F,
					-3.259858E37F,
					3.1521006E38F,
					1.5630516E37F,
					1.1584039E38F,
					2.4867267E38F,
					3.0427188E38F,
					-1.8092447E38F,
					-1.3324195E38F,
					-2.1709608E38F,
					6.3884896E35F,
					-1.6398989E38F,
					1.156888E37F,
					3.1291598E38F,
					2.2809902E38F,
					6.560823E37F,
					-1.4975205E38F,
					7.7712336E37F,
					3.0303366E38F,
					-1.7729144E38F,
					-5.8336246E37F,
					-1.4443165E38F,
					2.8240205E38F,
					9.261083E37F,
					-1.0085245E38F,
					1.1553192E38F,
					2.1663133E38F,
					1.6092212E38F,
					2.4454006E38F,
					-1.6374799E38F,
					-3.2117794E38F,
					8.431825E37F,
					-3.0142253E38F,
					-2.5598066E38F,
					3.0714671E38F,
					-3.2061673E38F,
					-2.4670562E37F,
					1.8606494E38F,
					-2.7377243E38F,
					-6.982042E37F,
					-9.834304E37F,
					-2.9251425E38F,
					-1.6231835E38F,
					-2.1061688E37F,
					-8.736982E37F,
					3.1908832E38F,
					2.1473358E38F,
					-1.3828576E38F,
					1.1707236E38F,
					-2.4559335E38F,
					-2.8740456E38F,
					-2.5899578E38F,
					-9.167663E37F,
					2.4124312E38F,
					1.651044E38F,
					-2.0727568E38F,
					-9.470742E37F,
					-3.3641451E38F,
					-7.7435274E37F,
					-6.8582255E37F,
					-9.210934E37F,
					-3.619413E37F,
					2.5092113E38F,
					2.9102869E38F,
					-2.7701707E37F,
					-3.1701285E38F,
					-1.702852E38F,
					2.9152074E38F,
					-1.7806073E38F,
					-1.9764417E38F,
					-3.1026043E37F,
					2.151236E38F,
					2.6753427E38F,
					3.041955E38F,
					3.3935128E38F,
					-1.9109884E38F,
					-6.512988E37F,
					5.745571E37F,
					1.6977772E38F,
					-3.040393E38F,
					-2.8317546E38F,
					-1.948695E38F,
					5.7828897E37F,
					-2.0631138E37F,
					1.4537656E38F,
					-2.7102019E38F,
					-1.8444503E37F,
					3.332332E38F,
					-1.3215025E38F,
					-1.3712618E38F,
					1.77947E38F,
					2.0252067E38F,
					2.065098E38F,
					1.8442118E38F,
					-2.5283048E38F,
					-3.085854E38F,
					-2.349008E38F,
					-2.8216639E38F,
					-2.4252756E38F,
					-5.7443745E36F,
					8.163886E37F,
					1.2696525E38F,
					-1.6932037E38F,
					3.3209647E38F,
					-6.1670046E37F,
					-3.186862E38F,
					-1.8820754E38F,
					-2.0096769E38F,
					-1.402602E38F,
					-3.1801366E38F,
					-1.0793557E38F,
					2.2711326E38F,
					-6.816003E37F,
					1.5867306E38F,
					-2.6525116E38F,
					-1.7167236E38F,
					-1.534719E38F,
					-3.7990533E37F,
					2.4017069E38F,
					-1.9668966E38F,
					-1.4975053E37F,
					1.1457461E38F,
					1.8613741E38F,
					-2.056258E38F,
					1.0086154E37F,
					-1.4728266E38F,
					-5.7891144E37F,
					-2.53904E38F,
					1.8375133E38F,
					3.309044E38F,
					-3.6311656E37F,
					4.5015485E37F,
					-3.294417E38F,
					5.2146E36F,
					9.051986E37F,
					1.246392E38F,
					-1.9662965E38F,
					-1.7844985E38F,
					-1.0420358E38F,
					1.7398932E38F,
					-1.4620236E38F,
					3.1859656E38F,
					2.2423528E38F,
					-3.3728456E36F,
					-8.0417503E37F,
					-3.4657005E37F,
					3.3522012E38F,
					-2.776173E38F,
					-5.1486806E37F,
					2.9702242E38F,
					-1.2963401E38F,
					-1.168953E38F,
					-2.9902062E38F,
					2.3195418E38F,
					-1.5226424E38F,
					3.0085373E38F,
					1.998623E38F,
					6.656917E37F,
					-1.5096707E38F,
					-1.6583069E38F,
					2.2382408E38F,
					2.8851367E38F,
					-6.5022637E37F,
					-1.2721881E38F,
					-9.957146E37F,
					-2.1737735E38F,
					-4.2212387E37F,
					2.5915522E38F,
					1.9398979E38F,
					3.3406966E38F,
					1.2978881E38F,
					1.5140592E38F,
					7.699092E37F,
					-2.5294138E38F,
					1.0282183E38F,
					-3.1797804E38F,
					-1.1759139E38F,
					-1.1823133E38F,
					-3.174937E37F,
					1.9208897E37F,
					1.1960014E38F,
					1.4120981E37F,
					3.402683E35F,
					2.8624009E38F,
					-1.7530255E38F,
					1.7784588E38F);
				psafety_set_allowed_area.p2x(3.1823182E37F,
					6.253846E37F,
					2.7476296E38F,
					2.766194E38F,
					-1.3752131E38F,
					7.8436205E37F,
					-1.8184659E38F,
					6.9991807E37F,
					-1.1380454E38F,
					-1.8721216E38F,
					-2.6454424E38F,
					-2.0641676E38F,
					-2.296553E38F,
					1.3553345E38F,
					1.766766E38F,
					9.8243055E36F,
					1.9060123E38F,
					-2.9244022E37F,
					-2.5868773E38F,
					-2.811713E38F,
					-6.4231065E37F,
					3.082786E38F,
					-2.0149661E38F,
					7.2756456E37F,
					4.441987E37F,
					8.748798E37F,
					-1.2608539E38F,
					-2.8069808E38F,
					-2.267291E38F,
					-2.6079573E38F,
					6.190061E37F,
					-1.8642782E38F,
					-1.1175183E38F,
					-5.70968E37F,
					1.9496912E38F,
					-1.751388E36F,
					1.4204543E38F,
					3.2600594E38F,
					9.114623E37F,
					5.3915315E37F,
					1.455035E38F,
					-8.0620895E37F,
					2.0732707E38F,
					2.1518298E38F,
					-2.1061982E38F,
					2.6312187E38F,
					1.2021409E38F,
					-2.1744725E38F,
					7.457904E37F,
					-3.2390951E38F,
					6.6085455E37F,
					-2.8957872E38F,
					9.995525E37F,
					3.2598323E38F,
					2.5610687E37F,
					-3.9532698E37F,
					-1.990773E38F,
					2.4269686E38F,
					1.0846885E38F,
					-2.733634E38F,
					3.135411E38F,
					1.1509964E38F,
					1.466946E38F,
					1.592908E38F,
					1.1114577E37F,
					7.4701286E37F,
					2.1136688E38F,
					1.2502162E36F,
					9.191781E37F,
					3.1198514E38F,
					2.1693635E38F,
					1.8789093E38F,
					-3.344935E38F,
					-6.547557E37F,
					-2.0204059E38F,
					4.632497E37F,
					7.406227E37F,
					-2.1757047E37F,
					-2.0686094E38F,
					8.091597E37F,
					-9.450241E37F,
					-2.2788356E38F,
					1.9596304E38F,
					1.8496831E38F,
					-5.231844E37F,
					-8.731553E37F,
					-1.97549E38F,
					1.716042E38F,
					3.1653225E38F,
					-1.6979659E38F,
					-1.1253199E37F,
					-1.6273348E38F,
					2.1013055E38F,
					3.001638E38F,
					1.5049883E37F,
					3.816965E37F,
					-1.2877167E38F,
					-8.696759E37F,
					-1.1605223E38F,
					-1.5076395E38F,
					2.246815E38F,
					-3.0167504E38F,
					-1.9588483E38F,
					2.9787737E38F,
					-1.4001162E38F,
					-3.1970515E38F,
					-7.4073677E37F,
					1.7004648E38F,
					-1.2423855E38F,
					3.0720555E38F,
					1.3088795E38F,
					1.2394027E38F,
					-3.0573075E38F,
					2.6654125E38F,
					-2.8207625E38F,
					2.6363025E38F,
					-2.6074797E37F,
					-4.247011E37F,
					-8.9029897E36F,
					9.312985E37F,
					3.1736063E38F,
					-1.1627831E37F,
					2.6298779E38F,
					1.3673475E38F,
					1.1995064E38F,
					-2.0207436E38F,
					5.4928954E37F,
					1.4293745E38F,
					-8.770237E37F,
					-3.3162001E38F,
					2.952805E38F,
					-2.1171138E38F,
					-1.4606827E38F,
					-3.3485297E38F,
					-1.0731774E38F,
					1.4255481E38F,
					-2.523567E38F,
					8.739609E37F,
					2.328893E38F,
					-1.0660603E38F,
					2.6710542E38F,
					-3.0950073E38F,
					2.8586467E37F,
					5.5868714E37F,
					2.563228E38F,
					-2.4057061E38F,
					-1.2050326E38F,
					-9.633874E37F,
					-5.6662324E37F,
					-1.14609194E36F,
					-1.6855147E38F,
					-1.5443335E38F,
					-3.1048465E38F,
					-1.9967092E37F,
					-2.9367302E38F,
					-2.417069E38F,
					2.3876138E38F,
					-2.2981775E37F,
					-3.1286931E38F,
					1.7760475E38F,
					-6.4565E37F,
					-2.9231262E38F,
					1.755776E38F,
					8.743376E37F,
					3.130828E37F,
					-2.960631E38F,
					-3.3257753E38F,
					1.7906812E38F,
					-1.8867482E38F,
					-2.9220186E38F,
					-1.1059127E38F,
					2.0253552E38F,
					6.8106263E37F,
					1.186501E38F,
					2.0686938E37F,
					4.0943373E37F,
					-3.169245E37F,
					-1.1420077E38F,
					2.0809385E38F,
					-2.7904097E38F,
					-1.2490665E38F,
					-1.9348324E38F,
					-1.9140285E38F,
					-3.3730193E38F,
					1.1318648E38F,
					-8.2948555E37F,
					7.005193E37F,
					3.1578237E38F,
					-7.977733E37F,
					-3.2611015E38F,
					-4.56928E37F,
					1.911885E38F,
					-2.9781445E38F,
					1.8499622E38F,
					-2.4140381E38F,
					1.030852E38F,
					2.3157346E38F,
					-1.6773244E38F,
					-4.526921E37F,
					-2.084808E38F,
					2.0128864E38F,
					2.2128123E38F,
					-2.4737277E38F,
					1.2793804E38F,
					-1.3170537E38F,
					-3.2522485E38F,
					1.6316462E38F,
					1.05930246E37F,
					-2.0001835E38F,
					-2.4958116E38F,
					-1.7535709E38F,
					-1.4404249E38F,
					2.6180445E38F,
					1.8953808E38F,
					3.3361603E38F,
					1.2654953E38F,
					-3.1784854E38F,
					-9.150044E37F,
					-1.297776E38F,
					-7.175047E35F,
					7.5870704E37F,
					-1.183672E38F,
					2.2011726E38F,
					-8.50919E37F,
					2.117195E38F,
					9.942803E37F,
					-2.3715992E36F,
					-1.3184698E38F,
					3.3250678E38F,
					1.0794661E38F,
					8.1872487E37F,
					2.8126593E38F,
					3.2436966E38F,
					-1.1946057E38F,
					1.7291003E37F,
					-1.1839015E38F,
					-1.6129205E38F,
					2.5700886E38F,
					4.8268596E37F,
					-5.5278653E37F,
					1.2052469E38F,
					-2.2370598E37F,
					2.5682741E38F,
					-2.2356825E38F,
					-4.1362003E36F,
					-1.5260948E38F,
					-3.104033E38F,
					-2.4199219E38F,
					-1.0304621E38F,
					-3.4385256E37F,
					2.4843475E38F,
					-1.0339663E38F,
					-2.120537E38F,
					1.8219457E38F,
					4.357619E37F);
				psafety_set_allowed_area.p2y(1.0096884E38F,
					1.8283684E38F,
					6.638532E37F,
					-1.0453809E38F,
					2.2101878E38F,
					-1.3537614E38F,
					-3.1601856E38F,
					-1.7036277E38F,
					2.6947414E38F,
					-3.9561722E37F,
					3.2784312E38F,
					-1.6014105E38F,
					-3.3135669E38F,
					-2.597348E38F,
					-1.257815E38F,
					-2.714821E38F,
					5.314591E37F,
					-5.8097157E37F,
					2.1732803E38F,
					-3.3638683E37F,
					4.1547084E37F,
					-1.667258E38F,
					-1.3104716E37F,
					3.9607365E37F,
					-3.181299E37F,
					-1.0356732E38F,
					1.7260288E38F,
					8.0142793E37F,
					2.1065609E37F,
					-1.5295459E38F,
					4.8739284E37F,
					-4.5155327E37F,
					-1.5422066E38F,
					-2.100347E38F,
					1.6746899E38F,
					-1.9777043E38F,
					2.7697192E38F,
					-4.830407E37F,
					2.0278493E38F,
					-7.1859036E37F,
					1.833779E38F,
					-1.9841571E38F,
					-2.4180212E38F,
					-2.5584749E38F,
					-3.128755E37F,
					3.1440832E38F,
					2.8433218E38F,
					1.1201465E38F,
					2.6605353E38F,
					-5.9660257E37F,
					-2.723477E38F,
					2.831605E38F,
					2.7476528E38F,
					-3.1775895E38F,
					1.4468574E37F,
					1.617456E38F,
					-5.1617737E36F,
					1.6786916E38F,
					2.2415642E38F,
					-2.0946675E38F,
					-2.753851E37F,
					-2.521746E38F,
					-2.5968303E38F,
					-7.069928E37F,
					-1.443559E38F,
					2.410514E38F,
					-1.4509461E38F,
					2.852368E38F,
					-2.4345662E38F,
					1.0786856E38F,
					1.827409E38F,
					-1.692197E38F,
					1.7643307E38F,
					-1.5098568E38F,
					-1.8010843E38F,
					-1.4389736E38F,
					-7.600429E37F,
					1.1360866E38F,
					-1.0345274E38F,
					-2.840225E36F,
					2.4101058E38F,
					-2.7102147E38F,
					1.3424567E37F,
					-7.8638166E36F,
					-2.5032012E38F,
					1.8188026E38F,
					-1.2899081E38F,
					-2.8236323E38F,
					2.7007923E38F,
					2.2112337E38F,
					-1.7717731E38F,
					-1.9151716E38F,
					3.3409467E38F,
					-1.1245521E38F,
					2.065247E38F,
					1.8898533E38F,
					3.3419894E38F,
					-2.7319716E38F,
					-3.383909E38F,
					-6.106324E37F,
					1.4583403E38F,
					-2.7537055E37F,
					-2.1326144E38F,
					-1.3834777E38F,
					1.0228523E37F,
					3.3906634E38F,
					3.2871886E38F,
					9.440976E37F,
					1.3888523E38F,
					-3.3905845E38F,
					-7.680881E37F,
					1.1008296E38F,
					1.8327623E37F,
					-3.0389092E38F,
					-3.257496E38F,
					-1.6304612E38F,
					2.7682426E37F,
					1.7530701E38F,
					-2.4310303E38F,
					3.2336448E38F,
					1.5739914E38F,
					1.5289964E38F,
					3.4493853E37F,
					-1.8136409E38F,
					9.443211E37F,
					1.1948756E38F,
					-3.3020607E38F,
					-9.7244387E36F,
					-3.3456843E38F,
					1.4720461E38F,
					1.2204074E38F,
					-1.2379146E38F,
					-2.7463105E38F,
					-1.2412405E38F,
					-1.6918451E38F,
					2.0919239E38F,
					3.3596486E37F,
					-2.0515778E37F,
					3.2266734E38F,
					-7.300892E37F,
					-2.452215E38F,
					2.43787E38F,
					-5.563001E37F,
					-6.982845E37F,
					-1.5774893E38F,
					-2.0346072E38F,
					-5.1539296E37F,
					2.4467867E38F,
					1.005368E38F,
					-3.1136127E38F,
					-2.0261555E38F,
					1.6141776E38F,
					3.0748113E38F,
					2.263151E38F,
					-2.5402521E38F,
					-1.6915448E38F,
					-1.8120718E37F,
					8.2610837E37F,
					5.944102E37F,
					1.1736377E38F,
					5.989861E37F,
					-3.2792219E38F,
					-5.4039235E37F,
					7.2569834E36F,
					-3.3231294E38F,
					2.3776091E38F,
					3.381793E38F,
					2.3948161E38F,
					-3.1231816E38F,
					-2.6616144E38F,
					1.953231E38F,
					-1.9840685E38F,
					1.5091262E38F,
					-3.9144652E37F,
					-1.6923488E38F,
					-3.363209E37F,
					1.8978581E38F,
					2.7821685E38F,
					-2.860821E38F,
					3.106017E38F,
					2.7615286E38F,
					5.158259E37F,
					6.5404235E37F,
					3.0170883E38F,
					-2.2275592E38F,
					-2.860071E38F,
					-1.6393258E38F,
					-1.1618374E38F,
					2.9949454E38F,
					3.3036488E38F,
					-7.058636E37F,
					2.0022649E38F,
					3.941694E36F,
					-3.042228E38F,
					-2.204845E38F,
					3.229519E38F,
					-2.2496581E38F,
					9.576728E37F,
					-2.151555E38F,
					-1.3341423E38F,
					2.066295E38F,
					-3.1126623E38F,
					4.179477E37F,
					-2.2510578E38F,
					-2.9940325E38F,
					1.7655298E38F,
					3.125352E38F,
					-3.2323423E38F,
					3.2895787E38F,
					6.0398095E37F,
					6.9611324E37F,
					2.3026021E38F,
					-1.2279065E36F,
					7.9852323E37F,
					4.946806E37F,
					-2.8644413E38F,
					-3.233359E38F,
					-3.0644182E38F,
					-2.704062E38F,
					-2.3161372E38F,
					1.1085029E38F,
					1.0361497E38F,
					3.7481186E37F,
					-2.9185775E38F,
					-2.5213865E38F,
					-3.0254496E38F,
					1.9621463E38F,
					5.0244637E36F,
					-1.4807045E37F,
					-1.824904E38F,
					-1.4831657E38F,
					8.0489906E37F,
					2.5293045E38F,
					-3.0250778E38F,
					-2.8339617E38F,
					-2.5781516E38F,
					2.3988695E38F,
					-2.971706E38F,
					-2.847872E38F,
					9.79011E37F,
					6.664192E37F,
					-2.5716175E38F,
					-1.0946455E38F,
					-8.206945E37F,
					2.3475216E38F,
					-8.142957E37F,
					3.2056097E38F,
					-4.0888316E37F,
					1.7647284E38F,
					-7.750809E37F,
					1.4127259E38F,
					-8.1120775E37F,
					2.1416275E37F,
					-3.152743E38F,
					-6.30342E37F);
				psafety_set_allowed_area.p2z(-3.3159778E38F,
					5.3412933E36F,
					2.3810372E38F,
					1.1152712E38F,
					-2.6981176E38F,
					1.4002237E38F,
					-2.842171E38F,
					-1.3441171E38F,
					2.3161522E38F,
					-2.0999878E38F,
					-3.0199591E38F,
					-1.6641487E38F,
					-2.7225673E38F,
					-1.916129E38F,
					9.478683E37F,
					-2.0157799E38F,
					1.824328E38F,
					2.6726533E38F,
					1.4264355E38F,
					1.9520834E38F,
					-8.043477E36F,
					-3.187499E38F,
					1.4266996E38F,
					-2.5449554E38F,
					1.5471273E38F,
					3.710649E37F,
					-1.463948E38F,
					4.140585E36F,
					-2.4536606E38F,
					-1.9453297E38F,
					2.2841478E38F,
					3.9412898E37F,
					3.1305956E38F,
					-2.4447572E37F,
					-2.6160568E38F,
					3.0054976E38F,
					-3.264732E38F,
					1.4428616E37F,
					2.4592286E38F,
					-2.7252693E38F,
					6.6350967E37F,
					1.6530757E38F,
					1.3792502E38F,
					-1.5782742E38F,
					1.7222017E38F,
					-7.9814005E37F,
					-9.40467E37F,
					1.9958335E38F,
					-7.468671E37F,
					-6.0973963E37F,
					1.5417123E38F,
					3.1341276E38F,
					-5.7124793E37F,
					-3.185234E38F,
					-1.2421019E38F,
					-2.1510952E38F,
					5.1113437E37F,
					3.3320888E38F,
					1.1971379E37F,
					-3.4842713E37F,
					-1.4268182E38F,
					1.7304564E38F,
					2.1419188E38F,
					2.8913161E38F,
					-5.522042E37F,
					-2.6091697E38F,
					-2.203594E37F,
					-1.6260752E38F,
					2.6815818E38F,
					-9.043594E37F,
					-4.0882523E37F,
					-2.159959E38F,
					-1.6483601E38F,
					-2.792469E38F,
					-1.2942453E38F,
					-3.072892E38F,
					-1.4001266E38F,
					1.06191553E37F,
					-2.579353E38F,
					2.037067E38F,
					-3.2491102E38F,
					1.7161239E38F,
					1.4872191E37F,
					-1.9419768E38F,
					2.9256155E38F,
					3.0706696E38F,
					-1.6613156E38F,
					5.6487986E37F,
					-1.4289767E38F,
					-8.886608E37F,
					-1.6841724E37F,
					3.8221025E36F,
					4.2081698E37F,
					2.4242323E38F,
					2.0449085E37F,
					2.7173969E38F,
					1.5431149E37F,
					-2.4365216E38F,
					-5.594992E37F,
					-4.1257347E37F,
					-9.804788E37F,
					1.5396158E38F,
					-9.594629E37F,
					2.6790942E38F,
					9.606033E37F,
					1.5262361E38F,
					1.0502085E38F,
					3.3900366E38F,
					-8.53303E37F,
					1.2500024E38F,
					-2.8555536E38F,
					2.3284028E38F,
					1.219066E38F,
					-1.2861473E37F,
					-1.0920688E38F,
					-2.5438642E37F,
					3.0803277E38F,
					1.7877486E38F,
					-2.9764183E38F,
					-2.0657074E38F,
					-1.5236697E38F,
					3.1879673E37F,
					1.1128665E38F,
					-9.354067E37F,
					4.0353096E36F,
					-1.9823561E37F,
					2.6678062E38F,
					-1.9087011E38F,
					9.547406E37F,
					2.7434227E38F,
					-9.525558E37F,
					3.0478929E38F,
					-2.5886896E38F,
					2.8347856E38F,
					2.1887667E38F,
					-1.2829482E38F,
					1.4481132E38F,
					-2.8222253E38F,
					8.579477E37F,
					2.7698456E38F,
					-2.180706E38F,
					-1.9569093E38F,
					1.5999851E38F,
					-1.71218E38F,
					6.9467456E36F,
					-2.525577E38F,
					3.0914674E38F,
					-2.447302E38F,
					-1.0725924E38F,
					2.7517677E38F,
					-8.52299E37F,
					-1.6608197E38F,
					5.5162987E37F,
					4.3594803E37F,
					1.8998916E38F,
					3.1324924E38F,
					3.0428095E38F,
					-3.0191642E38F,
					-3.1974998E38F,
					1.2370621E38F,
					-1.5574916E37F,
					-3.2565208E38F,
					1.4934889E38F,
					-5.5782016E37F,
					-3.2978553E38F,
					1.7622384E38F,
					-1.5805597E38F,
					1.3483157E38F,
					9.621706E37F,
					-1.0447856E36F,
					-3.1136281E38F,
					3.1122102E38F,
					-3.2520106E38F,
					-3.840095E37F,
					-3.3719662E38F,
					3.3957753E38F,
					-1.871392E38F,
					1.4961984E37F,
					2.4660925E38F,
					-4.0091694E37F,
					1.0549146E38F,
					1.8922622E38F,
					-7.4838527E37F,
					1.813405E38F,
					6.557974E37F,
					1.4177385E38F,
					2.9135913E38F,
					-3.2456764E38F,
					3.121417E38F,
					6.3398325E37F,
					3.0650147E38F,
					5.9837E37F,
					-3.0891724E38F,
					-9.869386E37F,
					3.2191366E38F,
					1.8274317E38F,
					-5.078799E36F,
					2.9218245E38F,
					-1.5698258E38F,
					-3.0103065E38F,
					-1.7071412E38F,
					-1.3783249E37F,
					-3.0678256E38F,
					8.0439286E37F,
					-2.6490916E38F,
					5.0027897E37F,
					1.4499532E38F,
					2.352258E34F,
					2.2023105E38F,
					2.8567912E38F,
					-1.969228E38F,
					7.7374715E37F,
					-4.279826E37F,
					2.8493157E38F,
					-2.7646042E37F,
					-2.0304404E38F,
					-2.8021792E38F,
					2.4085585E38F,
					9.845103E36F,
					-1.0920085E37F,
					1.766834E38F,
					3.2636648E37F,
					-2.4101693E38F,
					-1.7335467E38F,
					2.848043E37F,
					3.234225E38F,
					-4.3083925E37F,
					2.4411137E38F,
					1.0480098E37F,
					-9.865041E37F,
					1.7429666E38F,
					3.0636799E38F,
					-1.2066519E38F,
					2.5738593E38F,
					1.083487E38F,
					3.166557E38F,
					-2.099018E38F,
					-2.0688526E38F,
					3.606754E36F,
					-1.5190841E38F,
					4.934297E37F,
					2.817028E38F,
					-2.6867414E38F,
					-1.462903E38F,
					2.9851634E38F,
					2.144805E38F,
					-7.776858E37F,
					-2.1548006E38F,
					-2.1969931E37F,
					-2.894166E38F,
					-1.8441298E38F,
					-2.9889467E37F,
					-5.895067E37F,
					-1.8335661E38F,
					-3.0212712E38F);
				psafety_set_allowed_area.frame(MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_LOCAL_ENU,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_BODY_NED,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_MISSION,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
					MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT);
			}

			void on_SAFETY_SET_ALLOWED_AREA(const com::company::demo::SAFETY_SET_ALLOWED_AREA& psafety_set_allowed_area) {
				assert(psafety_set_allowed_area.target_system() == -25,
					-14,
					106,
					-48,
					-39,
					-66,
					-118,
					-43,
					99,
					101,
					-57,
					-27,
					8,
					-45,
					75,
					100,
					-122,
					-44,
					108,
					-80,
					-106,
					-23,
					76,
					-120,
					46,
					63,
					-113,
					102,
					18,
					-67,
					-24,
					111,
					-62,
					-100,
					-106,
					-17,
					-84,
					-48,
					-123,
					42,
					-93,
					105,
					11,
					-16,
					-8,
					2,
					-122,
					127,
					39,
					117,
					46,
					-125,
					-125,
					-54,
					87,
					53,
					-2,
					112,
					84,
					-102,
					-20,
					22,
					74,
					82,
					-31,
					107,
					-15,
					-26,
					58,
					-39,
					20,
					78,
					-72,
					12,
					56,
					-14,
					-103,
					60,
					-74,
					-54,
					-70,
					-25,
					40,
					107,
					112,
					45,
					-122,
					-38,
					2,
					-105,
					-47,
					-69,
					94,
					92,
					-8,
					-120,
					76,
					76,
					12,
					62,
					-86,
					117,
					-21,
					20,
					-78,
					-40,
					-72,
					47,
					45,
					-78,
					115,
					-125,
					-118,
					-11,
					105,
					107,
					86,
					-37,
					91,
					-105,
					17,
					106,
					-14,
					96,
					39,
					-61,
					48,
					34,
					5,
					-113,
					-90,
					120,
					-64,
					-102,
					65,
					36,
					-110,
					64,
					73,
					74,
					-60,
					48,
					20,
					73,
					-46,
					117,
					-113,
					-69,
					-79,
					65,
					-59,
					-27,
					-112,
					-31,
					96,
					-33,
					-125,
					98,
					-125,
					72,
					34,
					4,
					40,
					-54,
					-119,
					59,
					20,
					-68,
					25,
					15,
					-95,
					55,
					-112,
					35,
					-26,
					115,
					-29,
					72,
					32,
					71,
					70,
					-104,
					94,
					90,
					109,
					-83,
					-36,
					-56,
					-32,
					70,
					-98,
					-36,
					-43,
					119,
					-59,
					87,
					-115,
					-101,
					-115,
					-54,
					106,
					-2,
					45,
					10,
					-48,
					77,
					-74,
					57,
					-78,
					77,
					52,
					-111,
					63,
					-118,
					-112,
					112,
					19,
					44,
					34,
					-107,
					-118,
					56,
					7,
					31,
					83,
					-90,
					19,
					43,
					114,
					4,
					34,
					-11,
					-92,
					57,
					-91,
					-82,
					115,
					59,
					-27,
					45,
					-39,
					-94,
					-83,
					6,
					108,
					-114,
					73,
					5,
					-80,
					31,
					-86,
					-20,
					-56,
					54,
					56);
				assert(psafety_set_allowed_area.target_component() == -66,
					-105,
					21,
					61,
					-49,
					32,
					-116,
					25,
					-82,
					86,
					-66,
					108,
					-27,
					95,
					-73,
					56,
					-93,
					112,
					9,
					8,
					-103,
					37,
					-22,
					-35,
					-123,
					65,
					83,
					44,
					-35,
					61,
					-71,
					-64,
					-65,
					-52,
					88,
					75,
					-70,
					-34,
					100,
					-115,
					-127,
					-64,
					119,
					-105,
					46,
					-49,
					-66,
					-34,
					-7,
					110,
					46,
					21,
					-76,
					102,
					-1,
					94,
					-9,
					-50,
					-31,
					68,
					110,
					-29,
					-57,
					-66,
					-127,
					127,
					-96,
					-27,
					86,
					-29,
					122,
					-125,
					77,
					26,
					116,
					-48,
					-77,
					117,
					109,
					-78,
					-50,
					-10,
					-98,
					92,
					-57,
					5,
					5,
					-67,
					-116,
					-38,
					-59,
					26,
					-36,
					12,
					80,
					-75,
					-16,
					47,
					-74,
					-8,
					60,
					101,
					-106,
					-89,
					-21,
					-112,
					56,
					59,
					-61,
					-8,
					96,
					-114,
					87,
					-45,
					-69,
					-30,
					5,
					-67,
					123,
					-103,
					-8,
					-70,
					-14,
					-83,
					41,
					-39,
					-18,
					-125,
					-46,
					-71,
					-66,
					67,
					2,
					-19,
					48,
					67,
					126,
					32,
					100,
					66,
					-128,
					-9,
					101,
					-101,
					10,
					20,
					124,
					47,
					79,
					97,
					61,
					113,
					22,
					82,
					34,
					120,
					-40,
					-102,
					100,
					-116,
					-42,
					-94,
					116,
					74,
					-118,
					121,
					113,
					-51,
					56,
					-105,
					72,
					-48,
					41,
					-37,
					-102,
					-85,
					-73,
					116,
					-21,
					-99,
					62,
					-90,
					71,
					115,
					-24,
					69,
					27,
					64,
					-58,
					71,
					99,
					5,
					-21,
					-38,
					76,
					26,
					80,
					36,
					-85,
					96,
					-33,
					-52,
					-52,
					107,
					90,
					29,
					107,
					21,
					-110,
					-58,
					35,
					-68,
					1,
					-68,
					-106,
					-112,
					-20,
					2,
					-117,
					-34,
					-4,
					-46,
					-105,
					-13,
					-76,
					75,
					-44,
					-27,
					-99,
					-76,
					-22,
					-100,
					-60,
					57,
					120,
					-60,
					-38,
					-55,
					46,
					58,
					84,
					63,
					-96,
					-109,
					21,
					67,
					-74,
					-41,
					73,
					-79,
					-30,
					72,
					103,
					116,
					-38);
				assert(psafety_set_allowed_area.p1x() == 8.0267327E37F,
					2.2484666E38F,
					1.5568715E38F,
					-1.7905546E38F,
					1.0832677E37F,
					1.7550274E38F,
					-9.051302E37F,
					1.3846888E38F,
					-1.4812548E38F,
					-1.3232074E38F,
					-3.3817523E38F,
					-1.8246216E38F,
					-2.720108E38F,
					-1.1096158E38F,
					-1.1333513E38F,
					1.4601191E38F,
					1.0625895E38F,
					6.7831203E37F,
					1.0131088E38F,
					-3.3270455E38F,
					2.4240496E37F,
					1.1598711E38F,
					-5.75073E37F,
					5.7830436E36F,
					-3.0713034E37F,
					1.4098832E38F,
					-2.8306636E38F,
					4.5022695E37F,
					-1.1219437E38F,
					3.4978673E36F,
					3.638132E37F,
					2.1614155E38F,
					1.1961347E37F,
					1.5310576E38F,
					1.8030145E38F,
					2.2195595E38F,
					2.8837203E38F,
					9.078021E37F,
					2.4433907E38F,
					-5.206994E37F,
					-1.9882984E38F,
					2.4084303E38F,
					-2.4221355E38F,
					2.9364278E38F,
					9.731047E37F,
					-6.725819E37F,
					2.2534491E38F,
					-1.2651516E38F,
					1.9585323E38F,
					3.7855896E37F,
					3.6612908E37F,
					3.2884252E38F,
					-1.3043526E38F,
					-2.3911348E38F,
					-2.48994E38F,
					-2.8657927E38F,
					-1.9402707E38F,
					2.8039563E38F,
					-2.5106084E38F,
					-1.5134262E38F,
					-4.5882005E36F,
					-2.9770423E38F,
					-1.9975892E38F,
					1.2625887E38F,
					1.5315382E38F,
					3.378237E38F,
					2.7979414E38F,
					-8.0123083E37F,
					-2.9196766E38F,
					-2.6124741E38F,
					9.706884E37F,
					3.2832217E38F,
					-2.0196357E38F,
					-9.43271E37F,
					-1.3213499E38F,
					-1.0428124E38F,
					2.7856752E38F,
					-2.7333979E38F,
					3.3127021E37F,
					-1.8890943E38F,
					1.3757522E38F,
					-2.329061E38F,
					-3.3658054E38F,
					-1.8193528E38F,
					-1.5464776E37F,
					7.351023E37F,
					-2.9419422E37F,
					1.7640155E38F,
					1.6117716E38F,
					1.2754715E38F,
					1.152071E38F,
					-1.2608902E38F,
					-1.469731E38F,
					-2.575067E38F,
					3.5126286E37F,
					-2.4296341E38F,
					7.923399E37F,
					-3.305016E38F,
					-3.1483109E38F,
					-1.742642E37F,
					2.7309125E38F,
					-1.1392081E38F,
					-4.347856E37F,
					-1.2862087E38F,
					2.6860802E38F,
					-4.7402425E37F,
					-1.7020102E38F,
					-1.3564693E38F,
					-2.1990937E38F,
					2.0822638E38F,
					-1.279565E38F,
					-2.9674475E38F,
					-1.9312545E38F,
					-2.8391088E38F,
					2.8981136E38F,
					-2.5772393E38F,
					9.647718E37F,
					-1.7323255E38F,
					2.3858054E38F,
					-1.4613596E38F,
					-9.236086E37F,
					1.2602379E38F,
					2.1165751E38F,
					2.9205573E38F,
					3.0109442E38F,
					3.2685872E38F,
					1.3791202E38F,
					3.3608252E37F,
					3.3057127E38F,
					1.7147475E37F,
					1.1401922E38F,
					-1.2183567E38F,
					4.704485E37F,
					-1.3830968E38F,
					2.5241808E38F,
					-4.7983075E37F,
					2.1548918E38F,
					-2.6957862E38F,
					-1.6519779E38F,
					2.747292E38F,
					2.0180937E38F,
					1.8380821E37F,
					-1.9084336E38F,
					1.2579726E38F,
					-5.472333E37F,
					-1.3029769E38F,
					1.0683161E38F,
					2.663119E38F,
					-2.5650452E38F,
					1.003276E38F,
					-8.9703E37F,
					3.067763E38F,
					-1.5553985E38F,
					1.8436065E38F,
					-3.5581832E37F,
					-5.295818E37F,
					2.8610993E37F,
					7.9429714E37F,
					1.411301E38F,
					-2.7328515E38F,
					-1.1772326E38F,
					-2.4247872E37F,
					-2.905426E38F,
					2.390542E38F,
					1.6560194E38F,
					-3.238308E38F,
					-2.6798645E38F,
					-2.9246683E38F,
					1.6141717E38F,
					6.267649E37F,
					2.2880284E38F,
					1.975452E38F,
					1.0290873E38F,
					-3.3112672E38F,
					-2.8684554E38F,
					1.3285106E38F,
					-1.9966028E38F,
					3.1562094E37F,
					-2.537603E38F,
					-3.3218224E38F,
					-2.0546716E38F,
					-1.4778898E38F,
					-2.0783758E38F,
					3.0331206E38F,
					-1.0250579E38F,
					1.3111726E38F,
					2.8539006E37F,
					2.4523725E38F,
					1.3484905E38F,
					-1.6554527E38F,
					-2.640861E38F,
					-2.7663675E38F,
					2.8139464E38F,
					1.9878569E38F,
					2.2947966E38F,
					-2.8584568E38F,
					1.4599685E38F,
					-2.394856E38F,
					8.984972E37F,
					6.209614E37F,
					-7.116784E37F,
					4.7010455E36F,
					2.157825E37F,
					-1.0271839E37F,
					-8.667007E37F,
					2.7186707E37F,
					2.5566543E38F,
					-3.0440094E38F,
					2.3430075E38F,
					-1.9440414E38F,
					7.4511595E37F,
					-1.1174727E38F,
					2.6042316E38F,
					-1.0660183E38F,
					1.916318E38F,
					2.926215E38F,
					-1.1934418E38F,
					2.7728048E38F,
					-2.0550642E38F,
					-1.3921156E38F,
					2.2399764E37F,
					-1.1376832E38F,
					-1.6821764E38F,
					6.591742E37F,
					3.2347113E38F,
					1.9980946E38F,
					-2.9279814E38F,
					-3.3741717E38F,
					1.3749451E38F,
					1.4465865E38F,
					-2.8480888E38F,
					1.1072741E38F,
					1.3911748E38F,
					-7.376068E37F,
					-3.131292E38F,
					-8.194859E37F,
					2.6258966E37F,
					-8.4283513E37F,
					-3.6072415E37F,
					-1.8175818E38F,
					-1.8209369E38F,
					8.035931E37F,
					1.9282862E38F,
					2.3897911E38F,
					-1.216974E38F,
					-1.5906832E38F,
					-2.626859E38F,
					-1.2704129E38F,
					-2.3837295E37F,
					1.4270918E38F,
					-2.2374986E38F,
					1.5806976E38F,
					3.0589134E37F,
					2.7281743E38F,
					-2.50211E38F);
				assert(psafety_set_allowed_area.p1y() == 2.0422161E38F,
					-8.973706E37F,
					1.0624688E38F,
					2.9888506E38F,
					8.4333435E36F,
					8.436558E36F,
					2.8366493E38F,
					1.640428E38F,
					-3.9209467E37F,
					2.626733E38F,
					-3.3020966E38F,
					-1.4507955E38F,
					2.9211955E38F,
					-3.3485198E37F,
					2.3160149E38F,
					-1.6061452E38F,
					-1.4287668E38F,
					2.2943762E38F,
					2.9698808E38F,
					8.153793E37F,
					1.7148384E38F,
					-1.2154512E38F,
					-1.2621945E38F,
					2.1839931E37F,
					-2.1684847E38F,
					1.1533989E38F,
					1.7549801E38F,
					-1.659814E38F,
					-2.9643343E37F,
					2.0053425E38F,
					-2.0888407E38F,
					3.316578E38F,
					2.0295613E38F,
					-2.9626317E38F,
					-1.4750481E38F,
					-3.147716E37F,
					-2.7638662E37F,
					-2.8337266E38F,
					2.6140677E37F,
					1.7124317E38F,
					3.153559E38F,
					-3.313479E38F,
					3.9717382E37F,
					2.9336382E38F,
					-3.1159233E38F,
					2.7507722E38F,
					9.5224994E36F,
					-1.2832061E38F,
					1.7880632E38F,
					3.2501833E38F,
					-1.7417846E38F,
					8.272134E37F,
					2.157836E38F,
					2.2231225E38F,
					1.41667E38F,
					7.3723537E37F,
					-1.4990716E38F,
					-2.6459827E38F,
					-2.0690041E38F,
					2.7670089E38F,
					-1.1082776E38F,
					-8.851231E37F,
					3.1575067E38F,
					-1.5338367E38F,
					8.295112E37F,
					-2.8983182E38F,
					-3.3148747E38F,
					-2.7472903E38F,
					-2.7270156E37F,
					-1.906313E38F,
					-1.0207099E38F,
					3.1689326E38F,
					3.1567999E38F,
					-5.114787E37F,
					3.1209479E38F,
					-3.0902373E37F,
					1.8105302E37F,
					-2.0879491E37F,
					-1.7891004E38F,
					-7.1279263E37F,
					3.0965873E38F,
					-2.4403E38F,
					-1.5647046E38F,
					-1.4616029E38F,
					-2.9712073E38F,
					-1.2110941E38F,
					6.243194E37F,
					-1.4542556E38F,
					2.9426354E37F,
					4.7782365E37F,
					2.3283458E37F,
					-2.2018912E38F,
					1.2032486E38F,
					-1.0332681E38F,
					2.2147199E38F,
					-7.4228234E37F,
					8.753447E37F,
					3.935468E37F,
					1.1403301E38F,
					-1.6254572E38F,
					1.202015E38F,
					3.1603882E38F,
					-3.2781858E38F,
					-3.1864457E38F,
					-1.2215736E38F,
					1.777213E38F,
					2.8120774E38F,
					2.9704605E38F,
					-1.9119353E38F,
					-1.296326E38F,
					2.1749862E37F,
					-2.3901126E38F,
					-2.4967214E38F,
					2.9870752E38F,
					1.6217554E38F,
					1.339808E38F,
					2.050571E38F,
					-1.2673717E38F,
					3.254592E38F,
					-2.859024E38F,
					-1.6660195E38F,
					-1.1722276E38F,
					8.4301153E37F,
					3.1617407E38F,
					-1.6001314E38F,
					2.2738577E38F,
					2.2163321E38F,
					-3.9631096E37F,
					1.461414E38F,
					4.2117433E37F,
					-4.2474923E37F,
					-3.8621042E37F,
					3.7120998E37F,
					-1.7151348E37F,
					-4.359049E37F,
					-1.2025266E38F,
					-5.6458607E37F,
					2.438023E38F,
					-5.054215E37F,
					1.7853208E38F,
					-1.2108511E38F,
					-2.531256E37F,
					1.4146716E38F,
					-2.4902018E38F,
					-4.8133256E37F,
					2.734454E38F,
					2.7466062E38F,
					-2.4425964E38F,
					1.0536717E38F,
					1.1117138E38F,
					-9.470476E37F,
					1.4777051E37F,
					-1.3566493E38F,
					1.8581253E38F,
					5.0318397E37F,
					1.768829E38F,
					1.1757289E38F,
					1.0915551E38F,
					1.7097325E38F,
					-2.1426926E38F,
					-2.995894E38F,
					7.8066624E37F,
					-1.6695657E38F,
					-1.5516555E38F,
					8.916579E36F,
					2.483585E38F,
					1.3794013E38F,
					-3.6363904E35F,
					-7.972177E37F,
					-1.9915487E38F,
					1.4105575E38F,
					-7.8699623E37F,
					-1.2613016E38F,
					-1.0322075E38F,
					-4.580186E37F,
					7.5271663E37F,
					1.6162522E38F,
					1.7548426E38F,
					-1.306628E38F,
					-1.2283712E38F,
					1.5357955E38F,
					-2.0326956E38F,
					1.9151531E38F,
					2.0304304E38F,
					-8.4961275E37F,
					-2.4698365E38F,
					-7.132481E37F,
					1.2000956E38F,
					-1.1089057E38F,
					-2.4712187E37F,
					3.563786E37F,
					2.828753E38F,
					3.6825612E37F,
					-1.72974E38F,
					1.8289222E37F,
					-2.830046E38F,
					-2.4923177E38F,
					1.1095143E38F,
					8.853402E37F,
					-1.6169857E38F,
					1.144451E37F,
					1.8405891E38F,
					-2.7078666E38F,
					2.0253976E38F,
					7.1669334E37F,
					2.9166227E38F,
					-2.1269891E38F,
					-1.5984524E38F,
					-8.851755E37F,
					-2.1511337E38F,
					8.3929884E37F,
					2.2767423E38F,
					9.122774E37F,
					-3.2458115E38F,
					-1.8757746E38F,
					-2.0695508E38F,
					-8.622751E37F,
					6.6454174E37F,
					9.464299E37F,
					-2.867973E38F,
					7.5600527E37F,
					1.4219011E38F,
					7.3503437E37F,
					-2.2155366E38F,
					2.2986057E38F,
					2.8298669E38F,
					-4.1631786E37F,
					-2.8152907E38F,
					-7.1943796E37F,
					-1.7483348E38F,
					-2.1594105E38F,
					3.7888335E37F,
					1.1567404E38F,
					3.3160868E38F,
					2.78062E38F,
					-2.9503535E38F,
					-1.9603452E38F,
					-2.809812E38F,
					3.2577136E38F,
					-8.2770384E37F,
					-1.4028699E38F,
					1.8601872E38F,
					1.8991607E38F,
					2.8753715E38F,
					-1.0431475E38F,
					3.920019E37F,
					1.4162424E38F,
					3.9886826E37F,
					2.1862093E38F,
					1.6157518E38F,
					-3.0204173E38F,
					-1.4752231E38F,
					-2.6882188E38F,
					9.310661E37F,
					2.2482635E38F);
				assert(psafety_set_allowed_area.p1z() == -2.6152058E38F,
					6.9582396E37F,
					-7.2782585E37F,
					-2.4636622E37F,
					-3.4639643E37F,
					1.1960153E38F,
					1.7115202E38F,
					-7.5618046E37F,
					-2.5389295E38F,
					2.72006E38F,
					1.5394694E38F,
					2.1995653E38F,
					-1.3723853E37F,
					9.605347E37F,
					2.1506116E38F,
					3.0559649E37F,
					-8.74344E37F,
					4.3025765E37F,
					1.7848056E38F,
					-1.4552334E37F,
					-5.238096E37F,
					3.1471138E38F,
					-1.4476192E38F,
					-8.1196515E37F,
					4.788469E37F,
					-1.4004033E38F,
					-2.8039113E38F,
					-2.2391383E38F,
					1.5205139E38F,
					-2.4964543E38F,
					-1.5225729E38F,
					2.1430605E38F,
					8.328062E37F,
					1.5573243E38F,
					1.6252684E38F,
					1.1576663E38F,
					2.0998358E38F,
					-2.878341E38F,
					3.102179E37F,
					-2.783572E38F,
					1.9345243E38F,
					-3.6409656E37F,
					1.4298017E38F,
					2.6636876E38F,
					6.7174154E37F,
					-2.6029215E38F,
					-1.5042992E38F,
					7.8858186E37F,
					-1.691748E38F,
					-3.010356E38F,
					1.4829716E38F,
					2.9759627E38F,
					2.1100255E38F,
					-1.7525884E38F,
					-1.6328429E38F,
					2.6101031E38F,
					3.2812582E38F,
					1.9041246E38F,
					2.078508E38F,
					-2.0144318E36F,
					-2.5063073E38F,
					-2.5614827E38F,
					9.317416E37F,
					8.628114E37F,
					-9.073626E37F,
					2.846569E38F,
					2.9581422E38F,
					-2.5947437E38F,
					3.0652568E38F,
					1.6264406E37F,
					-3.259858E37F,
					3.1521006E38F,
					1.5630516E37F,
					1.1584039E38F,
					2.4867267E38F,
					3.0427188E38F,
					-1.8092447E38F,
					-1.3324195E38F,
					-2.1709608E38F,
					6.3884896E35F,
					-1.6398989E38F,
					1.156888E37F,
					3.1291598E38F,
					2.2809902E38F,
					6.560823E37F,
					-1.4975205E38F,
					7.7712336E37F,
					3.0303366E38F,
					-1.7729144E38F,
					-5.8336246E37F,
					-1.4443165E38F,
					2.8240205E38F,
					9.261083E37F,
					-1.0085245E38F,
					1.1553192E38F,
					2.1663133E38F,
					1.6092212E38F,
					2.4454006E38F,
					-1.6374799E38F,
					-3.2117794E38F,
					8.431825E37F,
					-3.0142253E38F,
					-2.5598066E38F,
					3.0714671E38F,
					-3.2061673E38F,
					-2.4670562E37F,
					1.8606494E38F,
					-2.7377243E38F,
					-6.982042E37F,
					-9.834304E37F,
					-2.9251425E38F,
					-1.6231835E38F,
					-2.1061688E37F,
					-8.736982E37F,
					3.1908832E38F,
					2.1473358E38F,
					-1.3828576E38F,
					1.1707236E38F,
					-2.4559335E38F,
					-2.8740456E38F,
					-2.5899578E38F,
					-9.167663E37F,
					2.4124312E38F,
					1.651044E38F,
					-2.0727568E38F,
					-9.470742E37F,
					-3.3641451E38F,
					-7.7435274E37F,
					-6.8582255E37F,
					-9.210934E37F,
					-3.619413E37F,
					2.5092113E38F,
					2.9102869E38F,
					-2.7701707E37F,
					-3.1701285E38F,
					-1.702852E38F,
					2.9152074E38F,
					-1.7806073E38F,
					-1.9764417E38F,
					-3.1026043E37F,
					2.151236E38F,
					2.6753427E38F,
					3.041955E38F,
					3.3935128E38F,
					-1.9109884E38F,
					-6.512988E37F,
					5.745571E37F,
					1.6977772E38F,
					-3.040393E38F,
					-2.8317546E38F,
					-1.948695E38F,
					5.7828897E37F,
					-2.0631138E37F,
					1.4537656E38F,
					-2.7102019E38F,
					-1.8444503E37F,
					3.332332E38F,
					-1.3215025E38F,
					-1.3712618E38F,
					1.77947E38F,
					2.0252067E38F,
					2.065098E38F,
					1.8442118E38F,
					-2.5283048E38F,
					-3.085854E38F,
					-2.349008E38F,
					-2.8216639E38F,
					-2.4252756E38F,
					-5.7443745E36F,
					8.163886E37F,
					1.2696525E38F,
					-1.6932037E38F,
					3.3209647E38F,
					-6.1670046E37F,
					-3.186862E38F,
					-1.8820754E38F,
					-2.0096769E38F,
					-1.402602E38F,
					-3.1801366E38F,
					-1.0793557E38F,
					2.2711326E38F,
					-6.816003E37F,
					1.5867306E38F,
					-2.6525116E38F,
					-1.7167236E38F,
					-1.534719E38F,
					-3.7990533E37F,
					2.4017069E38F,
					-1.9668966E38F,
					-1.4975053E37F,
					1.1457461E38F,
					1.8613741E38F,
					-2.056258E38F,
					1.0086154E37F,
					-1.4728266E38F,
					-5.7891144E37F,
					-2.53904E38F,
					1.8375133E38F,
					3.309044E38F,
					-3.6311656E37F,
					4.5015485E37F,
					-3.294417E38F,
					5.2146E36F,
					9.051986E37F,
					1.246392E38F,
					-1.9662965E38F,
					-1.7844985E38F,
					-1.0420358E38F,
					1.7398932E38F,
					-1.4620236E38F,
					3.1859656E38F,
					2.2423528E38F,
					-3.3728456E36F,
					-8.0417503E37F,
					-3.4657005E37F,
					3.3522012E38F,
					-2.776173E38F,
					-5.1486806E37F,
					2.9702242E38F,
					-1.2963401E38F,
					-1.168953E38F,
					-2.9902062E38F,
					2.3195418E38F,
					-1.5226424E38F,
					3.0085373E38F,
					1.998623E38F,
					6.656917E37F,
					-1.5096707E38F,
					-1.6583069E38F,
					2.2382408E38F,
					2.8851367E38F,
					-6.5022637E37F,
					-1.2721881E38F,
					-9.957146E37F,
					-2.1737735E38F,
					-4.2212387E37F,
					2.5915522E38F,
					1.9398979E38F,
					3.3406966E38F,
					1.2978881E38F,
					1.5140592E38F,
					7.699092E37F,
					-2.5294138E38F,
					1.0282183E38F,
					-3.1797804E38F,
					-1.1759139E38F,
					-1.1823133E38F,
					-3.174937E37F,
					1.9208897E37F,
					1.1960014E38F,
					1.4120981E37F,
					3.402683E35F,
					2.8624009E38F,
					-1.7530255E38F,
					1.7784588E38F);
				assert(psafety_set_allowed_area.p2x() == 3.1823182E37F,
					6.253846E37F,
					2.7476296E38F,
					2.766194E38F,
					-1.3752131E38F,
					7.8436205E37F,
					-1.8184659E38F,
					6.9991807E37F,
					-1.1380454E38F,
					-1.8721216E38F,
					-2.6454424E38F,
					-2.0641676E38F,
					-2.296553E38F,
					1.3553345E38F,
					1.766766E38F,
					9.8243055E36F,
					1.9060123E38F,
					-2.9244022E37F,
					-2.5868773E38F,
					-2.811713E38F,
					-6.4231065E37F,
					3.082786E38F,
					-2.0149661E38F,
					7.2756456E37F,
					4.441987E37F,
					8.748798E37F,
					-1.2608539E38F,
					-2.8069808E38F,
					-2.267291E38F,
					-2.6079573E38F,
					6.190061E37F,
					-1.8642782E38F,
					-1.1175183E38F,
					-5.70968E37F,
					1.9496912E38F,
					-1.751388E36F,
					1.4204543E38F,
					3.2600594E38F,
					9.114623E37F,
					5.3915315E37F,
					1.455035E38F,
					-8.0620895E37F,
					2.0732707E38F,
					2.1518298E38F,
					-2.1061982E38F,
					2.6312187E38F,
					1.2021409E38F,
					-2.1744725E38F,
					7.457904E37F,
					-3.2390951E38F,
					6.6085455E37F,
					-2.8957872E38F,
					9.995525E37F,
					3.2598323E38F,
					2.5610687E37F,
					-3.9532698E37F,
					-1.990773E38F,
					2.4269686E38F,
					1.0846885E38F,
					-2.733634E38F,
					3.135411E38F,
					1.1509964E38F,
					1.466946E38F,
					1.592908E38F,
					1.1114577E37F,
					7.4701286E37F,
					2.1136688E38F,
					1.2502162E36F,
					9.191781E37F,
					3.1198514E38F,
					2.1693635E38F,
					1.8789093E38F,
					-3.344935E38F,
					-6.547557E37F,
					-2.0204059E38F,
					4.632497E37F,
					7.406227E37F,
					-2.1757047E37F,
					-2.0686094E38F,
					8.091597E37F,
					-9.450241E37F,
					-2.2788356E38F,
					1.9596304E38F,
					1.8496831E38F,
					-5.231844E37F,
					-8.731553E37F,
					-1.97549E38F,
					1.716042E38F,
					3.1653225E38F,
					-1.6979659E38F,
					-1.1253199E37F,
					-1.6273348E38F,
					2.1013055E38F,
					3.001638E38F,
					1.5049883E37F,
					3.816965E37F,
					-1.2877167E38F,
					-8.696759E37F,
					-1.1605223E38F,
					-1.5076395E38F,
					2.246815E38F,
					-3.0167504E38F,
					-1.9588483E38F,
					2.9787737E38F,
					-1.4001162E38F,
					-3.1970515E38F,
					-7.4073677E37F,
					1.7004648E38F,
					-1.2423855E38F,
					3.0720555E38F,
					1.3088795E38F,
					1.2394027E38F,
					-3.0573075E38F,
					2.6654125E38F,
					-2.8207625E38F,
					2.6363025E38F,
					-2.6074797E37F,
					-4.247011E37F,
					-8.9029897E36F,
					9.312985E37F,
					3.1736063E38F,
					-1.1627831E37F,
					2.6298779E38F,
					1.3673475E38F,
					1.1995064E38F,
					-2.0207436E38F,
					5.4928954E37F,
					1.4293745E38F,
					-8.770237E37F,
					-3.3162001E38F,
					2.952805E38F,
					-2.1171138E38F,
					-1.4606827E38F,
					-3.3485297E38F,
					-1.0731774E38F,
					1.4255481E38F,
					-2.523567E38F,
					8.739609E37F,
					2.328893E38F,
					-1.0660603E38F,
					2.6710542E38F,
					-3.0950073E38F,
					2.8586467E37F,
					5.5868714E37F,
					2.563228E38F,
					-2.4057061E38F,
					-1.2050326E38F,
					-9.633874E37F,
					-5.6662324E37F,
					-1.14609194E36F,
					-1.6855147E38F,
					-1.5443335E38F,
					-3.1048465E38F,
					-1.9967092E37F,
					-2.9367302E38F,
					-2.417069E38F,
					2.3876138E38F,
					-2.2981775E37F,
					-3.1286931E38F,
					1.7760475E38F,
					-6.4565E37F,
					-2.9231262E38F,
					1.755776E38F,
					8.743376E37F,
					3.130828E37F,
					-2.960631E38F,
					-3.3257753E38F,
					1.7906812E38F,
					-1.8867482E38F,
					-2.9220186E38F,
					-1.1059127E38F,
					2.0253552E38F,
					6.8106263E37F,
					1.186501E38F,
					2.0686938E37F,
					4.0943373E37F,
					-3.169245E37F,
					-1.1420077E38F,
					2.0809385E38F,
					-2.7904097E38F,
					-1.2490665E38F,
					-1.9348324E38F,
					-1.9140285E38F,
					-3.3730193E38F,
					1.1318648E38F,
					-8.2948555E37F,
					7.005193E37F,
					3.1578237E38F,
					-7.977733E37F,
					-3.2611015E38F,
					-4.56928E37F,
					1.911885E38F,
					-2.9781445E38F,
					1.8499622E38F,
					-2.4140381E38F,
					1.030852E38F,
					2.3157346E38F,
					-1.6773244E38F,
					-4.526921E37F,
					-2.084808E38F,
					2.0128864E38F,
					2.2128123E38F,
					-2.4737277E38F,
					1.2793804E38F,
					-1.3170537E38F,
					-3.2522485E38F,
					1.6316462E38F,
					1.05930246E37F,
					-2.0001835E38F,
					-2.4958116E38F,
					-1.7535709E38F,
					-1.4404249E38F,
					2.6180445E38F,
					1.8953808E38F,
					3.3361603E38F,
					1.2654953E38F,
					-3.1784854E38F,
					-9.150044E37F,
					-1.297776E38F,
					-7.175047E35F,
					7.5870704E37F,
					-1.183672E38F,
					2.2011726E38F,
					-8.50919E37F,
					2.117195E38F,
					9.942803E37F,
					-2.3715992E36F,
					-1.3184698E38F,
					3.3250678E38F,
					1.0794661E38F,
					8.1872487E37F,
					2.8126593E38F,
					3.2436966E38F,
					-1.1946057E38F,
					1.7291003E37F,
					-1.1839015E38F,
					-1.6129205E38F,
					2.5700886E38F,
					4.8268596E37F,
					-5.5278653E37F,
					1.2052469E38F,
					-2.2370598E37F,
					2.5682741E38F,
					-2.2356825E38F,
					-4.1362003E36F,
					-1.5260948E38F,
					-3.104033E38F,
					-2.4199219E38F,
					-1.0304621E38F,
					-3.4385256E37F,
					2.4843475E38F,
					-1.0339663E38F,
					-2.120537E38F,
					1.8219457E38F,
					4.357619E37F);
				assert(psafety_set_allowed_area.p2y() == 1.0096884E38F,
					1.8283684E38F,
					6.638532E37F,
					-1.0453809E38F,
					2.2101878E38F,
					-1.3537614E38F,
					-3.1601856E38F,
					-1.7036277E38F,
					2.6947414E38F,
					-3.9561722E37F,
					3.2784312E38F,
					-1.6014105E38F,
					-3.3135669E38F,
					-2.597348E38F,
					-1.257815E38F,
					-2.714821E38F,
					5.314591E37F,
					-5.8097157E37F,
					2.1732803E38F,
					-3.3638683E37F,
					4.1547084E37F,
					-1.667258E38F,
					-1.3104716E37F,
					3.9607365E37F,
					-3.181299E37F,
					-1.0356732E38F,
					1.7260288E38F,
					8.0142793E37F,
					2.1065609E37F,
					-1.5295459E38F,
					4.8739284E37F,
					-4.5155327E37F,
					-1.5422066E38F,
					-2.100347E38F,
					1.6746899E38F,
					-1.9777043E38F,
					2.7697192E38F,
					-4.830407E37F,
					2.0278493E38F,
					-7.1859036E37F,
					1.833779E38F,
					-1.9841571E38F,
					-2.4180212E38F,
					-2.5584749E38F,
					-3.128755E37F,
					3.1440832E38F,
					2.8433218E38F,
					1.1201465E38F,
					2.6605353E38F,
					-5.9660257E37F,
					-2.723477E38F,
					2.831605E38F,
					2.7476528E38F,
					-3.1775895E38F,
					1.4468574E37F,
					1.617456E38F,
					-5.1617737E36F,
					1.6786916E38F,
					2.2415642E38F,
					-2.0946675E38F,
					-2.753851E37F,
					-2.521746E38F,
					-2.5968303E38F,
					-7.069928E37F,
					-1.443559E38F,
					2.410514E38F,
					-1.4509461E38F,
					2.852368E38F,
					-2.4345662E38F,
					1.0786856E38F,
					1.827409E38F,
					-1.692197E38F,
					1.7643307E38F,
					-1.5098568E38F,
					-1.8010843E38F,
					-1.4389736E38F,
					-7.600429E37F,
					1.1360866E38F,
					-1.0345274E38F,
					-2.840225E36F,
					2.4101058E38F,
					-2.7102147E38F,
					1.3424567E37F,
					-7.8638166E36F,
					-2.5032012E38F,
					1.8188026E38F,
					-1.2899081E38F,
					-2.8236323E38F,
					2.7007923E38F,
					2.2112337E38F,
					-1.7717731E38F,
					-1.9151716E38F,
					3.3409467E38F,
					-1.1245521E38F,
					2.065247E38F,
					1.8898533E38F,
					3.3419894E38F,
					-2.7319716E38F,
					-3.383909E38F,
					-6.106324E37F,
					1.4583403E38F,
					-2.7537055E37F,
					-2.1326144E38F,
					-1.3834777E38F,
					1.0228523E37F,
					3.3906634E38F,
					3.2871886E38F,
					9.440976E37F,
					1.3888523E38F,
					-3.3905845E38F,
					-7.680881E37F,
					1.1008296E38F,
					1.8327623E37F,
					-3.0389092E38F,
					-3.257496E38F,
					-1.6304612E38F,
					2.7682426E37F,
					1.7530701E38F,
					-2.4310303E38F,
					3.2336448E38F,
					1.5739914E38F,
					1.5289964E38F,
					3.4493853E37F,
					-1.8136409E38F,
					9.443211E37F,
					1.1948756E38F,
					-3.3020607E38F,
					-9.7244387E36F,
					-3.3456843E38F,
					1.4720461E38F,
					1.2204074E38F,
					-1.2379146E38F,
					-2.7463105E38F,
					-1.2412405E38F,
					-1.6918451E38F,
					2.0919239E38F,
					3.3596486E37F,
					-2.0515778E37F,
					3.2266734E38F,
					-7.300892E37F,
					-2.452215E38F,
					2.43787E38F,
					-5.563001E37F,
					-6.982845E37F,
					-1.5774893E38F,
					-2.0346072E38F,
					-5.1539296E37F,
					2.4467867E38F,
					1.005368E38F,
					-3.1136127E38F,
					-2.0261555E38F,
					1.6141776E38F,
					3.0748113E38F,
					2.263151E38F,
					-2.5402521E38F,
					-1.6915448E38F,
					-1.8120718E37F,
					8.2610837E37F,
					5.944102E37F,
					1.1736377E38F,
					5.989861E37F,
					-3.2792219E38F,
					-5.4039235E37F,
					7.2569834E36F,
					-3.3231294E38F,
					2.3776091E38F,
					3.381793E38F,
					2.3948161E38F,
					-3.1231816E38F,
					-2.6616144E38F,
					1.953231E38F,
					-1.9840685E38F,
					1.5091262E38F,
					-3.9144652E37F,
					-1.6923488E38F,
					-3.363209E37F,
					1.8978581E38F,
					2.7821685E38F,
					-2.860821E38F,
					3.106017E38F,
					2.7615286E38F,
					5.158259E37F,
					6.5404235E37F,
					3.0170883E38F,
					-2.2275592E38F,
					-2.860071E38F,
					-1.6393258E38F,
					-1.1618374E38F,
					2.9949454E38F,
					3.3036488E38F,
					-7.058636E37F,
					2.0022649E38F,
					3.941694E36F,
					-3.042228E38F,
					-2.204845E38F,
					3.229519E38F,
					-2.2496581E38F,
					9.576728E37F,
					-2.151555E38F,
					-1.3341423E38F,
					2.066295E38F,
					-3.1126623E38F,
					4.179477E37F,
					-2.2510578E38F,
					-2.9940325E38F,
					1.7655298E38F,
					3.125352E38F,
					-3.2323423E38F,
					3.2895787E38F,
					6.0398095E37F,
					6.9611324E37F,
					2.3026021E38F,
					-1.2279065E36F,
					7.9852323E37F,
					4.946806E37F,
					-2.8644413E38F,
					-3.233359E38F,
					-3.0644182E38F,
					-2.704062E38F,
					-2.3161372E38F,
					1.1085029E38F,
					1.0361497E38F,
					3.7481186E37F,
					-2.9185775E38F,
					-2.5213865E38F,
					-3.0254496E38F,
					1.9621463E38F,
					5.0244637E36F,
					-1.4807045E37F,
					-1.824904E38F,
					-1.4831657E38F,
					8.0489906E37F,
					2.5293045E38F,
					-3.0250778E38F,
					-2.8339617E38F,
					-2.5781516E38F,
					2.3988695E38F,
					-2.971706E38F,
					-2.847872E38F,
					9.79011E37F,
					6.664192E37F,
					-2.5716175E38F,
					-1.0946455E38F,
					-8.206945E37F,
					2.3475216E38F,
					-8.142957E37F,
					3.2056097E38F,
					-4.0888316E37F,
					1.7647284E38F,
					-7.750809E37F,
					1.4127259E38F,
					-8.1120775E37F,
					2.1416275E37F,
					-3.152743E38F,
					-6.30342E37F);
				assert(psafety_set_allowed_area.p2z() == -3.3159778E38F,
					5.3412933E36F,
					2.3810372E38F,
					1.1152712E38F,
					-2.6981176E38F,
					1.4002237E38F,
					-2.842171E38F,
					-1.3441171E38F,
					2.3161522E38F,
					-2.0999878E38F,
					-3.0199591E38F,
					-1.6641487E38F,
					-2.7225673E38F,
					-1.916129E38F,
					9.478683E37F,
					-2.0157799E38F,
					1.824328E38F,
					2.6726533E38F,
					1.4264355E38F,
					1.9520834E38F,
					-8.043477E36F,
					-3.187499E38F,
					1.4266996E38F,
					-2.5449554E38F,
					1.5471273E38F,
					3.710649E37F,
					-1.463948E38F,
					4.140585E36F,
					-2.4536606E38F,
					-1.9453297E38F,
					2.2841478E38F,
					3.9412898E37F,
					3.1305956E38F,
					-2.4447572E37F,
					-2.6160568E38F,
					3.0054976E38F,
					-3.264732E38F,
					1.4428616E37F,
					2.4592286E38F,
					-2.7252693E38F,
					6.6350967E37F,
					1.6530757E38F,
					1.3792502E38F,
					-1.5782742E38F,
					1.7222017E38F,
					-7.9814005E37F,
					-9.40467E37F,
					1.9958335E38F,
					-7.468671E37F,
					-6.0973963E37F,
					1.5417123E38F,
					3.1341276E38F,
					-5.7124793E37F,
					-3.185234E38F,
					-1.2421019E38F,
					-2.1510952E38F,
					5.1113437E37F,
					3.3320888E38F,
					1.1971379E37F,
					-3.4842713E37F,
					-1.4268182E38F,
					1.7304564E38F,
					2.1419188E38F,
					2.8913161E38F,
					-5.522042E37F,
					-2.6091697E38F,
					-2.203594E37F,
					-1.6260752E38F,
					2.6815818E38F,
					-9.043594E37F,
					-4.0882523E37F,
					-2.159959E38F,
					-1.6483601E38F,
					-2.792469E38F,
					-1.2942453E38F,
					-3.072892E38F,
					-1.4001266E38F,
					1.06191553E37F,
					-2.579353E38F,
					2.037067E38F,
					-3.2491102E38F,
					1.7161239E38F,
					1.4872191E37F,
					-1.9419768E38F,
					2.9256155E38F,
					3.0706696E38F,
					-1.6613156E38F,
					5.6487986E37F,
					-1.4289767E38F,
					-8.886608E37F,
					-1.6841724E37F,
					3.8221025E36F,
					4.2081698E37F,
					2.4242323E38F,
					2.0449085E37F,
					2.7173969E38F,
					1.5431149E37F,
					-2.4365216E38F,
					-5.594992E37F,
					-4.1257347E37F,
					-9.804788E37F,
					1.5396158E38F,
					-9.594629E37F,
					2.6790942E38F,
					9.606033E37F,
					1.5262361E38F,
					1.0502085E38F,
					3.3900366E38F,
					-8.53303E37F,
					1.2500024E38F,
					-2.8555536E38F,
					2.3284028E38F,
					1.219066E38F,
					-1.2861473E37F,
					-1.0920688E38F,
					-2.5438642E37F,
					3.0803277E38F,
					1.7877486E38F,
					-2.9764183E38F,
					-2.0657074E38F,
					-1.5236697E38F,
					3.1879673E37F,
					1.1128665E38F,
					-9.354067E37F,
					4.0353096E36F,
					-1.9823561E37F,
					2.6678062E38F,
					-1.9087011E38F,
					9.547406E37F,
					2.7434227E38F,
					-9.525558E37F,
					3.0478929E38F,
					-2.5886896E38F,
					2.8347856E38F,
					2.1887667E38F,
					-1.2829482E38F,
					1.4481132E38F,
					-2.8222253E38F,
					8.579477E37F,
					2.7698456E38F,
					-2.180706E38F,
					-1.9569093E38F,
					1.5999851E38F,
					-1.71218E38F,
					6.9467456E36F,
					-2.525577E38F,
					3.0914674E38F,
					-2.447302E38F,
					-1.0725924E38F,
					2.7517677E38F,
					-8.52299E37F,
					-1.6608197E38F,
					5.5162987E37F,
					4.3594803E37F,
					1.8998916E38F,
					3.1324924E38F,
					3.0428095E38F,
					-3.0191642E38F,
					-3.1974998E38F,
					1.2370621E38F,
					-1.5574916E37F,
					-3.2565208E38F,
					1.4934889E38F,
					-5.5782016E37F,
					-3.2978553E38F,
					1.7622384E38F,
					-1.5805597E38F,
					1.3483157E38F,
					9.621706E37F,
					-1.0447856E36F,
					-3.1136281E38F,
					3.1122102E38F,
					-3.2520106E38F,
					-3.840095E37F,
					-3.3719662E38F,
					3.3957753E38F,
					-1.871392E38F,
					1.4961984E37F,
					2.4660925E38F,
					-4.0091694E37F,
					1.0549146E38F,
					1.8922622E38F,
					-7.4838527E37F,
					1.813405E38F,
					6.557974E37F,
					1.4177385E38F,
					2.9135913E38F,
					-3.2456764E38F,
					3.121417E38F,
					6.3398325E37F,
					3.0650147E38F,
					5.9837E37F,
					-3.0891724E38F,
					-9.869386E37F,
					3.2191366E38F,
					1.8274317E38F,
					-5.078799E36F,
					2.9218245E38F,
					-1.5698258E38F,
					-3.0103065E38F,
					-1.7071412E38F,
					-1.3783249E37F,
					-3.0678256E38F,
					8.0439286E37F,
					-2.6490916E38F,
					5.0027897E37F,
					1.4499532E38F,
					2.352258E34F,
					2.2023105E38F,
					2.8567912E38F,
					-1.969228E38F,
					7.7374715E37F,
					-4.279826E37F,
					2.8493157E38F,
					-2.7646042E37F,
					-2.0304404E38F,
					-2.8021792E38F,
					2.4085585E38F,
					9.845103E36F,
					-1.0920085E37F,
					1.766834E38F,
					3.2636648E37F,
					-2.4101693E38F,
					-1.7335467E38F,
					2.848043E37F,
					3.234225E38F,
					-4.3083925E37F,
					2.4411137E38F,
					1.0480098E37F,
					-9.865041E37F,
					1.7429666E38F,
					3.0636799E38F,
					-1.2066519E38F,
					2.5738593E38F,
					1.083487E38F,
					3.166557E38F,
					-2.099018E38F,
					-2.0688526E38F,
					3.606754E36F,
					-1.5190841E38F,
					4.934297E37F,
					2.817028E38F,
					-2.6867414E38F,
					-1.462903E38F,
					2.9851634E38F,
					2.144805E38F,
					-7.776858E37F,
					-2.1548006E38F,
					-2.1969931E37F,
					-2.894166E38F,
					-1.8441298E38F,
					-2.9889467E37F,
					-5.895067E37F,
					-1.8335661E38F,
					-3.0212712E38F);
				const auto frame = psafety_set_allowed_area.frame();
				assert(frame.IS_EXISTS);
				{
					auto fld = frame.CASE.EXISTS;

					for (auto item = psafety_set_allowed_area.frame(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_LOCAL_ENU,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_BODY_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_LOCAL_OFFSET_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_BODY_NED,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_TERRAIN_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_MISSION,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
						MAV_FRAME::MAV_FRAME_GLOBAL_RELATIVE_ALT), false;);

				}

				printf("SAFETY_SET_ALLOWED_AREA \n");
			}

			void fill(const com::company::demo::UAVCAN_NODE_STATUS& puavcan_node_status) {

				puavcan_node_status.vendor_specific_status_code(-12068,
					13941,
					31613,
					-29889,
					1166,
					2939,
					4042,
					-3060,
					9843,
					10012,
					-31179,
					8789,
					-30920,
					-2354,
					-32355,
					21350,
					-7749,
					-16732,
					-1380,
					5292,
					8629,
					-32474,
					10319,
					12818,
					6731,
					15709,
					-11355,
					-11895,
					-6749,
					13306,
					13228,
					12387,
					8661,
					31931,
					-31203,
					-22710,
					19518,
					-6129,
					-9948,
					1431,
					20011,
					4539,
					-14951,
					1454,
					-12708,
					2551,
					30654,
					-6491,
					-942,
					1149,
					21511,
					-17367,
					-3556,
					-26375,
					27510,
					-26368,
					-32017,
					22729,
					-26607,
					17124,
					16568,
					20416,
					-22542,
					-26064,
					21613,
					-27358,
					23019,
					19384,
					30397,
					1584,
					12706,
					6754,
					-16437,
					-19499,
					-16917,
					21409,
					9763,
					4385,
					-8634,
					5704,
					-9301,
					13641,
					-12387,
					19055,
					-7727,
					-9156,
					-3491,
					-24312,
					-32493,
					-30758,
					12186,
					28985,
					-24892,
					12197,
					21546,
					-18415,
					-10242,
					-7786,
					4827,
					28590,
					1085,
					5114,
					12937,
					-26234,
					-30108,
					2805,
					26314,
					21674,
					26341,
					-17888,
					12505,
					8237,
					-20497,
					20110,
					-30272,
					-21994,
					-24050,
					26240,
					-14019,
					-9359,
					-23031,
					-6451,
					-31935,
					-15843,
					28756,
					21440,
					-3708,
					2437,
					-15854,
					12584,
					-3168,
					-23151,
					-17454,
					-334,
					25653,
					24488,
					15108,
					-6626,
					-10922,
					22523,
					-15237,
					15457,
					30510,
					23971,
					6829,
					4564,
					-18188,
					-8933,
					30335,
					17234,
					-6529,
					-550,
					-15806,
					-13333,
					-20743,
					-14325,
					-6288,
					-8974,
					-31519,
					-25214,
					20831,
					-46,
					32099,
					15784,
					-27691,
					17766,
					19815,
					18818,
					-4994,
					5937,
					5982,
					6675,
					15336,
					8286,
					27976,
					-21979,
					4707,
					-32097,
					25083,
					20859,
					7911,
					12397,
					-13109,
					15910,
					-9072,
					-634,
					22933,
					15367,
					-11662,
					-29561,
					21761,
					-7838,
					-15001,
					-20017,
					1131,
					28080,
					-32042,
					-20639,
					-32484,
					24039,
					22397,
					22324,
					26945,
					-3923,
					13518,
					25480,
					8131,
					-20041,
					20902,
					13144,
					12775,
					16283,
					-29851,
					-21330,
					20645,
					10700,
					16482,
					-30479,
					27068,
					26827,
					-24266,
					30510,
					13745,
					-18031,
					27068,
					-3219,
					21497,
					27047,
					7109,
					2767,
					29615,
					-27433,
					-15383,
					9446,
					27444,
					15047,
					-30675,
					27393,
					-9207,
					6716,
					-30925,
					-30443,
					-3332,
					-23327,
					26549,
					-30842,
					-32216,
					14197,
					-490,
					4673,
					25883,
					-27956,
					-27665,
					19314,
					-31752);
				puavcan_node_status.uptime_sec(-1502844637,
					-410747783,
					715014395,
					-408775558,
					-806233650,
					-1358940612,
					-1661900390,
					1291146227,
					1859399813,
					1483262687,
					883334313,
					1140377683,
					1040788802,
					1352064253,
					-893928633,
					-1220886035,
					-775944800,
					131125650,
					1670611487,
					-2038424824,
					-236731070,
					-429722135,
					1997695029,
					949245625,
					1500938037,
					719650213,
					1592579523,
					-1191430139,
					-184563999,
					1682846958,
					1729312883,
					1435929370,
					1305232252,
					183697406,
					-1712177277,
					1133269178,
					1079544866,
					-1708000141,
					-476154877,
					590632474,
					721344374,
					334498519,
					1073124102,
					-542021611,
					38262296,
					-848774559,
					-705591833,
					-1583219410,
					-639535414,
					-497965872,
					-31467514,
					-1973055496,
					134113242,
					-1251972423,
					-895980478,
					-809950370,
					-1573704487,
					806030367,
					-1646357852,
					-896041303,
					-960831275,
					1275264460,
					-1356102630,
					-58121307,
					471062648,
					13157561,
					-1869610005,
					-2001867057,
					-1024630367,
					1873514165,
					-347338066,
					332061187,
					1680840686,
					1046630550,
					-2110798501,
					-63711521,
					745966925,
					-667676580,
					-268912074,
					70887939,
					903120511,
					-1543579417,
					-86257232,
					-130232473,
					-343923077,
					-1771096292,
					698769193,
					-2110410639,
					1858735634,
					1782598482,
					-1216474789,
					2098872189,
					1418696660,
					1948066220,
					-324015505,
					1487527499,
					1576941740,
					-1757305203,
					-375336471,
					-1853093327,
					681622149,
					442814148,
					438000697,
					-1300133465,
					-323155239,
					1792963679,
					2097574213,
					133137670,
					-1440308589,
					526969163,
					-274358574,
					2071426938,
					225932362,
					-2067604069,
					-266811109,
					-1370480829,
					-1888758085,
					2123793182,
					-1435841192,
					-495591646,
					61928219,
					-2088216549,
					239195486,
					-2123362941,
					1765621698,
					-145366685,
					-1572965068,
					-317050257,
					1971810278,
					-2134444441,
					-497189131,
					2036871014,
					-2137504159,
					2101754456,
					-425315521,
					-928261077,
					971259280,
					-2098605300,
					-1611824867,
					401190319,
					-679963947,
					1170170245,
					828126464,
					1987444559,
					1503370307,
					-1728311357,
					1235649836,
					1489131611,
					11428239,
					-88407534,
					-1952165129,
					3959947,
					-1705949974,
					791204687,
					-246384389,
					-884547465,
					1278938046,
					-3974445,
					1542807938,
					-1585191879,
					-868005793,
					-630808993,
					-2086939446,
					-2084622480,
					-1516399168,
					1548087091,
					907975850,
					-1253565834,
					-1209624725,
					1633197086,
					-1202762019,
					1939811963,
					128971371,
					-1209933346,
					-734836478,
					993431370,
					89938731,
					-1715528448,
					-1635432972,
					-1794916309,
					-684176098,
					-1897364405,
					-1399492127,
					-1158115304,
					1645674979,
					807617873,
					-1997568493,
					856499905,
					816551412,
					1006085960,
					-902464961,
					1431908181,
					-1580906133,
					-1818449829,
					-1057448298,
					-1269559082,
					402162862,
					-1467824977,
					1103503949,
					-1607191955,
					-1571636683,
					-1085278925,
					784669899,
					-1999731353,
					-1805815478,
					1390407364,
					1792948764,
					1133486626,
					-1388892906,
					35662595,
					-1912131096,
					-550121928,
					39041027,
					-531901848,
					-808216958,
					-857590088,
					883901713,
					2085004992,
					-418906399,
					1791459379,
					-2122044829,
					-592035154,
					-1670079966,
					-431705566,
					-444825517,
					-317571238,
					-495694155,
					1118721973,
					54360044,
					-652980722,
					1533862091,
					-912521790,
					172082417,
					-358790363,
					908068683,
					-1326417401,
					596104906,
					173821962,
					1706905032,
					1908820456,
					1255439996,
					-50415424,
					-541070785,
					-13513566,
					-1649872133,
					1249234297,
					650725977,
					-836857312,
					640998312,
					-2146967613,
					2043681233,
					1893364028,
					-95848594,
					-503283781,
					691503481);
				puavcan_node_status.time_usec(-680463437717408884L,
					-8184451106991519012L,
					7000996657898337985L,
					2871615586337238556L,
					-3947738263971961295L,
					-6891474255129749841L,
					7264446671243898782L,
					-6094618714941457546L,
					1564188393754945963L,
					5510897243299447639L,
					7923046439953666098L,
					3345850784732257841L,
					-426140306019777677L,
					1062679707692217239L,
					-2956975584045330721L,
					-6001028061952749283L,
					509646182877205724L,
					6554458412044389143L,
					-1578364809347260454L,
					9028133358871472124L,
					1967741546589864667L,
					-1442281445579663520L,
					2110350081940543590L,
					-8534787409544360558L,
					-7748230294953813247L,
					-6418626835063481434L,
					3236889266992310L,
					-5216414226474969595L,
					6943786773105178514L,
					-9069147330764841983L,
					5589755052535695848L,
					-5324711088743838778L,
					8025915938556118246L,
					5838014343803412135L,
					4371370496911431997L,
					-913110724176519859L,
					2810883949537101287L,
					-8382464933311286039L,
					3454411239262648276L,
					-6917532285298363552L,
					-7013940775752968761L,
					8054202145703067710L,
					-7846536749762278404L,
					-4013607271284962403L,
					-2009885055744848231L,
					-5409977721447502689L,
					-4019895397533471339L,
					8478655472370157107L,
					-4792597916407104649L,
					6938555573348955725L,
					-6994066544018146471L,
					-5617661361393011813L,
					-1274447290699055007L,
					-7032057217183442770L,
					-9130412747575867660L,
					46703488590436902L,
					3799546537602212153L,
					-8952748983836588998L,
					-1021768641921910339L,
					-2673195570481992368L,
					-2272085230680777670L,
					3717701771098373838L,
					6112388235991397341L,
					-127459177458526996L,
					1218339456312164189L,
					-3811209948220175613L,
					6472835445685741992L,
					5227323763525008938L,
					-8848103550464203386L,
					4407784645882750204L,
					-2912883675882365356L,
					5931547146833357989L,
					695462918257160526L,
					-8115724784867392044L,
					-783457212007000219L,
					-2063339396665813069L,
					-3440904998006014308L,
					-1865283288289522266L,
					-8295486934875036481L,
					2389869199088066814L,
					7963441881259998444L,
					6795594446537272525L,
					-1167115681368944485L,
					1037181252564143618L,
					-4945108868214332455L,
					-6863279861270394413L,
					8820001423071041287L,
					4419635563035457431L,
					-2612120288781319159L,
					716770284785691628L,
					2350374663183943386L,
					2625632323556653888L,
					-6768860061216045489L,
					-3200856394200519342L,
					-7585197219503062805L,
					-8118858748091289581L,
					6419351083415987455L,
					-3541684715260053885L,
					8078780453830294370L,
					-1783488090718377620L,
					3267298555927040592L,
					799586966281765075L,
					2617472823403536493L,
					-1399168363369354158L,
					-4644085369126599040L,
					-587523798658083541L,
					-744234188033142775L,
					-6326823191160465604L,
					-3740263434246376875L,
					-4164591657930805182L,
					6832560912853870167L,
					-5957418892756545822L,
					1608050387631131993L,
					8770659623394554127L,
					-2941274719820358108L,
					2422583192476901884L,
					5399001447719346478L,
					-2415470428035936860L,
					-4482040129966338265L,
					-1065278361341710744L,
					-7578709547731000766L,
					8604495574735006617L,
					2113138801355760765L,
					-442213584087114073L,
					3309911407615590298L,
					4455561157727345314L,
					-8855459919918110019L,
					1283663624001892851L,
					6882173828929902600L,
					-6845669252355756006L,
					5243436059700431567L,
					1734753365307225022L,
					-4970185842209182738L,
					-3385974987962371377L,
					-2669872054131098674L,
					3108558562491551354L,
					-6008860382047223394L,
					1039172765901455753L,
					2090799477957601549L,
					4952960899362928561L,
					2352139784911855070L,
					8316168921806546962L,
					1336779950481216220L,
					1208816792711924761L,
					6838706198817785360L,
					3155857298196305952L,
					-6459578203235964450L,
					-1877000236748833653L,
					1529153421474670587L,
					-5751499598965533685L,
					-6102819990610500627L,
					7776198820815040168L,
					7406745988284612863L,
					-5254447487519970427L,
					-4479582641320693773L,
					2905729021629947758L,
					4086843119737291582L,
					7924589924931478705L,
					-2732660766805239355L,
					-787594266888250765L,
					1318587419629859268L,
					-3227242410721416990L,
					7159016216832823371L,
					-7535160885809816647L,
					3376102057350204735L,
					-1540917283400832184L,
					-6062636237815789062L,
					846125638472952690L,
					-154403362867533110L,
					5933010559123054185L,
					-2692305047939304048L,
					-4476555648422464947L,
					-5680597920759987596L,
					-7470777957576650247L,
					1982152849672908018L,
					-6243885042161709708L,
					5517091945902637154L,
					-1408894387644417800L,
					2618347708769840859L,
					3519096822340305799L,
					4139944760831018335L,
					-6460741328133670419L,
					7188217678130300125L,
					6480380217744685698L,
					5885001281157539090L,
					-8948400550878361845L,
					-6920583728951807639L,
					7971435468865013213L,
					8488478213198749944L,
					7125971109053090840L,
					-6927331852860787705L,
					-5477353681968819023L,
					-8361703256529180299L,
					7528487012120839827L,
					-8355993309779690611L,
					-3413960638082479392L,
					-6899501211982416418L,
					-8166994961996241882L,
					-8203740180841611502L,
					8338361612692508564L,
					-8361577934099814476L,
					-7743559069866186138L,
					8750361566251528351L,
					-6767011060403580343L,
					-5286822648101335291L,
					-8442548641205078508L,
					6277176019237581305L,
					1182357634528139712L,
					5872138639586804948L,
					-3961465607681301619L,
					8015592493669069205L,
					-6187372232438343138L,
					5430862496958073508L,
					-5510418685037296607L,
					-6627055672748863786L,
					1572565052769605938L,
					-4118188723109684448L,
					-1663906377017170983L,
					-4823319753985666940L,
					9043569008614694139L,
					-595493134847786295L,
					1866321323287463021L,
					-5121427769197355233L,
					6413834666037646494L,
					3101941454407334849L,
					-138757585449454165L,
					6225106267438103019L,
					-4956188518014692551L,
					5034277286276642140L,
					-5684944075801788705L,
					-9054459941818655342L,
					-2390408939374204954L,
					-3025154475555487835L,
					5661221967143821520L,
					448072348262048966L,
					643733821177167421L,
					8959765890849522961L,
					-7176531937636561922L,
					-4834264802417882354L,
					-8285774578174321235L,
					-4189492634080445384L,
					-7242884306747099442L,
					4555009599352257065L,
					-4412890646812038003L,
					7064733197406665174L,
					-6982451798023450030L,
					7881423707547641578L,
					-4568152341891167169L,
					-2933010244334090416L,
					2854584030012116448L,
					-2013357974280115965L,
					3773949740555425310L,
					623439683937878276L,
					-7657094561308786216L,
					-75720444435930031L);
				puavcan_node_status.sub_mode(16,
					-77,
					40,
					-76,
					13,
					32,
					-100,
					17,
					-93,
					-98,
					-72,
					124,
					17,
					-17,
					116,
					-20,
					-25,
					74,
					-35,
					121,
					52,
					72,
					58,
					-122,
					-23,
					90,
					29,
					-117,
					69,
					91,
					-70,
					16,
					46,
					67,
					-25,
					85,
					13,
					112,
					-80,
					-45,
					57,
					21,
					-11,
					82,
					-58,
					67,
					23,
					104,
					9,
					-78,
					-75,
					-72,
					68,
					15,
					-4,
					-76,
					-7,
					-101,
					-25,
					-34,
					-54,
					-126,
					-60,
					12,
					-83,
					16,
					69,
					23,
					86,
					28,
					46,
					7,
					74,
					46,
					-56,
					80,
					125,
					64,
					120,
					59,
					35,
					97,
					93,
					84,
					19,
					97,
					-117,
					53,
					-64,
					15,
					5,
					-126,
					28,
					39,
					96,
					-112,
					124,
					89,
					0,
					32,
					-25,
					8,
					-85,
					-30,
					59,
					-55,
					-62,
					-16,
					-38,
					52,
					103,
					-58,
					60,
					-5,
					120,
					7,
					-20,
					-3,
					-46,
					33,
					60,
					16,
					-66,
					38,
					72,
					-28,
					119,
					-37,
					-11,
					-81,
					25,
					-71,
					98,
					-67,
					101,
					-11,
					-33,
					-47,
					49,
					-35,
					101,
					-53,
					-25,
					-42,
					-32,
					37,
					124,
					31,
					91,
					55,
					52,
					-77,
					-44,
					71,
					-81,
					115,
					-47,
					19,
					-22,
					-42,
					56,
					65,
					-96,
					-55,
					-119,
					-73,
					3,
					-98,
					-87,
					76,
					116,
					1,
					-95,
					27,
					55,
					-29,
					125,
					114,
					-49,
					116,
					97,
					77,
					-69,
					118,
					68,
					-30,
					-69,
					118,
					-19,
					92,
					24,
					56,
					99,
					-58,
					125,
					74,
					-9,
					-16,
					38,
					53,
					-93,
					-124,
					10,
					37,
					83,
					65,
					29,
					2,
					5,
					115,
					50,
					-9,
					126,
					85,
					-57,
					23,
					-56,
					15,
					14,
					69,
					75,
					36,
					-77,
					-107,
					80,
					-6,
					-30,
					48,
					23,
					17,
					-19,
					83,
					-93,
					38,
					-38,
					-72,
					61,
					-13,
					-77,
					-35,
					-122,
					68,
					-116,
					-30,
					67,
					-118,
					29,
					-46,
					7,
					55,
					-55,
					62,
					2,
					-91,
					101);
				puavcan_node_status.health(UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
					UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL);
				puavcan_node_status.mode(UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
					UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE);
			}

			void on_UAVCAN_NODE_STATUS(const com::company::demo::UAVCAN_NODE_STATUS& puavcan_node_status) {
				assert(puavcan_node_status.vendor_specific_status_code() == -12068,
					13941,
					31613,
					-29889,
					1166,
					2939,
					4042,
					-3060,
					9843,
					10012,
					-31179,
					8789,
					-30920,
					-2354,
					-32355,
					21350,
					-7749,
					-16732,
					-1380,
					5292,
					8629,
					-32474,
					10319,
					12818,
					6731,
					15709,
					-11355,
					-11895,
					-6749,
					13306,
					13228,
					12387,
					8661,
					31931,
					-31203,
					-22710,
					19518,
					-6129,
					-9948,
					1431,
					20011,
					4539,
					-14951,
					1454,
					-12708,
					2551,
					30654,
					-6491,
					-942,
					1149,
					21511,
					-17367,
					-3556,
					-26375,
					27510,
					-26368,
					-32017,
					22729,
					-26607,
					17124,
					16568,
					20416,
					-22542,
					-26064,
					21613,
					-27358,
					23019,
					19384,
					30397,
					1584,
					12706,
					6754,
					-16437,
					-19499,
					-16917,
					21409,
					9763,
					4385,
					-8634,
					5704,
					-9301,
					13641,
					-12387,
					19055,
					-7727,
					-9156,
					-3491,
					-24312,
					-32493,
					-30758,
					12186,
					28985,
					-24892,
					12197,
					21546,
					-18415,
					-10242,
					-7786,
					4827,
					28590,
					1085,
					5114,
					12937,
					-26234,
					-30108,
					2805,
					26314,
					21674,
					26341,
					-17888,
					12505,
					8237,
					-20497,
					20110,
					-30272,
					-21994,
					-24050,
					26240,
					-14019,
					-9359,
					-23031,
					-6451,
					-31935,
					-15843,
					28756,
					21440,
					-3708,
					2437,
					-15854,
					12584,
					-3168,
					-23151,
					-17454,
					-334,
					25653,
					24488,
					15108,
					-6626,
					-10922,
					22523,
					-15237,
					15457,
					30510,
					23971,
					6829,
					4564,
					-18188,
					-8933,
					30335,
					17234,
					-6529,
					-550,
					-15806,
					-13333,
					-20743,
					-14325,
					-6288,
					-8974,
					-31519,
					-25214,
					20831,
					-46,
					32099,
					15784,
					-27691,
					17766,
					19815,
					18818,
					-4994,
					5937,
					5982,
					6675,
					15336,
					8286,
					27976,
					-21979,
					4707,
					-32097,
					25083,
					20859,
					7911,
					12397,
					-13109,
					15910,
					-9072,
					-634,
					22933,
					15367,
					-11662,
					-29561,
					21761,
					-7838,
					-15001,
					-20017,
					1131,
					28080,
					-32042,
					-20639,
					-32484,
					24039,
					22397,
					22324,
					26945,
					-3923,
					13518,
					25480,
					8131,
					-20041,
					20902,
					13144,
					12775,
					16283,
					-29851,
					-21330,
					20645,
					10700,
					16482,
					-30479,
					27068,
					26827,
					-24266,
					30510,
					13745,
					-18031,
					27068,
					-3219,
					21497,
					27047,
					7109,
					2767,
					29615,
					-27433,
					-15383,
					9446,
					27444,
					15047,
					-30675,
					27393,
					-9207,
					6716,
					-30925,
					-30443,
					-3332,
					-23327,
					26549,
					-30842,
					-32216,
					14197,
					-490,
					4673,
					25883,
					-27956,
					-27665,
					19314,
					-31752);
				assert(puavcan_node_status.uptime_sec() == -1502844637,
					-410747783,
					715014395,
					-408775558,
					-806233650,
					-1358940612,
					-1661900390,
					1291146227,
					1859399813,
					1483262687,
					883334313,
					1140377683,
					1040788802,
					1352064253,
					-893928633,
					-1220886035,
					-775944800,
					131125650,
					1670611487,
					-2038424824,
					-236731070,
					-429722135,
					1997695029,
					949245625,
					1500938037,
					719650213,
					1592579523,
					-1191430139,
					-184563999,
					1682846958,
					1729312883,
					1435929370,
					1305232252,
					183697406,
					-1712177277,
					1133269178,
					1079544866,
					-1708000141,
					-476154877,
					590632474,
					721344374,
					334498519,
					1073124102,
					-542021611,
					38262296,
					-848774559,
					-705591833,
					-1583219410,
					-639535414,
					-497965872,
					-31467514,
					-1973055496,
					134113242,
					-1251972423,
					-895980478,
					-809950370,
					-1573704487,
					806030367,
					-1646357852,
					-896041303,
					-960831275,
					1275264460,
					-1356102630,
					-58121307,
					471062648,
					13157561,
					-1869610005,
					-2001867057,
					-1024630367,
					1873514165,
					-347338066,
					332061187,
					1680840686,
					1046630550,
					-2110798501,
					-63711521,
					745966925,
					-667676580,
					-268912074,
					70887939,
					903120511,
					-1543579417,
					-86257232,
					-130232473,
					-343923077,
					-1771096292,
					698769193,
					-2110410639,
					1858735634,
					1782598482,
					-1216474789,
					2098872189,
					1418696660,
					1948066220,
					-324015505,
					1487527499,
					1576941740,
					-1757305203,
					-375336471,
					-1853093327,
					681622149,
					442814148,
					438000697,
					-1300133465,
					-323155239,
					1792963679,
					2097574213,
					133137670,
					-1440308589,
					526969163,
					-274358574,
					2071426938,
					225932362,
					-2067604069,
					-266811109,
					-1370480829,
					-1888758085,
					2123793182,
					-1435841192,
					-495591646,
					61928219,
					-2088216549,
					239195486,
					-2123362941,
					1765621698,
					-145366685,
					-1572965068,
					-317050257,
					1971810278,
					-2134444441,
					-497189131,
					2036871014,
					-2137504159,
					2101754456,
					-425315521,
					-928261077,
					971259280,
					-2098605300,
					-1611824867,
					401190319,
					-679963947,
					1170170245,
					828126464,
					1987444559,
					1503370307,
					-1728311357,
					1235649836,
					1489131611,
					11428239,
					-88407534,
					-1952165129,
					3959947,
					-1705949974,
					791204687,
					-246384389,
					-884547465,
					1278938046,
					-3974445,
					1542807938,
					-1585191879,
					-868005793,
					-630808993,
					-2086939446,
					-2084622480,
					-1516399168,
					1548087091,
					907975850,
					-1253565834,
					-1209624725,
					1633197086,
					-1202762019,
					1939811963,
					128971371,
					-1209933346,
					-734836478,
					993431370,
					89938731,
					-1715528448,
					-1635432972,
					-1794916309,
					-684176098,
					-1897364405,
					-1399492127,
					-1158115304,
					1645674979,
					807617873,
					-1997568493,
					856499905,
					816551412,
					1006085960,
					-902464961,
					1431908181,
					-1580906133,
					-1818449829,
					-1057448298,
					-1269559082,
					402162862,
					-1467824977,
					1103503949,
					-1607191955,
					-1571636683,
					-1085278925,
					784669899,
					-1999731353,
					-1805815478,
					1390407364,
					1792948764,
					1133486626,
					-1388892906,
					35662595,
					-1912131096,
					-550121928,
					39041027,
					-531901848,
					-808216958,
					-857590088,
					883901713,
					2085004992,
					-418906399,
					1791459379,
					-2122044829,
					-592035154,
					-1670079966,
					-431705566,
					-444825517,
					-317571238,
					-495694155,
					1118721973,
					54360044,
					-652980722,
					1533862091,
					-912521790,
					172082417,
					-358790363,
					908068683,
					-1326417401,
					596104906,
					173821962,
					1706905032,
					1908820456,
					1255439996,
					-50415424,
					-541070785,
					-13513566,
					-1649872133,
					1249234297,
					650725977,
					-836857312,
					640998312,
					-2146967613,
					2043681233,
					1893364028,
					-95848594,
					-503283781,
					691503481);
				assert(puavcan_node_status.time_usec() == -680463437717408884L,
					-8184451106991519012L,
					7000996657898337985L,
					2871615586337238556L,
					-3947738263971961295L,
					-6891474255129749841L,
					7264446671243898782L,
					-6094618714941457546L,
					1564188393754945963L,
					5510897243299447639L,
					7923046439953666098L,
					3345850784732257841L,
					-426140306019777677L,
					1062679707692217239L,
					-2956975584045330721L,
					-6001028061952749283L,
					509646182877205724L,
					6554458412044389143L,
					-1578364809347260454L,
					9028133358871472124L,
					1967741546589864667L,
					-1442281445579663520L,
					2110350081940543590L,
					-8534787409544360558L,
					-7748230294953813247L,
					-6418626835063481434L,
					3236889266992310L,
					-5216414226474969595L,
					6943786773105178514L,
					-9069147330764841983L,
					5589755052535695848L,
					-5324711088743838778L,
					8025915938556118246L,
					5838014343803412135L,
					4371370496911431997L,
					-913110724176519859L,
					2810883949537101287L,
					-8382464933311286039L,
					3454411239262648276L,
					-6917532285298363552L,
					-7013940775752968761L,
					8054202145703067710L,
					-7846536749762278404L,
					-4013607271284962403L,
					-2009885055744848231L,
					-5409977721447502689L,
					-4019895397533471339L,
					8478655472370157107L,
					-4792597916407104649L,
					6938555573348955725L,
					-6994066544018146471L,
					-5617661361393011813L,
					-1274447290699055007L,
					-7032057217183442770L,
					-9130412747575867660L,
					46703488590436902L,
					3799546537602212153L,
					-8952748983836588998L,
					-1021768641921910339L,
					-2673195570481992368L,
					-2272085230680777670L,
					3717701771098373838L,
					6112388235991397341L,
					-127459177458526996L,
					1218339456312164189L,
					-3811209948220175613L,
					6472835445685741992L,
					5227323763525008938L,
					-8848103550464203386L,
					4407784645882750204L,
					-2912883675882365356L,
					5931547146833357989L,
					695462918257160526L,
					-8115724784867392044L,
					-783457212007000219L,
					-2063339396665813069L,
					-3440904998006014308L,
					-1865283288289522266L,
					-8295486934875036481L,
					2389869199088066814L,
					7963441881259998444L,
					6795594446537272525L,
					-1167115681368944485L,
					1037181252564143618L,
					-4945108868214332455L,
					-6863279861270394413L,
					8820001423071041287L,
					4419635563035457431L,
					-2612120288781319159L,
					716770284785691628L,
					2350374663183943386L,
					2625632323556653888L,
					-6768860061216045489L,
					-3200856394200519342L,
					-7585197219503062805L,
					-8118858748091289581L,
					6419351083415987455L,
					-3541684715260053885L,
					8078780453830294370L,
					-1783488090718377620L,
					3267298555927040592L,
					799586966281765075L,
					2617472823403536493L,
					-1399168363369354158L,
					-4644085369126599040L,
					-587523798658083541L,
					-744234188033142775L,
					-6326823191160465604L,
					-3740263434246376875L,
					-4164591657930805182L,
					6832560912853870167L,
					-5957418892756545822L,
					1608050387631131993L,
					8770659623394554127L,
					-2941274719820358108L,
					2422583192476901884L,
					5399001447719346478L,
					-2415470428035936860L,
					-4482040129966338265L,
					-1065278361341710744L,
					-7578709547731000766L,
					8604495574735006617L,
					2113138801355760765L,
					-442213584087114073L,
					3309911407615590298L,
					4455561157727345314L,
					-8855459919918110019L,
					1283663624001892851L,
					6882173828929902600L,
					-6845669252355756006L,
					5243436059700431567L,
					1734753365307225022L,
					-4970185842209182738L,
					-3385974987962371377L,
					-2669872054131098674L,
					3108558562491551354L,
					-6008860382047223394L,
					1039172765901455753L,
					2090799477957601549L,
					4952960899362928561L,
					2352139784911855070L,
					8316168921806546962L,
					1336779950481216220L,
					1208816792711924761L,
					6838706198817785360L,
					3155857298196305952L,
					-6459578203235964450L,
					-1877000236748833653L,
					1529153421474670587L,
					-5751499598965533685L,
					-6102819990610500627L,
					7776198820815040168L,
					7406745988284612863L,
					-5254447487519970427L,
					-4479582641320693773L,
					2905729021629947758L,
					4086843119737291582L,
					7924589924931478705L,
					-2732660766805239355L,
					-787594266888250765L,
					1318587419629859268L,
					-3227242410721416990L,
					7159016216832823371L,
					-7535160885809816647L,
					3376102057350204735L,
					-1540917283400832184L,
					-6062636237815789062L,
					846125638472952690L,
					-154403362867533110L,
					5933010559123054185L,
					-2692305047939304048L,
					-4476555648422464947L,
					-5680597920759987596L,
					-7470777957576650247L,
					1982152849672908018L,
					-6243885042161709708L,
					5517091945902637154L,
					-1408894387644417800L,
					2618347708769840859L,
					3519096822340305799L,
					4139944760831018335L,
					-6460741328133670419L,
					7188217678130300125L,
					6480380217744685698L,
					5885001281157539090L,
					-8948400550878361845L,
					-6920583728951807639L,
					7971435468865013213L,
					8488478213198749944L,
					7125971109053090840L,
					-6927331852860787705L,
					-5477353681968819023L,
					-8361703256529180299L,
					7528487012120839827L,
					-8355993309779690611L,
					-3413960638082479392L,
					-6899501211982416418L,
					-8166994961996241882L,
					-8203740180841611502L,
					8338361612692508564L,
					-8361577934099814476L,
					-7743559069866186138L,
					8750361566251528351L,
					-6767011060403580343L,
					-5286822648101335291L,
					-8442548641205078508L,
					6277176019237581305L,
					1182357634528139712L,
					5872138639586804948L,
					-3961465607681301619L,
					8015592493669069205L,
					-6187372232438343138L,
					5430862496958073508L,
					-5510418685037296607L,
					-6627055672748863786L,
					1572565052769605938L,
					-4118188723109684448L,
					-1663906377017170983L,
					-4823319753985666940L,
					9043569008614694139L,
					-595493134847786295L,
					1866321323287463021L,
					-5121427769197355233L,
					6413834666037646494L,
					3101941454407334849L,
					-138757585449454165L,
					6225106267438103019L,
					-4956188518014692551L,
					5034277286276642140L,
					-5684944075801788705L,
					-9054459941818655342L,
					-2390408939374204954L,
					-3025154475555487835L,
					5661221967143821520L,
					448072348262048966L,
					643733821177167421L,
					8959765890849522961L,
					-7176531937636561922L,
					-4834264802417882354L,
					-8285774578174321235L,
					-4189492634080445384L,
					-7242884306747099442L,
					4555009599352257065L,
					-4412890646812038003L,
					7064733197406665174L,
					-6982451798023450030L,
					7881423707547641578L,
					-4568152341891167169L,
					-2933010244334090416L,
					2854584030012116448L,
					-2013357974280115965L,
					3773949740555425310L,
					623439683937878276L,
					-7657094561308786216L,
					-75720444435930031L);
				assert(puavcan_node_status.sub_mode() == 16,
					-77,
					40,
					-76,
					13,
					32,
					-100,
					17,
					-93,
					-98,
					-72,
					124,
					17,
					-17,
					116,
					-20,
					-25,
					74,
					-35,
					121,
					52,
					72,
					58,
					-122,
					-23,
					90,
					29,
					-117,
					69,
					91,
					-70,
					16,
					46,
					67,
					-25,
					85,
					13,
					112,
					-80,
					-45,
					57,
					21,
					-11,
					82,
					-58,
					67,
					23,
					104,
					9,
					-78,
					-75,
					-72,
					68,
					15,
					-4,
					-76,
					-7,
					-101,
					-25,
					-34,
					-54,
					-126,
					-60,
					12,
					-83,
					16,
					69,
					23,
					86,
					28,
					46,
					7,
					74,
					46,
					-56,
					80,
					125,
					64,
					120,
					59,
					35,
					97,
					93,
					84,
					19,
					97,
					-117,
					53,
					-64,
					15,
					5,
					-126,
					28,
					39,
					96,
					-112,
					124,
					89,
					0,
					32,
					-25,
					8,
					-85,
					-30,
					59,
					-55,
					-62,
					-16,
					-38,
					52,
					103,
					-58,
					60,
					-5,
					120,
					7,
					-20,
					-3,
					-46,
					33,
					60,
					16,
					-66,
					38,
					72,
					-28,
					119,
					-37,
					-11,
					-81,
					25,
					-71,
					98,
					-67,
					101,
					-11,
					-33,
					-47,
					49,
					-35,
					101,
					-53,
					-25,
					-42,
					-32,
					37,
					124,
					31,
					91,
					55,
					52,
					-77,
					-44,
					71,
					-81,
					115,
					-47,
					19,
					-22,
					-42,
					56,
					65,
					-96,
					-55,
					-119,
					-73,
					3,
					-98,
					-87,
					76,
					116,
					1,
					-95,
					27,
					55,
					-29,
					125,
					114,
					-49,
					116,
					97,
					77,
					-69,
					118,
					68,
					-30,
					-69,
					118,
					-19,
					92,
					24,
					56,
					99,
					-58,
					125,
					74,
					-9,
					-16,
					38,
					53,
					-93,
					-124,
					10,
					37,
					83,
					65,
					29,
					2,
					5,
					115,
					50,
					-9,
					126,
					85,
					-57,
					23,
					-56,
					15,
					14,
					69,
					75,
					36,
					-77,
					-107,
					80,
					-6,
					-30,
					48,
					23,
					17,
					-19,
					83,
					-93,
					38,
					-38,
					-72,
					61,
					-13,
					-77,
					-35,
					-122,
					68,
					-116,
					-30,
					67,
					-118,
					29,
					-46,
					7,
					55,
					-55,
					62,
					2,
					-91,
					101);
				const auto health = puavcan_node_status.health();
				assert(health.IS_EXISTS);
				{
					auto fld = health.CASE.EXISTS;

					for (auto item = puavcan_node_status.health(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_WARNING,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_ERROR,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_OK,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL,
						UAVCAN_NODE_HEALTH::UAVCAN_NODE_HEALTH_CRITICAL), false;);

				}

				const auto mode = puavcan_node_status.mode();
				assert(mode.IS_EXISTS);
				{
					auto fld = mode.CASE.EXISTS;

					for (auto item = puavcan_node_status.mode(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_MAINTENANCE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OFFLINE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_INITIALIZATION,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_OPERATIONAL,
						UAVCAN_NODE_MODE::UAVCAN_NODE_MODE_SOFTWARE_UPDATE), false;);

				}

				printf("UAVCAN_NODE_STATUS \n");
			}

			void fill(const com::company::demo::COLLISION& pcollision) {

				pcollision.id(1757442826,
					-1155619608,
					42882298,
					1337957972,
					-1523136951,
					-735498735,
					436470347,
					286130844,
					-74836975,
					1782889321,
					1161933560,
					1363827006,
					-1008786195,
					2127539385,
					2066310296,
					-1619968430,
					2036680097,
					229645362,
					-414075192,
					1858426362,
					-199033152,
					88954906,
					1092552233,
					701131401,
					326619694,
					-1166395833,
					-1429714583,
					-1238070814,
					610895380,
					868949561,
					-1170124644,
					2133957355,
					1837760322,
					235391197,
					1467854411,
					1296156711,
					-1252668026,
					-1160606068,
					837580420,
					-2049537912,
					1220733235,
					129046579,
					-206539480,
					-1433214235,
					-1423824939,
					565195485,
					1839626021,
					745963726,
					-1214407894,
					1667238245,
					-626410179,
					152482517,
					-355219051,
					-1191308719,
					-1767933575,
					703248290,
					-427020977,
					1317408243,
					-232010945,
					-529357947,
					126400269,
					848996459,
					-1010274372,
					17957664,
					1058410431,
					-1872369571,
					-651413244,
					1247991925,
					-1261208391,
					503373572,
					-1454973555,
					260540195,
					-1530259151,
					620956616,
					1261468952,
					-581609380,
					-1716715832,
					159202117,
					1526749960,
					1233291311,
					-2009903710,
					-1625568303,
					-1962390009,
					1463682619,
					-1461826422,
					-658839718,
					1110744719,
					1036165287,
					725649478,
					747060091,
					381926465,
					-1431927011,
					-1424928172,
					694130597,
					512380534,
					-949065780,
					-2107462737,
					317114903,
					1320435189,
					289215337,
					212486339,
					-1475732230,
					1752834031,
					1206837488,
					1210608130,
					524644610,
					1452302413,
					-237895631,
					1653106675,
					-858567448,
					470633791,
					1540579701,
					434925819,
					-897244205,
					2101418857,
					-2083440642,
					-1390289067,
					-1701177021,
					2056598467,
					1323003169,
					772228344,
					420984738,
					-905047649,
					-1139568673,
					1575852998,
					-1541116554,
					-827696961,
					1232990388,
					-1121367743,
					-44962063,
					-1553555703,
					365025668,
					-1039330808,
					-1202618866,
					-974654063,
					2080564951,
					1619973771,
					-896051162,
					725949114,
					-2004713297,
					2014717486,
					1670573772,
					1417716962,
					1929361681,
					795279987,
					-1611880363,
					1907999818,
					-2022773487,
					1610677926,
					-1264228839,
					856384640,
					-141696394,
					71095613,
					1795453661,
					1660088817,
					1545909133,
					-1403279379,
					-1541749381,
					-593674364,
					-1162044767,
					1875754127,
					-351109652,
					-120807968,
					1621273241,
					1231641098,
					907887817,
					1371852702,
					1204761022,
					453142962,
					-402650080,
					1283606685,
					-2042524729,
					68998800,
					521023593,
					-1498200485,
					327985082,
					-109207273,
					133413342,
					-673282819,
					-2016995805,
					-2009046009,
					-501792190,
					-194444760,
					1859762163,
					-340802382,
					-202623002,
					1293580173,
					-680004843,
					-1719600720,
					737453800,
					-1120751941,
					-616514330,
					-216505004,
					1299533042,
					950196313,
					493591057,
					-1866305687,
					2055992410,
					1658816351,
					432361368,
					-38538239,
					1809273898,
					-884553909,
					-451078613,
					-263113773,
					-1219693169,
					788937621,
					1638897458,
					-850611795,
					-1203273622,
					172244904,
					-971863696,
					-600505091,
					-2018727775,
					-1518774956,
					1996925072,
					-1012231965,
					-1520021848,
					-909231415,
					1077024286,
					1148274195,
					666471502,
					-1668184981,
					-2126561753,
					1235941698,
					2081702906,
					-1431439580,
					1318999110,
					195738410,
					1151952031,
					501006700,
					251501458,
					70716121,
					231400018,
					-1238074889,
					121664316,
					1768976557,
					-865304719,
					1722932807,
					1802339592,
					-1075840209,
					-1477468808,
					2106816422,
					-335274334,
					1603331137,
					-1349136230,
					2132212722,
					-1412763254,
					-64377311,
					-1936543077,
					1636318811,
					1269746676,
					-115401275,
					1985520267,
					817368121);
				pcollision.time_to_minimum_delta(4.0455744E36F,
					-1.4014673E38F,
					2.9109827E38F,
					-1.9278309E38F,
					2.7114659E38F,
					1.3006358E38F,
					1.3914982E38F,
					-1.1975816E38F,
					-1.2190069E38F,
					1.1897396E38F,
					2.964079E38F,
					-2.1308345E38F,
					-2.6935628E38F,
					-2.7998108E38F,
					-1.8385747E38F,
					6.474396E37F,
					-1.1887735E38F,
					-1.4141056E38F,
					3.19045E37F,
					-2.242204E37F,
					-3.869639E37F,
					-7.386556E37F,
					5.013668E37F,
					-2.6499907E38F,
					-5.593509E37F,
					2.9437747E38F,
					-2.8978598E38F,
					2.090455E38F,
					-1.2802267E37F,
					-1.925097E38F,
					-7.9114733E37F,
					3.144022E37F,
					-3.136118E38F,
					-6.703164E37F,
					7.8134753E37F,
					-3.3221047E38F,
					2.89741E38F,
					-2.6708092E38F,
					1.8552584E38F,
					-3.3683032E38F,
					-2.3684185E38F,
					-1.7150941E38F,
					-2.6927055E38F,
					1.6187625E38F,
					-2.2635678E38F,
					-1.1560046E38F,
					3.2125785E37F,
					-2.3864989E38F,
					2.7962166E38F,
					1.9353475E38F,
					-3.2739744E38F,
					2.2431112E38F,
					-2.0496837E38F,
					9.282404E36F,
					-2.1371646E38F,
					1.761739E38F,
					2.07819E38F,
					2.4103445E38F,
					-1.8418361E37F,
					2.6777038E38F,
					-2.5713814E38F,
					1.2400526E38F,
					3.0568461E38F,
					-3.1594808E38F,
					-2.3248576E38F,
					-1.1672122E38F,
					3.3752077E38F,
					1.6650451E38F,
					1.8067473E38F,
					1.1441608E38F,
					1.7573428E38F,
					1.5548761E37F,
					-1.475386E38F,
					-2.4338198E38F,
					2.1391884E38F,
					1.4587062E38F,
					-1.7366827E38F,
					-3.3592289E38F,
					-2.4133429E38F,
					1.6700549E38F,
					3.2055551E38F,
					-9.438731E37F,
					4.9122703E37F,
					-1.8242942E38F,
					3.3777032E37F,
					1.895898E38F,
					1.0348703E38F,
					1.1778232E38F,
					-2.7459906E38F,
					2.329481E38F,
					-2.814035E38F,
					1.0623693E38F,
					1.7010749E36F,
					-2.3289522E38F,
					2.5410543E38F,
					-1.33242E38F,
					9.125827E37F,
					-3.1353877E36F,
					1.2245957E37F,
					-2.971381E38F,
					2.1250106E37F,
					-3.2449563E38F,
					-1.737334E38F,
					8.689044E37F,
					1.7479196E38F,
					-1.0284336E38F,
					-2.2187638E38F,
					2.1784036E38F,
					-9.1243735E36F,
					2.2943847E38F,
					3.2948588E38F,
					-8.2736005E37F,
					-2.3559568E38F,
					3.3170849E38F,
					2.5605036E37F,
					3.2580675E38F,
					1.4321407E38F,
					2.2770047E38F,
					-2.4599606E38F,
					-1.5145149E38F,
					-1.1314055E38F,
					-5.1350604E37F,
					2.1095815E38F,
					-1.7174362E38F,
					-2.2085086E38F,
					-2.4476145E38F,
					-2.5268368E37F,
					-1.2226431E38F,
					2.0751897E38F,
					1.5190588E38F,
					-1.1232527E38F,
					2.576499E38F,
					-5.5466153E37F,
					-1.6507093E38F,
					2.6692509E38F,
					1.8164983E38F,
					2.5210944E38F,
					2.1971669E38F,
					2.519592E38F,
					-1.3069886E38F,
					-3.6669915E36F,
					3.2304386E38F,
					-2.2761535E38F,
					-1.1837756E38F,
					1.9648055E38F,
					2.8371406E38F,
					-6.47014E37F,
					-1.6001314E38F,
					-1.8115742E37F,
					-1.8632085E38F,
					1.1423896E38F,
					-3.3424543E38F,
					7.4092206E36F,
					-2.2226197E38F,
					-1.4428513E38F,
					-2.5561832E38F,
					6.549843E37F,
					-2.545902E38F,
					8.71433E37F,
					2.8713665E38F,
					-6.026515E37F,
					2.4929732E38F,
					1.768926E38F,
					-2.4990934E38F,
					1.3675986E38F,
					-2.0575458E38F,
					2.6157597E38F,
					-1.2119177E38F,
					-3.1676564E38F,
					-2.7306867E37F,
					2.4915865E38F,
					2.5995891E38F,
					2.3998088E38F,
					-2.2951419E38F,
					-1.5692171E38F,
					2.0688875E38F,
					1.2834414E38F,
					2.0667185E38F,
					-3.2723989E38F,
					3.0333171E38F,
					-2.37021E38F,
					-1.7263503E38F,
					-2.6480298E38F,
					-7.3607623E37F,
					2.5479167E38F,
					-2.4585518E38F,
					7.418995E37F,
					-2.207275E38F,
					-9.926809E37F,
					1.1033955E37F,
					5.634438E37F,
					3.3699937E38F,
					7.3617637E37F,
					2.7610684E38F,
					2.5666146E38F,
					-2.9976947E38F,
					8.689651E37F,
					-2.3948382E38F,
					-8.094955E36F,
					-5.518542E37F,
					3.135167E38F,
					-1.2576084E38F,
					6.955156E35F,
					1.5536098E38F,
					-1.8146633E38F,
					-1.2194936E37F,
					-9.602141E37F,
					1.0044261E38F,
					-5.501725E37F,
					1.7979547E38F,
					-2.4035854E38F,
					1.6156964E38F,
					-2.5529449E38F,
					9.834522E37F,
					2.4232285E38F,
					1.2358574E38F,
					-2.1995308E38F,
					1.1002754E38F,
					2.1174505E38F,
					2.7999469E38F,
					1.4180134E38F,
					1.5052509E38F,
					-1.6304107E38F,
					-2.9106302E38F,
					-1.4260916E38F,
					-3.0131874E38F,
					1.1464377E38F,
					-7.28176E37F,
					3.296672E37F,
					-2.6349576E38F,
					3.2824569E38F,
					7.865444E37F,
					-3.1868961E38F,
					-5.0671326E37F,
					-6.886626E36F,
					-1.3046394E38F,
					8.986514E37F,
					-2.651126E38F,
					1.8491284E37F,
					-1.0036947E38F,
					-1.1727423E38F,
					2.1978595E38F,
					-1.484055E38F,
					2.4173774E38F,
					-5.4764985E37F,
					-2.4779772E38F,
					-1.8467392E38F,
					1.1570678E38F,
					1.804509E38F,
					2.4107678E38F,
					1.2261195E38F,
					2.3925274E38F,
					2.0233286E38F,
					2.8572279E38F,
					3.102437E38F);
				pcollision.altitude_minimum_delta(-3.1018337E38F,
					2.363759E38F,
					2.8821775E38F,
					1.6304908E38F,
					2.5357762E38F,
					1.1355655E38F,
					3.1555955E38F,
					2.0716782E38F,
					3.151447E38F,
					-2.1539823E37F,
					-2.9871694E38F,
					2.3433909E38F,
					-2.1744045E38F,
					3.271071E37F,
					6.600787E37F,
					-2.6293165E38F,
					-2.9518017E38F,
					-2.6098833E38F,
					-2.3832667E38F,
					-2.3642183E38F,
					2.363702E38F,
					-2.8900095E38F,
					1.3879367E38F,
					-2.3114185E38F,
					3.179819E38F,
					1.040704E38F,
					-1.8141751E37F,
					-3.1476677E38F,
					1.38126E38F,
					-6.9671243E37F,
					2.3157527E37F,
					-2.956864E38F,
					-2.5073553E38F,
					3.1699102E38F,
					-1.3121107E38F,
					-2.9341743E38F,
					-1.2769043E37F,
					8.802831E37F,
					2.0950423E38F,
					5.4628977E37F,
					-2.1601304E38F,
					-1.1815913E38F,
					1.6000493E38F,
					2.1544387E38F,
					-2.1425415E37F,
					-1.2151833E38F,
					-9.797466E37F,
					3.284811E38F,
					-2.4537554E38F,
					2.8894108E37F,
					6.234517E37F,
					-3.0113681E37F,
					-2.574709E38F,
					-1.029729E38F,
					1.637149E38F,
					-9.31978E37F,
					2.7668006E38F,
					-2.317861E38F,
					2.8918323E38F,
					2.0142465E38F,
					-2.950705E38F,
					3.3149163E38F,
					3.712564E37F,
					2.4536039E38F,
					2.4558757E38F,
					-6.0809716E37F,
					-1.633047E38F,
					-2.8097997E38F,
					-1.4444511E38F,
					-1.2696823E38F,
					1.4792264E38F,
					-4.0205228E36F,
					1.220881E38F,
					-3.3640478E38F,
					-1.4482072E38F,
					1.5631058E38F,
					-6.856923E37F,
					-6.2932E37F,
					-3.7972527E37F,
					-1.5234857E38F,
					-7.666302E37F,
					4.1113986E37F,
					8.526454E37F,
					-2.887874E38F,
					-2.2754328E38F,
					-8.902733E37F,
					-3.2277526E38F,
					2.69544E38F,
					-2.180287E38F,
					3.3318878E38F,
					1.3740726E38F,
					1.1207386E38F,
					-1.8960816E38F,
					-4.875431E37F,
					1.044951E38F,
					5.1200783E37F,
					3.2176647E38F,
					1.8118283E37F,
					-3.2379476E38F,
					-7.725494E37F,
					1.7387737E38F,
					2.789345E38F,
					-2.1894687E38F,
					-9.035322E37F,
					-3.2561492E38F,
					-1.7813884E38F,
					-1.0713789E38F,
					-3.8020431E37F,
					2.9129781E38F,
					3.175446E38F,
					-1.3996769E38F,
					-2.2066826E38F,
					-1.2905958E37F,
					-3.1976523E38F,
					-7.916652E37F,
					2.2328448E38F,
					2.1750818E38F,
					2.1054916E38F,
					5.102581E37F,
					-2.0401662E38F,
					1.3279476E38F,
					2.7329164E38F,
					-3.8098253E36F,
					-8.4211434E37F,
					1.2782304E38F,
					2.2427956E38F,
					8.359859E37F,
					1.0720261E37F,
					-2.0611755E38F,
					1.5898271E38F,
					-2.4246722E38F,
					3.7331153E36F,
					2.4142639E38F,
					3.362961E38F,
					6.163788E37F,
					-2.2123728E36F,
					-1.4470566E38F,
					-2.98918E38F,
					-1.4754389E38F,
					2.3277947E38F,
					2.9640488E37F,
					-6.526625E36F,
					2.841232E38F,
					1.6506681E38F,
					2.9190777E38F,
					3.1424087E38F,
					3.116905E38F,
					-1.087016E37F,
					-2.6598873E38F,
					2.2558865E38F,
					7.672297E37F,
					-8.3139716E37F,
					-1.5601366E38F,
					-2.816234E38F,
					9.179099E37F,
					2.8112144E38F,
					-7.058609E37F,
					9.200205E37F,
					1.2651428E38F,
					1.1292018E38F,
					1.3954888E38F,
					4.0781347E37F,
					2.8843361E38F,
					4.259509E37F,
					-6.7202894E37F,
					3.1189973E38F,
					-3.0400342E38F,
					2.3985552E37F,
					3.235315E38F,
					-8.424124E37F,
					1.8490952E38F,
					6.590787E37F,
					9.134094E37F,
					-2.9953166E38F,
					-1.3772556E38F,
					1.1586175E38F,
					2.141838E38F,
					-2.7196953E38F,
					-3.059197E38F,
					2.5478574E38F,
					-2.8279912E38F,
					-6.131041E37F,
					3.1635294E38F,
					-2.3301142E38F,
					4.734717E37F,
					-1.1386643E38F,
					2.795153E38F,
					-1.4020006E38F,
					-2.1966957E38F,
					8.856075E37F,
					2.3410267E38F,
					-1.5696119E38F,
					-3.5885756E36F,
					4.2865544E37F,
					2.2985004E38F,
					1.2549839E38F,
					2.4423003E37F,
					-1.551982E38F,
					-2.7379196E38F,
					1.0646139E38F,
					-2.3297812E38F,
					6.0231475E37F,
					1.4841113E38F,
					2.504976E38F,
					-3.2326267E38F,
					-2.6571082E38F,
					2.9733232E38F,
					-2.9911136E37F,
					-2.3533104E38F,
					1.8711295E37F,
					-7.806392E37F,
					8.160383E37F,
					-1.4200709E38F,
					9.503987E37F,
					7.8947195E37F,
					-1.2061046E38F,
					3.394976E38F,
					1.6749388E38F,
					2.1215903E38F,
					-3.0910273E38F,
					-2.6787926E38F,
					-2.866891E38F,
					-2.9330348E38F,
					-2.65178E38F,
					-5.8601705E35F,
					-2.2495606E38F,
					-3.234535E38F,
					-2.4445323E38F,
					-2.25185E38F,
					-2.1743654E38F,
					3.344599E38F,
					-2.1975364E38F,
					2.254774E38F,
					3.0664525E38F,
					5.331649E37F,
					-6.0154306E37F,
					-3.7035074E35F,
					-1.5272492E38F,
					-6.370294E37F,
					-2.8251703E38F,
					1.5722411E38F,
					1.5100999E38F,
					3.1000685E38F,
					1.5732891E38F,
					-1.6686288E38F,
					-2.2167118E38F,
					1.1721631E38F,
					1.6728908E38F,
					-2.4181683E38F,
					-2.614608E38F,
					-2.9745186E38F,
					-1.7358704E38F,
					-2.6259824E38F,
					3.2866083E38F,
					-3.312591E37F);
				pcollision.horizontal_minimum_delta(-1.0255298E38F,
					-8.361117E37F,
					-4.87126E37F,
					-1.7802617E38F,
					-6.5610583E37F,
					-1.6181029E37F,
					1.6038062E38F,
					-3.208095E37F,
					-1.3406006E38F,
					-3.459399E36F,
					-3.9114282E37F,
					-2.574185E38F,
					2.5244057E38F,
					-8.1155184E37F,
					-1.8976318E38F,
					6.839481E37F,
					-1.9999598E38F,
					3.3390436E38F,
					2.193085E38F,
					2.5957773E38F,
					2.0070035E38F,
					-2.4542113E38F,
					-1.3708701E38F,
					-2.9212254E38F,
					8.3913597E37F,
					3.056167E38F,
					3.238017E38F,
					3.0834974E38F,
					-1.8108267E38F,
					-3.0293925E38F,
					-2.1944772E38F,
					9.226245E36F,
					-2.9030807E38F,
					-1.0745869E38F,
					7.7864444E37F,
					-1.9936584E38F,
					-2.069327E38F,
					2.3372666E38F,
					-8.838398E36F,
					3.247474E38F,
					3.2041753E38F,
					-1.1661317E38F,
					1.8044893E38F,
					-1.8822115E38F,
					-1.3497153E38F,
					3.3396547E37F,
					-1.5554746E38F,
					-2.9284187E38F,
					-2.8102222E38F,
					2.8966267E37F,
					-2.738942E38F,
					1.3297244E38F,
					3.135648E37F,
					-3.1006192E38F,
					-1.9749282E38F,
					-3.0051724E38F,
					1.3844827E38F,
					2.6060698E38F,
					-8.4906096E37F,
					-3.1136363E38F,
					3.2636884E38F,
					1.7297541E37F,
					-2.2266993E38F,
					2.7682019E38F,
					-2.6555656E36F,
					-2.6183305E38F,
					-1.445591E38F,
					1.302628E38F,
					-8.914854E37F,
					-2.4683747E38F,
					-2.2847279E38F,
					-1.5199232E38F,
					2.7950607E38F,
					4.479486E37F,
					-2.0265678E37F,
					7.9802834E37F,
					-1.0695812E38F,
					2.2245757E38F,
					-8.736754E37F,
					8.329927E37F,
					-1.0344169E38F,
					2.5901193E38F,
					2.7971688E38F,
					-9.061085E37F,
					6.2580726E37F,
					-1.5411236E38F,
					7.0438735E37F,
					1.5302196E38F,
					2.0596456E38F,
					-1.0229203E38F,
					1.5117344E38F,
					-5.2358204E37F,
					-1.7109786E38F,
					1.552647E38F,
					2.9748612E38F,
					-2.4413293E38F,
					-1.7520264E38F,
					-3.8688544E37F,
					-2.3232379E38F,
					-1.3083906E38F,
					-6.933846E37F,
					-7.3749686E37F,
					3.747562E37F,
					2.7520875E38F,
					-2.5333107E38F,
					-2.8883672E38F,
					9.145186E37F,
					-2.9681173E38F,
					1.742852E37F,
					3.1045938E38F,
					1.0450282E38F,
					8.788018E37F,
					4.5793594E37F,
					2.4899137E37F,
					-2.5405842E38F,
					1.8030581E38F,
					-2.0786847E38F,
					-1.7086198E37F,
					-6.79252E37F,
					-3.248334E38F,
					1.053097E38F,
					-2.083364E38F,
					1.6057095E38F,
					-9.214678E37F,
					-1.1940418E38F,
					2.5894143E38F,
					2.9535206E38F,
					2.580193E38F,
					-1.7556855E38F,
					-1.4461387E38F,
					-9.355267E37F,
					-2.9096881E38F,
					2.528395E36F,
					-1.8590354E38F,
					-1.3997165E38F,
					1.874639E38F,
					-7.303313E37F,
					-2.6674131E38F,
					-2.262305E38F,
					1.1976904E38F,
					3.0116232E38F,
					8.874611E37F,
					2.0924023E38F,
					-1.7105008E38F,
					2.6534038E36F,
					-2.4252618E38F,
					1.208714E38F,
					1.6027172E38F,
					-9.6049335E36F,
					2.0191453E37F,
					-6.570973E37F,
					-8.774191E37F,
					2.146432E38F,
					3.2128037E38F,
					1.3964925E38F,
					2.4059013E38F,
					1.3862772E38F,
					-4.076944E37F,
					-2.5422719E38F,
					-1.928704E37F,
					1.8937083E38F,
					-2.3614511E38F,
					1.5607512E38F,
					-2.7278421E38F,
					-2.8981308E38F,
					-2.6057501E38F,
					-1.6661821E38F,
					2.8157883E38F,
					7.7597894E36F,
					9.022466E37F,
					-2.636751E38F,
					-1.917772E38F,
					2.7983028E38F,
					3.1897975E38F,
					2.8984474E38F,
					1.3839123E38F,
					8.1846393E37F,
					2.6484724E38F,
					-1.5031492E38F,
					1.9368843E38F,
					1.941377E38F,
					2.3057573E38F,
					2.5960914E37F,
					4.5373667E37F,
					-2.8704954E38F,
					8.662651E37F,
					-5.9682385E37F,
					-2.6151559E38F,
					-1.9366304E38F,
					-1.100488E38F,
					-9.867522E37F,
					8.589765E37F,
					-3.0553128E38F,
					-1.2224047E38F,
					3.1775066E38F,
					-2.2452098E38F,
					2.054767E38F,
					4.643828E37F,
					-2.666659E38F,
					-1.1676803E37F,
					-1.0949082E38F,
					1.7786967E38F,
					1.4930127E38F,
					2.0134524E38F,
					-2.4707192E37F,
					-9.708292E37F,
					1.679663E38F,
					-3.094263E38F,
					-7.43098E37F,
					1.7838945E38F,
					1.9307935E38F,
					-2.7248918E37F,
					-5.701713E37F,
					2.2727349E38F,
					2.7506655E38F,
					-7.3314045E37F,
					-9.458666E37F,
					-2.2396362E38F,
					2.386497E38F,
					-1.0914329E38F,
					2.3030522E38F,
					-7.947031E37F,
					-1.6343818E38F,
					-1.6685948E38F,
					-2.9267894E36F,
					-2.4479157E38F,
					2.45838E38F,
					-8.482739E37F,
					-3.1873726E38F,
					-8.3722455E37F,
					-2.8712728E38F,
					-5.3997175E37F,
					-2.4141757E38F,
					2.2886632E38F,
					-2.0602744E38F,
					-2.4098168E38F,
					-1.5408157E38F,
					1.3587739E38F,
					-2.406613E38F,
					3.2697965E37F,
					2.0906554E38F,
					-3.415526E37F,
					3.3473223E38F,
					-5.920546E37F,
					-2.2219004E38F,
					-5.0901594E36F,
					-2.732164E37F,
					-6.543369E37F,
					-3.0256177E38F,
					-3.1466323E37F,
					2.3686283E38F,
					-2.1415127E38F,
					-2.5428503E38F,
					-2.5894887E38F,
					2.3823083E38F);
				pcollision.sRc(MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
					MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT);
				pcollision.action(MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
					MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE);
				pcollision.threat_level(MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
					MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE);
			}

			void on_COLLISION(const com::company::demo::COLLISION& pcollision) {
				assert(pcollision.id() == 1757442826,
					-1155619608,
					42882298,
					1337957972,
					-1523136951,
					-735498735,
					436470347,
					286130844,
					-74836975,
					1782889321,
					1161933560,
					1363827006,
					-1008786195,
					2127539385,
					2066310296,
					-1619968430,
					2036680097,
					229645362,
					-414075192,
					1858426362,
					-199033152,
					88954906,
					1092552233,
					701131401,
					326619694,
					-1166395833,
					-1429714583,
					-1238070814,
					610895380,
					868949561,
					-1170124644,
					2133957355,
					1837760322,
					235391197,
					1467854411,
					1296156711,
					-1252668026,
					-1160606068,
					837580420,
					-2049537912,
					1220733235,
					129046579,
					-206539480,
					-1433214235,
					-1423824939,
					565195485,
					1839626021,
					745963726,
					-1214407894,
					1667238245,
					-626410179,
					152482517,
					-355219051,
					-1191308719,
					-1767933575,
					703248290,
					-427020977,
					1317408243,
					-232010945,
					-529357947,
					126400269,
					848996459,
					-1010274372,
					17957664,
					1058410431,
					-1872369571,
					-651413244,
					1247991925,
					-1261208391,
					503373572,
					-1454973555,
					260540195,
					-1530259151,
					620956616,
					1261468952,
					-581609380,
					-1716715832,
					159202117,
					1526749960,
					1233291311,
					-2009903710,
					-1625568303,
					-1962390009,
					1463682619,
					-1461826422,
					-658839718,
					1110744719,
					1036165287,
					725649478,
					747060091,
					381926465,
					-1431927011,
					-1424928172,
					694130597,
					512380534,
					-949065780,
					-2107462737,
					317114903,
					1320435189,
					289215337,
					212486339,
					-1475732230,
					1752834031,
					1206837488,
					1210608130,
					524644610,
					1452302413,
					-237895631,
					1653106675,
					-858567448,
					470633791,
					1540579701,
					434925819,
					-897244205,
					2101418857,
					-2083440642,
					-1390289067,
					-1701177021,
					2056598467,
					1323003169,
					772228344,
					420984738,
					-905047649,
					-1139568673,
					1575852998,
					-1541116554,
					-827696961,
					1232990388,
					-1121367743,
					-44962063,
					-1553555703,
					365025668,
					-1039330808,
					-1202618866,
					-974654063,
					2080564951,
					1619973771,
					-896051162,
					725949114,
					-2004713297,
					2014717486,
					1670573772,
					1417716962,
					1929361681,
					795279987,
					-1611880363,
					1907999818,
					-2022773487,
					1610677926,
					-1264228839,
					856384640,
					-141696394,
					71095613,
					1795453661,
					1660088817,
					1545909133,
					-1403279379,
					-1541749381,
					-593674364,
					-1162044767,
					1875754127,
					-351109652,
					-120807968,
					1621273241,
					1231641098,
					907887817,
					1371852702,
					1204761022,
					453142962,
					-402650080,
					1283606685,
					-2042524729,
					68998800,
					521023593,
					-1498200485,
					327985082,
					-109207273,
					133413342,
					-673282819,
					-2016995805,
					-2009046009,
					-501792190,
					-194444760,
					1859762163,
					-340802382,
					-202623002,
					1293580173,
					-680004843,
					-1719600720,
					737453800,
					-1120751941,
					-616514330,
					-216505004,
					1299533042,
					950196313,
					493591057,
					-1866305687,
					2055992410,
					1658816351,
					432361368,
					-38538239,
					1809273898,
					-884553909,
					-451078613,
					-263113773,
					-1219693169,
					788937621,
					1638897458,
					-850611795,
					-1203273622,
					172244904,
					-971863696,
					-600505091,
					-2018727775,
					-1518774956,
					1996925072,
					-1012231965,
					-1520021848,
					-909231415,
					1077024286,
					1148274195,
					666471502,
					-1668184981,
					-2126561753,
					1235941698,
					2081702906,
					-1431439580,
					1318999110,
					195738410,
					1151952031,
					501006700,
					251501458,
					70716121,
					231400018,
					-1238074889,
					121664316,
					1768976557,
					-865304719,
					1722932807,
					1802339592,
					-1075840209,
					-1477468808,
					2106816422,
					-335274334,
					1603331137,
					-1349136230,
					2132212722,
					-1412763254,
					-64377311,
					-1936543077,
					1636318811,
					1269746676,
					-115401275,
					1985520267,
					817368121);
				assert(pcollision.time_to_minimum_delta() == 4.0455744E36F,
					-1.4014673E38F,
					2.9109827E38F,
					-1.9278309E38F,
					2.7114659E38F,
					1.3006358E38F,
					1.3914982E38F,
					-1.1975816E38F,
					-1.2190069E38F,
					1.1897396E38F,
					2.964079E38F,
					-2.1308345E38F,
					-2.6935628E38F,
					-2.7998108E38F,
					-1.8385747E38F,
					6.474396E37F,
					-1.1887735E38F,
					-1.4141056E38F,
					3.19045E37F,
					-2.242204E37F,
					-3.869639E37F,
					-7.386556E37F,
					5.013668E37F,
					-2.6499907E38F,
					-5.593509E37F,
					2.9437747E38F,
					-2.8978598E38F,
					2.090455E38F,
					-1.2802267E37F,
					-1.925097E38F,
					-7.9114733E37F,
					3.144022E37F,
					-3.136118E38F,
					-6.703164E37F,
					7.8134753E37F,
					-3.3221047E38F,
					2.89741E38F,
					-2.6708092E38F,
					1.8552584E38F,
					-3.3683032E38F,
					-2.3684185E38F,
					-1.7150941E38F,
					-2.6927055E38F,
					1.6187625E38F,
					-2.2635678E38F,
					-1.1560046E38F,
					3.2125785E37F,
					-2.3864989E38F,
					2.7962166E38F,
					1.9353475E38F,
					-3.2739744E38F,
					2.2431112E38F,
					-2.0496837E38F,
					9.282404E36F,
					-2.1371646E38F,
					1.761739E38F,
					2.07819E38F,
					2.4103445E38F,
					-1.8418361E37F,
					2.6777038E38F,
					-2.5713814E38F,
					1.2400526E38F,
					3.0568461E38F,
					-3.1594808E38F,
					-2.3248576E38F,
					-1.1672122E38F,
					3.3752077E38F,
					1.6650451E38F,
					1.8067473E38F,
					1.1441608E38F,
					1.7573428E38F,
					1.5548761E37F,
					-1.475386E38F,
					-2.4338198E38F,
					2.1391884E38F,
					1.4587062E38F,
					-1.7366827E38F,
					-3.3592289E38F,
					-2.4133429E38F,
					1.6700549E38F,
					3.2055551E38F,
					-9.438731E37F,
					4.9122703E37F,
					-1.8242942E38F,
					3.3777032E37F,
					1.895898E38F,
					1.0348703E38F,
					1.1778232E38F,
					-2.7459906E38F,
					2.329481E38F,
					-2.814035E38F,
					1.0623693E38F,
					1.7010749E36F,
					-2.3289522E38F,
					2.5410543E38F,
					-1.33242E38F,
					9.125827E37F,
					-3.1353877E36F,
					1.2245957E37F,
					-2.971381E38F,
					2.1250106E37F,
					-3.2449563E38F,
					-1.737334E38F,
					8.689044E37F,
					1.7479196E38F,
					-1.0284336E38F,
					-2.2187638E38F,
					2.1784036E38F,
					-9.1243735E36F,
					2.2943847E38F,
					3.2948588E38F,
					-8.2736005E37F,
					-2.3559568E38F,
					3.3170849E38F,
					2.5605036E37F,
					3.2580675E38F,
					1.4321407E38F,
					2.2770047E38F,
					-2.4599606E38F,
					-1.5145149E38F,
					-1.1314055E38F,
					-5.1350604E37F,
					2.1095815E38F,
					-1.7174362E38F,
					-2.2085086E38F,
					-2.4476145E38F,
					-2.5268368E37F,
					-1.2226431E38F,
					2.0751897E38F,
					1.5190588E38F,
					-1.1232527E38F,
					2.576499E38F,
					-5.5466153E37F,
					-1.6507093E38F,
					2.6692509E38F,
					1.8164983E38F,
					2.5210944E38F,
					2.1971669E38F,
					2.519592E38F,
					-1.3069886E38F,
					-3.6669915E36F,
					3.2304386E38F,
					-2.2761535E38F,
					-1.1837756E38F,
					1.9648055E38F,
					2.8371406E38F,
					-6.47014E37F,
					-1.6001314E38F,
					-1.8115742E37F,
					-1.8632085E38F,
					1.1423896E38F,
					-3.3424543E38F,
					7.4092206E36F,
					-2.2226197E38F,
					-1.4428513E38F,
					-2.5561832E38F,
					6.549843E37F,
					-2.545902E38F,
					8.71433E37F,
					2.8713665E38F,
					-6.026515E37F,
					2.4929732E38F,
					1.768926E38F,
					-2.4990934E38F,
					1.3675986E38F,
					-2.0575458E38F,
					2.6157597E38F,
					-1.2119177E38F,
					-3.1676564E38F,
					-2.7306867E37F,
					2.4915865E38F,
					2.5995891E38F,
					2.3998088E38F,
					-2.2951419E38F,
					-1.5692171E38F,
					2.0688875E38F,
					1.2834414E38F,
					2.0667185E38F,
					-3.2723989E38F,
					3.0333171E38F,
					-2.37021E38F,
					-1.7263503E38F,
					-2.6480298E38F,
					-7.3607623E37F,
					2.5479167E38F,
					-2.4585518E38F,
					7.418995E37F,
					-2.207275E38F,
					-9.926809E37F,
					1.1033955E37F,
					5.634438E37F,
					3.3699937E38F,
					7.3617637E37F,
					2.7610684E38F,
					2.5666146E38F,
					-2.9976947E38F,
					8.689651E37F,
					-2.3948382E38F,
					-8.094955E36F,
					-5.518542E37F,
					3.135167E38F,
					-1.2576084E38F,
					6.955156E35F,
					1.5536098E38F,
					-1.8146633E38F,
					-1.2194936E37F,
					-9.602141E37F,
					1.0044261E38F,
					-5.501725E37F,
					1.7979547E38F,
					-2.4035854E38F,
					1.6156964E38F,
					-2.5529449E38F,
					9.834522E37F,
					2.4232285E38F,
					1.2358574E38F,
					-2.1995308E38F,
					1.1002754E38F,
					2.1174505E38F,
					2.7999469E38F,
					1.4180134E38F,
					1.5052509E38F,
					-1.6304107E38F,
					-2.9106302E38F,
					-1.4260916E38F,
					-3.0131874E38F,
					1.1464377E38F,
					-7.28176E37F,
					3.296672E37F,
					-2.6349576E38F,
					3.2824569E38F,
					7.865444E37F,
					-3.1868961E38F,
					-5.0671326E37F,
					-6.886626E36F,
					-1.3046394E38F,
					8.986514E37F,
					-2.651126E38F,
					1.8491284E37F,
					-1.0036947E38F,
					-1.1727423E38F,
					2.1978595E38F,
					-1.484055E38F,
					2.4173774E38F,
					-5.4764985E37F,
					-2.4779772E38F,
					-1.8467392E38F,
					1.1570678E38F,
					1.804509E38F,
					2.4107678E38F,
					1.2261195E38F,
					2.3925274E38F,
					2.0233286E38F,
					2.8572279E38F,
					3.102437E38F);
				assert(pcollision.altitude_minimum_delta() == -3.1018337E38F,
					2.363759E38F,
					2.8821775E38F,
					1.6304908E38F,
					2.5357762E38F,
					1.1355655E38F,
					3.1555955E38F,
					2.0716782E38F,
					3.151447E38F,
					-2.1539823E37F,
					-2.9871694E38F,
					2.3433909E38F,
					-2.1744045E38F,
					3.271071E37F,
					6.600787E37F,
					-2.6293165E38F,
					-2.9518017E38F,
					-2.6098833E38F,
					-2.3832667E38F,
					-2.3642183E38F,
					2.363702E38F,
					-2.8900095E38F,
					1.3879367E38F,
					-2.3114185E38F,
					3.179819E38F,
					1.040704E38F,
					-1.8141751E37F,
					-3.1476677E38F,
					1.38126E38F,
					-6.9671243E37F,
					2.3157527E37F,
					-2.956864E38F,
					-2.5073553E38F,
					3.1699102E38F,
					-1.3121107E38F,
					-2.9341743E38F,
					-1.2769043E37F,
					8.802831E37F,
					2.0950423E38F,
					5.4628977E37F,
					-2.1601304E38F,
					-1.1815913E38F,
					1.6000493E38F,
					2.1544387E38F,
					-2.1425415E37F,
					-1.2151833E38F,
					-9.797466E37F,
					3.284811E38F,
					-2.4537554E38F,
					2.8894108E37F,
					6.234517E37F,
					-3.0113681E37F,
					-2.574709E38F,
					-1.029729E38F,
					1.637149E38F,
					-9.31978E37F,
					2.7668006E38F,
					-2.317861E38F,
					2.8918323E38F,
					2.0142465E38F,
					-2.950705E38F,
					3.3149163E38F,
					3.712564E37F,
					2.4536039E38F,
					2.4558757E38F,
					-6.0809716E37F,
					-1.633047E38F,
					-2.8097997E38F,
					-1.4444511E38F,
					-1.2696823E38F,
					1.4792264E38F,
					-4.0205228E36F,
					1.220881E38F,
					-3.3640478E38F,
					-1.4482072E38F,
					1.5631058E38F,
					-6.856923E37F,
					-6.2932E37F,
					-3.7972527E37F,
					-1.5234857E38F,
					-7.666302E37F,
					4.1113986E37F,
					8.526454E37F,
					-2.887874E38F,
					-2.2754328E38F,
					-8.902733E37F,
					-3.2277526E38F,
					2.69544E38F,
					-2.180287E38F,
					3.3318878E38F,
					1.3740726E38F,
					1.1207386E38F,
					-1.8960816E38F,
					-4.875431E37F,
					1.044951E38F,
					5.1200783E37F,
					3.2176647E38F,
					1.8118283E37F,
					-3.2379476E38F,
					-7.725494E37F,
					1.7387737E38F,
					2.789345E38F,
					-2.1894687E38F,
					-9.035322E37F,
					-3.2561492E38F,
					-1.7813884E38F,
					-1.0713789E38F,
					-3.8020431E37F,
					2.9129781E38F,
					3.175446E38F,
					-1.3996769E38F,
					-2.2066826E38F,
					-1.2905958E37F,
					-3.1976523E38F,
					-7.916652E37F,
					2.2328448E38F,
					2.1750818E38F,
					2.1054916E38F,
					5.102581E37F,
					-2.0401662E38F,
					1.3279476E38F,
					2.7329164E38F,
					-3.8098253E36F,
					-8.4211434E37F,
					1.2782304E38F,
					2.2427956E38F,
					8.359859E37F,
					1.0720261E37F,
					-2.0611755E38F,
					1.5898271E38F,
					-2.4246722E38F,
					3.7331153E36F,
					2.4142639E38F,
					3.362961E38F,
					6.163788E37F,
					-2.2123728E36F,
					-1.4470566E38F,
					-2.98918E38F,
					-1.4754389E38F,
					2.3277947E38F,
					2.9640488E37F,
					-6.526625E36F,
					2.841232E38F,
					1.6506681E38F,
					2.9190777E38F,
					3.1424087E38F,
					3.116905E38F,
					-1.087016E37F,
					-2.6598873E38F,
					2.2558865E38F,
					7.672297E37F,
					-8.3139716E37F,
					-1.5601366E38F,
					-2.816234E38F,
					9.179099E37F,
					2.8112144E38F,
					-7.058609E37F,
					9.200205E37F,
					1.2651428E38F,
					1.1292018E38F,
					1.3954888E38F,
					4.0781347E37F,
					2.8843361E38F,
					4.259509E37F,
					-6.7202894E37F,
					3.1189973E38F,
					-3.0400342E38F,
					2.3985552E37F,
					3.235315E38F,
					-8.424124E37F,
					1.8490952E38F,
					6.590787E37F,
					9.134094E37F,
					-2.9953166E38F,
					-1.3772556E38F,
					1.1586175E38F,
					2.141838E38F,
					-2.7196953E38F,
					-3.059197E38F,
					2.5478574E38F,
					-2.8279912E38F,
					-6.131041E37F,
					3.1635294E38F,
					-2.3301142E38F,
					4.734717E37F,
					-1.1386643E38F,
					2.795153E38F,
					-1.4020006E38F,
					-2.1966957E38F,
					8.856075E37F,
					2.3410267E38F,
					-1.5696119E38F,
					-3.5885756E36F,
					4.2865544E37F,
					2.2985004E38F,
					1.2549839E38F,
					2.4423003E37F,
					-1.551982E38F,
					-2.7379196E38F,
					1.0646139E38F,
					-2.3297812E38F,
					6.0231475E37F,
					1.4841113E38F,
					2.504976E38F,
					-3.2326267E38F,
					-2.6571082E38F,
					2.9733232E38F,
					-2.9911136E37F,
					-2.3533104E38F,
					1.8711295E37F,
					-7.806392E37F,
					8.160383E37F,
					-1.4200709E38F,
					9.503987E37F,
					7.8947195E37F,
					-1.2061046E38F,
					3.394976E38F,
					1.6749388E38F,
					2.1215903E38F,
					-3.0910273E38F,
					-2.6787926E38F,
					-2.866891E38F,
					-2.9330348E38F,
					-2.65178E38F,
					-5.8601705E35F,
					-2.2495606E38F,
					-3.234535E38F,
					-2.4445323E38F,
					-2.25185E38F,
					-2.1743654E38F,
					3.344599E38F,
					-2.1975364E38F,
					2.254774E38F,
					3.0664525E38F,
					5.331649E37F,
					-6.0154306E37F,
					-3.7035074E35F,
					-1.5272492E38F,
					-6.370294E37F,
					-2.8251703E38F,
					1.5722411E38F,
					1.5100999E38F,
					3.1000685E38F,
					1.5732891E38F,
					-1.6686288E38F,
					-2.2167118E38F,
					1.1721631E38F,
					1.6728908E38F,
					-2.4181683E38F,
					-2.614608E38F,
					-2.9745186E38F,
					-1.7358704E38F,
					-2.6259824E38F,
					3.2866083E38F,
					-3.312591E37F);
				assert(pcollision.horizontal_minimum_delta() == -1.0255298E38F,
					-8.361117E37F,
					-4.87126E37F,
					-1.7802617E38F,
					-6.5610583E37F,
					-1.6181029E37F,
					1.6038062E38F,
					-3.208095E37F,
					-1.3406006E38F,
					-3.459399E36F,
					-3.9114282E37F,
					-2.574185E38F,
					2.5244057E38F,
					-8.1155184E37F,
					-1.8976318E38F,
					6.839481E37F,
					-1.9999598E38F,
					3.3390436E38F,
					2.193085E38F,
					2.5957773E38F,
					2.0070035E38F,
					-2.4542113E38F,
					-1.3708701E38F,
					-2.9212254E38F,
					8.3913597E37F,
					3.056167E38F,
					3.238017E38F,
					3.0834974E38F,
					-1.8108267E38F,
					-3.0293925E38F,
					-2.1944772E38F,
					9.226245E36F,
					-2.9030807E38F,
					-1.0745869E38F,
					7.7864444E37F,
					-1.9936584E38F,
					-2.069327E38F,
					2.3372666E38F,
					-8.838398E36F,
					3.247474E38F,
					3.2041753E38F,
					-1.1661317E38F,
					1.8044893E38F,
					-1.8822115E38F,
					-1.3497153E38F,
					3.3396547E37F,
					-1.5554746E38F,
					-2.9284187E38F,
					-2.8102222E38F,
					2.8966267E37F,
					-2.738942E38F,
					1.3297244E38F,
					3.135648E37F,
					-3.1006192E38F,
					-1.9749282E38F,
					-3.0051724E38F,
					1.3844827E38F,
					2.6060698E38F,
					-8.4906096E37F,
					-3.1136363E38F,
					3.2636884E38F,
					1.7297541E37F,
					-2.2266993E38F,
					2.7682019E38F,
					-2.6555656E36F,
					-2.6183305E38F,
					-1.445591E38F,
					1.302628E38F,
					-8.914854E37F,
					-2.4683747E38F,
					-2.2847279E38F,
					-1.5199232E38F,
					2.7950607E38F,
					4.479486E37F,
					-2.0265678E37F,
					7.9802834E37F,
					-1.0695812E38F,
					2.2245757E38F,
					-8.736754E37F,
					8.329927E37F,
					-1.0344169E38F,
					2.5901193E38F,
					2.7971688E38F,
					-9.061085E37F,
					6.2580726E37F,
					-1.5411236E38F,
					7.0438735E37F,
					1.5302196E38F,
					2.0596456E38F,
					-1.0229203E38F,
					1.5117344E38F,
					-5.2358204E37F,
					-1.7109786E38F,
					1.552647E38F,
					2.9748612E38F,
					-2.4413293E38F,
					-1.7520264E38F,
					-3.8688544E37F,
					-2.3232379E38F,
					-1.3083906E38F,
					-6.933846E37F,
					-7.3749686E37F,
					3.747562E37F,
					2.7520875E38F,
					-2.5333107E38F,
					-2.8883672E38F,
					9.145186E37F,
					-2.9681173E38F,
					1.742852E37F,
					3.1045938E38F,
					1.0450282E38F,
					8.788018E37F,
					4.5793594E37F,
					2.4899137E37F,
					-2.5405842E38F,
					1.8030581E38F,
					-2.0786847E38F,
					-1.7086198E37F,
					-6.79252E37F,
					-3.248334E38F,
					1.053097E38F,
					-2.083364E38F,
					1.6057095E38F,
					-9.214678E37F,
					-1.1940418E38F,
					2.5894143E38F,
					2.9535206E38F,
					2.580193E38F,
					-1.7556855E38F,
					-1.4461387E38F,
					-9.355267E37F,
					-2.9096881E38F,
					2.528395E36F,
					-1.8590354E38F,
					-1.3997165E38F,
					1.874639E38F,
					-7.303313E37F,
					-2.6674131E38F,
					-2.262305E38F,
					1.1976904E38F,
					3.0116232E38F,
					8.874611E37F,
					2.0924023E38F,
					-1.7105008E38F,
					2.6534038E36F,
					-2.4252618E38F,
					1.208714E38F,
					1.6027172E38F,
					-9.6049335E36F,
					2.0191453E37F,
					-6.570973E37F,
					-8.774191E37F,
					2.146432E38F,
					3.2128037E38F,
					1.3964925E38F,
					2.4059013E38F,
					1.3862772E38F,
					-4.076944E37F,
					-2.5422719E38F,
					-1.928704E37F,
					1.8937083E38F,
					-2.3614511E38F,
					1.5607512E38F,
					-2.7278421E38F,
					-2.8981308E38F,
					-2.6057501E38F,
					-1.6661821E38F,
					2.8157883E38F,
					7.7597894E36F,
					9.022466E37F,
					-2.636751E38F,
					-1.917772E38F,
					2.7983028E38F,
					3.1897975E38F,
					2.8984474E38F,
					1.3839123E38F,
					8.1846393E37F,
					2.6484724E38F,
					-1.5031492E38F,
					1.9368843E38F,
					1.941377E38F,
					2.3057573E38F,
					2.5960914E37F,
					4.5373667E37F,
					-2.8704954E38F,
					8.662651E37F,
					-5.9682385E37F,
					-2.6151559E38F,
					-1.9366304E38F,
					-1.100488E38F,
					-9.867522E37F,
					8.589765E37F,
					-3.0553128E38F,
					-1.2224047E38F,
					3.1775066E38F,
					-2.2452098E38F,
					2.054767E38F,
					4.643828E37F,
					-2.666659E38F,
					-1.1676803E37F,
					-1.0949082E38F,
					1.7786967E38F,
					1.4930127E38F,
					2.0134524E38F,
					-2.4707192E37F,
					-9.708292E37F,
					1.679663E38F,
					-3.094263E38F,
					-7.43098E37F,
					1.7838945E38F,
					1.9307935E38F,
					-2.7248918E37F,
					-5.701713E37F,
					2.2727349E38F,
					2.7506655E38F,
					-7.3314045E37F,
					-9.458666E37F,
					-2.2396362E38F,
					2.386497E38F,
					-1.0914329E38F,
					2.3030522E38F,
					-7.947031E37F,
					-1.6343818E38F,
					-1.6685948E38F,
					-2.9267894E36F,
					-2.4479157E38F,
					2.45838E38F,
					-8.482739E37F,
					-3.1873726E38F,
					-8.3722455E37F,
					-2.8712728E38F,
					-5.3997175E37F,
					-2.4141757E38F,
					2.2886632E38F,
					-2.0602744E38F,
					-2.4098168E38F,
					-1.5408157E38F,
					1.3587739E38F,
					-2.406613E38F,
					3.2697965E37F,
					2.0906554E38F,
					-3.415526E37F,
					3.3473223E38F,
					-5.920546E37F,
					-2.2219004E38F,
					-5.0901594E36F,
					-2.732164E37F,
					-6.543369E37F,
					-3.0256177E38F,
					-3.1466323E37F,
					2.3686283E38F,
					-2.1415127E38F,
					-2.5428503E38F,
					-2.5894887E38F,
					2.3823083E38F);
				const auto sRc = pcollision.sRc();
				assert(sRc.IS_EXISTS);
				{
					auto fld = sRc.CASE.EXISTS;

					for (auto item = pcollision.sRc(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_ADSB,
						MAV_COLLISION_SRC::MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT), false;);

				}

				const auto action = pcollision.action();
				assert(action.IS_EXISTS);
				{
					auto fld = action.CASE.EXISTS;

					for (auto item = pcollision.action(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_PERPENDICULAR,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_ASCEND_OR_DESCEND,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_RTL,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_MOVE_HORIZONTALLY,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_REPORT,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_HOVER,
						MAV_COLLISION_ACTION::MAV_COLLISION_ACTION_NONE), false;);

				}

				const auto threat_level = pcollision.threat_level();
				assert(threat_level.IS_EXISTS);
				{
					auto fld = threat_level.CASE.EXISTS;

					for (auto item = pcollision.threat_level(); assert(item.IS_EXISTS), assert(item.CASE.EXISTS.value == MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_LOW,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_HIGH,
						MAV_COLLISION_THREAT_LEVEL::MAV_COLLISION_THREAT_LEVEL_NONE), false;);

				}

				printf("COLLISION \n");
			}

			void fill(const com::company::demo::GIMBAL_TORQUE_CMD_REPORT& pgimbal_torque_cmd_report) {

				pgimbal_torque_cmd_report.target_system(56,
					0,
					-34,
					29,
					-88,
					-80,
					90,
					-30,
					-43,
					38,
					-113,
					54,
					118,
					110,
					109,
					-8,
					-60,
					-122,
					-108,
					111,
					40,
					-83,
					-75,
					-53,
					-30,
					16,
					79,
					46,
					-29,
					-59,
					36,
					-57,
					-116,
					-31,
					-114,
					124,
					96,
					-16,
					77,
					-92,
					-38,
					-100,
					19,
					28,
					69,
					-100,
					2,
					-18,
					18,
					55,
					-52,
					25,
					-60,
					92,
					27,
					-74,
					57,
					-77,
					90,
					10,
					-105,
					-36,
					-55,
					40,
					9,
					96,
					-43,
					18,
					-59,
					8,
					-92,
					120,
					46,
					-22,
					84,
					-83,
					-24,
					95,
					-9,
					-113,
					65,
					-14,
					60,
					-76,
					-123,
					-23,
					-48,
					-37,
					-40,
					40,
					110,
					-67,
					-51,
					-94,
					-101,
					-114,
					-45,
					103,
					-68,
					10,
					65,
					110,
					39,
					-90,
					7,
					34,
					-57,
					-44,
					-123,
					-18,
					104,
					51,
					7,
					41,
					-98,
					66,
					-14,
					30,
					-108,
					68,
					109,
					126,
					-97,
					-111,
					17,
					117,
					3,
					-56,
					119,
					-124,
					-57,
					96,
					-120,
					125,
					-82,
					102,
					24,
					-61,
					-100,
					-97,
					46,
					-84,
					-97,
					15,
					-48,
					-57,
					27,
					1,
					126,
					61,
					16,
					-87,
					27,
					-25,
					81,
					80,
					119,
					-106,
					20,
					-102,
					-111,
					-25,
					-40,
					-112,
					117,
					98,
					-46,
					-22,
					103,
					1,
					74,
					-68,
					-9,
					-18,
					-124,
					25,
					-2,
					78,
					78,
					80,
					-60,
					20,
					-84,
					81,
					-68,
					-92,
					-101,
					-96,
					110,
					-27,
					-99,
					-44,
					16,
					17,
					-11,
					-78,
					-29,
					-60,
					48,
					-101,
					-10,
					83,
					-125,
					48,
					-102,
					65,
					-1,
					-50,
					-35,
					-36,
					-71,
					62,
					73,
					51,
					-46,
					124,
					12,
					-108,
					-87,
					7,
					-15,
					-34,
					-126,
					-32,
					57,
					89,
					48,
					-31,
					-92,
					-24,
					-11,
					111,
					-48,
					11,
					40,
					68,
					119,
					37,
					-54,
					114,
					52,
					127,
					1,
					-42,
					-30,
					-78,
					-64,
					-6,
					-90,
					-118,
					53,
					82,
					-17,
					124,
					-13);
				pgimbal_torque_cmd_report.target_component(-112,
					59,
					6,
					-3,
					66,
					-128,
					-32,
					62,
					-124,
					-84,
					-76,
					-59,
					69,
					-1,
					14,
					-71,
					96,
					-77,
					-6,
					94,
					75,
					-102,
					-4,
					-54,
					-109,
					110,
					-125,
					96,
					-44,
					41,
					-128,
					-59,
					-31,
					29,
					20,
					-119,
					-58,
					17,
					-82,
					-74,
					-12,
					103,
					-79,
					-57,
					2,
					-18,
					-40,
					40,
					-97,
					50,
					98,
					124,
					107,
					23,
					96,
					-96,
					-118,
					116,
					33,
					-19,
					-46,
					55,
					99,
					123,
					-48,
					33,
					-119,
					-108,
					33,
					-85,
					97,
					25,
					-108,
					-50,
					48,
					-62,
					24,
					-125,
					124,
					0,
					114,
					-52,
					-64,
					113,
					87,
					53,
					-4,
					-82,
					21,
					79,
					111,
					11,
					-25,
					-5,
					-114,
					39,
					88,
					64,
					31,
					111,
					-83,
					-113,
					48,
					-82,
					-85,
					-28,
					124,
					121,
					97,
					-97,
					24,
					-109,
					52,
					24,
					8,
					-40,
					58,
					5,
					-31,
					41,
					-37,
					-42,
					45,
					79,
					111,
					106,
					-116,
					-14,
					-73,
					40,
					37,
					-105,
					-69,
					-19,
					-105,
					-1,
					-98,
					-51,
					41,
					-127,
					81,
					-48,
					124,
					-125,
					-22,
					116,
					-124,
					28,
					105,
					47,
					-83,
					-90,
					-3,
					-39,
					-100,
					-34,
					55,
					124,
					-49,
					-15,
					-102,
					1,
					-70,
					-100,
					75,
					-94,
					-32,
					78,
					-98,
					-115,
					68,
					-89,
					44,
					-98,
					44,
					-27,
					-3,
					-117,
					37,
					-112,
					-109,
					-113,
					52,
					86,
					13,
					-103,
					-39,
					-53,
					85,
					48,
					-38,
					-82,
					-119,
					-17,
					-55,
					93,
					64,
					-102,
					-17,
					125,
					115,
					106,
					21,
					-70,
					-109,
					-52,
					-104,
					24,
					-44,
					-38,
					18,
					73,
					110,
					78,
					110,
					117,
					40,
					-87,
					6,
					-33,
					-85,
					53,
					-77,
					96,
					-45,
					-111,
					25,
					-21,
					-120,
					69,
					-114,
					105,
					90,
					121,
					-85,
					67,
					99,
					-81,
					80,
					-36,
					-59,
					-19,
					92,
					75,
					41,
					-63,
					12,
					-14,
					118,
					73,
					-68,
					56,
					-2,
					-34,
					38);
				pgimbal_torque_cmd_report.rl_torque_cmd(15773,
					-24899,
					-19469,
					-28900,
					-23787,
					3961,
					-27809,
					29472,
					-1614,
					7908,
					-12218,
					26928,
					11853,
					29568,
					-26562,
					-17142,
					-10912,
					-13822,
					-28986,
					-26799,
					-23356,
					-18484,
					-825,
					-14082,
					17963,
					-408,
					-2639,
					21538,
					-18556,
					-11461,
					24120,
					14090,
					-26832,
					4194,
					-632,
					-22563,
					19644,
					16785,
					26258,
					-4705,
					12423,
					-24295,
					-4093,
					-7161,
					28842,
					21954,
					20198,
					17416,
					-6585,
					32384,
					14017,
					-3106,
					11024,
					-24783,
					-21550,
					24463,
					21073,
					-30724,
					-7519,
					10467,
					29037,
					-4613,
					3974,
					-18161,
					-11166,
					-25140,
					-1485,
					19172,
					-11905,
					28197,
					-26012,
					9341,
					-21394,
					-5936,
					1077,
					-610,
					-19746,
					-12865,
					-4907,
					-11866,
					23257,
					-14671,
					7870,
					-32756,
					17254,
					-451,
					19688,
					-7181,
					16967,
					-29042,
					-425,
					-19422,
					-3953,
					-30970,
					-27575,
					2348,
					10600,
					23200,
					-5904,
					-24265,
					7181,
					-12924,
					-21408,
					8277,
					8505,
					-14334,
					-10919,
					-2398,
					-11500,
					291,
					10014,
					23985,
					-15956,
					-2681,
					30327,
					15896,
					10276,
					-2130,
					15060,
					4157,
					18522,
					-25643,
					-28722,
					21680,
					-30139,
					-25902,
					-23924,
					28580,
					-785,
					-13426,
					26930,
					-2231,
					-1580,
					-25712,
					11912,
					-9290,
					-7654,
					13110,
					13402,
					7443,
					31743,
					-19634,
					14662,
					32333,
					2039,
					-13718,
					11,
					28964,
					-12167,
					31386,
					-7498,
					27104,
					24215,
					12591,
					11186,
					20337,
					31458,
					8673,
					25130,
					3366,
					3459,
					-9117,
					-11595,
					13824,
					-30103,
					-16748,
					-1246,
					18188,
					28546,
					9009,
					9572,
					13979,
					29556,
					18081,
					14930,
					-2014,
					-18961,
					-29952,
					-13069,
					22469,
					-22367,
					-7053,
					27927,
					15573,
					-1787,
					3333,
					-21220,
					-20138,
					23536,
					26964,
					-19618,
					27822,
					27776,
					-19969,
					5888,
					-16702,
					12895,
					15200,
					-2048,
					14514,
					-28136,
					12872,
					-4096,
					28484,
					-8049,
					-25444,
					25261,
					-30216,
					6561,
					-7056,
					-25435,
					-23986,
					3394,
					595,
					-3269,
					30264,
					8420,
					-27318,
					-27621,
					17040,
					24668,
					-22249,
					-14357,
					8960,
					-8141,
					-1519,
					-22497,
					31281,
					24421,
					-1468,
					31796,
					5689,
					-26922,
					3717,
					-21370,
					-11653,
					16465,
					31682,
					6585,
					31613,
					30572,
					26250,
					1672,
					17660,
					17641,
					31121,
					9605,
					22993,
					-24911,
					-30317,
					-19682,
					22421,
					29696,
					-7978,
					-29654);
				pgimbal_torque_cmd_report.el_torque_cmd(28650,
					23848,
					5525,
					17901,
					17774,
					15842,
					-14524,
					13922,
					-26583,
					23712,
					-21811,
					21163,
					8174,
					9445,
					-26097,
					-23194,
					-2546,
					27127,
					28047,
					-28974,
					-25999,
					10080,
					11509,
					8596,
					21962,
					-11087,
					-17400,
					17887,
					-7507,
					-29597,
					29119,
					17816,
					19256,
					12328,
					31251,
					-26679,
					-180,
					23930,
					10093,
					10251,
					-245,
					12201,
					4817,
					12496,
					-12242,
					-13695,
					4042,
					-31512,
					10747,
					2541,
					5125,
					-6166,
					-19733,
					26404,
					-16697,
					8739,
					-31112,
					31258,
					-29418,
					24544,
					13020,
					20848,
					-20255,
					-17743,
					-25397,
					6329,
					487,
					-1708,
					31890,
					-28217,
					-2393,
					-23210,
					-2668,
					484,
					17685,
					14637,
					11959,
					-18249,
					28997,
					-28613,
					24202,
					2459,
					29739,
					17879,
					-3855,
					1481,
					8351,
					26518,
					-15604,
					-9699,
					-9919,
					-8426,
					-22041,
					25927,
					-11084,
					-15946,
					28051,
					19167,
					22576,
					-31611,
					2237,
					24697,
					8770,
					4017,
					6732,
					27214,
					12309,
					14424,
					-23318,
					5165,
					-19723,
					-24408,
					-28021,
					-20772,
					14025,
					15228,
					15587,
					2498,
					-10009,
					10131,
					-27382,
					-8404,
					32104,
					-20193,
					-16525,
					11881,
					12138,
					-23641,
					11211,
					-18184,
					-20774,
					17707,
					-18412,
					-30578,
					18473,
					29809,
					-4419,
					30913,
					-31043,
					8640,
					7349,
					-27920,
					15081,
					3109,
					28975,
					-16888,
					22964,
					2904,
					31015,
					-4901,
					30390,
					32499,
					-9916,
					-22059,
					19053,
					13257,
					-16574,
					22051,
					29417,
					11895,
					15076,
					-1321,
					12841,
					-8284,
					25248,
					24068,
					-12225,
					20461,
					-12413,
					-19733,
					-14990,
					-8648,
					-4765,
					-7176,
					8039,
					-4914,
					17687,
					-405,
					-11107,
					31756,
					16240,
					-31776,
					-30269,
					-15133,
					1509,
					-32612,
					-18860,
					20445,
					-4456,
					-20285,
					21288,
					9042,
					24813,
					16336,
					28828,
					19371,
					-12667,
					-26986,
					27915,
					-19232,
					19587,
					-14960,
					-24620,
					-6576,
					-32699,
					-29529,
					-19605,
					10069,
					25936,
					-30605,
					25012,
					13160,
					-26682,
					22683,
					23343,
					-16066,
					30404,
					25106,
					23124,
					-22021,
					19074,
					13398,
					-18981,
					21170,
					18777,
					31181,
					-30634,
					-26083,
					-18336,
					-19982,
					24850,
					1807,
					-11865,
					15271,
					19658,
					21858,
					-11469,
					17428,
					17528,
					26955,
					20906,
					2922,
					30565,
					-18769,
					20306,
					8434,
					-4081,
					13183,
					-16774,
					-24389,
					-32347,
					7881,
					-9608,
					-5333,
					-15541);
				pgimbal_torque_cmd_report.az_torque_cmd(27929,
					28619,
					579,
					25793,
					-14356,
					-10289,
					-25160,
					13096,
					-19523,
					-17116,
					-28192,
					-3152,
					7628,
					-7777,
					11316,
					31113,
					12159,
					-25736,
					6999,
					30687,
					3123,
					4747,
					-32043,
					6390,
					19984,
					4294,
					10792,
					-17825,
					26474,
					10399,
					259,
					20237,
					29440,
					-5360,
					22146,
					-26524,
					-1407,
					2739,
					29568,
					-24835,
					-20399,
					8272,
					-3957,
					1894,
					-27314,
					-19839,
					21687,
					-16144,
					-8171,
					-31605,
					-28469,
					7241,
					18467,
					11549,
					-20367,
					-14161,
					31804,
					29314,
					-4820,
					-11581,
					-16834,
					11147,
					-4730,
					-13770,
					9983,
					18043,
					27610,
					-14459,
					19830,
					-27519,
					23160,
					-1705,
					22550,
					15813,
					-20170,
					1062,
					-24117,
					-28919,
					20181,
					-4405,
					23644,
					15918,
					-6297,
					25758,
					-27107,
					-28690,
					24329,
					11028,
					-13067,
					-22900,
					16918,
					14527,
					4944,
					11063,
					7188,
					-9968,
					-30378,
					27446,
					-31059,
					26809,
					18687,
					11371,
					-21531,
					8418,
					1662,
					25604,
					-2513,
					-15638,
					12473,
					18985,
					9385,
					-13729,
					-32377,
					-9005,
					5461,
					12321,
					31483,
					-3064,
					-32218,
					23587,
					-12337,
					14804,
					-17492,
					2512,
					22501,
					17688,
					-15750,
					9078,
					-3927,
					-9222,
					-13204,
					12051,
					-9323,
					-24753,
					-26345,
					11167,
					-7782,
					4984,
					18970,
					3415,
					21185,
					1295,
					-25872,
					27390,
					-6996,
					22358,
					8954,
					17121,
					-14832,
					28284,
					23865,
					-4167,
					8417,
					-21208,
					5651,
					-9580,
					-20814,
					-6982,
					24784,
					-9351,
					-2133,
					-21649,
					-22124,
					-14098,
					9092,
					-30740,
					16548,
					-21731,
					-13004,
					-22518,
					-21340,
					-688,
					-10560,
					20475,
					-987,
					8464,
					20119,
					12057,
					30447,
					30613,
					19152,
					710,
					32139,
					14680,
					-20618,
					-12939,
					7714,
					-8115,
					-11675,
					-14319,
					117,
					-21176,
					32226,
					-8260,
					6383,
					-6163,
					2515,
					9604,
					18817,
					4657,
					13400,
					26550,
					-13243,
					-32628,
					13453,
					29809,
					30368,
					-26610,
					-31595,
					491,
					28938,
					16055,
					14343,
					-2464,
					-16917,
					28954,
					-8623,
					16106,
					-31111,
					23567,
					-24881,
					13701,
					32412,
					-10053,
					-31970,
					-1938,
					5193,
					24450,
					-8537,
					2891,
					22799,
					-18899,
					-11004,
					28509,
					32342,
					-6291,
					-25055,
					-10077,
					10965,
					-9787,
					-1942,
					676,
					157,
					-4189,
					2930,
					104,
					-23446,
					8920,
					-21402,
					19459,
					12274,
					-10199,
					-13781,
					22120,
					-31594);
			}

			void on_GIMBAL_TORQUE_CMD_REPORT(const com::company::demo::GIMBAL_TORQUE_CMD_REPORT& pgimbal_torque_cmd_report) {
				assert(pgimbal_torque_cmd_report.target_system() == 56,
					0,
					-34,
					29,
					-88,
					-80,
					90,
					-30,
					-43,
					38,
					-113,
					54,
					118,
					110,
					109,
					-8,
					-60,
					-122,
					-108,
					111,
					40,
					-83,
					-75,
					-53,
					-30,
					16,
					79,
					46,
					-29,
					-59,
					36,
					-57,
					-116,
					-31,
					-114,
					124,
					96,
					-16,
					77,
					-92,
					-38,
					-100,
					19,
					28,
					69,
					-100,
					2,
					-18,
					18,
					55,
					-52,
					25,
					-60,
					92,
					27,
					-74,
					57,
					-77,
					90,
					10,
					-105,
					-36,
					-55,
					40,
					9,
					96,
					-43,
					18,
					-59,
					8,
					-92,
					120,
					46,
					-22,
					84,
					-83,
					-24,
					95,
					-9,
					-113,
					65,
					-14,
					60,
					-76,
					-123,
					-23,
					-48,
					-37,
					-40,
					40,
					110,
					-67,
					-51,
					-94,
					-101,
					-114,
					-45,
					103,
					-68,
					10,
					65,
					110,
					39,
					-90,
					7,
					34,
					-57,
					-44,
					-123,
					-18,
					104,
					51,
					7,
					41,
					-98,
					66,
					-14,
					30,
					-108,
					68,
					109,
					126,
					-97,
					-111,
					17,
					117,
					3,
					-56,
					119,
					-124,
					-57,
					96,
					-120,
					125,
					-82,
					102,
					24,
					-61,
					-100,
					-97,
					46,
					-84,
					-97,
					15,
					-48,
					-57,
					27,
					1,
					126,
					61,
					16,
					-87,
					27,
					-25,
					81,
					80,
					119,
					-106,
					20,
					-102,
					-111,
					-25,
					-40,
					-112,
					117,
					98,
					-46,
					-22,
					103,
					1,
					74,
					-68,
					-9,
					-18,
					-124,
					25,
					-2,
					78,
					78,
					80,
					-60,
					20,
					-84,
					81,
					-68,
					-92,
					-101,
					-96,
					110,
					-27,
					-99,
					-44,
					16,
					17,
					-11,
					-78,
					-29,
					-60,
					48,
					-101,
					-10,
					83,
					-125,
					48,
					-102,
					65,
					-1,
					-50,
					-35,
					-36,
					-71,
					62,
					73,
					51,
					-46,
					124,
					12,
					-108,
					-87,
					7,
					-15,
					-34,
					-126,
					-32,
					57,
					89,
					48,
					-31,
					-92,
					-24,
					-11,
					111,
					-48,
					11,
					40,
					68,
					119,
					37,
					-54,
					114,
					52,
					127,
					1,
					-42,
					-30,
					-78,
					-64,
					-6,
					-90,
					-118,
					53,
					82,
					-17,
					124,
					-13);
				assert(pgimbal_torque_cmd_report.target_component() == -112,
					59,
					6,
					-3,
					66,
					-128,
					-32,
					62,
					-124,
					-84,
					-76,
					-59,
					69,
					-1,
					14,
					-71,
					96,
					-77,
					-6,
					94,
					75,
					-102,
					-4,
					-54,
					-109,
					110,
					-125,
					96,
					-44,
					41,
					-128,
					-59,
					-31,
					29,
					20,
					-119,
					-58,
					17,
					-82,
					-74,
					-12,
					103,
					-79,
					-57,
					2,
					-18,
					-40,
					40,
					-97,
					50,
					98,
					124,
					107,
					23,
					96,
					-96,
					-118,
					116,
					33,
					-19,
					-46,
					55,
					99,
					123,
					-48,
					33,
					-119,
					-108,
					33,
					-85,
					97,
					25,
					-108,
					-50,
					48,
					-62,
					24,
					-125,
					124,
					0,
					114,
					-52,
					-64,
					113,
					87,
					53,
					-4,
					-82,
					21,
					79,
					111,
					11,
					-25,
					-5,
					-114,
					39,
					88,
					64,
					31,
					111,
					-83,
					-113,
					48,
					-82,
					-85,
					-28,
					124,
					121,
					97,
					-97,
					24,
					-109,
					52,
					24,
					8,
					-40,
					58,
					5,
					-31,
					41,
					-37,
					-42,
					45,
					79,
					111,
					106,
					-116,
					-14,
					-73,
					40,
					37,
					-105,
					-69,
					-19,
					-105,
					-1,
					-98,
					-51,
					41,
					-127,
					81,
					-48,
					124,
					-125,
					-22,
					116,
					-124,
					28,
					105,
					47,
					-83,
					-90,
					-3,
					-39,
					-100,
					-34,
					55,
					124,
					-49,
					-15,
					-102,
					1,
					-70,
					-100,
					75,
					-94,
					-32,
					78,
					-98,
					-115,
					68,
					-89,
					44,
					-98,
					44,
					-27,
					-3,
					-117,
					37,
					-112,
					-109,
					-113,
					52,
					86,
					13,
					-103,
					-39,
					-53,
					85,
					48,
					-38,
					-82,
					-119,
					-17,
					-55,
					93,
					64,
					-102,
					-17,
					125,
					115,
					106,
					21,
					-70,
					-109,
					-52,
					-104,
					24,
					-44,
					-38,
					18,
					73,
					110,
					78,
					110,
					117,
					40,
					-87,
					6,
					-33,
					-85,
					53,
					-77,
					96,
					-45,
					-111,
					25,
					-21,
					-120,
					69,
					-114,
					105,
					90,
					121,
					-85,
					67,
					99,
					-81,
					80,
					-36,
					-59,
					-19,
					92,
					75,
					41,
					-63,
					12,
					-14,
					118,
					73,
					-68,
					56,
					-2,
					-34,
					38);
				assert(pgimbal_torque_cmd_report.rl_torque_cmd() == 15773,
					-24899,
					-19469,
					-28900,
					-23787,
					3961,
					-27809,
					29472,
					-1614,
					7908,
					-12218,
					26928,
					11853,
					29568,
					-26562,
					-17142,
					-10912,
					-13822,
					-28986,
					-26799,
					-23356,
					-18484,
					-825,
					-14082,
					17963,
					-408,
					-2639,
					21538,
					-18556,
					-11461,
					24120,
					14090,
					-26832,
					4194,
					-632,
					-22563,
					19644,
					16785,
					26258,
					-4705,
					12423,
					-24295,
					-4093,
					-7161,
					28842,
					21954,
					20198,
					17416,
					-6585,
					32384,
					14017,
					-3106,
					11024,
					-24783,
					-21550,
					24463,
					21073,
					-30724,
					-7519,
					10467,
					29037,
					-4613,
					3974,
					-18161,
					-11166,
					-25140,
					-1485,
					19172,
					-11905,
					28197,
					-26012,
					9341,
					-21394,
					-5936,
					1077,
					-610,
					-19746,
					-12865,
					-4907,
					-11866,
					23257,
					-14671,
					7870,
					-32756,
					17254,
					-451,
					19688,
					-7181,
					16967,
					-29042,
					-425,
					-19422,
					-3953,
					-30970,
					-27575,
					2348,
					10600,
					23200,
					-5904,
					-24265,
					7181,
					-12924,
					-21408,
					8277,
					8505,
					-14334,
					-10919,
					-2398,
					-11500,
					291,
					10014,
					23985,
					-15956,
					-2681,
					30327,
					15896,
					10276,
					-2130,
					15060,
					4157,
					18522,
					-25643,
					-28722,
					21680,
					-30139,
					-25902,
					-23924,
					28580,
					-785,
					-13426,
					26930,
					-2231,
					-1580,
					-25712,
					11912,
					-9290,
					-7654,
					13110,
					13402,
					7443,
					31743,
					-19634,
					14662,
					32333,
					2039,
					-13718,
					11,
					28964,
					-12167,
					31386,
					-7498,
					27104,
					24215,
					12591,
					11186,
					20337,
					31458,
					8673,
					25130,
					3366,
					3459,
					-9117,
					-11595,
					13824,
					-30103,
					-16748,
					-1246,
					18188,
					28546,
					9009,
					9572,
					13979,
					29556,
					18081,
					14930,
					-2014,
					-18961,
					-29952,
					-13069,
					22469,
					-22367,
					-7053,
					27927,
					15573,
					-1787,
					3333,
					-21220,
					-20138,
					23536,
					26964,
					-19618,
					27822,
					27776,
					-19969,
					5888,
					-16702,
					12895,
					15200,
					-2048,
					14514,
					-28136,
					12872,
					-4096,
					28484,
					-8049,
					-25444,
					25261,
					-30216,
					6561,
					-7056,
					-25435,
					-23986,
					3394,
					595,
					-3269,
					30264,
					8420,
					-27318,
					-27621,
					17040,
					24668,
					-22249,
					-14357,
					8960,
					-8141,
					-1519,
					-22497,
					31281,
					24421,
					-1468,
					31796,
					5689,
					-26922,
					3717,
					-21370,
					-11653,
					16465,
					31682,
					6585,
					31613,
					30572,
					26250,
					1672,
					17660,
					17641,
					31121,
					9605,
					22993,
					-24911,
					-30317,
					-19682,
					22421,
					29696,
					-7978,
					-29654);
				assert(pgimbal_torque_cmd_report.el_torque_cmd() == 28650,
					23848,
					5525,
					17901,
					17774,
					15842,
					-14524,
					13922,
					-26583,
					23712,
					-21811,
					21163,
					8174,
					9445,
					-26097,
					-23194,
					-2546,
					27127,
					28047,
					-28974,
					-25999,
					10080,
					11509,
					8596,
					21962,
					-11087,
					-17400,
					17887,
					-7507,
					-29597,
					29119,
					17816,
					19256,
					12328,
					31251,
					-26679,
					-180,
					23930,
					10093,
					10251,
					-245,
					12201,
					4817,
					12496,
					-12242,
					-13695,
					4042,
					-31512,
					10747,
					2541,
					5125,
					-6166,
					-19733,
					26404,
					-16697,
					8739,
					-31112,
					31258,
					-29418,
					24544,
					13020,
					20848,
					-20255,
					-17743,
					-25397,
					6329,
					487,
					-1708,
					31890,
					-28217,
					-2393,
					-23210,
					-2668,
					484,
					17685,
					14637,
					11959,
					-18249,
					28997,
					-28613,
					24202,
					2459,
					29739,
					17879,
					-3855,
					1481,
					8351,
					26518,
					-15604,
					-9699,
					-9919,
					-8426,
					-22041,
					25927,
					-11084,
					-15946,
					28051,
					19167,
					22576,
					-31611,
					2237,
					24697,
					8770,
					4017,
					6732,
					27214,
					12309,
					14424,
					-23318,
					5165,
					-19723,
					-24408,
					-28021,
					-20772,
					14025,
					15228,
					15587,
					2498,
					-10009,
					10131,
					-27382,
					-8404,
					32104,
					-20193,
					-16525,
					11881,
					12138,
					-23641,
					11211,
					-18184,
					-20774,
					17707,
					-18412,
					-30578,
					18473,
					29809,
					-4419,
					30913,
					-31043,
					8640,
					7349,
					-27920,
					15081,
					3109,
					28975,
					-16888,
					22964,
					2904,
					31015,
					-4901,
					30390,
					32499,
					-9916,
					-22059,
					19053,
					13257,
					-16574,
					22051,
					29417,
					11895,
					15076,
					-1321,
					12841,
					-8284,
					25248,
					24068,
					-12225,
					20461,
					-12413,
					-19733,
					-14990,
					-8648,
					-4765,
					-7176,
					8039,
					-4914,
					17687,
					-405,
					-11107,
					31756,
					16240,
					-31776,
					-30269,
					-15133,
					1509,
					-32612,
					-18860,
					20445,
					-4456,
					-20285,
					21288,
					9042,
					24813,
					16336,
					28828,
					19371,
					-12667,
					-26986,
					27915,
					-19232,
					19587,
					-14960,
					-24620,
					-6576,
					-32699,
					-29529,
					-19605,
					10069,
					25936,
					-30605,
					25012,
					13160,
					-26682,
					22683,
					23343,
					-16066,
					30404,
					25106,
					23124,
					-22021,
					19074,
					13398,
					-18981,
					21170,
					18777,
					31181,
					-30634,
					-26083,
					-18336,
					-19982,
					24850,
					1807,
					-11865,
					15271,
					19658,
					21858,
					-11469,
					17428,
					17528,
					26955,
					20906,
					2922,
					30565,
					-18769,
					20306,
					8434,
					-4081,
					13183,
					-16774,
					-24389,
					-32347,
					7881,
					-9608,
					-5333,
					-15541);
				assert(pgimbal_torque_cmd_report.az_torque_cmd() == 27929,
					28619,
					579,
					25793,
					-14356,
					-10289,
					-25160,
					13096,
					-19523,
					-17116,
					-28192,
					-3152,
					7628,
					-7777,
					11316,
					31113,
					12159,
					-25736,
					6999,
					30687,
					3123,
					4747,
					-32043,
					6390,
					19984,
					4294,
					10792,
					-17825,
					26474,
					10399,
					259,
					20237,
					29440,
					-5360,
					22146,
					-26524,
					-1407,
					2739,
					29568,
					-24835,
					-20399,
					8272,
					-3957,
					1894,
					-27314,
					-19839,
					21687,
					-16144,
					-8171,
					-31605,
					-28469,
					7241,
					18467,
					11549,
					-20367,
					-14161,
					31804,
					29314,
					-4820,
					-11581,
					-16834,
					11147,
					-4730,
					-13770,
					9983,
					18043,
					27610,
					-14459,
					19830,
					-27519,
					23160,
					-1705,
					22550,
					15813,
					-20170,
					1062,
					-24117,
					-28919,
					20181,
					-4405,
					23644,
					15918,
					-6297,
					25758,
					-27107,
					-28690,
					24329,
					11028,
					-13067,
					-22900,
					16918,
					14527,
					4944,
					11063,
					7188,
					-9968,
					-30378,
					27446,
					-31059,
					26809,
					18687,
					11371,
					-21531,
					8418,
					1662,
					25604,
					-2513,
					-15638,
					12473,
					18985,
					9385,
					-13729,
					-32377,
					-9005,
					5461,
					12321,
					31483,
					-3064,
					-32218,
					23587,
					-12337,
					14804,
					-17492,
					2512,
					22501,
					17688,
					-15750,
					9078,
					-3927,
					-9222,
					-13204,
					12051,
					-9323,
					-24753,
					-26345,
					11167,
					-7782,
					4984,
					18970,
					3415,
					21185,
					1295,
					-25872,
					27390,
					-6996,
					22358,
					8954,
					17121,
					-14832,
					28284,
					23865,
					-4167,
					8417,
					-21208,
					5651,
					-9580,
					-20814,
					-6982,
					24784,
					-9351,
					-2133,
					-21649,
					-22124,
					-14098,
					9092,
					-30740,
					16548,
					-21731,
					-13004,
					-22518,
					-21340,
					-688,
					-10560,
					20475,
					-987,
					8464,
					20119,
					12057,
					30447,
					30613,
					19152,
					710,
					32139,
					14680,
					-20618,
					-12939,
					7714,
					-8115,
					-11675,
					-14319,
					117,
					-21176,
					32226,
					-8260,
					6383,
					-6163,
					2515,
					9604,
					18817,
					4657,
					13400,
					26550,
					-13243,
					-32628,
					13453,
					29809,
					30368,
					-26610,
					-31595,
					491,
					28938,
					16055,
					14343,
					-2464,
					-16917,
					28954,
					-8623,
					16106,
					-31111,
					23567,
					-24881,
					13701,
					32412,
					-10053,
					-31970,
					-1938,
					5193,
					24450,
					-8537,
					2891,
					22799,
					-18899,
					-11004,
					28509,
					32342,
					-6291,
					-25055,
					-10077,
					10965,
					-9787,
					-1942,
					676,
					157,
					-4189,
					2930,
					104,
					-23446,
					8920,
					-21402,
					19459,
					12274,
					-10199,
					-13781,
					22120,
					-31594);
				printf("GIMBAL_TORQUE_CMD_REPORT \n");
			}

			void fill(const com::company::demo::ALTITUDE& paltitude) {

				paltitude.time_usec(-2261261072324793685L,
					4286397181078021408L,
					7410987413520882128L,
					-8411918536056623305L,
					4984829116744186800L,
					-2020712931911098319L,
					2357332868140368419L,
					-8637192284187305618L,
					7710708996199386269L,
					3897000916572790255L,
					5242974694086385193L,
					1635345972722034730L,
					-8173972616151501691L,
					7663715767979574325L,
					5894468919168354956L,
					-7509106212860591404L,
					8266523073327026867L,
					-2324431850561754219L,
					3248594527307617792L,
					5075903764773775142L,
					3419516538686866598L,
					-6494357410540381051L,
					-7851416507219825002L,
					625589694083607038L,
					797499835373612352L,
					-4621152417795812571L,
					6776332453398639077L,
					3903075310259755569L,
					7105366919264281911L,
					-7473438630207647878L,
					-3491152646700986941L,
					-843023048439464445L,
					4590216863343988168L,
					-3431429465928675457L,
					-2545836012585888523L,
					-5965405730065871458L,
					3105924848331274736L,
					-4286104894761615734L,
					-5843985608234071537L,
					7513109389494479351L,
					3803217804242478681L,
					3775129829788173763L,
					-7177184415411836274L,
					-7154184240616481982L,
					7689070792130049485L,
					539351951935586921L,
					-6455548501288457112L,
					155343036572993273L,
					7779753374441152077L,
					467155860686481734L,
					-3581719906560350023L,
					-4695386533616807042L,
					2812555030350458451L,
					4020080551530080619L,
					5231142057811721274L,
					784010730599949676L,
					1588333653043447275L,
					412025397191194360L,
					5033384192139967308L,
					717640140249212712L,
					-5631970240928782796L,
					-3894206087638838666L,
					5407051624928902653L,
					1102427147043186433L,
					-8757236881146134086L,
					-7982818285379262117L,
					6703787567798455317L,
					7488790199012638650L,
					-41037697936947130L,
					2527981975756459748L,
					-1386005314336111900L,
					-2387188670023521636L,
					5001890052898532669L,
					-1373688197392426687L,
					-4449364202345999312L,
					757339045373914367L,
					-3500046352887326765L,
					-1764532646007607848L,
					6712674913872790418L,
					2261841971600695565L,
					-9199871137203746353L,
					2590611695179602133L,
					-7963088922325119L,
					2248864389056242884L,
					-4552264250948392916L,
					-6723315350990405873L,
					-2672890973937218252L,
					4164450761258890311L,
					-3599976901849437819L,
					7151244713443035596L,
					-3507691308715400776L,
					-4324093258831745079L,
					1828585350234825214L,
					7169903000449323492L,
					3113084019496816911L,
					-7270240919628477794L,
					-7860246745591166483L,
					-579349094020041304L,
					4360413199232820722L,
					-418476582569520252L,
					2915723105766757055L,
					2273040725696879110L,
					-6291581595888455841L,
					-79015712408807542L,
					127884781933884416L,
					3088895075158036971L,
					-1015634384759399964L,
					-961295480362528462L,
					-2908735471366640246L,
					-6139687108684153970L,
					7203819572848683925L,
					-2674233250241203889L,
					6055087206401027295L,
					4387863375677754263L,
					-5252999134563742092L,
					7009156474488789022L,
					8129377473440360515L,
					3512766406381296827L,
					4245239546233606382L,
					3096351554691123972L,
					5092958563889936175L,
					-3389566238471926572L,
					5430179128076418926L,
					-1281965676089598873L,
					-2321464292322337062L,
					-2745710987807242422L,
					-5331122401662244553L,
					6061702548676930339L,
					-7290192732101180666L,
					-4830023509047885581L,
					924360101958089578L,
					3696548920193854624L,
					470770344971947453L,
					-4606650420010045569L,
					3487639098370586180L,
					5564516683790241804L,
					6374259443031910586L,
					4831227828604231167L,
					-6325189098881927712L,
					-5480189699993415063L,
					-1386382859983513609L,
					8977784944733466507L,
					2544957930678945206L,
					8620272331495747477L,
					2836081072625602210L,
					6501744456616461736L,
					1257710058163827007L,
					3539958807449231567L,
					-6162715739195694334L,
					2944441629657130579L,
					-3555412143149479805L,
					-2676781074752700872L,
					-106288447487342290L,
					5213629498897915960L,
					5719985773943415275L,
					-652542625470906783L,
					-4484831116671515215L,
					8129016186373431701L,
					1435466363053124099L,
					-2060649604894691774L,
					1434346503524428508L,
					4564567044298955767L,
					-6359454652446894491L,
					4801255777490575101L,
					-1152230160338168618L,
					7766590283473632349L,
					168681613733532914L,
					-6923297737967007643L,
					5236377677012048552L,
					6029021024076489353L,
					-3867809536636681732L,
					7150173542929838697L,
					-887563761998695258L,
					-7246591445648797515L,
					-7841907635646086045L,
					-6453387111388566411L,
					6228295182760351271L,
					-3678468950883972658L,
					-6113728582659475309L,
					-5923495310188270303L,
					-1486454542710670869L,
					-4483326235809820243L,
					-3959991331849185352L,
					2307294122154273018L,
					4343702529995171393L,
					5023840973354738915L,
					-1501685819043705870L,
					-3904106912986729144L,
					3758390820484327119L,
					-1958319877222077470L,
					6302650801561870924L,
					-8131987898595069493L,
					-7894107694923034406L,
					8494702291243113532L,
					7541388072844925838L,
					8605115951912683492L,
					3488527821440370838L,
					-1455591217903643364L,
					-1923135087342128020L,
					30104798888531624L,
					-5047574865053609803L,
					-812573648974479305L,
					7070419345230955875L,
					-446960064753779144L,
					-6537992825150752099L,
					4262109265744382668L,
					2074961820053632497L,
					-1594229842264669401L,
					8262840655855097188L,
					-722770451139320504L,
					4537198014083991158L,
					6446309426831069375L,
					8427143837242443773L,
					-1259791463988510842L,
					536989322024353298L,
					4921069165052291800L,
					-7039701852694388516L,
					6233127499933158283L,
					-7185122330620372422L,
					-6583920812118098841L,
					-8532576921683328363L,
					-1148061375145984771L,
					1978617708026607149L,
					892560562557407679L,
					3903090346372867469L,
					-2451716855182330402L,
					-2928553764892779831L,
					644655708793236621L,
					-5486036557350628640L,
					5022109154676959298L,
					-8956874410057905599L,
					-8758098094818334502L,
					2674687665752351934L,
					6217675643822066942L,
					726878137019553332L,
					-1589833470969505416L,
					-6707389207533926027L,
					4455308524642134553L,
					2723555725635904397L,
					-4374069620031449057L,
					-1888227922565267737L,
					-5621949305607135682L,
					-3812143057967257144L,
					6299614400696910420L,
					1825462494283689350L,
					-4432510961178495495L,
					4040471120014768613L,
					-530263550681502684L,
					-8059778933074708422L,
					1078726949089104793L,
					8003407734769248479L,
					-5018934041807237884L,
					-939166311580730881L,
					4378560867210486497L,
					4293000487473482957L);
				paltitude.altitude_monotonic(1.0378754E38F,
					-1.5834795E38F,
					-2.2728093E38F,
					-1.9519018E37F,
					2.4641974E38F,
					-2.5650364E38F,
					-8.954245E37F,
					-1.4868734E38F,
					1.5486237E38F,
					-3.2319075E38F,
					2.7855571E38F,
					8.598706E37F,
					-1.3035413E38F,
					-3.8468574E37F,
					-1.4203644E38F,
					-6.099354E37F,
					-2.5461394E37F,
					-3.136966E36F,
					1.6139448E38F,
					7.775249E36F,
					8.1543237E37F,
					-3.3559109E38F,
					9.906711E37F,
					-9.498851E37F,
					2.6621772E38F,
					1.4507203E38F,
					2.6821564E38F,
					8.767492E37F,
					2.750883E38F,
					-2.7641168E38F,
					3.200729E38F,
					-1.7363682E38F,
					2.6562432E38F,
					2.7002688E38F,
					-1.802228E38F,
					-2.629045E38F,
					-2.9761747E38F,
					2.9165907E37F,
					2.8909575E38F,
					1.4887286E37F,
					-2.8477067E38F,
					9.780739E37F,
					-2.6270095E38F,
					-2.5696687E38F,
					7.7757226E37F,
					-1.3191577E38F,
					-3.5226474E37F,
					-2.090492E38F,
					2.046547E38F,
					7.139412E37F,
					-1.9594053E38F,
					2.6312133E38F,
					-2.1213078E38F,
					3.3739788E37F,
					-1.399116E38F,
					-1.4330319E38F,
					-1.639378E38F,
					-7.05227E37F,
					-6.8864396E36F,
					2.731426E38F,
					-2.2306261E38F,
					1.2437142E38F,
					-5.9122534E37F,
					3.0750455E38F,
					6.5363457E37F,
					2.9087462E38F,
					1.4096943E38F,
					-1.2010657E38F,
					2.6145292E38F,
					-2.8405957E38F,
					-3.6705883E37F,
					2.418976E38F,
					-9.402327E37F,
					-1.6753063E38F,
					2.1672625E38F,
					-1.4922675E38F,
					1.2935794E38F,
					-9.926671E37F,
					-1.3138785E38F,
					3.1201218E38F,
					3.1038303E38F,
					-3.38051E38F,
					8.4761975E37F,
					1.2818608E38F,
					1.6096268E38F,
					8.873409E37F,
					8.369957E37F,
					-1.3735934E38F,
					-1.3754115E38F,
					-2.7648494E38F,
					2.5852826E36F,
					1.4747576E38F,
					-2.8466192E38F,
					-2.0261697E38F,
					-2.3764297E38F,
					-2.3086205E38F,
					2.7661893E38F,
					-8.369944E37F,
					7.344236E37F,
					-2.1535015E38F,
					-2.1148801E38F,
					1.3129728E38F,
					-7.747344E35F,
					-3.171613E37F,
					-2.2713617E38F,
					1.4460965E38F,
					-3.3021531E38F,
					1.8459485E38F,
					-1.4145761E38F,
					-1.3366452E38F,
					9.425878E37F,
					-1.3728278E38F,
					2.226934E38F,
					-1.6230936E38F,
					-3.0355204E38F,
					-2.9493104E38F,
					-1.8439864E38F,
					-1.487599E38F,
					-2.8371195E38F,
					-8.829445E37F,
					1.0763259E38F,
					-6.866631E37F,
					-2.2748696E38F,
					-1.6783622E38F,
					-1.3435367E38F,
					-2.5737818E38F,
					1.7086656E37F,
					-1.7353364E38F,
					6.870317E37F,
					-3.2958396E38F,
					3.2428855E38F,
					2.0132413E38F,
					-2.914457E38F,
					1.3064064E38F,
					-1.7783173E37F,
					1.7057555E38F,
					1.888219E38F,
					-2.758368E38F,
					1.831726E38F,
					8.0251937E37F,
					-2.2218528E38F,
					-1.2964202E38F,
					-1.4978548E38F,
					-3.0373965E38F,
					7.6191805E37F,
					-3.3822638E38F,
					-2.68028E38F,
					-4.4700494E37F,
					-7.813343E37F,
					1.3985799E38F,
					-2.0516475E38F,
					-2.7680842E38F,
					8.4322916E37F,
					1.2954944E38F,
					2.5157818E38F,
					2.6280804E38F,
					-2.9034373E38F,
					2.9186963E38F,
					2.3768982E38F,
					-2.0106967E38F,
					1.474645E38F,
					1.9461487E38F,
					-6.7305554E37F,
					-2.0352854E38F,
					1.1989914E38F,
					-3.481318E37F,
					1.2679482E38F,
					2.549371E38F,
					-9.028768E37F,
					-2.821655E38F,
					1.0289746E38F,
					2.8688603E36F,
					-8.80151E37F,
					9.908299E37F,
					-1.0053895E38F,
					-1.6640857E38F,
					1.8768762E38F,
					1.4010206E38F,
					-2.6403515E38F,
					-1.3379182E38F,
					-2.1495229E38F,
					1.4661132E38F,
					-6.7629895E37F,
					-3.2996438E38F,
					-2.8694162E38F,
					-2.7454408E38F,
					2.6480848E38F,
					1.6018761E38F,
					-2.611137E38F,
					2.9605114E38F,
					4.9976653E37F,
					-1.1495977E38F,
					-3.2301553E38F,
					1.7425792E38F,
					-2.3907207E38F,
					6.8817024E37F,
					-3.2059878E37F,
					2.7687292E38F,
					-3.1335053E38F,
					-1.828999E38F,
					1.199929E38F,
					1.2858442E38F,
					-1.2105739E38F,
					5.8628876E37F,
					1.0581046E38F,
					-2.6245182E38F,
					2.7893852E38F,
					-3.1467094E38F,
					1.1133348E37F,
					1.6195221E37F,
					5.915679E37F,
					-2.026172E38F,
					2.2689224E38F,
					9.089733E37F,
					-1.5386991E38F,
					3.1778808E38F,
					-2.1591231E38F,
					-1.7932859E38F,
					2.8195123E38F,
					-3.2264077E38F,
					2.7829742E38F,
					-2.6693698E38F,
					-1.8707188E38F,
					-2.0712744E38F,
					2.4203147E38F,
					1.2617292E37F,
					-5.9827323E37F,
					-1.327165E38F,
					2.3943704E37F,
					3.1556182E38F,
					3.225432E37F,
					-3.2924438E38F,
					-2.7023408E38F,
					-6.9310693E37F,
					-2.5519478E38F,
					1.8505334E38F,
					-2.068196E38F,
					1.1953584E38F,
					-6.994626E37F,
					-2.0156103E38F,
					-2.6818847E37F,
					2.675546E38F,
					-1.0149067E38F,
					-1.5336746E38F,
					3.3727605E38F,
					1.6842173E38F,
					-2.7799133E38F,
					3.0849405E38F,
					-2.4084889E38F,
					-6.6623953E37F,
					-1.7042875E38F,
					-6.639395E37F,
					2.9932447E38F,
					1.1135487E38F,
					1.1858388E38F);
				paltitude.altitude_amsl(2.7649585E38F,
					6.09323E37F,
					-4.4895266E36F,
					2.2074263E38F,
					9.864295E37F,
					6.126757E36F,
					-3.85901E37F,
					-2.6462723E38F,
					-5.109542E37F,
					-1.0749502E38F,
					2.5833427E38F,
					2.3353203E38F,
					3.2060099E38F,
					2.094661E38F,
					-2.4813824E38F,
					7.5307706E36F,
					2.9160562E38F,
					-1.8994681E38F,
					2.552062E37F,
					3.0330137E38F,
					2.5583893E38F,
					3.3783846E38F,
					-4.4185067E37F,
					-3.2397062E38F,
					2.6647851E38F,
					-2.2096424E38F,
					-1.344551E38F,
					-1.1904747E38F,
					-2.4361646E38F,
					2.6065131E38F,
					-2.9321048E38F,
					-1.2348647E38F,
					2.207809E38F,
					-1.4406177E38F,
					-2.3084913E38F,
					-3.3975906E38F,
					-1.571305E38F,
					-2.8158266E38F,
					2.2197458E38F,
					-3.1767182E38F,
					-1.3623577E38F,
					3.3364116E38F,
					-2.103779E38F,
					-3.4753075E37F,
					1.0705567E38F,
					3.185611E38F,
					2.8489902E38F,
					-1.524681E37F,
					-1.2031079E38F,
					-2.176108E38F,
					1.8828078E38F,
					1.144316E38F,
					3.2874792E38F,
					1.0617827E38F,
					-1.2339762E38F,
					1.7829323E38F,
					1.9990807E38F,
					-2.2892137E38F,
					1.5977588E38F,
					2.6794203E38F,
					-2.4326387E38F,
					6.852042E36F,
					-1.4083116E38F,
					6.60226E37F,
					2.7615566E38F,
					-2.2292273E38F,
					3.205705E38F,
					2.5471508E38F,
					-2.0244966E37F,
					-2.5814518E38F,
					-6.1327035E37F,
					-1.099303E38F,
					6.460345E37F,
					-1.6241486E38F,
					2.9463236E38F,
					2.19274E38F,
					-1.5532969E38F,
					3.3510962E38F,
					3.02012E37F,
					2.4367999E38F,
					-1.438858E38F,
					-3.378272E38F,
					-1.0009533E38F,
					-2.7795876E38F,
					5.576863E36F,
					-8.100652E37F,
					-2.7796594E38F,
					7.530944E37F,
					1.8496558E38F,
					-3.7485706E37F,
					-2.7898325E38F,
					4.852901E37F,
					1.8627122E38F,
					-1.0566778E38F,
					-2.2514168E38F,
					2.5763633E38F,
					-7.327506E37F,
					1.2568104E37F,
					2.7152666E38F,
					1.7734367E38F,
					2.4241037E38F,
					4.91649E37F,
					3.2710639E38F,
					2.8481482E37F,
					2.822561E37F,
					-8.903854E37F,
					-1.0806736E38F,
					1.7693015E38F,
					2.9921992E38F,
					-1.0249865E38F,
					-7.6926545E37F,
					1.8050923E38F,
					1.2182812E38F,
					-9.259621E37F,
					-1.2083369E38F,
					2.9855186E38F,
					3.0199522E38F,
					-2.3184538E38F,
					-2.6726819E38F,
					3.2573357E36F,
					2.0457901E38F,
					-1.469038E37F,
					5.934865E37F,
					9.698048E37F,
					-1.2815094E38F,
					-3.0644987E38F,
					1.4792346E38F,
					-2.861203E38F,
					-7.980226E37F,
					6.250238E37F,
					-6.235075E37F,
					1.7841063E38F,
					5.848401E37F,
					3.106531E37F,
					2.5659992E38F,
					-1.548331E38F,
					-3.3584902E38F,
					-3.0897036E38F,
					2.9925754E38F,
					-2.4097795E38F,
					-8.425414E37F,
					-3.142973E38F,
					-2.0783391E36F,
					1.4892241E38F,
					3.1470298E38F,
					-2.9467226E38F,
					1.7211111E38F,
					-1.1235588E38F,
					-2.6607118E38F,
					-4.821348E37F,
					2.489309E38F,
					-3.120044E38F,
					2.779002E38F,
					7.082477E36F,
					-8.540261E37F,
					-3.7279046E37F,
					6.642363E37F,
					1.819726E38F,
					-6.8850744E37F,
					2.4532802E38F,
					1.2147855E38F,
					1.7050868E38F,
					-3.2343963E38F,
					8.2155087E37F,
					3.1801968E38F,
					9.487193E37F,
					-1.0641429E38F,
					-1.8313116E37F,
					-2.623135E38F,
					3.3652594E38F,
					2.4786346E38F,
					1.9830578E37F,
					-2.6530309E38F,
					3.2390179E38F,
					-1.8725743E38F,
					2.6185593E38F,
					-6.636569E37F,
					-1.0898707E38F,
					-6.904463E36F,
					-2.2866612E38F,
					-2.655171E38F,
					9.355575E37F,
					-1.5093132E37F,
					2.539354E38F,
					2.4170708E38F,
					8.950719E37F,
					-2.3627518E38F,
					-1.4618655E38F,
					1.3432589E38F,
					-2.8459918E38F,
					1.5164187E38F,
					-2.5801022E38F,
					2.4829173E37F,
					-2.7326667E38F,
					-7.6527395E36F,
					1.1084467E38F,
					-2.8451692E38F,
					2.9321464E38F,
					1.1228706E38F,
					7.5708064E37F,
					-1.8167938E37F,
					1.3189175E38F,
					1.5595481E38F,
					-3.1480377E38F,
					-2.2967124E37F,
					2.3874337E38F,
					6.229355E36F,
					-3.1846204E38F,
					-3.299854E38F,
					2.4235433E38F,
					1.0453109E38F,
					9.0850015E36F,
					1.4959391E38F,
					-3.3349812E38F,
					-2.3946415E38F,
					2.924871E38F,
					-6.044885E37F,
					-2.1291668E38F,
					1.6860343E38F,
					-1.0915264E38F,
					-9.976814E37F,
					3.1554188E38F,
					3.380654E38F,
					2.5614548E35F,
					2.7390212E36F,
					-1.1146927E38F,
					-6.977037E37F,
					3.191275E37F,
					2.6107248E38F,
					-1.2068138E38F,
					-3.218282E37F,
					-3.3986901E38F,
					9.659423E37F,
					2.5054276E38F,
					3.137471E38F,
					-1.405499E38F,
					-3.1976255E38F,
					1.5487065E38F,
					1.3609739E38F,
					9.179518E37F,
					-1.2476292E37F,
					-3.7184512E37F,
					2.9975862E38F,
					-6.880012E37F,
					2.7165025E37F,
					1.3216993E38F,
					-2.8289708E38F,
					4.3705616E37F,
					-3.3694147E38F,
					-1.5716333E38F,
					-4.957421E37F,
					2.663256E38F,
					2.5911127E38F,
					-2.072516E38F,
					-2.4153348E38F);
				paltitude.altitude_local(-3.0681826E38F,
					-1.714972E38F,
					-1.6201721E38F,
					2.1301333E38F,
					1.9222427E38F,
					-2.516961E38F,
					-2.9053173E38F,
					-3.3531985E38F,
					8.174262E37F,
					-1.410393E38F,
					2.4427895E38F,
					1.3751137E38F,
					2.7561144E38F,
					-2.5784936E38F,
					2.292799E37F,
					-1.3430056E38F,
					1.3218274E38F,
					2.5276014E38F,
					3.1630078E37F,
					1.2991297E38F,
					9.036862E37F,
					2.5735323E38F,
					6.262711E37F,
					-2.3903132E38F,
					3.3493264E38F,
					1.6119599E38F,
					-1.8869782E37F,
					-2.531531E38F,
					4.535986E37F,
					-1.363319E38F,
					-2.1332387E38F,
					-2.2968066E38F,
					3.1969999E37F,
					-2.4061613E38F,
					-2.8265917E38F,
					-4.5437785E37F,
					1.4555835E38F,
					-1.6602983E38F,
					1.1811151E38F,
					9.364762E37F,
					-2.6822836E38F,
					-9.604011E37F,
					-2.6029487E38F,
					2.7617068E38F,
					-3.791036E37F,
					4.5397326E37F,
					1.9977963E38F,
					9.311992E37F,
					7.7930145E36F,
					1.1118728E38F,
					3.2136596E38F,
					-1.5768376E37F,
					-1.405387E38F,
					-2.9036458E38F,
					2.3460598E38F,
					-9.6748406E36F,
					-6.740129E37F,
					-1.7257075E38F,
					-2.1687656E38F,
					-3.0006499E38F,
					2.3433469E38F,
					-3.3693332E38F,
					3.2605919E38F,
					-4.0751648E37F,
					-2.8854697E38F,
					8.850742E36F,
					-5.722974E37F,
					-2.3477668E38F,
					-3.2088741E38F,
					1.8939154E38F,
					2.1299295E38F,
					-2.0097209E38F,
					2.8472546E38F,
					1.7591082E38F,
					1.6451419E37F,
					-4.1022295E36F,
					-3.1145147E38F,
					-7.1748025E37F,
					-1.2811406E38F,
					-1.0685295E38F,
					2.4296406E38F,
					-1.3758978E38F,
					-2.2603421E38F,
					1.5796325E38F,
					3.762617E37F,
					6.114383E37F,
					-7.1605485E37F,
					-1.5491891E38F,
					1.7774725E38F,
					-2.1017329E38F,
					9.774707E37F,
					-1.944413E38F,
					3.2344397E38F,
					-1.4144728E38F,
					-7.282025E36F,
					-1.0782056E38F,
					2.3694514E37F,
					2.4583037E38F,
					-2.9690557E38F,
					5.37867E37F,
					2.3664075E38F,
					-1.2679751E37F,
					2.8952578E38F,
					-9.593471E37F,
					1.2206579E38F,
					-2.2504993E38F,
					-2.300427E38F,
					9.320073E37F,
					-2.4425357E38F,
					1.745923E38F,
					-2.7383375E38F,
					2.7435758E38F,
					-1.4204835E38F,
					2.0429911E38F,
					3.3323074E38F,
					-2.7503882E38F,
					-1.322862E38F,
					-1.4236611E38F,
					-7.46712E37F,
					-1.4086208E38F,
					-2.7137525E38F,
					-3.048829E38F,
					-5.121243E37F,
					-1.2866317E38F,
					3.0489788E38F,
					5.079265E37F,
					2.8718821E38F,
					-4.328558E37F,
					-2.835723E38F,
					3.3209003E37F,
					3.2207434E38F,
					8.4061664E37F,
					1.1467476E38F,
					-1.3753281E38F,
					1.5822639E38F,
					-2.425685E38F,
					2.8636446E38F,
					1.7141764E38F,
					-2.03159E38F,
					-2.28879E38F,
					-2.0122232E37F,
					4.0391078E37F,
					-5.0395536E37F,
					-7.202528E37F,
					-1.5920813E38F,
					5.497299E36F,
					1.3260006E38F,
					-2.9414102E38F,
					-5.6214524E37F,
					-1.3711704E38F,
					-2.692535E38F,
					-2.5805752E38F,
					-9.494774E37F,
					-2.6875174E38F,
					-2.3961263E38F,
					-1.4805439E38F,
					-3.3014621E38F,
					2.9156584E38F,
					2.563253E38F,
					-3.147299E38F,
					-4.706036E37F,
					-2.545523E38F,
					-4.508119E37F,
					3.0857559E38F,
					-2.542514E38F,
					-1.5421308E38F,
					1.4580186E38F,
					3.1739728E38F,
					-2.0585786E38F,
					-7.1939643E37F,
					8.718105E37F,
					-2.7943583E38F,
					-3.2531133E38F,
					2.813257E38F,
					-3.2225625E38F,
					2.8259838E38F,
					2.0875358E38F,
					-2.6241582E38F,
					-2.4334529E38F,
					1.6052407E38F,
					-2.4551506E38F,
					-1.359032E38F,
					-2.8828623E37F,
					7.6322346E36F,
					-2.8800283E38F,
					2.264399E38F,
					-2.1165544E38F,
					-3.3344298E38F,
					2.0182908E38F,
					5.857225E37F,
					9.604424E37F,
					7.079115E37F,
					2.4351497E38F,
					-2.5767163E38F,
					-1.3445336E38F,
					-2.7713707E37F,
					3.946625E35F,
					-2.2001126E37F,
					3.1803076E38F,
					6.161799E37F,
					-1.5952952E38F,
					2.9304427E38F,
					-1.481361E38F,
					-7.305372E37F,
					-7.916765E37F,
					9.827031E37F,
					-4.322212E37F,
					-1.4387363E38F,
					2.6175073E37F,
					-4.987231E37F,
					-1.8169628E38F,
					2.1642438E38F,
					-6.677745E37F,
					1.4825439E38F,
					3.3780475E38F,
					1.1731254E38F,
					-2.779741E38F,
					1.0577909E37F,
					-1.1130102E38F,
					-2.1875283E38F,
					2.7213637E38F,
					-7.150855E37F,
					-1.5918877E38F,
					-1.0223413E38F,
					5.415179E37F,
					3.302065E38F,
					1.9382566E38F,
					-2.4916693E38F,
					-2.9617708E37F,
					3.2972272E38F,
					-2.3871108E38F,
					-2.1009633E37F,
					4.8022338E36F,
					3.122401E37F,
					2.295025E38F,
					7.351274E37F,
					-4.3410396E37F,
					3.243335E37F,
					-1.0734838E37F,
					-1.6879749E38F,
					1.108131E38F,
					-1.4287122E38F,
					-1.122666E38F,
					2.3797909E38F,
					-2.0083E38F,
					1.046721E38F,
					2.0795323E38F,
					1.9794938E38F,
					-1.8641903E38F,
					-3.3461325E38F,
					-1.6596852E38F,
					2.337603E38F,
					1.7496189E38F,
					2.0937297E37F,
					2.5298002E38F);
				paltitude.altitude_relative(2.0992105E38F,
					2.5189998E38F,
					-7.401801E37F,
					8.2039614E37F,
					1.9593495E38F,
					-8.821724E37F,
					-1.75208E38F,
					-1.1820707E38F,
					1.0706023E38F,
					3.1181333E38F,
					8.537083E36F,
					-2.7370858E38F,
					-6.679907E36F,
					4.8992596E37F,
					2.15839E38F,
					4.9363765E37F,
					-2.6232559E38F,
					1.1473294E38F,
					5.5126707E37F,
					-8.751783E37F,
					1.5100811E38F,
					-2.191314E37F,
					2.4934756E38F,
					-2.1642292E37F,
					-2.1391411E38F,
					1.9453198E38F,
					-1.2979166E38F,
					-1.1816874E38F,
					-2.2295634E37F,
					2.7713548E38F,
					2.1434392E38F,
					-2.942944E37F,
					-3.194594E38F,
					1.9864949E38F,
					7.0365814E37F,
					-3.2696181E38F,
					2.8478722E38F,
					1.095546E37F,
					1.210688E37F,
					-3.298268E38F,
					1.9361813E38F,
					2.253625E38F,
					-3.6884715E37F,
					-2.8772411E38F,
					9.170468E37F,
					-1.378278E38F,
					2.0872214E38F,
					-6.6388795E36F,
					-2.0158121E38F,
					-2.8480943E38F,
					-3.263962E38F,
					2.781385E38F,
					1.294532E38F,
					-3.0858041E38F,
					1.7968905E38F,
					-9.067968E37F,
					-2.6250377E38F,
					-7.7111987E37F,
					1.4791706E38F,
					-2.455021E38F,
					-5.414463E37F,
					-1.7287923E38F,
					-3.2022801E38F,
					-2.4267023E38F,
					-1.7348301E38F,
					-8.0284795E37F,
					9.639963E37F,
					1.5574984E38F,
					-3.2641246E38F,
					-1.1495849E38F,
					1.5282236E38F,
					-1.9119599E38F,
					3.4344706E37F,
					2.8451915E38F,
					2.3040231E38F,
					3.1772563E38F,
					-3.206633E38F,
					-2.7999651E38F,
					1.9570793E38F,
					1.883273E38F,
					-2.7103502E38F,
					-2.793786E38F,
					2.2227302E38F,
					-2.0523561E38F,
					7.055277E37F,
					5.5912863E37F,
					-5.687217E37F,
					-3.7371255E37F,
					1.9105541E38F,
					-2.3539673E38F,
					6.670812E37F,
					1.832077E38F,
					-1.4802064E38F,
					7.3950233E37F,
					-1.5003475E38F,
					9.872911E37F,
					1.0052061E38F,
					-3.2559346E38F,
					2.7291566E38F,
					1.0315888E38F,
					1.1350758E38F,
					-1.3802091E37F,
					2.676169E37F,
					-2.5773896E38F,
					-2.1609125E38F,
					-2.4791627E38F,
					1.6996959E38F,
					-3.0526742E38F,
					-2.0058461E38F,
					2.6337979E38F,
					6.1604417E37F,
					-1.5004036E38F,
					-1.9348443E38F,
					1.2003873E38F,
					9.798231E37F,
					5.7068986E37F,
					9.162081E37F,
					1.7561445E38F,
					-1.6220854E38F,
					6.582329E36F,
					3.9432282E37F,
					1.761741E38F,
					1.6173861E38F,
					6.7720953E37F,
					2.621504E38F,
					-3.275424E38F,
					2.9410184E38F,
					-3.0401087E38F,
					1.2419503E38F,
					-2.8774275E38F,
					4.971548E36F,
					2.565167E38F,
					3.8015597E37F,
					-1.0920694E38F,
					-3.310114E38F,
					2.0014866E38F,
					4.0041231E37F,
					2.0381343E38F,
					1.90923E38F,
					-2.3407473E37F,
					1.1836632E37F,
					-4.8634865E37F,
					-2.2525618E38F,
					-2.7724243E38F,
					-3.1756733E38F,
					-2.240623E38F,
					-1.4960002E38F,
					-2.9978744E38F,
					-9.061601E37F,
					-1.990593E38F,
					3.2372642E38F,
					3.418465E36F,
					3.127509E36F,
					1.3899911E38F,
					2.1489499E38F,
					-2.8182518E38F,
					-1.9854207E38F,
					6.3112176E37F,
					-1.7237489E38F,
					1.9890568E38F,
					-2.1474975E38F,
					-2.700923E38F,
					2.2871761E38F,
					2.1586553E37F,
					-1.8044755E38F,
					2.3669112E38F,
					-1.3836283E37F,
					3.376055E38F,
					-2.806076E37F,
					-4.467418E37F,
					2.8382176E38F,
					3.1461536E38F,
					-2.8833678E38F,
					-2.4057084E38F,
					-2.5037333E38F,
					2.0758288E38F,
					4.7804413E36F,
					-8.776038E35F,
					1.9915685E38F,
					1.8637557E38F,
					7.4198815E37F,
					-2.6506635E38F,
					-9.695759E37F,
					5.1395073E37F,
					-4.535636E37F,
					7.892903E36F,
					-2.1086642E38F,
					-1.3429555E38F,
					-2.3559852E38F,
					3.2912966E38F,
					-3.1933764E38F,
					2.8981411E38F,
					-3.3791186E38F,
					2.9357622E38F,
					6.228311E37F,
					3.2849997E38F,
					-2.8629138E38F,
					2.0808996E38F,
					-1.1828549E38F,
					2.9046828E38F,
					-9.431966E37F,
					-1.9202373E38F,
					2.4236486E36F,
					-2.2430144E38F,
					3.7002503E37F,
					9.32422E37F,
					-1.0647629E38F,
					1.4162363E38F,
					7.574748E36F,
					8.289109E37F,
					-2.2675898E38F,
					6.6329265E37F,
					-6.415119E37F,
					1.0140753E38F,
					-1.59811E38F,
					2.9965603E38F,
					-1.6328937E38F,
					2.647474E38F,
					2.9267537E38F,
					1.363705E38F,
					1.7918738E37F,
					9.890626E37F,
					-1.126313E38F,
					-2.0761809E38F,
					3.0057207E38F,
					-2.447357E38F,
					-2.7598972E38F,
					-1.7293588E38F,
					-1.1599581E36F,
					-7.882391E37F,
					1.3534728E38F,
					-7.7511495E37F,
					2.5897313E38F,
					-1.1929333E38F,
					-1.5749263E38F,
					-1.3676827E38F,
					2.9683268E38F,
					-2.2496809E38F,
					3.0549935E38F,
					-2.4141724E38F,
					1.9294372E38F,
					5.6380434E37F,
					1.958934E38F,
					-1.452383E38F,
					-1.1511398E38F,
					-2.32546E38F,
					-2.4745179E38F,
					-2.2061362E37F,
					2.9104917E38F,
					2.1937116E38F,
					-4.4543026E37F,
					3.2378618E38F,
					-1.6846128E38F,
					-3.0456468E38F,
					3.324635E38F);
				paltitude.altitude_terrain(-1.6975953E38F,
					-2.300056E38F,
					2.411451E37F,
					9.503208E37F,
					9.703278E37F,
					-1.233371E38F,
					-1.1683544E38F,
					2.3854602E38F,
					2.4025192E38F,
					-2.8042445E38F,
					-2.68158E38F,
					1.3662649E38F,
					-2.1453867E38F,
					2.691506E38F,
					1.720158E38F,
					-4.1932622E37F,
					-8.905268E37F,
					-1.2081154E38F,
					-2.8773803E38F,
					1.7775013E38F,
					-1.6739683E38F,
					1.1708017E38F,
					1.7993832E38F,
					3.2790282E38F,
					2.2789591E38F,
					-5.1390636E37F,
					-3.3686093E37F,
					-2.959645E38F,
					1.4464129E37F,
					2.8080367E38F,
					-1.9129002E37F,
					-7.4929377E37F,
					-1.3189503E37F,
					4.748985E37F,
					3.1820146E38F,
					1.4641542E38F,
					-1.7273206E38F,
					-2.4395966E38F,
					1.5358832E38F,
					-1.7590185E38F,
					2.0405203E38F,
					6.754443E37F,
					2.0549482E38F,
					4.8121776E37F,
					-1.2416789E38F,
					2.2314646E38F,
					3.0347454E38F,
					1.3145091E38F,
					-8.0900995E37F,
					-2.713172E38F,
					-3.3040372E38F,
					-4.7976894E37F,
					-2.6950937E38F,
					-2.5031337E38F,
					1.4749862E38F,
					-1.1074055E38F,
					1.2509462E38F,
					-9.610623E37F,
					3.1023826E38F,
					-1.5730304E38F,
					2.7596778E38F,
					-2.4869191E38F,
					-3.023823E37F,
					-8.98449E37F,
					2.850091E38F,
					1.6712769E38F,
					-2.8192121E38F,
					2.6056223E38F,
					4.156055E37F,
					2.8563393E38F,
					5.2061026E37F,
					-2.5940904E38F,
					-1.3024029E38F,
					7.9983256E37F,
					-1.5334031E38F,
					1.7777733E38F,
					2.526447E38F,
					-2.5747625E38F,
					1.9528983E38F,
					-7.305209E37F,
					-6.122689E36F,
					-2.1584157E38F,
					-1.1805382E38F,
					-2.7507694E38F,
					-2.3087613E38F,
					6.593433E37F,
					3.3843486E38F,
					-6.6096124E37F,
					2.162215E38F,
					2.0136559E38F,
					1.4639153E38F,
					2.4576595E38F,
					-5.708228E36F,
					-2.3350005E37F,
					2.2514002E38F,
					1.2506727E38F,
					5.5995595E37F,
					-1.9079186E38F,
					-3.3552608E38F,
					-1.8513341E38F,
					-2.7327659E38F,
					3.2592942E38F,
					3.3728582E38F,
					1.104485E38F,
					1.2427025E38F,
					3.3680055E38F,
					-2.6342013E38F,
					-2.458853E38F,
					-3.8526457E37F,
					4.4379433E37F,
					-1.79885E38F,
					1.9962118E38F,
					1.7028531E38F,
					2.569491E38F,
					-1.6670132E38F,
					1.6341866E38F,
					-2.711752E38F,
					-1.4138921E38F,
					1.523786E38F,
					-2.8954126E37F,
					6.8159864E37F,
					1.0372077E38F,
					2.9381973E38F,
					-2.864557E38F,
					-2.08363E38F,
					-2.1185732E37F,
					-7.5551636E37F,
					-1.0071169E38F,
					-9.843545E37F,
					-1.6652555E38F,
					3.389611E37F,
					2.5819978E38F,
					-2.0588587E38F,
					-7.699634E37F,
					2.9895929E38F,
					-8.827208E37F,
					3.9834508E37F,
					6.593428E35F,
					-3.0191283E38F,
					3.1891722E36F,
					-3.2853928E38F,
					-1.3956643E38F,
					-2.745296E38F,
					3.3659044E38F,
					-8.58809E37F,
					1.4502718E38F,
					2.457726E38F,
					-6.663208E37F,
					2.4624314E38F,
					-2.1552898E38F,
					1.1563675E38F,
					-2.5430142E38F,
					1.8662058E38F,
					3.604294E37F,
					-2.2986063E38F,
					1.7642297E38F,
					-4.595098E37F,
					5.9962906E37F,
					-1.0074557E38F,
					2.7511922E38F,
					2.9247137E38F,
					-3.776516E37F,
					2.3719872E38F,
					1.9710705E38F,
					-2.7588318E38F,
					8.629474E37F,
					-6.3254315E37F,
					4.2254615E37F,
					2.4082723E38F,
					1.795444E38F,
					-2.0362468E38F,
					-3.2617127E38F,
					2.2143801E38F,
					2.356579E38F,
					-1.3550777E38F,
					2.8253995E38F,
					1.165463E38F,
					3.2908573E38F,
					-2.0356063E38F,
					-2.3648993E38F,
					1.3767117E38F,
					1.1232027E38F,
					-1.195866E38F,
					7.4306636E37F,
					-2.2937884E38F,
					-2.200086E38F,
					2.0570842E38F,
					-3.2255447E38F,
					-1.1703388E38F,
					-2.0071821E38F,
					1.8498949E38F,
					-1.7047237E38F,
					-1.1154452E38F,
					3.2470572E38F,
					-1.1844663E38F,
					2.4063394E38F,
					1.6593609E38F,
					-4.0160996E37F,
					3.1227094E38F,
					2.6370585E38F,
					1.2343547E38F,
					2.8248608E38F,
					-1.0815203E38F,
					2.0207728E38F,
					5.8466946E37F,
					-1.6304083E38F,
					-2.183227E38F,
					-2.3572342E38F,
					4.1167042E37F,
					-1.2322308E38F,
					2.8532723E37F,
					9.592165E37F,
					1.4770809E38F,
					-1.0520852E38F,
					-2.7272296E38F,
					-2.0458984E37F,
					-8.113064E37F,
					3.1922878E38F,
					-1.8864977E38F,
					1.8288933E38F,
					-2.9286998E38F,
					1.1319285E38F,
					2.2530666E38F,
					-3.4112485E37F,
					-2.3399201E38F,
					-3.2503939E38F,
					8.1583696E37F,
					1.2155729E37F,
					2.5925232E38F,
					1.4445624E38F,
					-2.564624E38F,
					-5.9846023E37F,
					2.0381552E38F,
					-3.876608E37F,
					1.9047858E38F,
					1.1645508E38F,
					2.847527E38F,
					3.3787586E38F,
					-1.6071749E38F,
					-1.3442968E38F,
					-2.0302144E38F,
					4.735628E37F,
					-1.5450328E38F,
					2.0243058E38F,
					-6.5973324E37F,
					-2.3576697E38F,
					9.505676E37F,
					-3.130129E37F,
					1.7158714E38F,
					2.1436404E38F,
					6.6262074E37F,
					2.313582E37F,
					2.6982337E38F,
					-6.1063886E37F,
					-1.8514274E38F);
				paltitude.bottom_clearance(-7.0357365E36F,
					-7.437037E37F,
					1.6252931E38F,
					7.6258133E37F,
					1.2704345E38F,
					2.6927903E36F,
					-5.3590933E37F,
					-2.6852809E38F,
					-1.6777015E38F,
					2.4378793E38F,
					-1.3571868E38F,
					2.1331674E37F,
					8.138026E37F,
					4.767973E37F,
					-2.7423722E38F,
					3.0726116E38F,
					2.9708447E38F,
					-3.2677972E38F,
					-1.2651083E38F,
					-1.4277735E38F,
					2.473511E37F,
					1.2905077E38F,
					4.524786E37F,
					1.1611497E38F,
					3.352547E38F,
					1.5090817E38F,
					2.9867532E38F,
					2.2775755E38F,
					-2.4851418E38F,
					2.0259714E38F,
					3.9825414E37F,
					-1.8332714E38F,
					-1.8609523E38F,
					5.406391E37F,
					2.2389022E38F,
					-2.0498413E38F,
					3.2962045E38F,
					-7.5656927E37F,
					-7.3829604E37F,
					1.8119185E38F,
					-1.7150911E38F,
					-2.81682E37F,
					4.4131496E37F,
					3.3212898E38F,
					-5.058407E37F,
					-1.6747677E38F,
					1.2695832E38F,
					-1.1005575E38F,
					3.0889556E38F,
					2.6008327E38F,
					-2.1197073E38F,
					1.5435889E38F,
					-3.2984784E38F,
					1.466245E37F,
					1.3536177E38F,
					-3.5462044E37F,
					-2.3448023E38F,
					2.7671938E38F,
					3.2943854E38F,
					-2.1500973E38F,
					1.3644457E38F,
					-2.1047614E38F,
					-2.3322343E38F,
					5.5583573E37F,
					2.6561079E38F,
					2.941174E38F,
					-1.774323E38F,
					-1.8082123E38F,
					7.2296284E37F,
					-5.407718E36F,
					3.3279968E38F,
					3.3546314E38F,
					1.1463012E37F,
					4.1773582E37F,
					3.2669849E38F,
					-6.521056E37F,
					-5.032597E37F,
					1.3597571E37F,
					3.0298677E37F,
					-8.645477E37F,
					-2.0330118E38F,
					5.7338454E36F,
					-2.1782433E37F,
					-1.4972173E38F,
					-1.7315253E37F,
					1.6075861E38F,
					-5.121535E37F,
					2.4677918E38F,
					7.481437E37F,
					9.697905E37F,
					6.753614E35F,
					-7.102687E37F,
					-2.829524E38F,
					-3.2448517E38F,
					1.6733391E38F,
					1.3409105E38F,
					1.9792656E38F,
					-1.5538127E38F,
					-3.109052E38F,
					-1.3375514E38F,
					1.4269179E38F,
					2.5139097E38F,
					-2.6352215E38F,
					-2.8322258E37F,
					-1.5479732E38F,
					-6.846128E37F,
					1.3324045E38F,
					-7.6227456E37F,
					-2.8068804E38F,
					1.7996775E38F,
					1.8573059E38F,
					2.8977758E38F,
					-1.700314E37F,
					4.7626536E35F,
					-2.7902568E38F,
					-2.5175963E38F,
					-2.2198241E38F,
					2.3221011E37F,
					9.141448E37F,
					-6.069709E37F,
					-2.0077683E38F,
					-1.9634052E38F,
					-3.0494357E37F,
					-2.8596392E38F,
					-1.742542E38F,
					-6.6285894E36F,
					-3.0124972E38F,
					1.3754375E38F,
					-9.593155E37F,
					-3.2879753E38F,
					-1.3079643E38F,
					2.6297024E38F,
					3.0693306E38F,
					-1.8554346E38F,
					-3.4373094E37F,
					1.2840049E38F,
					-2.8249902E38F,
					1.1764064E38F,
					-2.5839828E38F,
					3.0174234E38F,
					1.7616644E38F,
					1.6966651E38F,
					-2.410384E38F,
					1.1259992E38F,
					1.7593017E38F,
					-4.859244E37F,
					-9.853568E36F,
					3.2420268E38F,
					7.8684026E37F,
					-1.5274186E38F,
					-8.039782E36F,
					-1.4683453E38F,
					1.0590019E38F,
					8.712343E37F,
					-2.2849672E38F,
					-2.5296856E38F,
					-3.7295754E37F,
					-2.0117284E38F,
					-1.1995522E38F,
					6.893916E37F,
					3.0632923E38F,
					-8.095866E37F,
					-1.2672392E38F,
					3.2572116E38F,
					-1.967771E38F,
					1.385852E38F,
					-3.0754341E38F,
					2.7606511E38F,
					-1.3578556E38F,
					-1.8060074E37F,
					-6.621757E37F,
					1.6473286E38F,
					8.548038E37F,
					-1.0677449E38F,
					3.2450083E38F,
					2.9348391E38F,
					2.4173407E38F,
					-2.6297462E38F,
					2.8105956E38F,
					2.913644E38F,
					-7.936665E37F,
					5.960671E36F,
					1.4953648E38F,
					-2.3899477E38F,
					-6.184355E35F,
					2.575729E38F,
					3.2678617E38F,
					-8.593628E37F,
					-4.1026087E37F,
					2.7703865E38F,
					-2.252856E38F,
					4.060415E37F,
					-1.6074196E38F,
					1.5536492E38F,
					-3.1899257E38F,
					1.430136E37F,
					-1.7739687E38F,
					1.5674136E38F,
					3.6847857E37F,
					-1.3944343E38F,
					1.3033204E38F,
					5.737731E37F,
					-2.675618E38F,
					-2.03643E37F,
					1.9115806E38F,
					-2.16883E38F,
					2.8829871E38F,
					-2.651111E38F,
					2.813665E37F,
					8.8594706E35F,
					-4.952663E37F,
					2.3016714E38F,
					7.555832E37F,
					1.1199187E38F,
					-1.6990387E38F,
					-1.9278154E38F,
					-2.7410955E38F,
					-9.280477E37F,
					-1.2386024E38F,
					-1.00359E38F,
					-1.568388E37F,
					-6.46368E36F,
					-3.1774735E38F,
					2.1124878E38F,
					-1.9322253E38F,
					-3.331133E38F,
					2.862295E38F,
					-1.6985283E38F,
					2.760439E38F,
					3.0856764E38F,
					2.6553599E38F,
					4.538116E36F,
					-1.9524748E38F,
					2.5541943E38F,
					-2.3122255E38F,
					-2.515615E38F,
					-1.9575588E38F,
					4.2121806E37F,
					1.4273706E38F,
					-1.8092573E38F,
					-2.9015137E38F,
					1.5356594E38F,
					1.6670858E38F,
					2.894117E38F,
					-3.224903E38F,
					-1.5429169E38F,
					-2.7317394E38F,
					4.422976E37F,
					2.270261E38F,
					-2.8172413E38F,
					-8.055179E37F,
					-4.7738393E37F,
					-1.6068419E38F,
					2.262374E38F,
					1.4030101E38F);
			}

			void on_ALTITUDE(const com::company::demo::ALTITUDE& paltitude) {
				assert(paltitude.time_usec() == -2261261072324793685L,
					4286397181078021408L,
					7410987413520882128L,
					-8411918536056623305L,
					4984829116744186800L,
					-2020712931911098319L,
					2357332868140368419L,
					-8637192284187305618L,
					7710708996199386269L,
					3897000916572790255L,
					5242974694086385193L,
					1635345972722034730L,
					-8173972616151501691L,
					7663715767979574325L,
					5894468919168354956L,
					-7509106212860591404L,
					8266523073327026867L,
					-2324431850561754219L,
					3248594527307617792L,
					5075903764773775142L,
					3419516538686866598L,
					-6494357410540381051L,
					-7851416507219825002L,
					625589694083607038L,
					797499835373612352L,
					-4621152417795812571L,
					6776332453398639077L,
					3903075310259755569L,
					7105366919264281911L,
					-7473438630207647878L,
					-3491152646700986941L,
					-843023048439464445L,
					4590216863343988168L,
					-3431429465928675457L,
					-2545836012585888523L,
					-5965405730065871458L,
					3105924848331274736L,
					-4286104894761615734L,
					-5843985608234071537L,
					7513109389494479351L,
					3803217804242478681L,
					3775129829788173763L,
					-7177184415411836274L,
					-7154184240616481982L,
					7689070792130049485L,
					539351951935586921L,
					-6455548501288457112L,
					155343036572993273L,
					7779753374441152077L,
					467155860686481734L,
					-3581719906560350023L,
					-4695386533616807042L,
					2812555030350458451L,
					4020080551530080619L,
					5231142057811721274L,
					784010730599949676L,
					1588333653043447275L,
					412025397191194360L,
					5033384192139967308L,
					717640140249212712L,
					-5631970240928782796L,
					-3894206087638838666L,
					5407051624928902653L,
					1102427147043186433L,
					-8757236881146134086L,
					-7982818285379262117L,
					6703787567798455317L,
					7488790199012638650L,
					-41037697936947130L,
					2527981975756459748L,
					-1386005314336111900L,
					-2387188670023521636L,
					5001890052898532669L,
					-1373688197392426687L,
					-4449364202345999312L,
					757339045373914367L,
					-3500046352887326765L,
					-1764532646007607848L,
					6712674913872790418L,
					2261841971600695565L,
					-9199871137203746353L,
					2590611695179602133L,
					-7963088922325119L,
					2248864389056242884L,
					-4552264250948392916L,
					-6723315350990405873L,
					-2672890973937218252L,
					4164450761258890311L,
					-3599976901849437819L,
					7151244713443035596L,
					-3507691308715400776L,
					-4324093258831745079L,
					1828585350234825214L,
					7169903000449323492L,
					3113084019496816911L,
					-7270240919628477794L,
					-7860246745591166483L,
					-579349094020041304L,
					4360413199232820722L,
					-418476582569520252L,
					2915723105766757055L,
					2273040725696879110L,
					-6291581595888455841L,
					-79015712408807542L,
					127884781933884416L,
					3088895075158036971L,
					-1015634384759399964L,
					-961295480362528462L,
					-2908735471366640246L,
					-6139687108684153970L,
					7203819572848683925L,
					-2674233250241203889L,
					6055087206401027295L,
					4387863375677754263L,
					-5252999134563742092L,
					7009156474488789022L,
					8129377473440360515L,
					3512766406381296827L,
					4245239546233606382L,
					3096351554691123972L,
					5092958563889936175L,
					-3389566238471926572L,
					5430179128076418926L,
					-1281965676089598873L,
					-2321464292322337062L,
					-2745710987807242422L,
					-5331122401662244553L,
					6061702548676930339L,
					-7290192732101180666L,
					-4830023509047885581L,
					924360101958089578L,
					3696548920193854624L,
					470770344971947453L,
					-4606650420010045569L,
					3487639098370586180L,
					5564516683790241804L,
					6374259443031910586L,
					4831227828604231167L,
					-6325189098881927712L,
					-5480189699993415063L,
					-1386382859983513609L,
					8977784944733466507L,
					2544957930678945206L,
					8620272331495747477L,
					2836081072625602210L,
					6501744456616461736L,
					1257710058163827007L,
					3539958807449231567L,
					-6162715739195694334L,
					2944441629657130579L,
					-3555412143149479805L,
					-2676781074752700872L,
					-106288447487342290L,
					5213629498897915960L,
					5719985773943415275L,
					-652542625470906783L,
					-4484831116671515215L,
					8129016186373431701L,
					1435466363053124099L,
					-2060649604894691774L,
					1434346503524428508L,
					4564567044298955767L,
					-6359454652446894491L,
					4801255777490575101L,
					-1152230160338168618L,
					7766590283473632349L,
					168681613733532914L,
					-6923297737967007643L,
					5236377677012048552L,
					6029021024076489353L,
					-3867809536636681732L,
					7150173542929838697L,
					-887563761998695258L,
					-7246591445648797515L,
					-7841907635646086045L,
					-6453387111388566411L,
					6228295182760351271L,
					-3678468950883972658L,
					-6113728582659475309L,
					-5923495310188270303L,
					-1486454542710670869L,
					-4483326235809820243L,
					-3959991331849185352L,
					2307294122154273018L,
					4343702529995171393L,
					5023840973354738915L,
					-1501685819043705870L,
					-3904106912986729144L,
					3758390820484327119L,
					-1958319877222077470L,
					6302650801561870924L,
					-8131987898595069493L,
					-7894107694923034406L,
					8494702291243113532L,
					7541388072844925838L,
					8605115951912683492L,
					3488527821440370838L,
					-1455591217903643364L,
					-1923135087342128020L,
					30104798888531624L,
					-5047574865053609803L,
					-812573648974479305L,
					7070419345230955875L,
					-446960064753779144L,
					-6537992825150752099L,
					4262109265744382668L,
					2074961820053632497L,
					-1594229842264669401L,
					8262840655855097188L,
					-722770451139320504L,
					4537198014083991158L,
					6446309426831069375L,
					8427143837242443773L,
					-1259791463988510842L,
					536989322024353298L,
					4921069165052291800L,
					-7039701852694388516L,
					6233127499933158283L,
					-7185122330620372422L,
					-6583920812118098841L,
					-8532576921683328363L,
					-1148061375145984771L,
					1978617708026607149L,
					892560562557407679L,
					3903090346372867469L,
					-2451716855182330402L,
					-2928553764892779831L,
					644655708793236621L,
					-5486036557350628640L,
					5022109154676959298L,
					-8956874410057905599L,
					-8758098094818334502L,
					2674687665752351934L,
					6217675643822066942L,
					726878137019553332L,
					-1589833470969505416L,
					-6707389207533926027L,
					4455308524642134553L,
					2723555725635904397L,
					-4374069620031449057L,
					-1888227922565267737L,
					-5621949305607135682L,
					-3812143057967257144L,
					6299614400696910420L,
					1825462494283689350L,
					-4432510961178495495L,
					4040471120014768613L,
					-530263550681502684L,
					-8059778933074708422L,
					1078726949089104793L,
					8003407734769248479L,
					-5018934041807237884L,
					-939166311580730881L,
					4378560867210486497L,
					4293000487473482957L);
				assert(paltitude.altitude_monotonic() == 1.0378754E38F,
					-1.5834795E38F,
					-2.2728093E38F,
					-1.9519018E37F,
					2.4641974E38F,
					-2.5650364E38F,
					-8.954245E37F,
					-1.4868734E38F,
					1.5486237E38F,
					-3.2319075E38F,
					2.7855571E38F,
					8.598706E37F,
					-1.3035413E38F,
					-3.8468574E37F,
					-1.4203644E38F,
					-6.099354E37F,
					-2.5461394E37F,
					-3.136966E36F,
					1.6139448E38F,
					7.775249E36F,
					8.1543237E37F,
					-3.3559109E38F,
					9.906711E37F,
					-9.498851E37F,
					2.6621772E38F,
					1.4507203E38F,
					2.6821564E38F,
					8.767492E37F,
					2.750883E38F,
					-2.7641168E38F,
					3.200729E38F,
					-1.7363682E38F,
					2.6562432E38F,
					2.7002688E38F,
					-1.802228E38F,
					-2.629045E38F,
					-2.9761747E38F,
					2.9165907E37F,
					2.8909575E38F,
					1.4887286E37F,
					-2.8477067E38F,
					9.780739E37F,
					-2.6270095E38F,
					-2.5696687E38F,
					7.7757226E37F,
					-1.3191577E38F,
					-3.5226474E37F,
					-2.090492E38F,
					2.046547E38F,
					7.139412E37F,
					-1.9594053E38F,
					2.6312133E38F,
					-2.1213078E38F,
					3.3739788E37F,
					-1.399116E38F,
					-1.4330319E38F,
					-1.639378E38F,
					-7.05227E37F,
					-6.8864396E36F,
					2.731426E38F,
					-2.2306261E38F,
					1.2437142E38F,
					-5.9122534E37F,
					3.0750455E38F,
					6.5363457E37F,
					2.9087462E38F,
					1.4096943E38F,
					-1.2010657E38F,
					2.6145292E38F,
					-2.8405957E38F,
					-3.6705883E37F,
					2.418976E38F,
					-9.402327E37F,
					-1.6753063E38F,
					2.1672625E38F,
					-1.4922675E38F,
					1.2935794E38F,
					-9.926671E37F,
					-1.3138785E38F,
					3.1201218E38F,
					3.1038303E38F,
					-3.38051E38F,
					8.4761975E37F,
					1.2818608E38F,
					1.6096268E38F,
					8.873409E37F,
					8.369957E37F,
					-1.3735934E38F,
					-1.3754115E38F,
					-2.7648494E38F,
					2.5852826E36F,
					1.4747576E38F,
					-2.8466192E38F,
					-2.0261697E38F,
					-2.3764297E38F,
					-2.3086205E38F,
					2.7661893E38F,
					-8.369944E37F,
					7.344236E37F,
					-2.1535015E38F,
					-2.1148801E38F,
					1.3129728E38F,
					-7.747344E35F,
					-3.171613E37F,
					-2.2713617E38F,
					1.4460965E38F,
					-3.3021531E38F,
					1.8459485E38F,
					-1.4145761E38F,
					-1.3366452E38F,
					9.425878E37F,
					-1.3728278E38F,
					2.226934E38F,
					-1.6230936E38F,
					-3.0355204E38F,
					-2.9493104E38F,
					-1.8439864E38F,
					-1.487599E38F,
					-2.8371195E38F,
					-8.829445E37F,
					1.0763259E38F,
					-6.866631E37F,
					-2.2748696E38F,
					-1.6783622E38F,
					-1.3435367E38F,
					-2.5737818E38F,
					1.7086656E37F,
					-1.7353364E38F,
					6.870317E37F,
					-3.2958396E38F,
					3.2428855E38F,
					2.0132413E38F,
					-2.914457E38F,
					1.3064064E38F,
					-1.7783173E37F,
					1.7057555E38F,
					1.888219E38F,
					-2.758368E38F,
					1.831726E38F,
					8.0251937E37F,
					-2.2218528E38F,
					-1.2964202E38F,
					-1.4978548E38F,
					-3.0373965E38F,
					7.6191805E37F,
					-3.3822638E38F,
					-2.68028E38F,
					-4.4700494E37F,
					-7.813343E37F,
					1.3985799E38F,
					-2.0516475E38F,
					-2.7680842E38F,
					8.4322916E37F,
					1.2954944E38F,
					2.5157818E38F,
					2.6280804E38F,
					-2.9034373E38F,
					2.9186963E38F,
					2.3768982E38F,
					-2.0106967E38F,
					1.474645E38F,
					1.9461487E38F,
					-6.7305554E37F,
					-2.0352854E38F,
					1.1989914E38F,
					-3.481318E37F,
					1.2679482E38F,
					2.549371E38F,
					-9.028768E37F,
					-2.821655E38F,
					1.0289746E38F,
					2.8688603E36F,
					-8.80151E37F,
					9.908299E37F,
					-1.0053895E38F,
					-1.6640857E38F,
					1.8768762E38F,
					1.4010206E38F,
					-2.6403515E38F,
					-1.3379182E38F,
					-2.1495229E38F,
					1.4661132E38F,
					-6.7629895E37F,
					-3.2996438E38F,
					-2.8694162E38F,
					-2.7454408E38F,
					2.6480848E38F,
					1.6018761E38F,
					-2.611137E38F,
					2.9605114E38F,
					4.9976653E37F,
					-1.1495977E38F,
					-3.2301553E38F,
					1.7425792E38F,
					-2.3907207E38F,
					6.8817024E37F,
					-3.2059878E37F,
					2.7687292E38F,
					-3.1335053E38F,
					-1.828999E38F,
					1.199929E38F,
					1.2858442E38F,
					-1.2105739E38F,
					5.8628876E37F,
					1.0581046E38F,
					-2.6245182E38F,
					2.7893852E38F,
					-3.1467094E38F,
					1.1133348E37F,
					1.6195221E37F,
					5.915679E37F,
					-2.026172E38F,
					2.2689224E38F,
					9.089733E37F,
					-1.5386991E38F,
					3.1778808E38F,
					-2.1591231E38F,
					-1.7932859E38F,
					2.8195123E38F,
					-3.2264077E38F,
					2.7829742E38F,
					-2.6693698E38F,
					-1.8707188E38F,
					-2.0712744E38F,
					2.4203147E38F,
					1.2617292E37F,
					-5.9827323E37F,
					-1.327165E38F,
					2.3943704E37F,
					3.1556182E38F,
					3.225432E37F,
					-3.2924438E38F,
					-2.7023408E38F,
					-6.9310693E37F,
					-2.5519478E38F,
					1.8505334E38F,
					-2.068196E38F,
					1.1953584E38F,
					-6.994626E37F,
					-2.0156103E38F,
					-2.6818847E37F,
					2.675546E38F,
					-1.0149067E38F,
					-1.5336746E38F,
					3.3727605E38F,
					1.6842173E38F,
					-2.7799133E38F,
					3.0849405E38F,
					-2.4084889E38F,
					-6.6623953E37F,
					-1.7042875E38F,
					-6.639395E37F,
					2.9932447E38F,
					1.1135487E38F,
					1.1858388E38F);
				assert(paltitude.altitude_amsl() == 2.7649585E38F,
					6.09323E37F,
					-4.4895266E36F,
					2.2074263E38F,
					9.864295E37F,
					6.126757E36F,
					-3.85901E37F,
					-2.6462723E38F,
					-5.109542E37F,
					-1.0749502E38F,
					2.5833427E38F,
					2.3353203E38F,
					3.2060099E38F,
					2.094661E38F,
					-2.4813824E38F,
					7.5307706E36F,
					2.9160562E38F,
					-1.8994681E38F,
					2.552062E37F,
					3.0330137E38F,
					2.5583893E38F,
					3.3783846E38F,
					-4.4185067E37F,
					-3.2397062E38F,
					2.6647851E38F,
					-2.2096424E38F,
					-1.344551E38F,
					-1.1904747E38F,
					-2.4361646E38F,
					2.6065131E38F,
					-2.9321048E38F,
					-1.2348647E38F,
					2.207809E38F,
					-1.4406177E38F,
					-2.3084913E38F,
					-3.3975906E38F,
					-1.571305E38F,
					-2.8158266E38F,
					2.2197458E38F,
					-3.1767182E38F,
					-1.3623577E38F,
					3.3364116E38F,
					-2.103779E38F,
					-3.4753075E37F,
					1.0705567E38F,
					3.185611E38F,
					2.8489902E38F,
					-1.524681E37F,
					-1.2031079E38F,
					-2.176108E38F,
					1.8828078E38F,
					1.144316E38F,
					3.2874792E38F,
					1.0617827E38F,
					-1.2339762E38F,
					1.7829323E38F,
					1.9990807E38F,
					-2.2892137E38F,
					1.5977588E38F,
					2.6794203E38F,
					-2.4326387E38F,
					6.852042E36F,
					-1.4083116E38F,
					6.60226E37F,
					2.7615566E38F,
					-2.2292273E38F,
					3.205705E38F,
					2.5471508E38F,
					-2.0244966E37F,
					-2.5814518E38F,
					-6.1327035E37F,
					-1.099303E38F,
					6.460345E37F,
					-1.6241486E38F,
					2.9463236E38F,
					2.19274E38F,
					-1.5532969E38F,
					3.3510962E38F,
					3.02012E37F,
					2.4367999E38F,
					-1.438858E38F,
					-3.378272E38F,
					-1.0009533E38F,
					-2.7795876E38F,
					5.576863E36F,
					-8.100652E37F,
					-2.7796594E38F,
					7.530944E37F,
					1.8496558E38F,
					-3.7485706E37F,
					-2.7898325E38F,
					4.852901E37F,
					1.8627122E38F,
					-1.0566778E38F,
					-2.2514168E38F,
					2.5763633E38F,
					-7.327506E37F,
					1.2568104E37F,
					2.7152666E38F,
					1.7734367E38F,
					2.4241037E38F,
					4.91649E37F,
					3.2710639E38F,
					2.8481482E37F,
					2.822561E37F,
					-8.903854E37F,
					-1.0806736E38F,
					1.7693015E38F,
					2.9921992E38F,
					-1.0249865E38F,
					-7.6926545E37F,
					1.8050923E38F,
					1.2182812E38F,
					-9.259621E37F,
					-1.2083369E38F,
					2.9855186E38F,
					3.0199522E38F,
					-2.3184538E38F,
					-2.6726819E38F,
					3.2573357E36F,
					2.0457901E38F,
					-1.469038E37F,
					5.934865E37F,
					9.698048E37F,
					-1.2815094E38F,
					-3.0644987E38F,
					1.4792346E38F,
					-2.861203E38F,
					-7.980226E37F,
					6.250238E37F,
					-6.235075E37F,
					1.7841063E38F,
					5.848401E37F,
					3.106531E37F,
					2.5659992E38F,
					-1.548331E38F,
					-3.3584902E38F,
					-3.0897036E38F,
					2.9925754E38F,
					-2.4097795E38F,
					-8.425414E37F,
					-3.142973E38F,
					-2.0783391E36F,
					1.4892241E38F,
					3.1470298E38F,
					-2.9467226E38F,
					1.7211111E38F,
					-1.1235588E38F,
					-2.6607118E38F,
					-4.821348E37F,
					2.489309E38F,
					-3.120044E38F,
					2.779002E38F,
					7.082477E36F,
					-8.540261E37F,
					-3.7279046E37F,
					6.642363E37F,
					1.819726E38F,
					-6.8850744E37F,
					2.4532802E38F,
					1.2147855E38F,
					1.7050868E38F,
					-3.2343963E38F,
					8.2155087E37F,
					3.1801968E38F,
					9.487193E37F,
					-1.0641429E38F,
					-1.8313116E37F,
					-2.623135E38F,
					3.3652594E38F,
					2.4786346E38F,
					1.9830578E37F,
					-2.6530309E38F,
					3.2390179E38F,
					-1.8725743E38F,
					2.6185593E38F,
					-6.636569E37F,
					-1.0898707E38F,
					-6.904463E36F,
					-2.2866612E38F,
					-2.655171E38F,
					9.355575E37F,
					-1.5093132E37F,
					2.539354E38F,
					2.4170708E38F,
					8.950719E37F,
					-2.3627518E38F,
					-1.4618655E38F,
					1.3432589E38F,
					-2.8459918E38F,
					1.5164187E38F,
					-2.5801022E38F,
					2.4829173E37F,
					-2.7326667E38F,
					-7.6527395E36F,
					1.1084467E38F,
					-2.8451692E38F,
					2.9321464E38F,
					1.1228706E38F,
					7.5708064E37F,
					-1.8167938E37F,
					1.3189175E38F,
					1.5595481E38F,
					-3.1480377E38F,
					-2.2967124E37F,
					2.3874337E38F,
					6.229355E36F,
					-3.1846204E38F,
					-3.299854E38F,
					2.4235433E38F,
					1.0453109E38F,
					9.0850015E36F,
					1.4959391E38F,
					-3.3349812E38F,
					-2.3946415E38F,
					2.924871E38F,
					-6.044885E37F,
					-2.1291668E38F,
					1.6860343E38F,
					-1.0915264E38F,
					-9.976814E37F,
					3.1554188E38F,
					3.380654E38F,
					2.5614548E35F,
					2.7390212E36F,
					-1.1146927E38F,
					-6.977037E37F,
					3.191275E37F,
					2.6107248E38F,
					-1.2068138E38F,
					-3.218282E37F,
					-3.3986901E38F,
					9.659423E37F,
					2.5054276E38F,
					3.137471E38F,
					-1.405499E38F,
					-3.1976255E38F,
					1.5487065E38F,
					1.3609739E38F,
					9.179518E37F,
					-1.2476292E37F,
					-3.7184512E37F,
					2.9975862E38F,
					-6.880012E37F,
					2.7165025E37F,
					1.3216993E38F,
					-2.8289708E38F,
					4.3705616E37F,
					-3.3694147E38F,
					-1.5716333E38F,
					-4.957421E37F,
					2.663256E38F,
					2.5911127E38F,
					-2.072516E38F,
					-2.4153348E38F);
				assert(paltitude.altitude_local() == -3.0681826E38F,
					-1.714972E38F,
					-1.6201721E38F,
					2.1301333E38F,
					1.9222427E38F,
					-2.516961E38F,
					-2.9053173E38F,
					-3.3531985E38F,
					8.174262E37F,
					-1.410393E38F,
					2.4427895E38F,
					1.3751137E38F,
					2.7561144E38F,
					-2.5784936E38F,
					2.292799E37F,
					-1.3430056E38F,
					1.3218274E38F,
					2.5276014E38F,
					3.1630078E37F,
					1.2991297E38F,
					9.036862E37F,
					2.5735323E38F,
					6.262711E37F,
					-2.3903132E38F,
					3.3493264E38F,
					1.6119599E38F,
					-1.8869782E37F,
					-2.531531E38F,
					4.535986E37F,
					-1.363319E38F,
					-2.1332387E38F,
					-2.2968066E38F,
					3.1969999E37F,
					-2.4061613E38F,
					-2.8265917E38F,
					-4.5437785E37F,
					1.4555835E38F,
					-1.6602983E38F,
					1.1811151E38F,
					9.364762E37F,
					-2.6822836E38F,
					-9.604011E37F,
					-2.6029487E38F,
					2.7617068E38F,
					-3.791036E37F,
					4.5397326E37F,
					1.9977963E38F,
					9.311992E37F,
					7.7930145E36F,
					1.1118728E38F,
					3.2136596E38F,
					-1.5768376E37F,
					-1.405387E38F,
					-2.9036458E38F,
					2.3460598E38F,
					-9.6748406E36F,
					-6.740129E37F,
					-1.7257075E38F,
					-2.1687656E38F,
					-3.0006499E38F,
					2.3433469E38F,
					-3.3693332E38F,
					3.2605919E38F,
					-4.0751648E37F,
					-2.8854697E38F,
					8.850742E36F,
					-5.722974E37F,
					-2.3477668E38F,
					-3.2088741E38F,
					1.8939154E38F,
					2.1299295E38F,
					-2.0097209E38F,
					2.8472546E38F,
					1.7591082E38F,
					1.6451419E37F,
					-4.1022295E36F,
					-3.1145147E38F,
					-7.1748025E37F,
					-1.2811406E38F,
					-1.0685295E38F,
					2.4296406E38F,
					-1.3758978E38F,
					-2.2603421E38F,
					1.5796325E38F,
					3.762617E37F,
					6.114383E37F,
					-7.1605485E37F,
					-1.5491891E38F,
					1.7774725E38F,
					-2.1017329E38F,
					9.774707E37F,
					-1.944413E38F,
					3.2344397E38F,
					-1.4144728E38F,
					-7.282025E36F,
					-1.0782056E38F,
					2.3694514E37F,
					2.4583037E38F,
					-2.9690557E38F,
					5.37867E37F,
					2.3664075E38F,
					-1.2679751E37F,
					2.8952578E38F,
					-9.593471E37F,
					1.2206579E38F,
					-2.2504993E38F,
					-2.300427E38F,
					9.320073E37F,
					-2.4425357E38F,
					1.745923E38F,
					-2.7383375E38F,
					2.7435758E38F,
					-1.4204835E38F,
					2.0429911E38F,
					3.3323074E38F,
					-2.7503882E38F,
					-1.322862E38F,
					-1.4236611E38F,
					-7.46712E37F,
					-1.4086208E38F,
					-2.7137525E38F,
					-3.048829E38F,
					-5.121243E37F,
					-1.2866317E38F,
					3.0489788E38F,
					5.079265E37F,
					2.8718821E38F,
					-4.328558E37F,
					-2.835723E38F,
					3.3209003E37F,
					3.2207434E38F,
					8.4061664E37F,
					1.1467476E38F,
					-1.3753281E38F,
					1.5822639E38F,
					-2.425685E38F,
					2.8636446E38F,
					1.7141764E38F,
					-2.03159E38F,
					-2.28879E38F,
					-2.0122232E37F,
					4.0391078E37F,
					-5.0395536E37F,
					-7.202528E37F,
					-1.5920813E38F,
					5.497299E36F,
					1.3260006E38F,
					-2.9414102E38F,
					-5.6214524E37F,
					-1.3711704E38F,
					-2.692535E38F,
					-2.5805752E38F,
					-9.494774E37F,
					-2.6875174E38F,
					-2.3961263E38F,
					-1.4805439E38F,
					-3.3014621E38F,
					2.9156584E38F,
					2.563253E38F,
					-3.147299E38F,
					-4.706036E37F,
					-2.545523E38F,
					-4.508119E37F,
					3.0857559E38F,
					-2.542514E38F,
					-1.5421308E38F,
					1.4580186E38F,
					3.1739728E38F,
					-2.0585786E38F,
					-7.1939643E37F,
					8.718105E37F,
					-2.7943583E38F,
					-3.2531133E38F,
					2.813257E38F,
					-3.2225625E38F,
					2.8259838E38F,
					2.0875358E38F,
					-2.6241582E38F,
					-2.4334529E38F,
					1.6052407E38F,
					-2.4551506E38F,
					-1.359032E38F,
					-2.8828623E37F,
					7.6322346E36F,
					-2.8800283E38F,
					2.264399E38F,
					-2.1165544E38F,
					-3.3344298E38F,
					2.0182908E38F,
					5.857225E37F,
					9.604424E37F,
					7.079115E37F,
					2.4351497E38F,
					-2.5767163E38F,
					-1.3445336E38F,
					-2.7713707E37F,
					3.946625E35F,
					-2.2001126E37F,
					3.1803076E38F,
					6.161799E37F,
					-1.5952952E38F,
					2.9304427E38F,
					-1.481361E38F,
					-7.305372E37F,
					-7.916765E37F,
					9.827031E37F,
					-4.322212E37F,
					-1.4387363E38F,
					2.6175073E37F,
					-4.987231E37F,
					-1.8169628E38F,
					2.1642438E38F,
					-6.677745E37F,
					1.4825439E38F,
					3.3780475E38F,
					1.1731254E38F,
					-2.779741E38F,
					1.0577909E37F,
					-1.1130102E38F,
					-2.1875283E38F,
					2.7213637E38F,
					-7.150855E37F,
					-1.5918877E38F,
					-1.0223413E38F,
					5.415179E37F,
					3.302065E38F,
					1.9382566E38F,
					-2.4916693E38F,
					-2.9617708E37F,
					3.2972272E38F,
					-2.3871108E38F,
					-2.1009633E37F,
					4.8022338E36F,
					3.122401E37F,
					2.295025E38F,
					7.351274E37F,
					-4.3410396E37F,
					3.243335E37F,
					-1.0734838E37F,
					-1.6879749E38F,
					1.108131E38F,
					-1.4287122E38F,
					-1.122666E38F,
					2.3797909E38F,
					-2.0083E38F,
					1.046721E38F,
					2.0795323E38F,
					1.9794938E38F,
					-1.8641903E38F,
					-3.3461325E38F,
					-1.6596852E38F,
					2.337603E38F,
					1.7496189E38F,
					2.0937297E37F,
					2.5298002E38F);
				assert(paltitude.altitude_relative() == 2.0992105E38F,
					2.5189998E38F,
					-7.401801E37F,
					8.2039614E37F,
					1.9593495E38F,
					-8.821724E37F,
					-1.75208E38F,
					-1.1820707E38F,
					1.0706023E38F,
					3.1181333E38F,
					8.537083E36F,
					-2.7370858E38F,
					-6.679907E36F,
					4.8992596E37F,
					2.15839E38F,
					4.9363765E37F,
					-2.6232559E38F,
					1.1473294E38F,
					5.5126707E37F,
					-8.751783E37F,
					1.5100811E38F,
					-2.191314E37F,
					2.4934756E38F,
					-2.1642292E37F,
					-2.1391411E38F,
					1.9453198E38F,
					-1.2979166E38F,
					-1.1816874E38F,
					-2.2295634E37F,
					2.7713548E38F,
					2.1434392E38F,
					-2.942944E37F,
					-3.194594E38F,
					1.9864949E38F,
					7.0365814E37F,
					-3.2696181E38F,
					2.8478722E38F,
					1.095546E37F,
					1.210688E37F,
					-3.298268E38F,
					1.9361813E38F,
					2.253625E38F,
					-3.6884715E37F,
					-2.8772411E38F,
					9.170468E37F,
					-1.378278E38F,
					2.0872214E38F,
					-6.6388795E36F,
					-2.0158121E38F,
					-2.8480943E38F,
					-3.263962E38F,
					2.781385E38F,
					1.294532E38F,
					-3.0858041E38F,
					1.7968905E38F,
					-9.067968E37F,
					-2.6250377E38F,
					-7.7111987E37F,
					1.4791706E38F,
					-2.455021E38F,
					-5.414463E37F,
					-1.7287923E38F,
					-3.2022801E38F,
					-2.4267023E38F,
					-1.7348301E38F,
					-8.0284795E37F,
					9.639963E37F,
					1.5574984E38F,
					-3.2641246E38F,
					-1.1495849E38F,
					1.5282236E38F,
					-1.9119599E38F,
					3.4344706E37F,
					2.8451915E38F,
					2.3040231E38F,
					3.1772563E38F,
					-3.206633E38F,
					-2.7999651E38F,
					1.9570793E38F,
					1.883273E38F,
					-2.7103502E38F,
					-2.793786E38F,
					2.2227302E38F,
					-2.0523561E38F,
					7.055277E37F,
					5.5912863E37F,
					-5.687217E37F,
					-3.7371255E37F,
					1.9105541E38F,
					-2.3539673E38F,
					6.670812E37F,
					1.832077E38F,
					-1.4802064E38F,
					7.3950233E37F,
					-1.5003475E38F,
					9.872911E37F,
					1.0052061E38F,
					-3.2559346E38F,
					2.7291566E38F,
					1.0315888E38F,
					1.1350758E38F,
					-1.3802091E37F,
					2.676169E37F,
					-2.5773896E38F,
					-2.1609125E38F,
					-2.4791627E38F,
					1.6996959E38F,
					-3.0526742E38F,
					-2.0058461E38F,
					2.6337979E38F,
					6.1604417E37F,
					-1.5004036E38F,
					-1.9348443E38F,
					1.2003873E38F,
					9.798231E37F,
					5.7068986E37F,
					9.162081E37F,
					1.7561445E38F,
					-1.6220854E38F,
					6.582329E36F,
					3.9432282E37F,
					1.761741E38F,
					1.6173861E38F,
					6.7720953E37F,
					2.621504E38F,
					-3.275424E38F,
					2.9410184E38F,
					-3.0401087E38F,
					1.2419503E38F,
					-2.8774275E38F,
					4.971548E36F,
					2.565167E38F,
					3.8015597E37F,
					-1.0920694E38F,
					-3.310114E38F,
					2.0014866E38F,
					4.0041231E37F,
					2.0381343E38F,
					1.90923E38F,
					-2.3407473E37F,
					1.1836632E37F,
					-4.8634865E37F,
					-2.2525618E38F,
					-2.7724243E38F,
					-3.1756733E38F,
					-2.240623E38F,
					-1.4960002E38F,
					-2.9978744E38F,
					-9.061601E37F,
					-1.990593E38F,
					3.2372642E38F,
					3.418465E36F,
					3.127509E36F,
					1.3899911E38F,
					2.1489499E38F,
					-2.8182518E38F,
					-1.9854207E38F,
					6.3112176E37F,
					-1.7237489E38F,
					1.9890568E38F,
					-2.1474975E38F,
					-2.700923E38F,
					2.2871761E38F,
					2.1586553E37F,
					-1.8044755E38F,
					2.3669112E38F,
					-1.3836283E37F,
					3.376055E38F,
					-2.806076E37F,
					-4.467418E37F,
					2.8382176E38F,
					3.1461536E38F,
					-2.8833678E38F,
					-2.4057084E38F,
					-2.5037333E38F,
					2.0758288E38F,
					4.7804413E36F,
					-8.776038E35F,
					1.9915685E38F,
					1.8637557E38F,
					7.4198815E37F,
					-2.6506635E38F,
					-9.695759E37F,
					5.1395073E37F,
					-4.535636E37F,
					7.892903E36F,
					-2.1086642E38F,
					-1.3429555E38F,
					-2.3559852E38F,
					3.2912966E38F,
					-3.1933764E38F,
					2.8981411E38F,
					-3.3791186E38F,
					2.9357622E38F,
					6.228311E37F,
					3.2849997E38F,
					-2.8629138E38F,
					2.0808996E38F,
					-1.1828549E38F,
					2.9046828E38F,
					-9.431966E37F,
					-1.9202373E38F,
					2.4236486E36F,
					-2.2430144E38F,
					3.7002503E37F,
					9.32422E37F,
					-1.0647629E38F,
					1.4162363E38F,
					7.574748E36F,
					8.289109E37F,
					-2.2675898E38F,
					6.6329265E37F,
					-6.415119E37F,
					1.0140753E38F,
					-1.59811E38F,
					2.9965603E38F,
					-1.6328937E38F,
					2.647474E38F,
					2.9267537E38F,
					1.363705E38F,
					1.7918738E37F,
					9.890626E37F,
					-1.126313E38F,
					-2.0761809E38F,
					3.0057207E38F,
					-2.447357E38F,
					-2.7598972E38F,
					-1.7293588E38F,
					-1.1599581E36F,
					-7.882391E37F,
					1.3534728E38F,
					-7.7511495E37F,
					2.5897313E38F,
					-1.1929333E38F,
					-1.5749263E38F,
					-1.3676827E38F,
					2.9683268E38F,
					-2.2496809E38F,
					3.0549935E38F,
					-2.4141724E38F,
					1.9294372E38F,
					5.6380434E37F,
					1.958934E38F,
					-1.452383E38F,
					-1.1511398E38F,
					-2.32546E38F,
					-2.4745179E38F,
					-2.2061362E37F,
					2.9104917E38F,
					2.1937116E38F,
					-4.4543026E37F,
					3.2378618E38F,
					-1.6846128E38F,
					-3.0456468E38F,
					3.324635E38F);
				assert(paltitude.altitude_terrain() == -1.6975953E38F,
					-2.300056E38F,
					2.411451E37F,
					9.503208E37F,
					9.703278E37F,
					-1.233371E38F,
					-1.1683544E38F,
					2.3854602E38F,
					2.4025192E38F,
					-2.8042445E38F,
					-2.68158E38F,
					1.3662649E38F,
					-2.1453867E38F,
					2.691506E38F,
					1.720158E38F,
					-4.1932622E37F,
					-8.905268E37F,
					-1.2081154E38F,
					-2.8773803E38F,
					1.7775013E38F,
					-1.6739683E38F,
					1.1708017E38F,
					1.7993832E38F,
					3.2790282E38F,
					2.2789591E38F,
					-5.1390636E37F,
					-3.3686093E37F,
					-2.959645E38F,
					1.4464129E37F,
					2.8080367E38F,
					-1.9129002E37F,
					-7.4929377E37F,
					-1.3189503E37F,
					4.748985E37F,
					3.1820146E38F,
					1.4641542E38F,
					-1.7273206E38F,
					-2.4395966E38F,
					1.5358832E38F,
					-1.7590185E38F,
					2.0405203E38F,
					6.754443E37F,
					2.0549482E38F,
					4.8121776E37F,
					-1.2416789E38F,
					2.2314646E38F,
					3.0347454E38F,
					1.3145091E38F,
					-8.0900995E37F,
					-2.713172E38F,
					-3.3040372E38F,
					-4.7976894E37F,
					-2.6950937E38F,
					-2.5031337E38F,
					1.4749862E38F,
					-1.1074055E38F,
					1.2509462E38F,
					-9.610623E37F,
					3.1023826E38F,
					-1.5730304E38F,
					2.7596778E38F,
					-2.4869191E38F,
					-3.023823E37F,
					-8.98449E37F,
					2.850091E38F,
					1.6712769E38F,
					-2.8192121E38F,
					2.6056223E38F,
					4.156055E37F,
					2.8563393E38F,
					5.2061026E37F,
					-2.5940904E38F,
					-1.3024029E38F,
					7.9983256E37F,
					-1.5334031E38F,
					1.7777733E38F,
					2.526447E38F,
					-2.5747625E38F,
					1.9528983E38F,
					-7.305209E37F,
					-6.122689E36F,
					-2.1584157E38F,
					-1.1805382E38F,
					-2.7507694E38F,
					-2.3087613E38F,
					6.593433E37F,
					3.3843486E38F,
					-6.6096124E37F,
					2.162215E38F,
					2.0136559E38F,
					1.4639153E38F,
					2.4576595E38F,
					-5.708228E36F,
					-2.3350005E37F,
					2.2514002E38F,
					1.2506727E38F,
					5.5995595E37F,
					-1.9079186E38F,
					-3.3552608E38F,
					-1.8513341E38F,
					-2.7327659E38F,
					3.2592942E38F,
					3.3728582E38F,
					1.104485E38F,
					1.2427025E38F,
					3.3680055E38F,
					-2.6342013E38F,
					-2.458853E38F,
					-3.8526457E37F,
					4.4379433E37F,
					-1.79885E38F,
					1.9962118E38F,
					1.7028531E38F,
					2.569491E38F,
					-1.6670132E38F,
					1.6341866E38F,
					-2.711752E38F,
					-1.4138921E38F,
					1.523786E38F,
					-2.8954126E37F,
					6.8159864E37F,
					1.0372077E38F,
					2.9381973E38F,
					-2.864557E38F,
					-2.08363E38F,
					-2.1185732E37F,
					-7.5551636E37F,
					-1.0071169E38F,
					-9.843545E37F,
					-1.6652555E38F,
					3.389611E37F,
					2.5819978E38F,
					-2.0588587E38F,
					-7.699634E37F,
					2.9895929E38F,
					-8.827208E37F,
					3.9834508E37F,
					6.593428E35F,
					-3.0191283E38F,
					3.1891722E36F,
					-3.2853928E38F,
					-1.3956643E38F,
					-2.745296E38F,
					3.3659044E38F,
					-8.58809E37F,
					1.4502718E38F,
					2.457726E38F,
					-6.663208E37F,
					2.4624314E38F,
					-2.1552898E38F,
					1.1563675E38F,
					-2.5430142E38F,
					1.8662058E38F,
					3.604294E37F,
					-2.2986063E38F,
					1.7642297E38F,
					-4.595098E37F,
					5.9962906E37F,
					-1.0074557E38F,
					2.7511922E38F,
					2.9247137E38F,
					-3.776516E37F,
					2.3719872E38F,
					1.9710705E38F,
					-2.7588318E38F,
					8.629474E37F,
					-6.3254315E37F,
					4.2254615E37F,
					2.4082723E38F,
					1.795444E38F,
					-2.0362468E38F,
					-3.2617127E38F,
					2.2143801E38F,
					2.356579E38F,
					-1.3550777E38F,
					2.8253995E38F,
					1.165463E38F,
					3.2908573E38F,
					-2.0356063E38F,
					-2.3648993E38F,
					1.3767117E38F,
					1.1232027E38F,
					-1.195866E38F,
					7.4306636E37F,
					-2.2937884E38F,
					-2.200086E38F,
					2.0570842E38F,
					-3.2255447E38F,
					-1.1703388E38F,
					-2.0071821E38F,
					1.8498949E38F,
					-1.7047237E38F,
					-1.1154452E38F,
					3.2470572E38F,
					-1.1844663E38F,
					2.4063394E38F,
					1.6593609E38F,
					-4.0160996E37F,
					3.1227094E38F,
					2.6370585E38F,
					1.2343547E38F,
					2.8248608E38F,
					-1.0815203E38F,
					2.0207728E38F,
					5.8466946E37F,
					-1.6304083E38F,
					-2.183227E38F,
					-2.3572342E38F,
					4.1167042E37F,
					-1.2322308E38F,
					2.8532723E37F,
					9.592165E37F,
					1.4770809E38F,
					-1.0520852E38F,
					-2.7272296E38F,
					-2.0458984E37F,
					-8.113064E37F,
					3.1922878E38F,
					-1.8864977E38F,
					1.8288933E38F,
					-2.9286998E38F,
					1.1319285E38F,
					2.2530666E38F,
					-3.4112485E37F,
					-2.3399201E38F,
					-3.2503939E38F,
					8.1583696E37F,
					1.2155729E37F,
					2.5925232E38F,
					1.4445624E38F,
					-2.564624E38F,
					-5.9846023E37F,
					2.0381552E38F,
					-3.876608E37F,
					1.9047858E38F,
					1.1645508E38F,
					2.847527E38F,
					3.3787586E38F,
					-1.6071749E38F,
					-1.3442968E38F,
					-2.0302144E38F,
					4.735628E37F,
					-1.5450328E38F,
					2.0243058E38F,
					-6.5973324E37F,
					-2.3576697E38F,
					9.505676E37F,
					-3.130129E37F,
					1.7158714E38F,
					2.1436404E38F,
					6.6262074E37F,
					2.313582E37F,
					2.6982337E38F,
					-6.1063886E37F,
					-1.8514274E38F);
				assert(paltitude.bottom_clearance() == -7.0357365E36F,
					-7.437037E37F,
					1.6252931E38F,
					7.6258133E37F,
					1.2704345E38F,
					2.6927903E36F,
					-5.3590933E37F,
					-2.6852809E38F,
					-1.6777015E38F,
					2.4378793E38F,
					-1.3571868E38F,
					2.1331674E37F,
					8.138026E37F,
					4.767973E37F,
					-2.7423722E38F,
					3.0726116E38F,
					2.9708447E38F,
					-3.2677972E38F,
					-1.2651083E38F,
					-1.4277735E38F,
					2.473511E37F,
					1.2905077E38F,
					4.524786E37F,
					1.1611497E38F,
					3.352547E38F,
					1.5090817E38F,
					2.9867532E38F,
					2.2775755E38F,
					-2.4851418E38F,
					2.0259714E38F,
					3.9825414E37F,
					-1.8332714E38F,
					-1.8609523E38F,
					5.406391E37F,
					2.2389022E38F,
					-2.0498413E38F,
					3.2962045E38F,
					-7.5656927E37F,
					-7.3829604E37F,
					1.8119185E38F,
					-1.7150911E38F,
					-2.81682E37F,
					4.4131496E37F,
					3.3212898E38F,
					-5.058407E37F,
					-1.6747677E38F,
					1.2695832E38F,
					-1.1005575E38F,
					3.0889556E38F,
					2.6008327E38F,
					-2.1197073E38F,
					1.5435889E38F,
					-3.2984784E38F,
					1.466245E37F,
					1.3536177E38F,
					-3.5462044E37F,
					-2.3448023E38F,
					2.7671938E38F,
					3.2943854E38F,
					-2.1500973E38F,
					1.3644457E38F,
					-2.1047614E38F,
					-2.3322343E38F,
					5.5583573E37F,
					2.6561079E38F,
					2.941174E38F,
					-1.774323E38F,
					-1.8082123E38F,
					7.2296284E37F,
					-5.407718E36F,
					3.3279968E38F,
					3.3546314E38F,
					1.1463012E37F,
					4.1773582E37F,
					3.2669849E38F,
					-6.521056E37F,
					-5.032597E37F,
					1.3597571E37F,
					3.0298677E37F,
					-8.645477E37F,
					-2.0330118E38F,
					5.7338454E36F,
					-2.1782433E37F,
					-1.4972173E38F,
					-1.7315253E37F,
					1.6075861E38F,
					-5.121535E37F,
					2.4677918E38F,
					7.481437E37F,
					9.697905E37F,
					6.753614E35F,
					-7.102687E37F,
					-2.829524E38F,
					-3.2448517E38F,
					1.6733391E38F,
					1.3409105E38F,
					1.9792656E38F,
					-1.5538127E38F,
					-3.109052E38F,
					-1.3375514E38F,
					1.4269179E38F,
					2.5139097E38F,
					-2.6352215E38F,
					-2.8322258E37F,
					-1.5479732E38F,
					-6.846128E37F,
					1.3324045E38F,
					-7.6227456E37F,
					-2.8068804E38F,
					1.7996775E38F,
					1.8573059E38F,
					2.8977758E38F,
					-1.700314E37F,
					4.7626536E35F,
					-2.7902568E38F,
					-2.5175963E38F,
					-2.2198241E38F,
					2.3221011E37F,
					9.141448E37F,
					-6.069709E37F,
					-2.0077683E38F,
					-1.9634052E38F,
					-3.0494357E37F,
					-2.8596392E38F,
					-1.742542E38F,
					-6.6285894E36F,
					-3.0124972E38F,
					1.3754375E38F,
					-9.593155E37F,
					-3.2879753E38F,
					-1.3079643E38F,
					2.6297024E38F,
					3.0693306E38F,
					-1.8554346E38F,
					-3.4373094E37F,
					1.2840049E38F,
					-2.8249902E38F,
					1.1764064E38F,
					-2.5839828E38F,
					3.0174234E38F,
					1.7616644E38F,
					1.6966651E38F,
					-2.410384E38F,
					1.1259992E38F,
					1.7593017E38F,
					-4.859244E37F,
					-9.853568E36F,
					3.2420268E38F,
					7.8684026E37F,
					-1.5274186E38F,
					-8.039782E36F,
					-1.4683453E38F,
					1.0590019E38F,
					8.712343E37F,
					-2.2849672E38F,
					-2.5296856E38F,
					-3.7295754E37F,
					-2.0117284E38F,
					-1.1995522E38F,
					6.893916E37F,
					3.0632923E38F,
					-8.095866E37F,
					-1.2672392E38F,
					3.2572116E38F,
					-1.967771E38F,
					1.385852E38F,
					-3.0754341E38F,
					2.7606511E38F,
					-1.3578556E38F,
					-1.8060074E37F,
					-6.621757E37F,
					1.6473286E38F,
					8.548038E37F,
					-1.0677449E38F,
					3.2450083E38F,
					2.9348391E38F,
					2.4173407E38F,
					-2.6297462E38F,
					2.8105956E38F,
					2.913644E38F,
					-7.936665E37F,
					5.960671E36F,
					1.4953648E38F,
					-2.3899477E38F,
					-6.184355E35F,
					2.575729E38F,
					3.2678617E38F,
					-8.593628E37F,
					-4.1026087E37F,
					2.7703865E38F,
					-2.252856E38F,
					4.060415E37F,
					-1.6074196E38F,
					1.5536492E38F,
					-3.1899257E38F,
					1.430136E37F,
					-1.7739687E38F,
					1.5674136E38F,
					3.6847857E37F,
					-1.3944343E38F,
					1.3033204E38F,
					5.737731E37F,
					-2.675618E38F,
					-2.03643E37F,
					1.9115806E38F,
					-2.16883E38F,
					2.8829871E38F,
					-2.651111E38F,
					2.813665E37F,
					8.8594706E35F,
					-4.952663E37F,
					2.3016714E38F,
					7.555832E37F,
					1.1199187E38F,
					-1.6990387E38F,
					-1.9278154E38F,
					-2.7410955E38F,
					-9.280477E37F,
					-1.2386024E38F,
					-1.00359E38F,
					-1.568388E37F,
					-6.46368E36F,
					-3.1774735E38F,
					2.1124878E38F,
					-1.9322253E38F,
					-3.331133E38F,
					2.862295E38F,
					-1.6985283E38F,
					2.760439E38F,
					3.0856764E38F,
					2.6553599E38F,
					4.538116E36F,
					-1.9524748E38F,
					2.5541943E38F,
					-2.3122255E38F,
					-2.515615E38F,
					-1.9575588E38F,
					4.2121806E37F,
					1.4273706E38F,
					-1.8092573E38F,
					-2.9015137E38F,
					1.5356594E38F,
					1.6670858E38F,
					2.894117E38F,
					-3.224903E38F,
					-1.5429169E38F,
					-2.7317394E38F,
					4.422976E37F,
					2.270261E38F,
					-2.8172413E38F,
					-8.055179E37F,
					-4.7738393E37F,
					-1.6068419E38F,
					2.262374E38F,
					1.4030101E38F);
				printf("ALTITUDE \n");
			}

			void fill(const com::company::demo::HIL_STATE_QUATERNION& phil_state_quaternion) {

				phil_state_quaternion.ind_airspeed(18989,
					876,
					-6692,
					-11185,
					16795,
					-18548,
					-30567,
					4740,
					13556,
					-13546,
					22772,
					16672,
					7257,
					16238,
					30331,
					23427,
					2168,
					13681,
					-16535,
					5844,
					23687,
					24893,
					19611,
					-25357,
					16015,
					-21494,
					-848,
					-9741,
					-10725,
					5186,
					297,
					-14723,
					15184,
					-29855,
					-2290,
					-18361,
					-23174,
					-9585,
					16135,
					-4885,
					15037,
					31628,
					-2931,
					-5694,
					29956,
					-700,
					11352,
					2263,
					-27789,
					-27317,
					-10075,
					14188,
					27465,
					3377,
					-13219,
					10973,
					-17626,
					13344,
					7754,
					11268,
					-4805,
					-30417,
					19191,
					20195,
					-3039,
					32321,
					2534,
					-14791,
					26284,
					-1948,
					-5394,
					-4845,
					12284,
					15775,
					20362,
					-19369,
					23817,
					-22330,
					14987,
					-5537,
					10585,
					-779,
					-20126,
					-14613,
					7050,
					-11918,
					24240,
					23264,
					-6234,
					26909,
					-21795,
					-21311,
					-25277,
					-1719,
					-13092,
					-25827,
					-4625,
					-16130,
					-22087,
					8439,
					2225,
					2317,
					-20030,
					23087,
					-24500,
					-19760,
					-6990,
					10423,
					3752,
					6249,
					-26879,
					32321,
					18252,
					-8933,
					13247,
					10189,
					4236,
					-11936,
					31479,
					-990,
					5230,
					31734,
					-3543,
					32244,
					25951,
					1483,
					-21021,
					-21656,
					-17863,
					-18996,
					-9928,
					28082,
					-11173,
					-9544,
					24009,
					-8228,
					-31263,
					-1760,
					6137,
					-16997,
					29937,
					23717,
					-19785,
					5624,
					19226,
					6727,
					-6030,
					26923,
					-14702,
					-1425,
					24598,
					-22678,
					-6997,
					-25866,
					-17340,
					-5039,
					-141,
					-3677,
					684,
					13133,
					31168,
					8531,
					20493,
					-28721,
					-30375,
					19259,
					-32231,
					25182,
					-27488,
					-23099,
					-20239,
					-32177,
					925,
					4980,
					-1181,
					-21031,
					10563,
					32314,
					8884,
					8874,
					32509,
					9848,
					19470,
					10224,
					1501,
					-32338,
					9178,
					12485,
					5394,
					-202,
					-31522,
					27935,
					7993,
					4408,
					13223,
					5077,
					-22562,
					-6105,
					-20609,
					31527,
					1882,
					-16503,
					24008,
					30129,
					-19254,
					1117,
					-30094,
					-6780,
					-31081,
					-7923,
					11006,
					-27453,
					28731,
					-6261,
					6011,
					13758,
					-7651,
					19764,
					-227,
					-20084,
					-11021,
					-8389,
					22584,
					24736,
					28309,
					19059,
					-10646,
					-25209,
					1479,
					391,
					-11125,
					8458,
					7930,
					1883,
					8208,
					8183,
					-7699,
					-27658,
					7075,
					4529,
					11911,
					8624,
					2023,
					16288,
					-17047,
					14052,
					21907,
					71,
					-2992,
					-21366,
					-420,
					23728,
					-12617,
					27369,
					-12409);
				phil_state_quaternion.true_airspeed(7305,
					-20689,
					27327,
					-15506,
					-5322,
					-23002,
					-32298,
					-30147,
					528,
					8305,
					-9748,
					30950,
					-25591,
					-10581,
					31961,
					16706,
					-6395,
					23360,
					-7033,
					9857,
					30863,
					-18620,
					28107,
					-18023,
					-8131,
					490,
					16208,
					-18024,
					-15657,
					9426,
					20620,
					-14474,
					18440,
					162,
					9674,
					-26135,
					8256,
					-30983,
					-15318,
					23821,
					21637,
					-18268,
					13111,
					-7049,
					31394,
					7307,
					-15169,
					27671,
					20502,
					-4435,
					-20168,
					26051,
					25568,
					10134,
					15474,
					-13669,
					18674,
					-17956,
					30904,
					11428,
					13483,
					25447,
					20852,
					523,
					-6685,
					14341,
					-117,
					-10581,
					27129,
					-11248,
					30955,
					22931,
					-30569,
					22172,
					-28335,
					2324,
					-21063,
					30633,
					-23056,
					15404,
					17225,
					-10389,
					10659,
					21607,
					-21280,
					-12606,
					-7357,
					17378,
					30376,
					24092,
					739,
					-12229,
					-5853,
					-27608,
					-2671,
					-18707,
					21846,
					1706,
					11573,
					-3834,
					-519,
					32726,
					30509,
					23484,
					-16595,
					14572,
					25167,
					7785,
					19258,
					-3831,
					-2024,
					19453,
					-18878,
					15636,
					23593,
					7320,
					-21579,
					-29071,
					11899,
					-18160,
					-21164,
					11763,
					-6834,
					-2893,
					-32184,
					681,
					26125,
					-27203,
					4224,
					-8002,
					-31549,
					-702,
					-8303,
					-29000,
					-3598,
					27607,
					-31510,
					-3959,
					28093,
					-14615,
					8343,
					21541,
					16542,
					19075,
					-21466,
					-26042,
					-6312,
					-14152,
					22729,
					13612,
					-29910,
					-25063,
					-17454,
					-14130,
					-12076,
					2608,
					-23839,
					-8215,
					21234,
					-24138,
					8082,
					-22392,
					8254,
					-12822,
					-20452,
					11683,
					-14052,
					-12459,
					24586,
					18179,
					-31787,
					30109,
					416,
					2086,
					25951,
					8218,
					-26647,
					18344,
					-30563,
					7489,
					28009,
					-28379,
					4203,
					-12791,
					-5906,
					13289,
					9459,
					27155,
					-14715,
					-24992,
					-23658,
					-4952,
					14180,
					-5083,
					10101,
					19265,
					32682,
					-12929,
					-26904,
					2058,
					2151,
					19608,
					3952,
					19161,
					1512,
					-6281,
					16159,
					-4234,
					25797,
					-10484,
					-22619,
					-15408,
					24100,
					-2784,
					-8804,
					26708,
					-4483,
					-20383,
					909,
					11093,
					-22231,
					-3810,
					21175,
					1024,
					13671,
					19542,
					-1699,
					-19239,
					-14692,
					-1863,
					2816,
					-26936,
					-18031,
					21985,
					4352,
					-21668,
					28334,
					29505,
					24559,
					-22178,
					-16979,
					-8515,
					-30888,
					-23381,
					-7798,
					15934,
					19137,
					-26624,
					-3459,
					-1375,
					-1851,
					2440,
					-9544,
					-14817,
					27037);
				phil_state_quaternion.time_usec(3012325739210557918L,
					2438024150458822417L,
					3637511483938376694L,
					-3964042911712401717L,
					-8892978291994477093L,
					664038269817336451L,
					-8410359515378580739L,
					-3079080233746858013L,
					-7489768404364897810L,
					5383124051748674241L,
					-3730241815515644109L,
					3315264601155419095L,
					1882289684348481251L,
					-2913439248426443745L,
					-7947451810019374142L,
					-1689191362613571500L,
					-2184372003112983907L,
					-3425382570315579335L,
					-6363633044456593128L,
					-6240625768474363002L,
					5203686864598708892L,
					7086294089282329667L,
					-9150848240823631939L,
					-8459203906255084607L,
					9187423390633243444L,
					-5730687726473472618L,
					-6002164883071565233L,
					-5288009035351991912L,
					8163652394578102460L,
					-6799544404102948379L,
					6749568783793550522L,
					5664948083567001787L,
					2603020577420308062L,
					-3722564411314679380L,
					8688251250467182731L,
					-5227153274191612850L,
					-8558349996901917500L,
					-9198549726261820414L,
					7353795407216311397L,
					529837228723590858L,
					1143683980464020920L,
					-6538723533806064885L,
					2589077482342485350L,
					-4462786782395279609L,
					3112885170427506913L,
					2008030191793318620L,
					-4799259212649766683L,
					5284932456979254465L,
					-7767280438734163500L,
					-5919582843006237964L,
					580275192808664126L,
					1550615277874507394L,
					4458907183355312064L,
					8994087129662340322L,
					-7755814154378635377L,
					-4545299066046285596L,
					-3106859760964828122L,
					-6261983130780289464L,
					-6502322770604547531L,
					-6017398472896991352L,
					1150840016166425176L,
					-8912146516552161190L,
					8993826414275473720L,
					-4022729959172042751L,
					338091098513081871L,
					5063037551802319019L,
					3262839512219602783L,
					-2701388984463249543L,
					-9188309717340541195L,
					-5142299873234077271L,
					1053907717747008211L,
					143931796363575347L,
					5270300789428701678L,
					-1076285427926246160L,
					243600383010592316L,
					-8214368073292432727L,
					7061456185528486863L,
					2904318464946638337L,
					101369507945495781L,
					2607205206189120991L,
					-7305916516591432072L,
					-8012646800719292110L,
					3551974457137801384L,
					1749970389480612388L,
					-6308340529590659884L,
					2710841461536431211L,
					7046236163309836598L,
					3361005379053629158L,
					290592715219001781L,
					-7826256772950014096L,
					-5255458854314893170L,
					6624171894828069875L,
					-2947875055507964107L,
					-3733329294886505847L,
					-3808540363778744027L,
					5235992782079990537L,
					5823155155686030735L,
					-4164577500602008234L,
					-4331181382530037886L,
					-83170906406755134L,
					7448989980249847508L,
					1230184914887418231L,
					413496867957354006L,
					7396595843049771228L,
					576808432079365139L,
					1282864265215184821L,
					2446716394733920551L,
					1750751383387431534L,
					-2547523216179060118L,
					8234819931587508804L,
					-1433911669611388903L,
					-18291774587014628L,
					4627937139517396448L,
					-3596055453501269419L,
					-7485778527238230963L,
					2495340993434407909L,
					-8333020113554833410L,
					-1612679464658772128L,
					3679004936855050837L,
					-1213612974176561859L,
					8635206709380308960L,
					-8454008288447035311L,
					1347956186445939475L,
					-4253355163763458929L,
					-5971384532326996780L,
					7977828116760754399L,
					4316641871253969470L,
					2005735702302833432L,
					1508989078832907194L,
					-4589589832994842183L,
					-4633811948478115328L,
					4666327154691212699L,
					-1865341996500739689L,
					-775266797146514155L,
					-4044595327267976650L,
					1790191384106247671L,
					7210912627104973818L,
					8709454909245032352L,
					2686856838609086041L,
					3900533048056570569L,
					4739131686150893157L,
					-6721922168254344080L,
					-8160072002467437788L,
					6025963239712240845L,
					3506927370459858832L,
					-6291344210630097738L,
					425400036121221608L,
					138605919495130863L,
					-1436060812693062266L,
					-4261113549524016168L,
					2005461678875609040L,
					2189625004587111370L,
					-4683973962882411113L,
					9208975714130992847L,
					-3025562842105117792L,
					8097013170408573336L,
					8675647536726445716L,
					248430189859764919L,
					-4616731084598518992L,
					-5062108783602676088L,
					-519367884919346243L,
					-2320164222742283778L,
					6148405957540402212L,
					7316955006554238745L,
					-5648693481993830041L,
					-6714332387910567630L,
					-459134544432633266L,
					-8516214223718739399L,
					4277917749961780445L,
					4152205206961923168L,
					4284415967083962806L,
					-5820462303108338264L,
					-8677879372096273264L,
					-1469956279831679854L,
					4244114847458104860L,
					-7761990480005829526L,
					5030193109705574635L,
					2719066320929975199L,
					2309077026378949188L,
					1987722559181793125L,
					-5879564476661326890L,
					5400373269976588000L,
					-3090977750715234333L,
					-6598619831344276755L,
					67157919728916644L,
					-3449932536614288768L,
					5616809664364954022L,
					3420970594075280536L,
					-3882954838927064958L,
					-3711012341547724577L,
					-7270028189018273749L,
					-2796310694980974479L,
					-5645256205278485289L,
					4382613385619022382L,
					-6580062438572969045L,
					4261265237212550308L,
					3365220360146768440L,
					2607098172513137971L,
					-3369670162816881942L,
					-4983133079247907485L,
					-2620377191213368774L,
					-7690792444422158746L,
					5459874494292388187L,
					-7848228761404747015L,
					-5559883617427703185L,
					-3511402674964586357L,
					1095083597380561103L,
					6024039400017113984L,
					6175370950887062525L,
					-9118715263262981956L,
					2814277397499583200L,
					2990262008364185459L,
					2652980104699282280L,
					-1108735070263033390L,
					-2015288502576004029L,
					6960657863064820254L,
					-5840550182350139830L,
					4314380677696134043L,
					-7554409253293641318L,
					-92599072879833054L,
					-845103183388864775L,
					-6489818802610534518L,
					-7597260754703731831L,
					-76688118984506506L,
					-2426789271640805905L,
					-7025597537434454760L,
					1599900505781938676L,
					-1328583196599086638L,
					-2715855253816944557L,
					-1336683148741443852L,
					-3222827646942968897L,
					-814591614928482042L,
					5923259660207459175L,
					-3272729215346692849L,
					-8329411262316107739L,
					-136095970926817060L,
					-3119299412367944207L,
					5414051469694622054L,
					8809387380480782001L,
					6919767177411347624L,
					-463793486523155391L,
					-3897827462499961735L,
					-1150548337301713825L,
					2946000321761140601L,
					710550658441626777L,
					665295105474907290L,
					-4519841876308894583L,
					-3444278742350897265L,
					4914865324232220590L,
					6206902835445524054L,
					-3975917724925110969L,
					4398110785595082092L,
					8905888021457129634L,
					-2946285886124033518L,
					4308904728021888470L);
				for (const float src[] = { -2.3352637E38F,
										  2.6174778E38F,
										  -1.4336971E37F,
										  2.9998363E38F,
										  2.5230646E38F,
										  -3.224832E37F,
										  -3.3558032E38F,
										  1.0468968E37F,
										  -2.0621361E38F,
										  1.9534843E38F,
										  3.2752646E38F,
										  -2.2300915E38F,
										  -1.1674843E38F,
										  -1.9766472E38F,
										  3.3401944E38F,
										  2.7762315E38F,
										  -1.4434852E38F,
										  -1.6465361E38F,
										  3.3410761E38F,
										  -1.2158228E38F,
										  2.2922007E38F,
										  2.0089827E37F,
										  1.8381777E38F,
										  -3.0488407E38F,
										  -2.7733388E38F,
										  -1.2683838E38F,
										  -1.999219E38F,
										  -3.1230025E38F,
										  2.0584148E37F,
										  1.2132973E38F,
										  3.0795687E38F,
										  2.29639E38F,
										  -1.5120907E37F,
										  -1.2354709E38F,
										  3.494354E37F,
										  1.0347434E38F,
										  2.5363486E38F,
										  -1.1823102E37F,
										  -3.2758489E38F,
										  -4.0551894E37F,
										  -2.033812E38F,
										  -6.5452426E37F,
										  -1.0653166E38F,
										  3.1054243E38F,
										  1.0656364E38F,
										  -1.822449E38F,
										  1.0072287E38F,
										  2.93664E38F,
										  -5.3099656E36F,
										  -2.6769919E38F,
										  3.3239296E38F,
										  2.530221E38F,
										  -3.337523E38F,
										  2.0521359E38F,
										  2.186353E38F,
										  2.79012E38F,
										  -1.1664531E38F,
										  -1.0418712E38F,
										  -1.7783832E38F,
										  1.9708178E38F,
										  1.5753984E38F,
										  -2.8557113E38F,
										  2.2716745E37F,
										  3.3067019E38F,
										  -1.6759049E38F,
										  1.1871155E38F,
										  8.3956636E37F,
										  2.8533977E38F,
										  -3.1370036E38F,
										  -3.1476553E38F,
										  3.512002E37F,
										  -2.4887782E38F,
										  3.3547393E38F,
										  2.3811326E38F,
										  -1.1200804E38F,
										  -3.1766209E38F,
										  2.40744E38F,
										  2.9157749E38F,
										  -3.3194196E38F,
										  1.0840898E38F,
										  4.5467473E37F,
										  5.863925E37F,
										  -2.8650003E38F,
										  -1.1295251E38F,
										  1.5713222E38F,
										  6.992194E37F,
										  -2.0236413E38F,
										  -1.864397E38F,
										  -2.8849138E38F,
										  -6.500188E36F,
										  -7.437287E37F,
										  3.2571327E38F,
										  3.9482256E37F,
										  -2.8566354E38F,
										  1.1622661E38F,
										  1.1928365E38F,
										  -3.3411818E38F,
										  1.4465066E38F,
										  2.0952465E38F,
										  3.1103564E38F,
										  -1.1489199E38F,
										  1.1796752E38F,
										  -1.770803E38F,
										  2.3383393E38F,
										  3.3170555E37F,
										  -2.3404925E38F,
										  -2.639095E38F,
										  -1.7869099E38F,
										  3.891642E37F,
										  7.154549E36F,
										  2.1355154E38F,
										  1.3836701E38F,
										  -1.7561543E38F,
										  2.7451558E38F,
										  1.3402484E38F,
										  3.3287156E38F,
										  1.5923185E38F,
										  1.6545812E38F,
										  3.276769E38F,
										  -8.2886196E37F,
										  5.350427E37F,
										  3.1709935E38F,
										  2.8835593E38F,
										  -3.207106E38F,
										  -3.0908263E38F,
										  1.0116783E38F,
										  -1.2877554E38F,
										  -2.0131918E38F,
										  1.159635E38F,
										  1.0119768E38F,
										  -9.932336E37F,
										  -9.887864E37F,
										  2.291049E38F,
										  -8.823916E37F,
										  -2.5799586E38F,
										  4.724584E37F,
										  1.1952175E38F,
										  2.4456676E38F,
										  -2.3552802E38F,
										  -1.3928146E37F,
										  1.6722363E38F,
										  -1.986359E38F,
										  2.94399E38F,
										  -2.844504E38F,
										  -8.2725463E37F,
										  -2.0384045E37F,
										  2.6014882E38F,
										  -3.016048E38F,
										  3.0886451E37F,
										  9.207906E37F,
										  -1.5576116E38F,
										  -2.7314686E38F,
										  -7.0313323E37F,
										  2.8873332E38F,
										  8.56582E37F,
										  -1.1749492E38F,
										  2.6079755E38F,
										  -2.3029451E38F,
										  -1.119058E38F,
										  4.3507163E37F,
										  -1.9288227E38F,
										  -1.6502757E38F,
										  -1.8435175E38F,
										  8.97183E37F,
										  -3.0297425E38F,
										  -6.347115E37F,
										  -1.4278807E38F,
										  -4.0085476E36F,
										  2.1903278E38F,
										  2.1155257E38F,
										  1.1439616E38F,
										  1.4036579E38F,
										  3.0659231E38F,
										  2.0249143E37F,
										  -2.6608887E38F,
										  2.8440697E38F,
										  -2.117733E38F,
										  3.0187898E38F,
										  3.0594942E38F,
										  -9.823893E37F,
										  8.2225913E37F,
										  -3.0715466E38F,
										  -8.639719E37F,
										  3.2095802E38F,
										  -1.9222664E38F,
										  -2.0043077E38F,
										  1.2041966E38F,
										  3.210842E38F,
										  -1.084406E38F,
										  -3.2042946E38F,
										  2.0484506E38F,
										  -5.1530403E37F,
										  -5.754975E37F,
										  -3.031943E38F,
										  1.6433306E38F,
										  -2.470689E38F,
										  -2.6077118E38F,
										  2.353471E38F,
										  3.1221979E38F,
										  2.1137611E38F,
										  3.3683517E38F,
										  -3.2126396E38F,
										  8.511401E37F,
										  2.6811076E38F,
										  9.263698E37F,
										  1.0973306E38F,
										  1.1562214E38F,
										  1.070404E38F,
										  -3.030822E38F,
										  2.197609E38F,
										  -2.3590037E38F,
										  -3.034853E38F,
										  -3.8757233E37F,
										  1.2026863E38F,
										  1.2884111E38F,
										  -7.3386387E37F,
										  -1.2845649E38F,
										  9.299616E37F,
										  -2.0559451E38F,
										  -4.108979E37F,
										  1.7272372E38F,
										  -1.6507914E38F,
										  3.056388E38F,
										  4.7721077E37F,
										  3.0329532E38F,
										  2.9063975E38F,
										  -2.1048563E38F,
										  -4.0988516E37F,
										  -1.1548636E38F,
										  -4.316473E37F,
										  -1.0761815E38F,
										  -4.4871556E37F,
										  2.4309166E38F,
										  -3.1269756E38F,
										  1.3854773E37F,
										  2.946222E38F,
										  -3.0093023E38F,
										  7.213548E37F,
										  2.7470658E38F,
										  -2.1594059E38F,
										  -2.5705936E37F,
										  -1.2641361E38F,
										  2.1767407E37F,
										  -2.041379E38F,
										  1.3371067E38F,
										  3.331585E38F,
										  1.5644482E38F,
										  1.4276693E38F,
										  -1.993389E38F,
										  2.4332803E38F,
										  -3.3971288E38F,
										  1.4539392E38F,
										  -6.4968006E37F,
										  -3.2796574E36F,
										  -1.3610537E38F }; phil_state_quaternion.attitude_quaternion(src), false;);

				phil_state_quaternion.rollspeed(-1.0426376E38F,
					-4.8081105E37F,
					7.5700595E37F,
					1.7663206E38F,
					-2.1476303E37F,
					-7.299155E37F,
					-7.7422673E37F,
					1.8087766E38F,
					2.9337763E37F,
					1.5235897E38F,
					2.132119E38F,
					-2.4311143E38F,
					2.9395223E38F,
					-3.3559046E38F,
					2.7494293E38F,
					-1.2697796E38F,
					2.367574E38F,
					-1.1254921E38F,
					9.773344E37F,
					-3.6504258E37F,
					6.4564203E37F,
					1.7468308E38F,
					-1.9785472E38F,
					8.070396E37F,
					-5.892197E37F,
					-1.373834E37F,
					2.8601631E38F,
					4.3976224E37F,
					9.641895E37F,
					1.1338834E38F,
					-3.222094E38F,
					1.6075056E38F,
					1.4571771E38F,
					4.0374717E37F,
					-6.1283275E37F,
					2.2555518E38F,
					-1.011513E38F,
					-1.7250583E38F,
					-3.2511563E38F,
					1.6572998E38F,
					-2.7880464E38F,
					-2.0431958E38F,
					-1.4561597E38F,
					2.015924E38F,
					-1.5267441E38F,
					-2.7731607E38F,
					-1.705588E38F,
					2.7837664E38F,
					-2.0123755E38F,
					-2.8767777E38F,
					1.7750088E38F,
					-1.4427755E38F,
					1.2154767E38F,
					-6.5871724E37F,
					-2.2297297E38F,
					-3.60378E37F,
					-2.9736645E38F,
					2.1763042E38F,
					-3.2204889E38F,
					-1.7590668E38F,
					9.19694E37F,
					1.9112806E38F,
					-1.3555114E38F,
					3.0810902E37F,
					-2.139541E38F,
					-1.6091957E38F,
					-6.8100786E37F,
					3.1141322E38F,
					2.8797955E38F,
					2.2230754E38F,
					3.251573E38F,
					2.266588E38F,
					-2.7424503E38F,
					-1.2045442E37F,
					-3.0623053E38F,
					3.1898448E38F,
					-8.0588423E37F,
					1.7387266E38F,
					2.0547939E38F,
					-2.7390386E38F,
					2.8185442E38F,
					8.994624E37F,
					-2.0658314E38F,
					9.924871E37F,
					8.2059485E37F,
					-7.13907E37F,
					-2.1387963E38F,
					1.2871579E38F,
					4.038324E37F,
					2.6626388E38F,
					-2.7776675E38F,
					2.041706E38F,
					-3.0516694E38F,
					3.317686E38F,
					-2.3760466E38F,
					1.9056591E38F,
					-2.4718858E38F,
					-1.5665291E38F,
					1.2042508E38F,
					-2.91239E38F,
					-3.0351906E38F,
					-2.1082129E38F,
					-6.629719E37F,
					-1.880614E38F,
					3.3962266E38F,
					1.6702882E38F,
					-8.56147E37F,
					1.3340077E38F,
					-3.1965211E38F,
					3.318571E38F,
					8.4557203E37F,
					9.248871E37F,
					1.9299599E37F,
					-1.3582297E38F,
					7.769354E37F,
					-8.527213E37F,
					2.8351344E38F,
					1.6048262E38F,
					2.0387752E38F,
					2.2255284E38F,
					2.8029211E38F,
					-5.6319546E37F,
					-2.6236406E38F,
					8.128796E37F,
					3.0306287E38F,
					6.405682E37F,
					-2.407282E38F,
					1.6036944E38F,
					2.77339E38F,
					1.1528339E38F,
					-2.5301872E38F,
					-1.86361E38F,
					-3.3352893E38F,
					2.9164586E38F,
					4.6709167E37F,
					2.3211362E38F,
					-1.0606533E38F,
					2.118428E38F,
					1.093474E38F,
					2.7799204E38F,
					1.317727E37F,
					2.97601E37F,
					-2.0536481E38F,
					2.744659E38F,
					1.8560855E38F,
					1.3567179E38F,
					1.908831E38F,
					5.696838E37F,
					-1.514872E38F,
					8.586623E37F,
					-3.236645E37F,
					1.0016059E38F,
					1.675373E38F,
					-2.4371254E38F,
					2.4047857E38F,
					7.4525904E37F,
					-3.006297E38F,
					3.118836E38F,
					2.8791507E38F,
					1.743486E38F,
					2.3725635E38F,
					2.791602E38F,
					-2.7882005E38F,
					-3.0069774E38F,
					2.835792E38F,
					-3.2843176E38F,
					1.4043292E38F,
					-1.6001308E38F,
					-1.800263E38F,
					-1.8099548E38F,
					1.5148167E38F,
					2.07067E38F,
					-3.2427896E38F,
					2.343244E38F,
					-1.0406588E38F,
					-2.7339512E38F,
					1.5460807E38F,
					1.3679672E38F,
					1.608254E38F,
					3.1696725E38F,
					1.1777939E38F,
					1.0724485E38F,
					-7.3119177E37F,
					1.9017428E38F,
					3.2073162E38F,
					-2.0647941E38F,
					6.6338407E37F,
					-1.2154843E38F,
					2.636316E37F,
					3.8302098E37F,
					-1.36769E38F,
					-2.824601E38F,
					6.26659E37F,
					-2.551562E38F,
					-1.1677426E38F,
					-1.1879369E38F,
					-2.3153588E38F,
					1.0353539E38F,
					1.0094914E38F,
					7.32582E37F,
					3.2774267E38F,
					-1.6893968E38F,
					3.0276468E38F,
					1.3688536E37F,
					-2.1591102E38F,
					-7.7141594E37F,
					1.6093418E38F,
					-1.6272358E37F,
					-1.3093892E38F,
					3.3428666E38F,
					2.9680516E38F,
					7.7300147E37F,
					-1.9364604E38F,
					1.1166827E38F,
					-1.8589496E38F,
					9.093167E37F,
					-1.6056053E38F,
					-1.5834139E37F,
					1.7175485E38F,
					3.0241314E38F,
					-2.3734845E38F,
					-3.2955153E38F,
					-1.2864807E38F,
					3.2147593E38F,
					-1.5350587E38F,
					1.4631188E37F,
					2.9424081E38F,
					-2.2653131E38F,
					-1.7305694E38F,
					-2.6428941E38F,
					2.7879036E38F,
					1.2961058E38F,
					2.7873677E38F,
					2.1273382E38F,
					2.7030467E38F,
					6.52632E37F,
					7.8913435E37F,
					-3.4506192E37F,
					-1.1284062E38F,
					-4.9787464E37F,
					2.5717773E38F,
					2.9390593E38F,
					1.0724834E38F,
					2.1967223E38F,
					2.00669E38F,
					-2.6223296E38F,
					3.1184943E38F,
					1.3067048E38F,
					-7.379249E37F,
					-7.4183293E37F,
					-1.6241692E37F,
					-2.1348536E38F,
					-7.0070974E37F,
					-1.6991434E38F,
					2.8912624E38F);
				phil_state_quaternion.pitchspeed(3.1938155E38F,
					-1.2184207E38F,
					-8.874856E36F,
					-8.255024E37F,
					-2.5271278E38F,
					1.3438888E38F,
					-2.846757E38F,
					9.946813E37F,
					-3.1378236E38F,
					-2.4824091E38F,
					-3.1836968E38F,
					-1.9266186E38F,
					-2.6644245E38F,
					1.4548246E38F,
					1.0620806E38F,
					-2.7608276E38F,
					2.6892062E38F,
					-1.1909912E38F,
					-1.1236579E38F,
					-3.5091697E37F,
					1.9098373E38F,
					1.9349713E38F,
					-1.4621884E38F,
					2.493033E38F,
					-1.5903086E38F,
					-2.9327137E38F,
					-2.1538378E38F,
					-1.3925798E38F,
					8.0991693E37F,
					3.381095E38F,
					-1.5456166E38F,
					-2.9531785E38F,
					2.1647627E38F,
					3.0706347E38F,
					-2.0849605E37F,
					-5.7403636E37F,
					1.1444463E38F,
					2.838543E38F,
					-1.851656E38F,
					-7.6028856E37F,
					-3.3752495E38F,
					-1.0953969E38F,
					1.6505992E38F,
					2.7677275E38F,
					8.529988E37F,
					-2.4942987E38F,
					2.0314026E38F,
					-4.427974E37F,
					-1.3196688E38F,
					-1.9650113E37F,
					8.981313E37F,
					-8.2021953E37F,
					1.5553692E38F,
					-2.2289127E38F,
					-2.6702563E38F,
					-2.0595523E38F,
					8.770552E37F,
					-2.1783054E38F,
					2.8709536E38F,
					3.303878E38F,
					-1.5932109E38F,
					2.7917274E38F,
					1.5796006E38F,
					3.2819728E38F,
					-1.3066331E38F,
					2.9247389E38F,
					-2.2821195E38F,
					1.9681436E38F,
					2.7847395E38F,
					1.894491E38F,
					-2.606918E38F,
					-4.1247185E37F,
					-8.946206E37F,
					1.3473456E38F,
					-1.2906683E38F,
					1.3279256E38F,
					2.6376944E37F,
					-1.6970961E38F,
					2.498342E38F,
					1.9674706E38F,
					-1.100277E38F,
					2.4302762E38F,
					-1.9155572E38F,
					-9.536738E37F,
					6.497075E37F,
					1.0659002E38F,
					-1.3316651E38F,
					-2.798408E38F,
					-2.8957805E38F,
					6.215109E37F,
					-2.4124738E38F,
					-2.8879725E38F,
					4.1347213E37F,
					2.9113636E38F,
					-8.635925E37F,
					-1.8026744E38F,
					-6.9046423E37F,
					1.1451004E38F,
					-1.1702866E38F,
					-5.722143E37F,
					2.3092838E38F,
					-2.8018723E38F,
					-2.0174915E38F,
					1.2309568E38F,
					-3.505006E37F,
					1.6905546E37F,
					-2.8388234E38F,
					1.5633117E38F,
					-1.6750666E38F,
					8.701653E37F,
					-1.6567955E38F,
					3.3349107E38F,
					1.1077569E38F,
					1.7432433E38F,
					-2.706301E38F,
					-1.6888943E38F,
					1.7712756E38F,
					3.0571762E37F,
					2.7685844E37F,
					2.5267122E38F,
					2.8966567E38F,
					-2.204313E38F,
					-2.9227204E38F,
					2.7409413E38F,
					1.3827596E38F,
					-1.3016931E37F,
					1.7948892E38F,
					1.6415634E38F,
					-5.8286397E37F,
					-1.2939244E38F,
					-1.7943935E38F,
					8.3795503E37F,
					-3.3474872E38F,
					-1.0806322E37F,
					6.2870896E37F,
					-1.6082102E36F,
					3.1473982E38F,
					2.4167479E38F,
					2.4123515E38F,
					-2.2397542E38F,
					4.840369E36F,
					1.3960081E38F,
					-1.8749118E38F,
					-2.8316145E37F,
					2.5470356E38F,
					3.1506103E38F,
					-2.6715436E38F,
					-2.1966316E38F,
					3.5367556E37F,
					-8.808804E37F,
					1.3028226E38F,
					-1.6067945E37F,
					5.302198E37F,
					-9.831714E37F,
					3.3641652E38F,
					-3.1251822E38F,
					-4.476696E37F,
					-1.9024793E38F,
					2.1189147E38F,
					-1.1393258E38F,
					-7.443932E37F,
					1.0070978E38F,
					-1.6563833E36F,
					3.722027E37F,
					8.895022E37F,
					-6.5149833E37F,
					-1.3581387E38F,
					-3.2796196E38F,
					-2.3893616E38F,
					-2.2226444E38F,
					-1.9128334E38F,
					-6.308717E37F,
					-2.5969445E38F,
					2.087824E38F,
					4.547332E37F,
					2.5421903E38F,
					-1.4883108E38F,
					2.5337255E38F,
					-2.7054627E38F,
					-1.2025784E38F,
					-2.5382993E38F,
					-2.539606E38F,
					-3.1334309E38F,
					-6.1846066E37F,
					-8.630734E37F,
					-1.9790383E38F,
					-1.002721E38F,
					-7.1341667E37F,
					2.4217619E38F,
					2.3541205E38F,
					-1.906462E38F,
					3.2942256E38F,
					-1.2403749E38F,
					-3.389186E38F,
					2.0640859E38F,
					6.3381303E37F,
					2.1131928E38F,
					3.2927405E38F,
					2.932482E37F,
					2.7981939E38F,
					1.9181413E38F,
					1.1025058E38F,
					-2.1551265E38F,
					-1.6996627E38F,
					2.035355E38F,
					-1.8768934E38F,
					2.1963639E38F,
					2.940809E38F,
					5.743662E37F,
					1.7718818E38F,
					-2.0967316E38F,
					1.1629197E38F,
					-2.3854651E38F,
					-1.3210902E38F,
					-3.4858133E37F,
					4.395636E37F,
					2.89436E38F,
					-1.2460183E37F,
					6.0636084E37F,
					2.7966753E38F,
					-2.8887196E38F,
					-2.406082E38F,
					1.4057459E38F,
					-3.1445588E38F,
					-3.1492355E38F,
					-3.310444E38F,
					-4.1978242E37F,
					-2.8737534E38F,
					2.2071545E38F,
					3.0054562E38F,
					-3.35381E38F,
					1.625385E38F,
					-2.2845989E38F,
					-6.9354417E37F,
					-7.5925994E37F,
					-1.6902936E37F,
					-2.7670308E38F,
					-2.4205447E38F,
					-2.2699813E38F,
					1.0252382E38F,
					-2.4493253E38F,
					-2.317853E38F,
					-3.1051008E38F,
					-1.4112365E38F,
					1.7080251E38F,
					-2.5493362E38F,
					2.5942956E38F,
					2.1551997E38F,
					-1.2555291E37F,
					3.2739263E38F,
					2.8759175E38F,
					-2.2858785E38F,
					-2.3187579E38F,
					-2.4678441E38F,
					3.1671636E38F);
				phil_state_quaternion.yawspeed(-9.747811E37F,
					5.5587873E37F,
					-8.790886E36F,
					1.3254939E38F,
					-1.7702781E38F,
					-2.6062343E38F,
					-9.650415E36F,
					3.1171806E38F,
					1.6651483E38F,
					3.041009E38F,
					-2.5408943E38F,
					1.484696E38F,
					1.2715402E38F,
					-8.585426E37F,
					3.1227084E37F,
					-1.853816E38F,
					-9.121274E37F,
					1.6307852E38F,
					-2.0923774E38F,
					1.3957535E38F,
					-1.716107E38F,
					-3.3646416E38F,
					2.8292974E38F,
					1.8682123E38F,
					2.700449E38F,
					2.2350475E38F,
					-2.3525232E38F,
					1.7297356E38F,
					1.6565076E38F,
					-3.1638573E38F,
					1.351092E38F,
					5.844603E37F,
					2.98837E38F,
					-1.2154939E38F,
					-7.905533E37F,
					1.1025056E38F,
					-1.3419943E38F,
					-8.6810285E36F,
					1.8609857E38F,
					-3.3826041E38F,
					-1.7060622E38F,
					-1.8824826E38F,
					3.1488287E38F,
					2.9500584E38F,
					1.0027612E38F,
					-3.2147696E38F,
					-2.6619087E38F,
					-9.48778E37F,
					-2.839231E38F,
					7.06339E37F,
					1.1724001E38F,
					2.8296495E38F,
					-2.9490453E38F,
					-9.542777E37F,
					-8.6971365E36F,
					1.0676469E38F,
					-9.88135E37F,
					1.940266E38F,
					-8.985722E37F,
					-2.7655796E38F,
					-2.1001965E38F,
					2.6284618E38F,
					-1.5419294E38F,
					-2.065412E38F,
					1.986897E38F,
					-3.1155272E38F,
					-1.8796036E38F,
					1.5873593E37F,
					2.5511227E38F,
					-2.703163E38F,
					1.9829159E38F,
					-1.9926153E38F,
					3.6123965E37F,
					9.652025E37F,
					1.9454603E38F,
					-1.1522896E38F,
					2.3323256E38F,
					3.6040744E37F,
					3.5550042E37F,
					-1.0013541E38F,
					-9.362929E37F,
					-8.778866E37F,
					-3.354936E38F,
					-1.0796771E38F,
					-3.6813087E36F,
					2.6746675E37F,
					2.5140719E37F,
					-1.3445534E38F,
					-2.3715038E37F,
					-3.3622292E38F,
					-1.215508E38F,
					-2.5919589E38F,
					7.8907346E37F,
					6.4823614E36F,
					2.1096649E38F,
					2.9996487E38F,
					-1.3103397E38F,
					2.2513598E38F,
					9.542463E37F,
					-4.360866E37F,
					-1.4224205E38F,
					2.8058401E38F,
					6.732982E37F,
					2.714737E38F,
					-1.7453198E38F,
					-6.593889E36F,
					2.487485E38F,
					2.4177981E38F,
					6.0518517E37F,
					4.6143826E37F,
					-1.7983265E38F,
					1.4037207E38F,
					4.913699E37F,
					-1.7384597E38F,
					-3.0087815E38F,
					2.7219261E38F,
					-1.1261989E38F,
					2.5528189E37F,
					1.7866065E38F,
					-2.1951828E38F,
					-3.2211827E38F,
					-2.5277425E37F,
					3.348972E37F,
					2.9192114E36F,
					-2.637047E38F,
					-4.9777916E37F,
					1.7038297E38F,
					2.8602712E38F,
					-3.0204968E38F,
					2.5169282E38F,
					-2.0380982E38F,
					-1.6312873E38F,
					2.6098494E38F,
					-1.8692695E38F,
					2.572942E38F,
					-2.3146308E38F,
					-1.2390538E38F,
					1.0467096E38F,
					-1.9002056E38F,
					4.7204464E37F,
					-2.5946763E38F,
					-1.77684E38F,
					2.1928587E38F,
					-2.667858E37F,
					-2.295575E38F,
					-3.3407676E38F,
					-3.1570607E38F,
					-1.045147E38F,
					-2.4665312E37F,
					2.4618237E38F,
					-1.9599953E38F,
					2.4999542E38F,
					-2.7625803E37F,
					-2.9486563E38F,
					-2.439199E38F,
					-1.5335637E38F,
					-8.862681E37F,
					1.0938783E38F,
					1.6832519E38F,
					-5.143266E37F,
					-6.2604953E37F,
					-3.35288E38F,
					-4.716942E37F,
					-5.6841904E37F,
					8.710988E37F,
					-1.3411791E38F,
					-5.3294374E37F,
					2.7902633E38F,
					2.2121158E38F,
					-1.2761105E38F,
					-3.165637E38F,
					-3.2379891E38F,
					2.738272E38F,
					-1.1052628E38F,
					1.2640676E37F,
					2.3313433E38F,
					-1.4125996E38F,
					5.6726426E37F,
					2.3886567E38F,
					1.916209E38F,
					-6.505959E37F,
					-1.1781875E38F,
					2.890887E38F,
					-1.5992961E38F,
					-3.026275E38F,
					7.483773E37F,
					2.2755825E38F,
					-2.7767947E37F,
					2.7145575E38F,
					-2.3101748E37F,
					-2.6419891E38F,
					-1.4964118E38F,
					-3.3720467E38F,
					3.8049978E37F,
					-2.9394633E38F,
					2.593968E38F,
					-3.0794432E38F,
					-2.3562418E38F,
					2.3316484E38F,
					-1.4650092E38F,
					-3.0763953E38F,
					7.7319755E37F,
					-5.078351E37F,
					-1.5378493E38F,
					1.6205947E38F,
					-1.0720253E38F,
					-1.8310878E38F,
					-1.6233635E38F,
					-2.6995887E38F,
					1.0785309E38F,
					1.7205242E38F,
					-2.4865822E38F,
					-2.5179007E37F,
					-1.7812292E38F,
					1.5622608E38F,
					-2.7782188E38F,
					9.082201E37F,
					1.066103E38F,
					-2.9602524E38F,
					-1.5430984E38F,
					-1.3795367E38F,
					3.1552012E38F,
					2.7094707E38F,
					3.3054874E38F,
					-1.5420402E38F,
					8.353708E37F,
					-2.7421071E38F,
					6.6385736E37F,
					-1.6064355E38F,
					2.8546607E38F,
					1.8572941E38F,
					1.2950808E38F,
					-2.1494417E38F,
					-8.4689975E36F,
					3.2932222E38F,
					-1.6266317E38F,
					-2.3742177E38F,
					2.6246858E38F,
					-2.5452885E38F,
					3.0943434E38F,
					3.3038877E38F,
					-1.7375389E38F,
					-8.606396E37F,
					4.5481483E37F,
					2.4666882E38F,
					-1.1245481E38F,
					-1.9723355E38F,
					2.2895092E38F,
					-2.20886E38F,
					-4.4980863E37F,
					-3.0112401E38F,
					9.96623E37F,
					-5.102489E37F,
					3.007254E38F,
					-2.740366E38F);
				phil_state_quaternion.lat(-19155798,
					-2065159503,
					901789884,
					1473609914,
					603934060,
					-1135821739,
					788342203,
					270306740,
					-1035239868,
					-1974300517,
					987460104,
					-1225899572,
					1959949459,
					-1300115309,
					992596028,
					1608201820,
					-1806815017,
					457862981,
					-759427472,
					7208637,
					-1732621248,
					1629883052,
					-913536800,
					21988426,
					-1936556408,
					681858918,
					-968032838,
					1873050879,
					-1581150360,
					-95578579,
					-1995942167,
					-2041845355,
					871726032,
					879613677,
					1443773799,
					908546516,
					-1013627566,
					1582816714,
					1398903318,
					1176402271,
					1935169719,
					-1662698376,
					-1860667021,
					-529198248,
					16601969,
					158824228,
					1993873416,
					1690194139,
					-1231083869,
					1827005782,
					1036227378,
					234143786,
					1842546357,
					1041940069,
					1245735218,
					1638811156,
					2067528042,
					866739265,
					913151148,
					-1312276421,
					83892577,
					-379271884,
					1654760546,
					-1553527263,
					1997639699,
					1431645184,
					1634688016,
					-984500179,
					1673594107,
					-52785888,
					-85262671,
					-1975064086,
					-1814475518,
					851989663,
					1557936106,
					-1409539558,
					1355646077,
					711559428,
					-1280211956,
					2113530682,
					1321476867,
					1381849596,
					-13349008,
					-375916074,
					-901345669,
					946138951,
					423498050,
					-279323251,
					-1081509836,
					-902155677,
					1480260115,
					1153471711,
					-1226165184,
					-1717262403,
					1434724564,
					-1642854539,
					-44927128,
					-1821875847,
					-509802870,
					224607107,
					-642004764,
					238303074,
					1384279253,
					1271028299,
					-901655277,
					-1206416136,
					-1635493318,
					1671514006,
					-1632974841,
					287622959,
					-1405730105,
					-758262637,
					96669537,
					1711888284,
					1955154531,
					675724375,
					760075884,
					1136126481,
					-658975733,
					584850200,
					-211727107,
					-1104252210,
					1680694204,
					-325681573,
					-2020159382,
					-1712254668,
					-1684878675,
					-98073183,
					1478015928,
					-1984882574,
					1219654038,
					-1788752946,
					-411748903,
					-1773208039,
					-1270081625,
					1281819409,
					-1644607027,
					-875539884,
					1100484146,
					-483055613,
					-12205795,
					1181726929,
					1336184034,
					340141743,
					-686946821,
					1393929704,
					1215124939,
					1965843391,
					-1920580340,
					293253155,
					-999553794,
					1351984031,
					-1761150704,
					13626763,
					-1684574653,
					1181596814,
					-1435735371,
					-258072857,
					1223429389,
					2045939896,
					1578988523,
					638285923,
					-506245347,
					460839426,
					-117000839,
					517020209,
					-1936668889,
					78501678,
					-1065072704,
					159812566,
					643805533,
					-2116404778,
					-866629400,
					1258436191,
					1285679251,
					-2139088763,
					-197427531,
					-1294627832,
					-724159041,
					-1674013971,
					709279055,
					848287515,
					-40687627,
					-386204270,
					-302524960,
					-555829432,
					1986160599,
					-996782218,
					1289960873,
					2125254998,
					-637606889,
					1157847950,
					-439857590,
					-2034969130,
					565039915,
					-1764854434,
					-683343985,
					1723252935,
					1384472122,
					-1705931748,
					1623070981,
					-360814061,
					-365880426,
					1040388136,
					1668836411,
					-431153728,
					41254824,
					1250070609,
					1245325484,
					495124606,
					519300847,
					-100690927,
					-2027523289,
					-1814534997,
					-1508874352,
					33720747,
					384880644,
					-1552708272,
					1871676909,
					1706116233,
					340411674,
					-214759946,
					2041406196,
					1668643224,
					2118409038,
					1575239835,
					258310294,
					1036139216,
					529358469,
					-1914561261,
					-1723581387,
					-1515811822,
					1979383630,
					-503478250,
					-2027164945,
					1616092826,
					-400544420,
					1526467697,
					1689512336,
					-68552260,
					-893958429,
					1055416252,
					1076835851,
					41212471,
					962359680,
					-94551713,
					802325406,
					-1677503267,
					-1543032857,
					961970509,
					1739099244,
					-1675749114,
					1215680763,
					1492718442,
					2030552517);
				phil_state_quaternion.lon(1385688383,
					-475700612,
					-1370134713,
					-1588610767,
					-1342955504,
					-419265839,
					-276120515,
					-1766595336,
					-989136284,
					1202019549,
					1207067766,
					1406638677,
					1160810025,
					1272375585,
					1170808092,
					1254503725,
					1663065060,
					1099657764,
					721696172,
					-1679319351,
					1441031311,
					754883266,
					-1013793440,
					1177725140,
					2059006348,
					540848079,
					-1875161060,
					1714611333,
					983486133,
					-301180223,
					-1420632203,
					-1763850515,
					-1511950210,
					2135353159,
					-356344159,
					-496855261,
					1855128984,
					-1610662570,
					-1824123034,
					369247566,
					-13095367,
					-1349122444,
					1551290495,
					1405339365,
					59625346,
					1993705330,
					779396476,
					545328065,
					-817183246,
					-911702605,
					-1574210466,
					-558282766,
					-1810382993,
					99728201,
					289709152,
					2072873486,
					-263821773,
					1087689245,
					545623220,
					1562956833,
					-1869560259,
					-1183116281,
					1375941818,
					1057513243,
					-1520462695,
					-1269739895,
					3479472,
					419359275,
					2131301012,
					410626330,
					-1978872357,
					1589790504,
					414026400,
					-819783963,
					694387435,
					-11845265,
					-1375693870,
					48965675,
					-1061553877,
					949634372,
					-544387427,
					-1271117325,
					-1673540883,
					1193896279,
					622036772,
					1631780585,
					1438925458,
					-612732308,
					-1753200800,
					-687539565,
					-2007285337,
					-875090058,
					1428739802,
					61324434,
					-1094977902,
					1052457204,
					171436226,
					-227346902,
					536298660,
					1250579634,
					-252203248,
					-1858015490,
					-1642884172,
					-737127293,
					1448427661,
					95734029,
					-668703556,
					-948812914,
					1543705868,
					-1195474957,
					-956706314,
					-630140673,
					-1251783413,
					-841707884,
					-755182350,
					1680160799,
					-794800157,
					-1879127528,
					-452403012,
					-977642731,
					310140487,
					-1637209260,
					-1190293864,
					2075822220,
					-134445501,
					-1702114773,
					-701363364,
					-884339936,
					1487925275,
					540240273,
					670564990,
					351509469,
					-541556044,
					-1872255759,
					-332524012,
					-107102372,
					2092138909,
					-2055805525,
					-989638038,
					-1706092168,
					-2098390093,
					-355151573,
					-702387654,
					1294800698,
					-1863601069,
					-164086511,
					603322578,
					-1615755237,
					2029345932,
					1876911018,
					793746283,
					338708280,
					-1801997601,
					-1475934469,
					-2137641120,
					-1116765045,
					1971957790,
					-1476906695,
					687769450,
					-1474772595,
					-1210265912,
					-1718567118,
					-2127159242,
					1754670100,
					542722527,
					1542627435,
					551481911,
					-1866106459,
					1485077015,
					1158338353,
					1934048359,
					533971945,
					518903596,
					-1589364645,
					39756384,
					-89610401,
					2042006567,
					1099522258,
					459695834,
					-36823671,
					-678361543,
					320067678,
					-1655441792,
					4853173,
					472781874,
					-849589477,
					1971811068,
					-1450682158,
					346916198,
					-780926204,
					-1496399030,
					-771899558,
					1437296152,
					-2061980196,
					322140497,
					-58321070,
					-1524746610,
					2022041628,
					-1335108681,
					272585510,
					75700490,
					901534139,
					-1092043194,
					-1915290762,
					1046289970,
					-1701408136,
					-602004337,
					-1699448576,
					902918098,
					343033308,
					251076866,
					1435142365,
					2069104355,
					-148645893,
					-321070380,
					469135328,
					646736794,
					-91559473,
					1460088827,
					1900633198,
					-556644980,
					-1910812463,
					401828879,
					-1351373884,
					-1120901212,
					1918944261,
					-1295941354,
					-1318044554,
					536603520,
					957453031,
					-1106155874,
					919582154,
					-1893046545,
					-1842246553,
					1652162537,
					-165492489,
					53039253,
					-348182654,
					171201622,
					-869548814,
					-976086179,
					-584977303,
					-1739236726,
					1048219099,
					-761391851,
					386235826,
					612669312,
					-1399431824,
					-1323530891,
					-2110814977,
					711791738,
					-1939110736,
					522005067,
					696936844,
					2054260367);
				phil_state_quaternion.alt(-503771989,
					763319325,
					-1950464946,
					2058304466,
					2125929656,
					115621097,
					-390684127,
					-1604853454,
					2032661595,
					-1168561885,
					-1098256727,
					2014825513,
					935809677,
					-1328450675,
					-1493943057,
					829623847,
					-1756901078,
					-1902050456,
					-575626322,
					657319759,
					-252741650,
					-1256869269,
					1317495931,
					-1213044476,
					-707714508,
					-788917881,
					783482725,
					1695027424,
					1519465870,
					1701126103,
					1355427341,
					-1475751742,
					-1375847379,
					1690613440,
					-1694639867,
					1030589745,
					1145591274,
					-1278322221,
					188337092,
					-1502216528,
					-644663779,
					441451211,
					-1089146090,
					1358500344,
					-266809582,
					-2131585604,
					1183331966,
					1892725257,
					-863919348,
					-1650423757,
					-732567371,
					-1571416583,
					917103260,
					1886259367,
					949366153,
					-1916560950,
					-440508932,
					1652340986,
					1012548996,
					1060183852,
					1401494373,
					2042188722,
					237058714,
					1047479033,
					1195752382,
					1133512289,
					-920331011,
					-1271644065,
					-386202888,
					432412623,
					125788113,
					328069970,
					-967456653,
					-851976154,
					-1640582165,
					1706429564,
					327832514,
					-122752471,
					784423590,
					-1859786660,
					-1630369622,
					-1903995655,
					-711471498,
					1848098958,
					608078130,
					-1532736046,
					564780719,
					1616019061,
					66544790,
					1617343798,
					1510215326,
					-1244133376,
					127332554,
					-731991088,
					1947004091,
					1013666688,
					-1712055120,
					712606266,
					899767690,
					-1130016956,
					-356828551,
					-887554187,
					1807149145,
					894991967,
					1723553801,
					-327883018,
					-1687224100,
					-400752839,
					1806168948,
					285180518,
					1928183690,
					537760355,
					1055723256,
					389001908,
					-342564336,
					-1072678189,
					-1365945897,
					-1815652677,
					709040807,
					1045757844,
					-124325112,
					585960739,
					827157914,
					-26327251,
					-1768096687,
					-2124682452,
					-1504015764,
					-1556814607,
					-1201534148,
					561332398,
					1630935236,
					-1190662487,
					-988254946,
					967005574,
					-1605547305,
					1653943400,
					-2121556217,
					690939591,
					-866241144,
					-1403727043,
					1137746376,
					42009705,
					-758646530,
					-889752941,
					1691515324,
					-1544549046,
					-1228204569,
					1547997961,
					1558648201,
					294298264,
					-1495957603,
					991362554,
					1735443365,
					1343209575,
					219566463,
					-420751712,
					1421574932,
					842714593,
					347702987,
					-1269739635,
					-1351132029,
					2052663437,
					1652222019,
					969713143,
					-236059333,
					953663450,
					183435276,
					-98255279,
					-542810665,
					1757237342,
					747345612,
					1698721111,
					410663047,
					2014951590,
					2003547489,
					2095696842,
					816961353,
					-320993556,
					-109116329,
					-599057662,
					-1282237520,
					1918370312,
					-254803381,
					1335796347,
					1123625083,
					1907515415,
					1104518376,
					1501147969,
					-109374609,
					-19600717,
					693903236,
					-622760775,
					-502373529,
					687682507,
					-988929775,
					-39303393,
					805945437,
					1334170719,
					-778173685,
					-205845546,
					-2139885997,
					-1635166163,
					-162093070,
					-649759665,
					-828371346,
					-1409731915,
					208596363,
					1188351437,
					-309145207,
					-137559838,
					-389195325,
					-1464622293,
					1481292780,
					1456902955,
					-1749509484,
					-338430030,
					-2108449416,
					-1028593569,
					63228173,
					-1997876874,
					-1534840476,
					1780054883,
					-1431495046,
					1398496726,
					-1364962486,
					1742151941,
					-407912281,
					1075320170,
					486827495,
					1539128582,
					-463249313,
					-901443369,
					1804504710,
					337200475,
					-1288968253,
					-379006773,
					-1092246178,
					-936501357,
					-1938951336,
					344137455,
					839777524,
					157456436,
					-20739761,
					-782138648,
					605437046,
					-2106353256,
					-2107345273,
					-1231291280,
					-1247137715,
					-1143193462,
					-381525073,
					1786558161,
					-167011571,
					77583016,
					1146209579);
				phil_state_quaternion.vx(16893,
					13275,
					-31055,
					22900,
					13785,
					16049,
					-29008,
					15863,
					-13118,
					12303,
					-28411,
					-31544,
					-5681,
					12431,
					20429,
					28865,
					18998,
					16751,
					-17229,
					-16953,
					9402,
					11133,
					-12132,
					17604,
					19387,
					8675,
					-5209,
					-15680,
					21604,
					3065,
					-7392,
					25045,
					1289,
					26879,
					-21172,
					-31280,
					-14882,
					18083,
					16533,
					-5218,
					4071,
					-24395,
					-18065,
					16711,
					-21365,
					7163,
					14757,
					-8777,
					23882,
					8822,
					11536,
					-13592,
					-22501,
					24698,
					20899,
					-11081,
					17757,
					24305,
					13367,
					-25407,
					29647,
					11239,
					26284,
					9484,
					-30903,
					-11049,
					-31538,
					-20788,
					32267,
					-25683,
					-17762,
					11098,
					5430,
					25714,
					30588,
					28335,
					6958,
					20130,
					23650,
					10026,
					4193,
					-21458,
					-16330,
					17554,
					19129,
					-20240,
					28350,
					28624,
					18251,
					11575,
					-26028,
					18233,
					32000,
					21931,
					-548,
					-24988,
					3530,
					11091,
					24426,
					28392,
					21959,
					30026,
					-31760,
					18948,
					17583,
					-20305,
					5223,
					-20230,
					-9197,
					15231,
					3606,
					291,
					-22093,
					26861,
					21927,
					4175,
					5615,
					-16382,
					-12307,
					-24253,
					15824,
					-21649,
					-8532,
					-21687,
					1806,
					-28854,
					20935,
					-8761,
					-2307,
					-31320,
					-19465,
					14175,
					20526,
					29295,
					31399,
					4591,
					23049,
					-21431,
					-5192,
					-11704,
					12811,
					11683,
					29071,
					-474,
					9968,
					-24982,
					19150,
					21890,
					15375,
					12783,
					9233,
					-431,
					-7214,
					-4692,
					-17026,
					-5943,
					-5220,
					3491,
					9128,
					14328,
					-13926,
					-19962,
					6006,
					-25376,
					25476,
					-9846,
					-9846,
					29230,
					-20256,
					-8215,
					14056,
					15761,
					-22616,
					4058,
					14381,
					6502,
					30337,
					-6348,
					-11936,
					3689,
					-23030,
					-2546,
					27656,
					-12570,
					2038,
					-5735,
					-23069,
					-1284,
					-24839,
					-22152,
					3734,
					-26852,
					-23242,
					-13108,
					10778,
					24141,
					-14257,
					17686,
					31633,
					2913,
					-5497,
					2131,
					-26333,
					-2527,
					-31939,
					31204,
					-19357,
					-6912,
					-3767,
					-18421,
					12457,
					-26465,
					-22832,
					-2153,
					-201,
					-21773,
					32386,
					-25038,
					-2844,
					-17030,
					-12553,
					-25008,
					16400,
					31622,
					2157,
					15209,
					16471,
					-23700,
					10567,
					-27277,
					14259,
					21105,
					25789,
					12938,
					5580,
					18448,
					-28710,
					-24474,
					12185,
					-4693,
					27086,
					32535,
					17320,
					-28174,
					-292,
					12940,
					-6750,
					-22811,
					-6153,
					-17773,
					-31223,
					9925,
					-25627,
					-8849,
					11118);
				phil_state_quaternion.vy(21027,
					24749,
					6007,
					-9559,
					14915,
					24002,
					-21491,
					4970,
					16730,
					4278,
					-29400,
					20218,
					427,
					13559,
					31142,
					-17283,
					8155,
					15712,
					-27498,
					9606,
					31062,
					-13726,
					-138,
					-12275,
					7710,
					-23944,
					-13174,
					5769,
					-10252,
					22978,
					7554,
					-1402,
					32228,
					-23122,
					12124,
					-32396,
					2925,
					12756,
					-12550,
					-20696,
					-21619,
					6754,
					-25181,
					-76,
					17790,
					8204,
					21574,
					334,
					3427,
					-19286,
					-14832,
					-24387,
					29287,
					21373,
					-3127,
					31281,
					19772,
					-2977,
					24460,
					20584,
					-28203,
					-17819,
					-416,
					-20529,
					9709,
					-6531,
					-1281,
					8224,
					12230,
					20383,
					-13679,
					-23832,
					17445,
					-18934,
					21391,
					13839,
					19934,
					9177,
					11396,
					-23,
					18594,
					22369,
					-26013,
					29550,
					-14096,
					-3859,
					-20396,
					5849,
					5877,
					23945,
					-26330,
					30555,
					-17664,
					24851,
					32148,
					-32353,
					31974,
					-17728,
					12687,
					1881,
					31323,
					-6334,
					-32667,
					31810,
					-5529,
					12786,
					22398,
					-8875,
					13901,
					6299,
					-9976,
					24134,
					22980,
					20701,
					12452,
					-756,
					-20435,
					30194,
					-11756,
					-1576,
					-1803,
					16522,
					-19966,
					-25714,
					-12521,
					30383,
					-24384,
					31897,
					-28016,
					-22570,
					25371,
					9590,
					12975,
					-3787,
					-18503,
					6643,
					6835,
					27754,
					-10217,
					24398,
					-23972,
					26203,
					-21466,
					-17748,
					-15492,
					14784,
					-26744,
					-29407,
					-4988,
					-15653,
					29559,
					3286,
					28403,
					18076,
					19080,
					8748,
					-21778,
					17158,
					13792,
					-9498,
					-30134,
					-17327,
					11107,
					24432,
					26899,
					20460,
					-16307,
					-16523,
					12978,
					-24792,
					-830,
					-24507,
					32346,
					25173,
					-906,
					9174,
					-18245,
					16761,
					21288,
					-25420,
					20113,
					-3744,
					17140,
					-18912,
					-26664,
					10796,
					-9665,
					-9378,
					9020,
					28110,
					-5014,
					9694,
					24774,
					21200,
					9375,
					-22303,
					10536,
					10062,
					13937,
					5887,
					-13766,
					-29458,
					25897,
					-2087,
					6552,
					5912,
					-13954,
					-7563,
					31279,
					-18896,
					17866,
					-28928,
					-421,
					21988,
					16055,
					-21371,
					29893,
					31262,
					3066,
					13261,
					-28917,
					-32218,
					-6456,
					16346,
					13588,
					26086,
					-15564,
					16575,
					488,
					-14033,
					-6739,
					31304,
					28204,
					32439,
					27384,
					-23041,
					-7911,
					14906,
					-16498,
					24818,
					-27353,
					15932,
					-12168,
					-8676,
					7116,
					26967,
					4930,
					-27921,
					12836,
					21291,
					8295,
					10560,
					-8983,
					31590,
					-28219);
				phil_state_quaternion.vz(-29715,
					-12407,
					-7197,
					21138,
					31356,
					12053,
					27433,
					-23455,
					-5787,
					-5223,
					-6926,
					26503,
					-12058,
					-30723,
					-18291,
					-25891,
					-5784,
					10524,
					-32265,
					-147,
					-1317,
					-15146,
					-31269,
					-4069,
					11261,
					8825,
					-17020,
					-16416,
					-14877,
					5437,
					-4569,
					-22616,
					-22195,
					32717,
					12093,
					4114,
					-16797,
					-29610,
					-25048,
					11628,
					3686,
					-23522,
					-10687,
					-25762,
					-26628,
					-11993,
					-11885,
					21676,
					-17524,
					-2000,
					7224,
					3635,
					8108,
					-2691,
					-16037,
					9662,
					-31603,
					-23920,
					28082,
					3520,
					-13528,
					-4875,
					-1855,
					-2733,
					-3005,
					-27350,
					-18266,
					23382,
					-23,
					3643,
					22837,
					29450,
					9662,
					-27484,
					1239,
					7066,
					-2179,
					8492,
					24409,
					12401,
					6523,
					27687,
					29737,
					26181,
					24403,
					26987,
					-31046,
					13522,
					-15501,
					32448,
					-25741,
					-24738,
					-11741,
					-19526,
					6419,
					-21425,
					-14997,
					28466,
					-1860,
					12079,
					23013,
					20665,
					14885,
					25779,
					-13115,
					18929,
					3375,
					-2230,
					-11470,
					16966,
					-4952,
					15621,
					-17187,
					-6791,
					-20835,
					17739,
					25358,
					10219,
					-12031,
					-18677,
					30990,
					3336,
					-29230,
					-13021,
					-4865,
					-4667,
					-15835,
					-13210,
					-2921,
					-17082,
					21654,
					-2856,
					-1433,
					-7670,
					-7921,
					-6100,
					-26138,
					-10599,
					-16318,
					9999,
					-29644,
					7821,
					-20825,
					-1722,
					-27031,
					18423,
					31241,
					2519,
					-15048,
					-14469,
					1349,
					-32278,
					-24310,
					-8815,
					11284,
					25422,
					9386,
					-7074,
					21027,
					-30056,
					-30458,
					7743,
					18136,
					-28863,
					-13219,
					19946,
					-1162,
					-25741,
					-11234,
					-7421,
					16550,
					21143,
					31491,
					27581,
					-26751,
					-12701,
					2704,
					12544,
					-13874,
					18414,
					5043,
					19906,
					22678,
					-25202,
					1334,
					-21546,
					-11905,
					-5277,
					-19651,
					-7104,
					-8044,
					30988,
					-12381,
					-13876,
					-31990,
					-29046,
					11047,
					6438,
					-19779,
					-21012,
					-27660,
					16572,
					28753,
					-13932,
					-6728,
					5068,
					-19848,
					-28408,
					2146,
					-30847,
					-24194,
					1088,
					-1039,
					5748,
					15166,
					11678,
					202,
					20077,
					-18195,
					-248,
					24427,
					21297,
					-9849,
					-10505,
					3115,
					-8443,
					-20612,
					-21091,
					2283,
					4994,
					-13935,
					20205,
					-19282,
					25937,
					24787,
					5771,
					-326,
					31188,
					-17571,
					-11985,
					-31939,
					4806,
					13952,
					5800,
					-11882,
					13833,
					24811,
					-14099,
					13335,
					-22014,
					-5502,
					15471,
					27769,
					-445,
					-12419);
				phil_state_quaternion.xacc(12695,
					20586,
					-31573,
					32245,
					-29323,
					22111,
					29169,
					-10633,
					22324,
					-16782,
					-24237,
					20807,
					-19092,
					22366,
					11599,
					16162,
					237,
					-23530,
					-31686,
					28139,
					-30338,
					26122,
					23726,
					20383,
					-13054,
					-31185,
					15141,
					-13956,
					-11148,
					26559,
					30844,
					-31019,
					15505,
					31676,
					-11295,
					-32720,
					-22425,
					31253,
					-28468,
					3382,
					4507,
					14374,
					-29074,
					-5931,
					29499,
					-28883,
					19621,
					27647,
					-5685,
					-27344,
					13634,
					663,
					28939,
					-17186,
					-12039,
					-16363,
					-5866,
					-26383,
					-17862,
					28031,
					14962,
					1581,
					-960,
					8834,
					-6073,
					16216,
					-14663,
					21407,
					-29617,
					9003,
					9825,
					13367,
					-30375,
					32589,
					-27905,
					1554,
					-12994,
					21507,
					14161,
					16117,
					9174,
					29672,
					-9196,
					-18872,
					-19015,
					-84,
					12501,
					-21951,
					28176,
					18081,
					12037,
					-4596,
					-26094,
					-30258,
					29594,
					-13276,
					31467,
					-29867,
					-12700,
					30766,
					-11153,
					13065,
					-1082,
					1297,
					-29600,
					-3049,
					19518,
					2248,
					7837,
					28989,
					8006,
					21439,
					-8518,
					25297,
					7350,
					8237,
					-25112,
					6187,
					24558,
					-22792,
					-17370,
					31654,
					-23886,
					10954,
					-31184,
					22736,
					-6246,
					14662,
					-6037,
					-734,
					-1504,
					-25306,
					11700,
					3026,
					-31142,
					15817,
					20448,
					23985,
					971,
					-24146,
					-17646,
					-4686,
					-10923,
					-23441,
					-2692,
					-10448,
					8055,
					-6509,
					27304,
					6787,
					29188,
					-21154,
					-26996,
					-16498,
					25329,
					14600,
					26667,
					5912,
					26473,
					-25082,
					-16059,
					24859,
					19413,
					26049,
					-21601,
					-23756,
					32616,
					-5682,
					19687,
					28323,
					-25851,
					19426,
					-32087,
					11500,
					24546,
					15630,
					-13078,
					-18166,
					22972,
					9418,
					9859,
					7411,
					-2392,
					-2167,
					30011,
					-7742,
					-25010,
					-17485,
					-19364,
					-6093,
					25280,
					-2124,
					-10637,
					-12132,
					19122,
					-22514,
					-30203,
					17532,
					7881,
					28335,
					-23844,
					30390,
					25936,
					16247,
					-15986,
					-2125,
					-7124,
					-5406,
					18816,
					28530,
					28393,
					31450,
					3391,
					11735,
					16203,
					-23315,
					-5508,
					-6819,
					2717,
					-31813,
					20956,
					9413,
					23363,
					9504,
					13094,
					12839,
					7628,
					13228,
					1357,
					-15371,
					-3674,
					13145,
					11913,
					-15053,
					11725,
					13496,
					-7820,
					20171,
					-15131,
					-18764,
					-23448,
					-7482,
					-6908,
					-17299,
					6491,
					30710,
					-14424,
					-3259,
					-19541,
					-10907,
					19522,
					-21311,
					25943,
					6249,
					25616);
				phil_state_quaternion.yacc(-20859,
					13586,
					-9610,
					29019,
					-22370,
					-4850,
					-24566,
					-3152,
					27859,
					21577,
					-14775,
					1342,
					403,
					22432,
					31740,
					2110,
					-8621,
					23868,
					19328,
					-22747,
					-19451,
					-10326,
					11709,
					10746,
					-9550,
					-101,
					21415,
					-32085,
					7687,
					9782,
					-30971,
					-27079,
					29216,
					20871,
					19133,
					-20963,
					-17242,
					5867,
					32017,
					5329,
					-31060,
					17220,
					20185,
					17972,
					-1654,
					20378,
					-15197,
					-10986,
					4536,
					13763,
					8453,
					25008,
					-8237,
					10620,
					-2740,
					-10651,
					-17946,
					-23267,
					4114,
					-15033,
					-14836,
					18357,
					-845,
					2162,
					1174,
					17944,
					-23775,
					-11001,
					-26351,
					25279,
					9572,
					-12422,
					-26976,
					29664,
					-16112,
					26348,
					-18709,
					-24247,
					-976,
					19454,
					32278,
					-2097,
					11874,
					9534,
					7919,
					23784,
					29847,
					26466,
					-13678,
					-24696,
					18289,
					13096,
					-17235,
					27417,
					1774,
					-9060,
					-17467,
					19348,
					-27168,
					15886,
					-887,
					6710,
					-11988,
					29601,
					-14042,
					-22250,
					-10106,
					16182,
					-5673,
					19638,
					-23820,
					7352,
					5636,
					23931,
					-11643,
					-2367,
					-22218,
					-6620,
					18676,
					13181,
					17488,
					6528,
					5866,
					22550,
					-11847,
					-13970,
					-15092,
					11837,
					-22108,
					1218,
					28356,
					-6059,
					11896,
					30924,
					-1091,
					10863,
					-30722,
					-14748,
					13697,
					14320,
					2699,
					-5905,
					8614,
					25498,
					14725,
					32740,
					25245,
					21194,
					-622,
					-19511,
					17025,
					-30575,
					2304,
					-13564,
					1187,
					29726,
					1369,
					-4557,
					-17502,
					19964,
					14376,
					-20014,
					9813,
					2135,
					1901,
					165,
					2461,
					-20375,
					-22834,
					16814,
					-28228,
					-15174,
					21145,
					3275,
					15770,
					-29960,
					-15989,
					14849,
					8466,
					16340,
					8102,
					-22133,
					3362,
					10913,
					-24086,
					-882,
					-2296,
					-865,
					-15984,
					-14459,
					14469,
					-31300,
					22235,
					-17524,
					7188,
					-24796,
					-29601,
					-4335,
					5294,
					27393,
					-16148,
					19438,
					16998,
					-8135,
					-30302,
					-16456,
					21103,
					21128,
					26867,
					-7056,
					1276,
					7003,
					31734,
					-27947,
					-31163,
					12743,
					14020,
					-29898,
					30237,
					-25940,
					-21332,
					29695,
					-30312,
					12807,
					30318,
					9750,
					32651,
					13255,
					-14093,
					21417,
					-4305,
					3648,
					-30967,
					-11528,
					10141,
					24711,
					-25227,
					11642,
					3421,
					16311,
					27515,
					-11686,
					-28733,
					-25805,
					-30572,
					3861,
					28214,
					29210,
					14760,
					29344,
					17114,
					-23033,
					-16764,
					-26971,
					12311);
				phil_state_quaternion.zacc(16595,
					-1975,
					-30501,
					27743,
					28665,
					-4429,
					10951,
					-24862,
					-18561,
					24492,
					3069,
					-23131,
					14367,
					7419,
					-27028,
					14069,
					24090,
					-27993,
					-526,
					-14002,
					-5444,
					27967,
					17612,
					-3223,
					-18264,
					26663,
					-20706,
					-2056,
					-13304,
					-12388,
					9330,
					11623,
					10025,
					21684,
					-15907,
					6434,
					31004,
					-31567,
					28754,
					-4387,
					9378,
					-5124,
					30193,
					10195,
					17766,
					-15286,
					-21775,
					1570,
					-4629,
					13438,
					30891,
					29392,
					2012,
					27575,
					-11295,
					5943,
					-21694,
					29897,
					16446,
					-13180,
					-23696,
					11112,
					-4883,
					-20937,
					21271,
					-2083,
					-28534,
					-10929,
					8597,
					-18643,
					-10315,
					9369,
					14285,
					3677,
					-25269,
					-13292,
					26781,
					-29946,
					-27387,
					-8392,
					21590,
					-30665,
					4140,
					-20440,
					30085,
					-5104,
					15832,
					16928,
					-3033,
					-25035,
					-28306,
					31351,
					-9316,
					14239,
					-17427,
					-13767,
					-31827,
					-26904,
					-27094,
					4460,
					-30870,
					-3154,
					-11419,
					-1200,
					-32287,
					-5520,
					18347,
					7870,
					2328,
					30871,
					-10634,
					-28453,
					-22563,
					-25062,
					-18617,
					29018,
					-1621,
					25575,
					16374,
					12818,
					-6115,
					-30897,
					25227,
					21533,
					7221,
					-12483,
					-30522,
					-26202,
					14498,
					-16445,
					-8649,
					-28109,
					14816,
					-23805,
					-9155,
					11946,
					-7853,
					1073,
					-27354,
					-21384,
					-7238,
					8168,
					26831,
					-13783,
					4827,
					-2847,
					-25208,
					16509,
					24781,
					-13041,
					-25488,
					-32063,
					27561,
					-7219,
					2630,
					23972,
					-9195,
					18516,
					-11588,
					-11229,
					7245,
					21310,
					-7177,
					6074,
					28780,
					2553,
					14528,
					20893,
					25950,
					-6202,
					1236,
					749,
					22357,
					-1394,
					-24529,
					-11124,
					-31900,
					-25780,
					24370,
					5523,
					27303,
					28475,
					-15637,
					1843,
					-29003,
					22855,
					20479,
					16826,
					27611,
					-34,
					-2944,
					-1769,
					3729,
					31285,
					-27644,
					-1282,
					-29315,
					-22953,
					-3880,
					30985,
					630,
					-1436,
					22408,
					29487,
					28171,
					-4593,
					22236,
					13431,
					-19155,
					-20815,
					4892,
					22914,
					14259,
					-14411,
					28841,
					30747,
					-27754,
					7383,
					26046,
					-32417,
					26022,
					26463,
					-11054,
					22569,
					-26444,
					8155,
					-4300,
					-5773,
					-2833,
					-23522,
					8324,
					-2039,
					-23495,
					17543,
					30179,
					-21115,
					-31807,
					-23512,
					-15987,
					-807,
					28125,
					7911,
					-19914,
					23568,
					-5671,
					-26849,
					27146,
					3719,
					-26371,
					31371,
					-8734,
					-27699,
					-26682,
					-4043,
					-21209);
			}

			void on_HIL_STATE_QUATERNION(const com::company::demo::HIL_STATE_QUATERNION& phil_state_quaternion) {
				assert(phil_state_quaternion.ind_airspeed() == 18989,
					876,
					-6692,
					-11185,
					16795,
					-18548,
					-30567,
					4740,
					13556,
					-13546,
					22772,
					16672,
					7257,
					16238,
					30331,
					23427,
					2168,
					13681,
					-16535,
					5844,
					23687,
					24893,
					19611,
					-25357,
					16015,
					-21494,
					-848,
					-9741,
					-10725,
					5186,
					297,
					-14723,
					15184,
					-29855,
					-2290,
					-18361,
					-23174,
					-9585,
					16135,
					-4885,
					15037,
					31628,
					-2931,
					-5694,
					29956,
					-700,
					11352,
					2263,
					-27789,
					-27317,
					-10075,
					14188,
					27465,
					3377,
					-13219,
					10973,
					-17626,
					13344,
					7754,
					11268,
					-4805,
					-30417,
					19191,
					20195,
					-3039,
					32321,
					2534,
					-14791,
					26284,
					-1948,
					-5394,
					-4845,
					12284,
					15775,
					20362,
					-19369,
					23817,
					-22330,
					14987,
					-5537,
					10585,
					-779,
					-20126,
					-14613,
					7050,
					-11918,
					24240,
					23264,
					-6234,
					26909,
					-21795,
					-21311,
					-25277,
					-1719,
					-13092,
					-25827,
					-4625,
					-16130,
					-22087,
					8439,
					2225,
					2317,
					-20030,
					23087,
					-24500,
					-19760,
					-6990,
					10423,
					3752,
					6249,
					-26879,
					32321,
					18252,
					-8933,
					13247,
					10189,
					4236,
					-11936,
					31479,
					-990,
					5230,
					31734,
					-3543,
					32244,
					25951,
					1483,
					-21021,
					-21656,
					-17863,
					-18996,
					-9928,
					28082,
					-11173,
					-9544,
					24009,
					-8228,
					-31263,
					-1760,
					6137,
					-16997,
					29937,
					23717,
					-19785,
					5624,
					19226,
					6727,
					-6030,
					26923,
					-14702,
					-1425,
					24598,
					-22678,
					-6997,
					-25866,
					-17340,
					-5039,
					-141,
					-3677,
					684,
					13133,
					31168,
					8531,
					20493,
					-28721,
					-30375,
					19259,
					-32231,
					25182,
					-27488,
					-23099,
					-20239,
					-32177,
					925,
					4980,
					-1181,
					-21031,
					10563,
					32314,
					8884,
					8874,
					32509,
					9848,
					19470,
					10224,
					1501,
					-32338,
					9178,
					12485,
					5394,
					-202,
					-31522,
					27935,
					7993,
					4408,
					13223,
					5077,
					-22562,
					-6105,
					-20609,
					31527,
					1882,
					-16503,
					24008,
					30129,
					-19254,
					1117,
					-30094,
					-6780,
					-31081,
					-7923,
					11006,
					-27453,
					28731,
					-6261,
					6011,
					13758,
					-7651,
					19764,
					-227,
					-20084,
					-11021,
					-8389,
					22584,
					24736,
					28309,
					19059,
					-10646,
					-25209,
					1479,
					391,
					-11125,
					8458,
					7930,
					1883,
					8208,
					8183,
					-7699,
					-27658,
					7075,
					4529,
					11911,
					8624,
					2023,
					16288,
					-17047,
					14052,
					21907,
					71,
					-2992,
					-21366,
					-420,
					23728,
					-12617,
					27369,
					-12409);
				assert(phil_state_quaternion.true_airspeed() == 7305,
					-20689,
					27327,
					-15506,
					-5322,
					-23002,
					-32298,
					-30147,
					528,
					8305,
					-9748,
					30950,
					-25591,
					-10581,
					31961,
					16706,
					-6395,
					23360,
					-7033,
					9857,
					30863,
					-18620,
					28107,
					-18023,
					-8131,
					490,
					16208,
					-18024,
					-15657,
					9426,
					20620,
					-14474,
					18440,
					162,
					9674,
					-26135,
					8256,
					-30983,
					-15318,
					23821,
					21637,
					-18268,
					13111,
					-7049,
					31394,
					7307,
					-15169,
					27671,
					20502,
					-4435,
					-20168,
					26051,
					25568,
					10134,
					15474,
					-13669,
					18674,
					-17956,
					30904,
					11428,
					13483,
					25447,
					20852,
					523,
					-6685,
					14341,
					-117,
					-10581,
					27129,
					-11248,
					30955,
					22931,
					-30569,
					22172,
					-28335,
					2324,
					-21063,
					30633,
					-23056,
					15404,
					17225,
					-10389,
					10659,
					21607,
					-21280,
					-12606,
					-7357,
					17378,
					30376,
					24092,
					739,
					-12229,
					-5853,
					-27608,
					-2671,
					-18707,
					21846,
					1706,
					11573,
					-3834,
					-519,
					32726,
					30509,
					23484,
					-16595,
					14572,
					25167,
					7785,
					19258,
					-3831,
					-2024,
					19453,
					-18878,
					15636,
					23593,
					7320,
					-21579,
					-29071,
					11899,
					-18160,
					-21164,
					11763,
					-6834,
					-2893,
					-32184,
					681,
					26125,
					-27203,
					4224,
					-8002,
					-31549,
					-702,
					-8303,
					-29000,
					-3598,
					27607,
					-31510,
					-3959,
					28093,
					-14615,
					8343,
					21541,
					16542,
					19075,
					-21466,
					-26042,
					-6312,
					-14152,
					22729,
					13612,
					-29910,
					-25063,
					-17454,
					-14130,
					-12076,
					2608,
					-23839,
					-8215,
					21234,
					-24138,
					8082,
					-22392,
					8254,
					-12822,
					-20452,
					11683,
					-14052,
					-12459,
					24586,
					18179,
					-31787,
					30109,
					416,
					2086,
					25951,
					8218,
					-26647,
					18344,
					-30563,
					7489,
					28009,
					-28379,
					4203,
					-12791,
					-5906,
					13289,
					9459,
					27155,
					-14715,
					-24992,
					-23658,
					-4952,
					14180,
					-5083,
					10101,
					19265,
					32682,
					-12929,
					-26904,
					2058,
					2151,
					19608,
					3952,
					19161,
					1512,
					-6281,
					16159,
					-4234,
					25797,
					-10484,
					-22619,
					-15408,
					24100,
					-2784,
					-8804,
					26708,
					-4483,
					-20383,
					909,
					11093,
					-22231,
					-3810,
					21175,
					1024,
					13671,
					19542,
					-1699,
					-19239,
					-14692,
					-1863,
					2816,
					-26936,
					-18031,
					21985,
					4352,
					-21668,
					28334,
					29505,
					24559,
					-22178,
					-16979,
					-8515,
					-30888,
					-23381,
					-7798,
					15934,
					19137,
					-26624,
					-3459,
					-1375,
					-1851,
					2440,
					-9544,
					-14817,
					27037);
				assert(phil_state_quaternion.time_usec() == 3012325739210557918L,
					2438024150458822417L,
					3637511483938376694L,
					-3964042911712401717L,
					-8892978291994477093L,
					664038269817336451L,
					-8410359515378580739L,
					-3079080233746858013L,
					-7489768404364897810L,
					5383124051748674241L,
					-3730241815515644109L,
					3315264601155419095L,
					1882289684348481251L,
					-2913439248426443745L,
					-7947451810019374142L,
					-1689191362613571500L,
					-2184372003112983907L,
					-3425382570315579335L,
					-6363633044456593128L,
					-6240625768474363002L,
					5203686864598708892L,
					7086294089282329667L,
					-9150848240823631939L,
					-8459203906255084607L,
					9187423390633243444L,
					-5730687726473472618L,
					-6002164883071565233L,
					-5288009035351991912L,
					8163652394578102460L,
					-6799544404102948379L,
					6749568783793550522L,
					5664948083567001787L,
					2603020577420308062L,
					-3722564411314679380L,
					8688251250467182731L,
					-5227153274191612850L,
					-8558349996901917500L,
					-9198549726261820414L,
					7353795407216311397L,
					529837228723590858L,
					1143683980464020920L,
					-6538723533806064885L,
					2589077482342485350L,
					-4462786782395279609L,
					3112885170427506913L,
					2008030191793318620L,
					-4799259212649766683L,
					5284932456979254465L,
					-7767280438734163500L,
					-5919582843006237964L,
					580275192808664126L,
					1550615277874507394L,
					4458907183355312064L,
					8994087129662340322L,
					-7755814154378635377L,
					-4545299066046285596L,
					-3106859760964828122L,
					-6261983130780289464L,
					-6502322770604547531L,
					-6017398472896991352L,
					1150840016166425176L,
					-8912146516552161190L,
					8993826414275473720L,
					-4022729959172042751L,
					338091098513081871L,
					5063037551802319019L,
					3262839512219602783L,
					-2701388984463249543L,
					-9188309717340541195L,
					-5142299873234077271L,
					1053907717747008211L,
					143931796363575347L,
					5270300789428701678L,
					-1076285427926246160L,
					243600383010592316L,
					-8214368073292432727L,
					7061456185528486863L,
					2904318464946638337L,
					101369507945495781L,
					2607205206189120991L,
					-7305916516591432072L,
					-8012646800719292110L,
					3551974457137801384L,
					1749970389480612388L,
					-6308340529590659884L,
					2710841461536431211L,
					7046236163309836598L,
					3361005379053629158L,
					290592715219001781L,
					-7826256772950014096L,
					-5255458854314893170L,
					6624171894828069875L,
					-2947875055507964107L,
					-3733329294886505847L,
					-3808540363778744027L,
					5235992782079990537L,
					5823155155686030735L,
					-4164577500602008234L,
					-4331181382530037886L,
					-83170906406755134L,
					7448989980249847508L,
					1230184914887418231L,
					413496867957354006L,
					7396595843049771228L,
					576808432079365139L,
					1282864265215184821L,
					2446716394733920551L,
					1750751383387431534L,
					-2547523216179060118L,
					8234819931587508804L,
					-1433911669611388903L,
					-18291774587014628L,
					4627937139517396448L,
					-3596055453501269419L,
					-7485778527238230963L,
					2495340993434407909L,
					-8333020113554833410L,
					-1612679464658772128L,
					3679004936855050837L,
					-1213612974176561859L,
					8635206709380308960L,
					-8454008288447035311L,
					1347956186445939475L,
					-4253355163763458929L,
					-5971384532326996780L,
					7977828116760754399L,
					4316641871253969470L,
					2005735702302833432L,
					1508989078832907194L,
					-4589589832994842183L,
					-4633811948478115328L,
					4666327154691212699L,
					-1865341996500739689L,
					-775266797146514155L,
					-4044595327267976650L,
					1790191384106247671L,
					7210912627104973818L,
					8709454909245032352L,
					2686856838609086041L,
					3900533048056570569L,
					4739131686150893157L,
					-6721922168254344080L,
					-8160072002467437788L,
					6025963239712240845L,
					3506927370459858832L,
					-6291344210630097738L,
					425400036121221608L,
					138605919495130863L,
					-1436060812693062266L,
					-4261113549524016168L,
					2005461678875609040L,
					2189625004587111370L,
					-4683973962882411113L,
					9208975714130992847L,
					-3025562842105117792L,
					8097013170408573336L,
					8675647536726445716L,
					248430189859764919L,
					-4616731084598518992L,
					-5062108783602676088L,
					-519367884919346243L,
					-2320164222742283778L,
					6148405957540402212L,
					7316955006554238745L,
					-5648693481993830041L,
					-6714332387910567630L,
					-459134544432633266L,
					-8516214223718739399L,
					4277917749961780445L,
					4152205206961923168L,
					4284415967083962806L,
					-5820462303108338264L,
					-8677879372096273264L,
					-1469956279831679854L,
					4244114847458104860L,
					-7761990480005829526L,
					5030193109705574635L,
					2719066320929975199L,
					2309077026378949188L,
					1987722559181793125L,
					-5879564476661326890L,
					5400373269976588000L,
					-3090977750715234333L,
					-6598619831344276755L,
					67157919728916644L,
					-3449932536614288768L,
					5616809664364954022L,
					3420970594075280536L,
					-3882954838927064958L,
					-3711012341547724577L,
					-7270028189018273749L,
					-2796310694980974479L,
					-5645256205278485289L,
					4382613385619022382L,
					-6580062438572969045L,
					4261265237212550308L,
					3365220360146768440L,
					2607098172513137971L,
					-3369670162816881942L,
					-4983133079247907485L,
					-2620377191213368774L,
					-7690792444422158746L,
					5459874494292388187L,
					-7848228761404747015L,
					-5559883617427703185L,
					-3511402674964586357L,
					1095083597380561103L,
					6024039400017113984L,
					6175370950887062525L,
					-9118715263262981956L,
					2814277397499583200L,
					2990262008364185459L,
					2652980104699282280L,
					-1108735070263033390L,
					-2015288502576004029L,
					6960657863064820254L,
					-5840550182350139830L,
					4314380677696134043L,
					-7554409253293641318L,
					-92599072879833054L,
					-845103183388864775L,
					-6489818802610534518L,
					-7597260754703731831L,
					-76688118984506506L,
					-2426789271640805905L,
					-7025597537434454760L,
					1599900505781938676L,
					-1328583196599086638L,
					-2715855253816944557L,
					-1336683148741443852L,
					-3222827646942968897L,
					-814591614928482042L,
					5923259660207459175L,
					-3272729215346692849L,
					-8329411262316107739L,
					-136095970926817060L,
					-3119299412367944207L,
					5414051469694622054L,
					8809387380480782001L,
					6919767177411347624L,
					-463793486523155391L,
					-3897827462499961735L,
					-1150548337301713825L,
					2946000321761140601L,
					710550658441626777L,
					665295105474907290L,
					-4519841876308894583L,
					-3444278742350897265L,
					4914865324232220590L,
					6206902835445524054L,
					-3975917724925110969L,
					4398110785595082092L,
					8905888021457129634L,
					-2946285886124033518L,
					4308904728021888470L);
				{

					const float exemplary[] = { -2.3352637E38F,
											   2.6174778E38F,
											   -1.4336971E37F,
											   2.9998363E38F,
											   2.5230646E38F,
											   -3.224832E37F,
											   -3.3558032E38F,
											   1.0468968E37F,
											   -2.0621361E38F,
											   1.9534843E38F,
											   3.2752646E38F,
											   -2.2300915E38F,
											   -1.1674843E38F,
											   -1.9766472E38F,
											   3.3401944E38F,
											   2.7762315E38F,
											   -1.4434852E38F,
											   -1.6465361E38F,
											   3.3410761E38F,
											   -1.2158228E38F,
											   2.2922007E38F,
											   2.0089827E37F,
											   1.8381777E38F,
											   -3.0488407E38F,
											   -2.7733388E38F,
											   -1.2683838E38F,
											   -1.999219E38F,
											   -3.1230025E38F,
											   2.0584148E37F,
											   1.2132973E38F,
											   3.0795687E38F,
											   2.29639E38F,
											   -1.5120907E37F,
											   -1.2354709E38F,
											   3.494354E37F,
											   1.0347434E38F,
											   2.5363486E38F,
											   -1.1823102E37F,
											   -3.2758489E38F,
											   -4.0551894E37F,
											   -2.033812E38F,
											   -6.5452426E37F,
											   -1.0653166E38F,
											   3.1054243E38F,
											   1.0656364E38F,
											   -1.822449E38F,
											   1.0072287E38F,
											   2.93664E38F,
											   -5.3099656E36F,
											   -2.6769919E38F,
											   3.3239296E38F,
											   2.530221E38F,
											   -3.337523E38F,
											   2.0521359E38F,
											   2.186353E38F,
											   2.79012E38F,
											   -1.1664531E38F,
											   -1.0418712E38F,
											   -1.7783832E38F,
											   1.9708178E38F,
											   1.5753984E38F,
											   -2.8557113E38F,
											   2.2716745E37F,
											   3.3067019E38F,
											   -1.6759049E38F,
											   1.1871155E38F,
											   8.3956636E37F,
											   2.8533977E38F,
											   -3.1370036E38F,
											   -3.1476553E38F,
											   3.512002E37F,
											   -2.4887782E38F,
											   3.3547393E38F,
											   2.3811326E38F,
											   -1.1200804E38F,
											   -3.1766209E38F,
											   2.40744E38F,
											   2.9157749E38F,
											   -3.3194196E38F,
											   1.0840898E38F,
											   4.5467473E37F,
											   5.863925E37F,
											   -2.8650003E38F,
											   -1.1295251E38F,
											   1.5713222E38F,
											   6.992194E37F,
											   -2.0236413E38F,
											   -1.864397E38F,
											   -2.8849138E38F,
											   -6.500188E36F,
											   -7.437287E37F,
											   3.2571327E38F,
											   3.9482256E37F,
											   -2.8566354E38F,
											   1.1622661E38F,
											   1.1928365E38F,
											   -3.3411818E38F,
											   1.4465066E38F,
											   2.0952465E38F,
											   3.1103564E38F,
											   -1.1489199E38F,
											   1.1796752E38F,
											   -1.770803E38F,
											   2.3383393E38F,
											   3.3170555E37F,
											   -2.3404925E38F,
											   -2.639095E38F,
											   -1.7869099E38F,
											   3.891642E37F,
											   7.154549E36F,
											   2.1355154E38F,
											   1.3836701E38F,
											   -1.7561543E38F,
											   2.7451558E38F,
											   1.3402484E38F,
											   3.3287156E38F,
											   1.5923185E38F,
											   1.6545812E38F,
											   3.276769E38F,
											   -8.2886196E37F,
											   5.350427E37F,
											   3.1709935E38F,
											   2.8835593E38F,
											   -3.207106E38F,
											   -3.0908263E38F,
											   1.0116783E38F,
											   -1.2877554E38F,
											   -2.0131918E38F,
											   1.159635E38F,
											   1.0119768E38F,
											   -9.932336E37F,
											   -9.887864E37F,
											   2.291049E38F,
											   -8.823916E37F,
											   -2.5799586E38F,
											   4.724584E37F,
											   1.1952175E38F,
											   2.4456676E38F,
											   -2.3552802E38F,
											   -1.3928146E37F,
											   1.6722363E38F,
											   -1.986359E38F,
											   2.94399E38F,
											   -2.844504E38F,
											   -8.2725463E37F,
											   -2.0384045E37F,
											   2.6014882E38F,
											   -3.016048E38F,
											   3.0886451E37F,
											   9.207906E37F,
											   -1.5576116E38F,
											   -2.7314686E38F,
											   -7.0313323E37F,
											   2.8873332E38F,
											   8.56582E37F,
											   -1.1749492E38F,
											   2.6079755E38F,
											   -2.3029451E38F,
											   -1.119058E38F,
											   4.3507163E37F,
											   -1.9288227E38F,
											   -1.6502757E38F,
											   -1.8435175E38F,
											   8.97183E37F,
											   -3.0297425E38F,
											   -6.347115E37F,
											   -1.4278807E38F,
											   -4.0085476E36F,
											   2.1903278E38F,
											   2.1155257E38F,
											   1.1439616E38F,
											   1.4036579E38F,
											   3.0659231E38F,
											   2.0249143E37F,
											   -2.6608887E38F,
											   2.8440697E38F,
											   -2.117733E38F,
											   3.0187898E38F,
											   3.0594942E38F,
											   -9.823893E37F,
											   8.2225913E37F,
											   -3.0715466E38F,
											   -8.639719E37F,
											   3.2095802E38F,
											   -1.9222664E38F,
											   -2.0043077E38F,
											   1.2041966E38F,
											   3.210842E38F,
											   -1.084406E38F,
											   -3.2042946E38F,
											   2.0484506E38F,
											   -5.1530403E37F,
											   -5.754975E37F,
											   -3.031943E38F,
											   1.6433306E38F,
											   -2.470689E38F,
											   -2.6077118E38F,
											   2.353471E38F,
											   3.1221979E38F,
											   2.1137611E38F,
											   3.3683517E38F,
											   -3.2126396E38F,
											   8.511401E37F,
											   2.6811076E38F,
											   9.263698E37F,
											   1.0973306E38F,
											   1.1562214E38F,
											   1.070404E38F,
											   -3.030822E38F,
											   2.197609E38F,
											   -2.3590037E38F,
											   -3.034853E38F,
											   -3.8757233E37F,
											   1.2026863E38F,
											   1.2884111E38F,
											   -7.3386387E37F,
											   -1.2845649E38F,
											   9.299616E37F,
											   -2.0559451E38F,
											   -4.108979E37F,
											   1.7272372E38F,
											   -1.6507914E38F,
											   3.056388E38F,
											   4.7721077E37F,
											   3.0329532E38F,
											   2.9063975E38F,
											   -2.1048563E38F,
											   -4.0988516E37F,
											   -1.1548636E38F,
											   -4.316473E37F,
											   -1.0761815E38F,
											   -4.4871556E37F,
											   2.4309166E38F,
											   -3.1269756E38F,
											   1.3854773E37F,
											   2.946222E38F,
											   -3.0093023E38F,
											   7.213548E37F,
											   2.7470658E38F,
											   -2.1594059E38F,
											   -2.5705936E37F,
											   -1.2641361E38F,
											   2.1767407E37F,
											   -2.041379E38F,
											   1.3371067E38F,
											   3.331585E38F,
											   1.5644482E38F,
											   1.4276693E38F,
											   -1.993389E38F,
											   2.4332803E38F,
											   -3.3971288E38F,
											   1.4539392E38F,
											   -6.4968006E37F,
											   -3.2796574E36F,
											   -1.3610537E38F };
					const auto  sample = phil_state_quaternion.attitude_quaternion();

					for (size_t index = 0; index < com::company::demo::HIL_STATE_QUATERNION::attitude_quaternion_::len; index++)
						assert(sample.get(index) == exemplary[index]);
				}

				assert(phil_state_quaternion.rollspeed() == -1.0426376E38F,
					-4.8081105E37F,
					7.5700595E37F,
					1.7663206E38F,
					-2.1476303E37F,
					-7.299155E37F,
					-7.7422673E37F,
					1.8087766E38F,
					2.9337763E37F,
					1.5235897E38F,
					2.132119E38F,
					-2.4311143E38F,
					2.9395223E38F,
					-3.3559046E38F,
					2.7494293E38F,
					-1.2697796E38F,
					2.367574E38F,
					-1.1254921E38F,
					9.773344E37F,
					-3.6504258E37F,
					6.4564203E37F,
					1.7468308E38F,
					-1.9785472E38F,
					8.070396E37F,
					-5.892197E37F,
					-1.373834E37F,
					2.8601631E38F,
					4.3976224E37F,
					9.641895E37F,
					1.1338834E38F,
					-3.222094E38F,
					1.6075056E38F,
					1.4571771E38F,
					4.0374717E37F,
					-6.1283275E37F,
					2.2555518E38F,
					-1.011513E38F,
					-1.7250583E38F,
					-3.2511563E38F,
					1.6572998E38F,
					-2.7880464E38F,
					-2.0431958E38F,
					-1.4561597E38F,
					2.015924E38F,
					-1.5267441E38F,
					-2.7731607E38F,
					-1.705588E38F,
					2.7837664E38F,
					-2.0123755E38F,
					-2.8767777E38F,
					1.7750088E38F,
					-1.4427755E38F,
					1.2154767E38F,
					-6.5871724E37F,
					-2.2297297E38F,
					-3.60378E37F,
					-2.9736645E38F,
					2.1763042E38F,
					-3.2204889E38F,
					-1.7590668E38F,
					9.19694E37F,
					1.9112806E38F,
					-1.3555114E38F,
					3.0810902E37F,
					-2.139541E38F,
					-1.6091957E38F,
					-6.8100786E37F,
					3.1141322E38F,
					2.8797955E38F,
					2.2230754E38F,
					3.251573E38F,
					2.266588E38F,
					-2.7424503E38F,
					-1.2045442E37F,
					-3.0623053E38F,
					3.1898448E38F,
					-8.0588423E37F,
					1.7387266E38F,
					2.0547939E38F,
					-2.7390386E38F,
					2.8185442E38F,
					8.994624E37F,
					-2.0658314E38F,
					9.924871E37F,
					8.2059485E37F,
					-7.13907E37F,
					-2.1387963E38F,
					1.2871579E38F,
					4.038324E37F,
					2.6626388E38F,
					-2.7776675E38F,
					2.041706E38F,
					-3.0516694E38F,
					3.317686E38F,
					-2.3760466E38F,
					1.9056591E38F,
					-2.4718858E38F,
					-1.5665291E38F,
					1.2042508E38F,
					-2.91239E38F,
					-3.0351906E38F,
					-2.1082129E38F,
					-6.629719E37F,
					-1.880614E38F,
					3.3962266E38F,
					1.6702882E38F,
					-8.56147E37F,
					1.3340077E38F,
					-3.1965211E38F,
					3.318571E38F,
					8.4557203E37F,
					9.248871E37F,
					1.9299599E37F,
					-1.3582297E38F,
					7.769354E37F,
					-8.527213E37F,
					2.8351344E38F,
					1.6048262E38F,
					2.0387752E38F,
					2.2255284E38F,
					2.8029211E38F,
					-5.6319546E37F,
					-2.6236406E38F,
					8.128796E37F,
					3.0306287E38F,
					6.405682E37F,
					-2.407282E38F,
					1.6036944E38F,
					2.77339E38F,
					1.1528339E38F,
					-2.5301872E38F,
					-1.86361E38F,
					-3.3352893E38F,
					2.9164586E38F,
					4.6709167E37F,
					2.3211362E38F,
					-1.0606533E38F,
					2.118428E38F,
					1.093474E38F,
					2.7799204E38F,
					1.317727E37F,
					2.97601E37F,
					-2.0536481E38F,
					2.744659E38F,
					1.8560855E38F,
					1.3567179E38F,
					1.908831E38F,
					5.696838E37F,
					-1.514872E38F,
					8.586623E37F,
					-3.236645E37F,
					1.0016059E38F,
					1.675373E38F,
					-2.4371254E38F,
					2.4047857E38F,
					7.4525904E37F,
					-3.006297E38F,
					3.118836E38F,
					2.8791507E38F,
					1.743486E38F,
					2.3725635E38F,
					2.791602E38F,
					-2.7882005E38F,
					-3.0069774E38F,
					2.835792E38F,
					-3.2843176E38F,
					1.4043292E38F,
					-1.6001308E38F,
					-1.800263E38F,
					-1.8099548E38F,
					1.5148167E38F,
					2.07067E38F,
					-3.2427896E38F,
					2.343244E38F,
					-1.0406588E38F,
					-2.7339512E38F,
					1.5460807E38F,
					1.3679672E38F,
					1.608254E38F,
					3.1696725E38F,
					1.1777939E38F,
					1.0724485E38F,
					-7.3119177E37F,
					1.9017428E38F,
					3.2073162E38F,
					-2.0647941E38F,
					6.6338407E37F,
					-1.2154843E38F,
					2.636316E37F,
					3.8302098E37F,
					-1.36769E38F,
					-2.824601E38F,
					6.26659E37F,
					-2.551562E38F,
					-1.1677426E38F,
					-1.1879369E38F,
					-2.3153588E38F,
					1.0353539E38F,
					1.0094914E38F,
					7.32582E37F,
					3.2774267E38F,
					-1.6893968E38F,
					3.0276468E38F,
					1.3688536E37F,
					-2.1591102E38F,
					-7.7141594E37F,
					1.6093418E38F,
					-1.6272358E37F,
					-1.3093892E38F,
					3.3428666E38F,
					2.9680516E38F,
					7.7300147E37F,
					-1.9364604E38F,
					1.1166827E38F,
					-1.8589496E38F,
					9.093167E37F,
					-1.6056053E38F,
					-1.5834139E37F,
					1.7175485E38F,
					3.0241314E38F,
					-2.3734845E38F,
					-3.2955153E38F,
					-1.2864807E38F,
					3.2147593E38F,
					-1.5350587E38F,
					1.4631188E37F,
					2.9424081E38F,
					-2.2653131E38F,
					-1.7305694E38F,
					-2.6428941E38F,
					2.7879036E38F,
					1.2961058E38F,
					2.7873677E38F,
					2.1273382E38F,
					2.7030467E38F,
					6.52632E37F,
					7.8913435E37F,
					-3.4506192E37F,
					-1.1284062E38F,
					-4.9787464E37F,
					2.5717773E38F,
					2.9390593E38F,
					1.0724834E38F,
					2.1967223E38F,
					2.00669E38F,
					-2.6223296E38F,
					3.1184943E38F,
					1.3067048E38F,
					-7.379249E37F,
					-7.4183293E37F,
					-1.6241692E37F,
					-2.1348536E38F,
					-7.0070974E37F,
					-1.6991434E38F,
					2.8912624E38F);
				assert(phil_state_quaternion.pitchspeed() == 3.1938155E38F,
					-1.2184207E38F,
					-8.874856E36F,
					-8.255024E37F,
					-2.5271278E38F,
					1.3438888E38F,
					-2.846757E38F,
					9.946813E37F,
					-3.1378236E38F,
					-2.4824091E38F,
					-3.1836968E38F,
					-1.9266186E38F,
					-2.6644245E38F,
					1.4548246E38F,
					1.0620806E38F,
					-2.7608276E38F,
					2.6892062E38F,
					-1.1909912E38F,
					-1.1236579E38F,
					-3.5091697E37F,
					1.9098373E38F,
					1.9349713E38F,
					-1.4621884E38F,
					2.493033E38F,
					-1.5903086E38F,
					-2.9327137E38F,
					-2.1538378E38F,
					-1.3925798E38F,
					8.0991693E37F,
					3.381095E38F,
					-1.5456166E38F,
					-2.9531785E38F,
					2.1647627E38F,
					3.0706347E38F,
					-2.0849605E37F,
					-5.7403636E37F,
					1.1444463E38F,
					2.838543E38F,
					-1.851656E38F,
					-7.6028856E37F,
					-3.3752495E38F,
					-1.0953969E38F,
					1.6505992E38F,
					2.7677275E38F,
					8.529988E37F,
					-2.4942987E38F,
					2.0314026E38F,
					-4.427974E37F,
					-1.3196688E38F,
					-1.9650113E37F,
					8.981313E37F,
					-8.2021953E37F,
					1.5553692E38F,
					-2.2289127E38F,
					-2.6702563E38F,
					-2.0595523E38F,
					8.770552E37F,
					-2.1783054E38F,
					2.8709536E38F,
					3.303878E38F,
					-1.5932109E38F,
					2.7917274E38F,
					1.5796006E38F,
					3.2819728E38F,
					-1.3066331E38F,
					2.9247389E38F,
					-2.2821195E38F,
					1.9681436E38F,
					2.7847395E38F,
					1.894491E38F,
					-2.606918E38F,
					-4.1247185E37F,
					-8.946206E37F,
					1.3473456E38F,
					-1.2906683E38F,
					1.3279256E38F,
					2.6376944E37F,
					-1.6970961E38F,
					2.498342E38F,
					1.9674706E38F,
					-1.100277E38F,
					2.4302762E38F,
					-1.9155572E38F,
					-9.536738E37F,
					6.497075E37F,
					1.0659002E38F,
					-1.3316651E38F,
					-2.798408E38F,
					-2.8957805E38F,
					6.215109E37F,
					-2.4124738E38F,
					-2.8879725E38F,
					4.1347213E37F,
					2.9113636E38F,
					-8.635925E37F,
					-1.8026744E38F,
					-6.9046423E37F,
					1.1451004E38F,
					-1.1702866E38F,
					-5.722143E37F,
					2.3092838E38F,
					-2.8018723E38F,
					-2.0174915E38F,
					1.2309568E38F,
					-3.505006E37F,
					1.6905546E37F,
					-2.8388234E38F,
					1.5633117E38F,
					-1.6750666E38F,
					8.701653E37F,
					-1.6567955E38F,
					3.3349107E38F,
					1.1077569E38F,
					1.7432433E38F,
					-2.706301E38F,
					-1.6888943E38F,
					1.7712756E38F,
					3.0571762E37F,
					2.7685844E37F,
					2.5267122E38F,
					2.8966567E38F,
					-2.204313E38F,
					-2.9227204E38F,
					2.7409413E38F,
					1.3827596E38F,
					-1.3016931E37F,
					1.7948892E38F,
					1.6415634E38F,
					-5.8286397E37F,
					-1.2939244E38F,
					-1.7943935E38F,
					8.3795503E37F,
					-3.3474872E38F,
					-1.0806322E37F,
					6.2870896E37F,
					-1.6082102E36F,
					3.1473982E38F,
					2.4167479E38F,
					2.4123515E38F,
					-2.2397542E38F,
					4.840369E36F,
					1.3960081E38F,
					-1.8749118E38F,
					-2.8316145E37F,
					2.5470356E38F,
					3.1506103E38F,
					-2.6715436E38F,
					-2.1966316E38F,
					3.5367556E37F,
					-8.808804E37F,
					1.3028226E38F,
					-1.6067945E37F,
					5.302198E37F,
					-9.831714E37F,
					3.3641652E38F,
					-3.1251822E38F,
					-4.476696E37F,
					-1.9024793E38F,
					2.1189147E38F,
					-1.1393258E38F,
					-7.443932E37F,
					1.0070978E38F,
					-1.6563833E36F,
					3.722027E37F,
					8.895022E37F,
					-6.5149833E37F,
					-1.3581387E38F,
					-3.2796196E38F,
					-2.3893616E38F,
					-2.2226444E38F,
					-1.9128334E38F,
					-6.308717E37F,
					-2.5969445E38F,
					2.087824E38F,
					4.547332E37F,
					2.5421903E38F,
					-1.4883108E38F,
					2.5337255E38F,
					-2.7054627E38F,
					-1.2025784E38F,
					-2.5382993E38F,
					-2.539606E38F,
					-3.1334309E38F,
					-6.1846066E37F,
					-8.630734E37F,
					-1.9790383E38F,
					-1.002721E38F,
					-7.1341667E37F,
					2.4217619E38F,
					2.3541205E38F,
					-1.906462E38F,
					3.2942256E38F,
					-1.2403749E38F,
					-3.389186E38F,
					2.0640859E38F,
					6.3381303E37F,
					2.1131928E38F,
					3.2927405E38F,
					2.932482E37F,
					2.7981939E38F,
					1.9181413E38F,
					1.1025058E38F,
					-2.1551265E38F,
					-1.6996627E38F,
					2.035355E38F,
					-1.8768934E38F,
					2.1963639E38F,
					2.940809E38F,
					5.743662E37F,
					1.7718818E38F,
					-2.0967316E38F,
					1.1629197E38F,
					-2.3854651E38F,
					-1.3210902E38F,
					-3.4858133E37F,
					4.395636E37F,
					2.89436E38F,
					-1.2460183E37F,
					6.0636084E37F,
					2.7966753E38F,
					-2.8887196E38F,
					-2.406082E38F,
					1.4057459E38F,
					-3.1445588E38F,
					-3.1492355E38F,
					-3.310444E38F,
					-4.1978242E37F,
					-2.8737534E38F,
					2.2071545E38F,
					3.0054562E38F,
					-3.35381E38F,
					1.625385E38F,
					-2.2845989E38F,
					-6.9354417E37F,
					-7.5925994E37F,
					-1.6902936E37F,
					-2.7670308E38F,
					-2.4205447E38F,
					-2.2699813E38F,
					1.0252382E38F,
					-2.4493253E38F,
					-2.317853E38F,
					-3.1051008E38F,
					-1.4112365E38F,
					1.7080251E38F,
					-2.5493362E38F,
					2.5942956E38F,
					2.1551997E38F,
					-1.2555291E37F,
					3.2739263E38F,
					2.8759175E38F,
					-2.2858785E38F,
					-2.3187579E38F,
					-2.4678441E38F,
					3.1671636E38F);
				assert(phil_state_quaternion.yawspeed() == -9.747811E37F,
					5.5587873E37F,
					-8.790886E36F,
					1.3254939E38F,
					-1.7702781E38F,
					-2.6062343E38F,
					-9.650415E36F,
					3.1171806E38F,
					1.6651483E38F,
					3.041009E38F,
					-2.5408943E38F,
					1.484696E38F,
					1.2715402E38F,
					-8.585426E37F,
					3.1227084E37F,
					-1.853816E38F,
					-9.121274E37F,
					1.6307852E38F,
					-2.0923774E38F,
					1.3957535E38F,
					-1.716107E38F,
					-3.3646416E38F,
					2.8292974E38F,
					1.8682123E38F,
					2.700449E38F,
					2.2350475E38F,
					-2.3525232E38F,
					1.7297356E38F,
					1.6565076E38F,
					-3.1638573E38F,
					1.351092E38F,
					5.844603E37F,
					2.98837E38F,
					-1.2154939E38F,
					-7.905533E37F,
					1.1025056E38F,
					-1.3419943E38F,
					-8.6810285E36F,
					1.8609857E38F,
					-3.3826041E38F,
					-1.7060622E38F,
					-1.8824826E38F,
					3.1488287E38F,
					2.9500584E38F,
					1.0027612E38F,
					-3.2147696E38F,
					-2.6619087E38F,
					-9.48778E37F,
					-2.839231E38F,
					7.06339E37F,
					1.1724001E38F,
					2.8296495E38F,
					-2.9490453E38F,
					-9.542777E37F,
					-8.6971365E36F,
					1.0676469E38F,
					-9.88135E37F,
					1.940266E38F,
					-8.985722E37F,
					-2.7655796E38F,
					-2.1001965E38F,
					2.6284618E38F,
					-1.5419294E38F,
					-2.065412E38F,
					1.986897E38F,
					-3.1155272E38F,
					-1.8796036E38F,
					1.5873593E37F,
					2.5511227E38F,
					-2.703163E38F,
					1.9829159E38F,
					-1.9926153E38F,
					3.6123965E37F,
					9.652025E37F,
					1.9454603E38F,
					-1.1522896E38F,
					2.3323256E38F,
					3.6040744E37F,
					3.5550042E37F,
					-1.0013541E38F,
					-9.362929E37F,
					-8.778866E37F,
					-3.354936E38F,
					-1.0796771E38F,
					-3.6813087E36F,
					2.6746675E37F,
					2.5140719E37F,
					-1.3445534E38F,
					-2.3715038E37F,
					-3.3622292E38F,
					-1.215508E38F,
					-2.5919589E38F,
					7.8907346E37F,
					6.4823614E36F,
					2.1096649E38F,
					2.9996487E38F,
					-1.3103397E38F,
					2.2513598E38F,
					9.542463E37F,
					-4.360866E37F,
					-1.4224205E38F,
					2.8058401E38F,
					6.732982E37F,
					2.714737E38F,
					-1.7453198E38F,
					-6.593889E36F,
					2.487485E38F,
					2.4177981E38F,
					6.0518517E37F,
					4.6143826E37F,
					-1.7983265E38F,
					1.4037207E38F,
					4.913699E37F,
					-1.7384597E38F,
					-3.0087815E38F,
					2.7219261E38F,
					-1.1261989E38F,
					2.5528189E37F,
					1.7866065E38F,
					-2.1951828E38F,
					-3.2211827E38F,
					-2.5277425E37F,
					3.348972E37F,
					2.9192114E36F,
					-2.637047E38F,
					-4.9777916E37F,
					1.7038297E38F,
					2.8602712E38F,
					-3.0204968E38F,
					2.5169282E38F,
					-2.0380982E38F,
					-1.6312873E38F,
					2.6098494E38F,
					-1.8692695E38F,
					2.572942E38F,
					-2.3146308E38F,
					-1.2390538E38F,
					1.0467096E38F,
					-1.9002056E38F,
					4.7204464E37F,
					-2.5946763E38F,
					-1.77684E38F,
					2.1928587E38F,
					-2.667858E37F,
					-2.295575E38F,
					-3.3407676E38F,
					-3.1570607E38F,
					-1.045147E38F,
					-2.4665312E37F,
					2.4618237E38F,
					-1.9599953E38F,
					2.4999542E38F,
					-2.7625803E37F,
					-2.9486563E38F,
					-2.439199E38F,
					-1.5335637E38F,
					-8.862681E37F,
					1.0938783E38F,
					1.6832519E38F,
					-5.143266E37F,
					-6.2604953E37F,
					-3.35288E38F,
					-4.716942E37F,
					-5.6841904E37F,
					8.710988E37F,
					-1.3411791E38F,
					-5.3294374E37F,
					2.7902633E38F,
					2.2121158E38F,
					-1.2761105E38F,
					-3.165637E38F,
					-3.2379891E38F,
					2.738272E38F,
					-1.1052628E38F,
					1.2640676E37F,
					2.3313433E38F,
					-1.4125996E38F,
					5.6726426E37F,
					2.3886567E38F,
					1.916209E38F,
					-6.505959E37F,
					-1.1781875E38F,
					2.890887E38F,
					-1.5992961E38F,
					-3.026275E38F,
					7.483773E37F,
					2.2755825E38F,
					-2.7767947E37F,
					2.7145575E38F,
					-2.3101748E37F,
					-2.6419891E38F,
					-1.4964118E38F,
					-3.3720467E38F,
					3.8049978E37F,
					-2.9394633E38F,
					2.593968E38F,
					-3.0794432E38F,
					-2.3562418E38F,
					2.3316484E38F,
					-1.4650092E38F,
					-3.0763953E38F,
					7.7319755E37F,
					-5.078351E37F,
					-1.5378493E38F,
					1.6205947E38F,
					-1.0720253E38F,
					-1.8310878E38F,
					-1.6233635E38F,
					-2.6995887E38F,
					1.0785309E38F,
					1.7205242E38F,
					-2.4865822E38F,
					-2.5179007E37F,
					-1.7812292E38F,
					1.5622608E38F,
					-2.7782188E38F,
					9.082201E37F,
					1.066103E38F,
					-2.9602524E38F,
					-1.5430984E38F,
					-1.3795367E38F,
					3.1552012E38F,
					2.7094707E38F,
					3.3054874E38F,
					-1.5420402E38F,
					8.353708E37F,
					-2.7421071E38F,
					6.6385736E37F,
					-1.6064355E38F,
					2.8546607E38F,
					1.8572941E38F,
					1.2950808E38F,
					-2.1494417E38F,
					-8.4689975E36F,
					3.2932222E38F,
					-1.6266317E38F,
					-2.3742177E38F,
					2.6246858E38F,
					-2.5452885E38F,
					3.0943434E38F,
					3.3038877E38F,
					-1.7375389E38F,
					-8.606396E37F,
					4.5481483E37F,
					2.4666882E38F,
					-1.1245481E38F,
					-1.9723355E38F,
					2.2895092E38F,
					-2.20886E38F,
					-4.4980863E37F,
					-3.0112401E38F,
					9.96623E37F,
					-5.102489E37F,
					3.007254E38F,
					-2.740366E38F);
				assert(phil_state_quaternion.lat() == -19155798,
					-2065159503,
					901789884,
					1473609914,
					603934060,
					-1135821739,
					788342203,
					270306740,
					-1035239868,
					-1974300517,
					987460104,
					-1225899572,
					1959949459,
					-1300115309,
					992596028,
					1608201820,
					-1806815017,
					457862981,
					-759427472,
					7208637,
					-1732621248,
					1629883052,
					-913536800,
					21988426,
					-1936556408,
					681858918,
					-968032838,
					1873050879,
					-1581150360,
					-95578579,
					-1995942167,
					-2041845355,
					871726032,
					879613677,
					1443773799,
					908546516,
					-1013627566,
					1582816714,
					1398903318,
					1176402271,
					1935169719,
					-1662698376,
					-1860667021,
					-529198248,
					16601969,
					158824228,
					1993873416,
					1690194139,
					-1231083869,
					1827005782,
					1036227378,
					234143786,
					1842546357,
					1041940069,
					1245735218,
					1638811156,
					2067528042,
					866739265,
					913151148,
					-1312276421,
					83892577,
					-379271884,
					1654760546,
					-1553527263,
					1997639699,
					1431645184,
					1634688016,
					-984500179,
					1673594107,
					-52785888,
					-85262671,
					-1975064086,
					-1814475518,
					851989663,
					1557936106,
					-1409539558,
					1355646077,
					711559428,
					-1280211956,
					2113530682,
					1321476867,
					1381849596,
					-13349008,
					-375916074,
					-901345669,
					946138951,
					423498050,
					-279323251,
					-1081509836,
					-902155677,
					1480260115,
					1153471711,
					-1226165184,
					-1717262403,
					1434724564,
					-1642854539,
					-44927128,
					-1821875847,
					-509802870,
					224607107,
					-642004764,
					238303074,
					1384279253,
					1271028299,
					-901655277,
					-1206416136,
					-1635493318,
					1671514006,
					-1632974841,
					287622959,
					-1405730105,
					-758262637,
					96669537,
					1711888284,
					1955154531,
					675724375,
					760075884,
					1136126481,
					-658975733,
					584850200,
					-211727107,
					-1104252210,
					1680694204,
					-325681573,
					-2020159382,
					-1712254668,
					-1684878675,
					-98073183,
					1478015928,
					-1984882574,
					1219654038,
					-1788752946,
					-411748903,
					-1773208039,
					-1270081625,
					1281819409,
					-1644607027,
					-875539884,
					1100484146,
					-483055613,
					-12205795,
					1181726929,
					1336184034,
					340141743,
					-686946821,
					1393929704,
					1215124939,
					1965843391,
					-1920580340,
					293253155,
					-999553794,
					1351984031,
					-1761150704,
					13626763,
					-1684574653,
					1181596814,
					-1435735371,
					-258072857,
					1223429389,
					2045939896,
					1578988523,
					638285923,
					-506245347,
					460839426,
					-117000839,
					517020209,
					-1936668889,
					78501678,
					-1065072704,
					159812566,
					643805533,
					-2116404778,
					-866629400,
					1258436191,
					1285679251,
					-2139088763,
					-197427531,
					-1294627832,
					-724159041,
					-1674013971,
					709279055,
					848287515,
					-40687627,
					-386204270,
					-302524960,
					-555829432,
					1986160599,
					-996782218,
					1289960873,
					2125254998,
					-637606889,
					1157847950,
					-439857590,
					-2034969130,
					565039915,
					-1764854434,
					-683343985,
					1723252935,
					1384472122,
					-1705931748,
					1623070981,
					-360814061,
					-365880426,
					1040388136,
					1668836411,
					-431153728,
					41254824,
					1250070609,
					1245325484,
					495124606,
					519300847,
					-100690927,
					-2027523289,
					-1814534997,
					-1508874352,
					33720747,
					384880644,
					-1552708272,
					1871676909,
					1706116233,
					340411674,
					-214759946,
					2041406196,
					1668643224,
					2118409038,
					1575239835,
					258310294,
					1036139216,
					529358469,
					-1914561261,
					-1723581387,
					-1515811822,
					1979383630,
					-503478250,
					-2027164945,
					1616092826,
					-400544420,
					1526467697,
					1689512336,
					-68552260,
					-893958429,
					1055416252,
					1076835851,
					41212471,
					962359680,
					-94551713,
					802325406,
					-1677503267,
					-1543032857,
					961970509,
					1739099244,
					-1675749114,
					1215680763,
					1492718442,
					2030552517);
				assert(phil_state_quaternion.lon() == 1385688383,
					-475700612,
					-1370134713,
					-1588610767,
					-1342955504,
					-419265839,
					-276120515,
					-1766595336,
					-989136284,
					1202019549,
					1207067766,
					1406638677,
					1160810025,
					1272375585,
					1170808092,
					1254503725,
					1663065060,
					1099657764,
					721696172,
					-1679319351,
					1441031311,
					754883266,
					-1013793440,
					1177725140,
					2059006348,
					540848079,
					-1875161060,
					1714611333,
					983486133,
					-301180223,
					-1420632203,
					-1763850515,
					-1511950210,
					2135353159,
					-356344159,
					-496855261,
					1855128984,
					-1610662570,
					-1824123034,
					369247566,
					-13095367,
					-1349122444,
					1551290495,
					1405339365,
					59625346,
					1993705330,
					779396476,
					545328065,
					-817183246,
					-911702605,
					-1574210466,
					-558282766,
					-1810382993,
					99728201,
					289709152,
					2072873486,
					-263821773,
					1087689245,
					545623220,
					1562956833,
					-1869560259,
					-1183116281,
					1375941818,
					1057513243,
					-1520462695,
					-1269739895,
					3479472,
					419359275,
					2131301012,
					410626330,
					-1978872357,
					1589790504,
					414026400,
					-819783963,
					694387435,
					-11845265,
					-1375693870,
					48965675,
					-1061553877,
					949634372,
					-544387427,
					-1271117325,
					-1673540883,
					1193896279,
					622036772,
					1631780585,
					1438925458,
					-612732308,
					-1753200800,
					-687539565,
					-2007285337,
					-875090058,
					1428739802,
					61324434,
					-1094977902,
					1052457204,
					171436226,
					-227346902,
					536298660,
					1250579634,
					-252203248,
					-1858015490,
					-1642884172,
					-737127293,
					1448427661,
					95734029,
					-668703556,
					-948812914,
					1543705868,
					-1195474957,
					-956706314,
					-630140673,
					-1251783413,
					-841707884,
					-755182350,
					1680160799,
					-794800157,
					-1879127528,
					-452403012,
					-977642731,
					310140487,
					-1637209260,
					-1190293864,
					2075822220,
					-134445501,
					-1702114773,
					-701363364,
					-884339936,
					1487925275,
					540240273,
					670564990,
					351509469,
					-541556044,
					-1872255759,
					-332524012,
					-107102372,
					2092138909,
					-2055805525,
					-989638038,
					-1706092168,
					-2098390093,
					-355151573,
					-702387654,
					1294800698,
					-1863601069,
					-164086511,
					603322578,
					-1615755237,
					2029345932,
					1876911018,
					793746283,
					338708280,
					-1801997601,
					-1475934469,
					-2137641120,
					-1116765045,
					1971957790,
					-1476906695,
					687769450,
					-1474772595,
					-1210265912,
					-1718567118,
					-2127159242,
					1754670100,
					542722527,
					1542627435,
					551481911,
					-1866106459,
					1485077015,
					1158338353,
					1934048359,
					533971945,
					518903596,
					-1589364645,
					39756384,
					-89610401,
					2042006567,
					1099522258,
					459695834,
					-36823671,
					-678361543,
					320067678,
					-1655441792,
					4853173,
					472781874,
					-849589477,
					1971811068,
					-1450682158,
					346916198,
					-780926204,
					-1496399030,
					-771899558,
					1437296152,
					-2061980196,
					322140497,
					-58321070,
					-1524746610,
					2022041628,
					-1335108681,
					272585510,
					75700490,
					901534139,
					-1092043194,
					-1915290762,
					1046289970,
					-1701408136,
					-602004337,
					-1699448576,
					902918098,
					343033308,
					251076866,
					1435142365,
					2069104355,
					-148645893,
					-321070380,
					469135328,
					646736794,
					-91559473,
					1460088827,
					1900633198,
					-556644980,
					-1910812463,
					401828879,
					-1351373884,
					-1120901212,
					1918944261,
					-1295941354,
					-1318044554,
					536603520,
					957453031,
					-1106155874,
					919582154,
					-1893046545,
					-1842246553,
					1652162537,
					-165492489,
					53039253,
					-348182654,
					171201622,
					-869548814,
					-976086179,
					-584977303,
					-1739236726,
					1048219099,
					-761391851,
					386235826,
					612669312,
					-1399431824,
					-1323530891,
					-2110814977,
					711791738,
					-1939110736,
					522005067,
					696936844,
					2054260367);
				assert(phil_state_quaternion.alt() == -503771989,
					763319325,
					-1950464946,
					2058304466,
					2125929656,
					115621097,
					-390684127,
					-1604853454,
					2032661595,
					-1168561885,
					-1098256727,
					2014825513,
					935809677,
					-1328450675,
					-1493943057,
					829623847,
					-1756901078,
					-1902050456,
					-575626322,
					657319759,
					-252741650,
					-1256869269,
					1317495931,
					-1213044476,
					-707714508,
					-788917881,
					783482725,
					1695027424,
					1519465870,
					1701126103,
					1355427341,
					-1475751742,
					-1375847379,
					1690613440,
					-1694639867,
					1030589745,
					1145591274,
					-1278322221,
					188337092,
					-1502216528,
					-644663779,
					441451211,
					-1089146090,
					1358500344,
					-266809582,
					-2131585604,
					1183331966,
					1892725257,
					-863919348,
					-1650423757,
					-732567371,
					-1571416583,
					917103260,
					1886259367,
					949366153,
					-1916560950,
					-440508932,
					1652340986,
					1012548996,
					1060183852,
					1401494373,
					2042188722,
					237058714,
					1047479033,
					1195752382,
					1133512289,
					-920331011,
					-1271644065,
					-386202888,
					432412623,
					125788113,
					328069970,
					-967456653,
					-851976154,
					-1640582165,
					1706429564,
					327832514,
					-122752471,
					784423590,
					-1859786660,
					-1630369622,
					-1903995655,
					-711471498,
					1848098958,
					608078130,
					-1532736046,
					564780719,
					1616019061,
					66544790,
					1617343798,
					1510215326,
					-1244133376,
					127332554,
					-731991088,
					1947004091,
					1013666688,
					-1712055120,
					712606266,
					899767690,
					-1130016956,
					-356828551,
					-887554187,
					1807149145,
					894991967,
					1723553801,
					-327883018,
					-1687224100,
					-400752839,
					1806168948,
					285180518,
					1928183690,
					537760355,
					1055723256,
					389001908,
					-342564336,
					-1072678189,
					-1365945897,
					-1815652677,
					709040807,
					1045757844,
					-124325112,
					585960739,
					827157914,
					-26327251,
					-1768096687,
					-2124682452,
					-1504015764,
					-1556814607,
					-1201534148,
					561332398,
					1630935236,
					-1190662487,
					-988254946,
					967005574,
					-1605547305,
					1653943400,
					-2121556217,
					690939591,
					-866241144,
					-1403727043,
					1137746376,
					42009705,
					-758646530,
					-889752941,
					1691515324,
					-1544549046,
					-1228204569,
					1547997961,
					1558648201,
					294298264,
					-1495957603,
					991362554,
					1735443365,
					1343209575,
					219566463,
					-420751712,
					1421574932,
					842714593,
					347702987,
					-1269739635,
					-1351132029,
					2052663437,
					1652222019,
					969713143,
					-236059333,
					953663450,
					183435276,
					-98255279,
					-542810665,
					1757237342,
					747345612,
					1698721111,
					410663047,
					2014951590,
					2003547489,
					2095696842,
					816961353,
					-320993556,
					-109116329,
					-599057662,
					-1282237520,
					1918370312,
					-254803381,
					1335796347,
					1123625083,
					1907515415,
					1104518376,
					1501147969,
					-109374609,
					-19600717,
					693903236,
					-622760775,
					-502373529,
					687682507,
					-988929775,
					-39303393,
					805945437,
					1334170719,
					-778173685,
					-205845546,
					-2139885997,
					-1635166163,
					-162093070,
					-649759665,
					-828371346,
					-1409731915,
					208596363,
					1188351437,
					-309145207,
					-137559838,
					-389195325,
					-1464622293,
					1481292780,
					1456902955,
					-1749509484,
					-338430030,
					-2108449416,
					-1028593569,
					63228173,
					-1997876874,
					-1534840476,
					1780054883,
					-1431495046,
					1398496726,
					-1364962486,
					1742151941,
					-407912281,
					1075320170,
					486827495,
					1539128582,
					-463249313,
					-901443369,
					1804504710,
					337200475,
					-1288968253,
					-379006773,
					-1092246178,
					-936501357,
					-1938951336,
					344137455,
					839777524,
					157456436,
					-20739761,
					-782138648,
					605437046,
					-2106353256,
					-2107345273,
					-1231291280,
					-1247137715,
					-1143193462,
					-381525073,
					1786558161,
					-167011571,
					77583016,
					1146209579);
				assert(phil_state_quaternion.vx() == 16893,
					13275,
					-31055,
					22900,
					13785,
					16049,
					-29008,
					15863,
					-13118,
					12303,
					-28411,
					-31544,
					-5681,
					12431,
					20429,
					28865,
					18998,
					16751,
					-17229,
					-16953,
					9402,
					11133,
					-12132,
					17604,
					19387,
					8675,
					-5209,
					-15680,
					21604,
					3065,
					-7392,
					25045,
					1289,
					26879,
					-21172,
					-31280,
					-14882,
					18083,
					16533,
					-5218,
					4071,
					-24395,
					-18065,
					16711,
					-21365,
					7163,
					14757,
					-8777,
					23882,
					8822,
					11536,
					-13592,
					-22501,
					24698,
					20899,
					-11081,
					17757,
					24305,
					13367,
					-25407,
					29647,
					11239,
					26284,
					9484,
					-30903,
					-11049,
					-31538,
					-20788,
					32267,
					-25683,
					-17762,
					11098,
					5430,
					25714,
					30588,
					28335,
					6958,
					20130,
					23650,
					10026,
					4193,
					-21458,
					-16330,
					17554,
					19129,
					-20240,
					28350,
					28624,
					18251,
					11575,
					-26028,
					18233,
					32000,
					21931,
					-548,
					-24988,
					3530,
					11091,
					24426,
					28392,
					21959,
					30026,
					-31760,
					18948,
					17583,
					-20305,
					5223,
					-20230,
					-9197,
					15231,
					3606,
					291,
					-22093,
					26861,
					21927,
					4175,
					5615,
					-16382,
					-12307,
					-24253,
					15824,
					-21649,
					-8532,
					-21687,
					1806,
					-28854,
					20935,
					-8761,
					-2307,
					-31320,
					-19465,
					14175,
					20526,
					29295,
					31399,
					4591,
					23049,
					-21431,
					-5192,
					-11704,
					12811,
					11683,
					29071,
					-474,
					9968,
					-24982,
					19150,
					21890,
					15375,
					12783,
					9233,
					-431,
					-7214,
					-4692,
					-17026,
					-5943,
					-5220,
					3491,
					9128,
					14328,
					-13926,
					-19962,
					6006,
					-25376,
					25476,
					-9846,
					-9846,
					29230,
					-20256,
					-8215,
					14056,
					15761,
					-22616,
					4058,
					14381,
					6502,
					30337,
					-6348,
					-11936,
					3689,
					-23030,
					-2546,
					27656,
					-12570,
					2038,
					-5735,
					-23069,
					-1284,
					-24839,
					-22152,
					3734,
					-26852,
					-23242,
					-13108,
					10778,
					24141,
					-14257,
					17686,
					31633,
					2913,
					-5497,
					2131,
					-26333,
					-2527,
					-31939,
					31204,
					-19357,
					-6912,
					-3767,
					-18421,
					12457,
					-26465,
					-22832,
					-2153,
					-201,
					-21773,
					32386,
					-25038,
					-2844,
					-17030,
					-12553,
					-25008,
					16400,
					31622,
					2157,
					15209,
					16471,
					-23700,
					10567,
					-27277,
					14259,
					21105,
					25789,
					12938,
					5580,
					18448,
					-28710,
					-24474,
					12185,
					-4693,
					27086,
					32535,
					17320,
					-28174,
					-292,
					12940,
					-6750,
					-22811,
					-6153,
					-17773,
					-31223,
					9925,
					-25627,
					-8849,
					11118);
				assert(phil_state_quaternion.vy() == 21027,
					24749,
					6007,
					-9559,
					14915,
					24002,
					-21491,
					4970,
					16730,
					4278,
					-29400,
					20218,
					427,
					13559,
					31142,
					-17283,
					8155,
					15712,
					-27498,
					9606,
					31062,
					-13726,
					-138,
					-12275,
					7710,
					-23944,
					-13174,
					5769,
					-10252,
					22978,
					7554,
					-1402,
					32228,
					-23122,
					12124,
					-32396,
					2925,
					12756,
					-12550,
					-20696,
					-21619,
					6754,
					-25181,
					-76,
					17790,
					8204,
					21574,
					334,
					3427,
					-19286,
					-14832,
					-24387,
					29287,
					21373,
					-3127,
					31281,
					19772,
					-2977,
					24460,
					20584,
					-28203,
					-17819,
					-416,
					-20529,
					9709,
					-6531,
					-1281,
					8224,
					12230,
					20383,
					-13679,
					-23832,
					17445,
					-18934,
					21391,
					13839,
					19934,
					9177,
					11396,
					-23,
					18594,
					22369,
					-26013,
					29550,
					-14096,
					-3859,
					-20396,
					5849,
					5877,
					23945,
					-26330,
					30555,
					-17664,
					24851,
					32148,
					-32353,
					31974,
					-17728,
					12687,
					1881,
					31323,
					-6334,
					-32667,
					31810,
					-5529,
					12786,
					22398,
					-8875,
					13901,
					6299,
					-9976,
					24134,
					22980,
					20701,
					12452,
					-756,
					-20435,
					30194,
					-11756,
					-1576,
					-1803,
					16522,
					-19966,
					-25714,
					-12521,
					30383,
					-24384,
					31897,
					-28016,
					-22570,
					25371,
					9590,
					12975,
					-3787,
					-18503,
					6643,
					6835,
					27754,
					-10217,
					24398,
					-23972,
					26203,
					-21466,
					-17748,
					-15492,
					14784,
					-26744,
					-29407,
					-4988,
					-15653,
					29559,
					3286,
					28403,
					18076,
					19080,
					8748,
					-21778,
					17158,
					13792,
					-9498,
					-30134,
					-17327,
					11107,
					24432,
					26899,
					20460,
					-16307,
					-16523,
					12978,
					-24792,
					-830,
					-24507,
					32346,
					25173,
					-906,
					9174,
					-18245,
					16761,
					21288,
					-25420,
					20113,
					-3744,
					17140,
					-18912,
					-26664,
					10796,
					-9665,
					-9378,
					9020,
					28110,
					-5014,
					9694,
					24774,
					21200,
					9375,
					-22303,
					10536,
					10062,
					13937,
					5887,
					-13766,
					-29458,
					25897,
					-2087,
					6552,
					5912,
					-13954,
					-7563,
					31279,
					-18896,
					17866,
					-28928,
					-421,
					21988,
					16055,
					-21371,
					29893,
					31262,
					3066,
					13261,
					-28917,
					-32218,
					-6456,
					16346,
					13588,
					26086,
					-15564,
					16575,
					488,
					-14033,
					-6739,
					31304,
					28204,
					32439,
					27384,
					-23041,
					-7911,
					14906,
					-16498,
					24818,
					-27353,
					15932,
					-12168,
					-8676,
					7116,
					26967,
					4930,
					-27921,
					12836,
					21291,
					8295,
					10560,
					-8983,
					31590,
					-28219);
				assert(phil_state_quaternion.vz() == -29715,
					-12407,
					-7197,
					21138,
					31356,
					12053,
					27433,
					-23455,
					-5787,
					-5223,
					-6926,
					26503,
					-12058,
					-30723,
					-18291,
					-25891,
					-5784,
					10524,
					-32265,
					-147,
					-1317,
					-15146,
					-31269,
					-4069,
					11261,
					8825,
					-17020,
					-16416,
					-14877,
					5437,
					-4569,
					-22616,
					-22195,
					32717,
					12093,
					4114,
					-16797,
					-29610,
					-25048,
					11628,
					3686,
					-23522,
					-10687,
					-25762,
					-26628,
					-11993,
					-11885,
					21676,
					-17524,
					-2000,
					7224,
					3635,
					8108,
					-2691,
					-16037,
					9662,
					-31603,
					-23920,
					28082,
					3520,
					-13528,
					-4875,
					-1855,
					-2733,
					-3005,
					-27350,
					-18266,
					23382,
					-23,
					3643,
					22837,
					29450,
					9662,
					-27484,
					1239,
					7066,
					-2179,
					8492,
					24409,
					12401,
					6523,
					27687,
					29737,
					26181,
					24403,
					26987,
					-31046,
					13522,
					-15501,
					32448,
					-25741,
					-24738,
					-11741,
					-19526,
					6419,
					-21425,
					-14997,
					28466,
					-1860,
					12079,
					23013,
					20665,
					14885,
					25779,
					-13115,
					18929,
					3375,
					-2230,
					-11470,
					16966,
					-4952,
					15621,
					-17187,
					-6791,
					-20835,
					17739,
					25358,
					10219,
					-12031,
					-18677,
					30990,
					3336,
					-29230,
					-13021,
					-4865,
					-4667,
					-15835,
					-13210,
					-2921,
					-17082,
					21654,
					-2856,
					-1433,
					-7670,
					-7921,
					-6100,
					-26138,
					-10599,
					-16318,
					9999,
					-29644,
					7821,
					-20825,
					-1722,
					-27031,
					18423,
					31241,
					2519,
					-15048,
					-14469,
					1349,
					-32278,
					-24310,
					-8815,
					11284,
					25422,
					9386,
					-7074,
					21027,
					-30056,
					-30458,
					7743,
					18136,
					-28863,
					-13219,
					19946,
					-1162,
					-25741,
					-11234,
					-7421,
					16550,
					21143,
					31491,
					27581,
					-26751,
					-12701,
					2704,
					12544,
					-13874,
					18414,
					5043,
					19906,
					22678,
					-25202,
					1334,
					-21546,
					-11905,
					-5277,
					-19651,
					-7104,
					-8044,
					30988,
					-12381,
					-13876,
					-31990,
					-29046,
					11047,
					6438,
					-19779,
					-21012,
					-27660,
					16572,
					28753,
					-13932,
					-6728,
					5068,
					-19848,
					-28408,
					2146,
					-30847,
					-24194,
					1088,
					-1039,
					5748,
					15166,
					11678,
					202,
					20077,
					-18195,
					-248,
					24427,
					21297,
					-9849,
					-10505,
					3115,
					-8443,
					-20612,
					-21091,
					2283,
					4994,
					-13935,
					20205,
					-19282,
					25937,
					24787,
					5771,
					-326,
					31188,
					-17571,
					-11985,
					-31939,
					4806,
					13952,
					5800,
					-11882,
					13833,
					24811,
					-14099,
					13335,
					-22014,
					-5502,
					15471,
					27769,
					-445,
					-12419);
				assert(phil_state_quaternion.xacc() == 12695,
					20586,
					-31573,
					32245,
					-29323,
					22111,
					29169,
					-10633,
					22324,
					-16782,
					-24237,
					20807,
					-19092,
					22366,
					11599,
					16162,
					237,
					-23530,
					-31686,
					28139,
					-30338,
					26122,
					23726,
					20383,
					-13054,
					-31185,
					15141,
					-13956,
					-11148,
					26559,
					30844,
					-31019,
					15505,
					31676,
					-11295,
					-32720,
					-22425,
					31253,
					-28468,
					3382,
					4507,
					14374,
					-29074,
					-5931,
					29499,
					-28883,
					19621,
					27647,
					-5685,
					-27344,
					13634,
					663,
					28939,
					-17186,
					-12039,
					-16363,
					-5866,
					-26383,
					-17862,
					28031,
					14962,
					1581,
					-960,
					8834,
					-6073,
					16216,
					-14663,
					21407,
					-29617,
					9003,
					9825,
					13367,
					-30375,
					32589,
					-27905,
					1554,
					-12994,
					21507,
					14161,
					16117,
					9174,
					29672,
					-9196,
					-18872,
					-19015,
					-84,
					12501,
					-21951,
					28176,
					18081,
					12037,
					-4596,
					-26094,
					-30258,
					29594,
					-13276,
					31467,
					-29867,
					-12700,
					30766,
					-11153,
					13065,
					-1082,
					1297,
					-29600,
					-3049,
					19518,
					2248,
					7837,
					28989,
					8006,
					21439,
					-8518,
					25297,
					7350,
					8237,
					-25112,
					6187,
					24558,
					-22792,
					-17370,
					31654,
					-23886,
					10954,
					-31184,
					22736,
					-6246,
					14662,
					-6037,
					-734,
					-1504,
					-25306,
					11700,
					3026,
					-31142,
					15817,
					20448,
					23985,
					971,
					-24146,
					-17646,
					-4686,
					-10923,
					-23441,
					-2692,
					-10448,
					8055,
					-6509,
					27304,
					6787,
					29188,
					-21154,
					-26996,
					-16498,
					25329,
					14600,
					26667,
					5912,
					26473,
					-25082,
					-16059,
					24859,
					19413,
					26049,
					-21601,
					-23756,
					32616,
					-5682,
					19687,
					28323,
					-25851,
					19426,
					-32087,
					11500,
					24546,
					15630,
					-13078,
					-18166,
					22972,
					9418,
					9859,
					7411,
					-2392,
					-2167,
					30011,
					-7742,
					-25010,
					-17485,
					-19364,
					-6093,
					25280,
					-2124,
					-10637,
					-12132,
					19122,
					-22514,
					-30203,
					17532,
					7881,
					28335,
					-23844,
					30390,
					25936,
					16247,
					-15986,
					-2125,
					-7124,
					-5406,
					18816,
					28530,
					28393,
					31450,
					3391,
					11735,
					16203,
					-23315,
					-5508,
					-6819,
					2717,
					-31813,
					20956,
					9413,
					23363,
					9504,
					13094,
					12839,
					7628,
					13228,
					1357,
					-15371,
					-3674,
					13145,
					11913,
					-15053,
					11725,
					13496,
					-7820,
					20171,
					-15131,
					-18764,
					-23448,
					-7482,
					-6908,
					-17299,
					6491,
					30710,
					-14424,
					-3259,
					-19541,
					-10907,
					19522,
					-21311,
					25943,
					6249,
					25616);
				assert(phil_state_quaternion.yacc() == -20859,
					13586,
					-9610,
					29019,
					-22370,
					-4850,
					-24566,
					-3152,
					27859,
					21577,
					-14775,
					1342,
					403,
					22432,
					31740,
					2110,
					-8621,
					23868,
					19328,
					-22747,
					-19451,
					-10326,
					11709,
					10746,
					-9550,
					-101,
					21415,
					-32085,
					7687,
					9782,
					-30971,
					-27079,
					29216,
					20871,
					19133,
					-20963,
					-17242,
					5867,
					32017,
					5329,
					-31060,
					17220,
					20185,
					17972,
					-1654,
					20378,
					-15197,
					-10986,
					4536,
					13763,
					8453,
					25008,
					-8237,
					10620,
					-2740,
					-10651,
					-17946,
					-23267,
					4114,
					-15033,
					-14836,
					18357,
					-845,
					2162,
					1174,
					17944,
					-23775,
					-11001,
					-26351,
					25279,
					9572,
					-12422,
					-26976,
					29664,
					-16112,
					26348,
					-18709,
					-24247,
					-976,
					19454,
					32278,
					-2097,
					11874,
					9534,
					7919,
					23784,
					29847,
					26466,
					-13678,
					-24696,
					18289,
					13096,
					-17235,
					27417,
					1774,
					-9060,
					-17467,
					19348,
					-27168,
					15886,
					-887,
					6710,
					-11988,
					29601,
					-14042,
					-22250,
					-10106,
					16182,
					-5673,
					19638,
					-23820,
					7352,
					5636,
					23931,
					-11643,
					-2367,
					-22218,
					-6620,
					18676,
					13181,
					17488,
					6528,
					5866,
					22550,
					-11847,
					-13970,
					-15092,
					11837,
					-22108,
					1218,
					28356,
					-6059,
					11896,
					30924,
					-1091,
					10863,
					-30722,
					-14748,
					13697,
					14320,
					2699,
					-5905,
					8614,
					25498,
					14725,
					32740,
					25245,
					21194,
					-622,
					-19511,
					17025,
					-30575,
					2304,
					-13564,
					1187,
					29726,
					1369,
					-4557,
					-17502,
					19964,
					14376,
					-20014,
					9813,
					2135,
					1901,
					165,
					2461,
					-20375,
					-22834,
					16814,
					-28228,
					-15174,
					21145,
					3275,
					15770,
					-29960,
					-15989,
					14849,
					8466,
					16340,
					8102,
					-22133,
					3362,
					10913,
					-24086,
					-882,
					-2296,
					-865,
					-15984,
					-14459,
					14469,
					-31300,
					22235,
					-17524,
					7188,
					-24796,
					-29601,
					-4335,
					5294,
					27393,
					-16148,
					19438,
					16998,
					-8135,
					-30302,
					-16456,
					21103,
					21128,
					26867,
					-7056,
					1276,
					7003,
					31734,
					-27947,
					-31163,
					12743,
					14020,
					-29898,
					30237,
					-25940,
					-21332,
					29695,
					-30312,
					12807,
					30318,
					9750,
					32651,
					13255,
					-14093,
					21417,
					-4305,
					3648,
					-30967,
					-11528,
					10141,
					24711,
					-25227,
					11642,
					3421,
					16311,
					27515,
					-11686,
					-28733,
					-25805,
					-30572,
					3861,
					28214,
					29210,
					14760,
					29344,
					17114,
					-23033,
					-16764,
					-26971,
					12311);
				assert(phil_state_quaternion.zacc() == 16595,
					-1975,
					-30501,
					27743,
					28665,
					-4429,
					10951,
					-24862,
					-18561,
					24492,
					3069,
					-23131,
					14367,
					7419,
					-27028,
					14069,
					24090,
					-27993,
					-526,
					-14002,
					-5444,
					27967,
					17612,
					-3223,
					-18264,
					26663,
					-20706,
					-2056,
					-13304,
					-12388,
					9330,
					11623,
					10025,
					21684,
					-15907,
					6434,
					31004,
					-31567,
					28754,
					-4387,
					9378,
					-5124,
					30193,
					10195,
					17766,
					-15286,
					-21775,
					1570,
					-4629,
					13438,
					30891,
					29392,
					2012,
					27575,
					-11295,
					5943,
					-21694,
					29897,
					16446,
					-13180,
					-23696,
					11112,
					-4883,
					-20937,
					21271,
					-2083,
					-28534,
					-10929,
					8597,
					-18643,
					-10315,
					9369,
					14285,
					3677,
					-25269,
					-13292,
					26781,
					-29946,
					-27387,
					-8392,
					21590,
					-30665,
					4140,
					-20440,
					30085,
					-5104,
					15832,
					16928,
					-3033,
					-25035,
					-28306,
					31351,
					-9316,
					14239,
					-17427,
					-13767,
					-31827,
					-26904,
					-27094,
					4460,
					-30870,
					-3154,
					-11419,
					-1200,
					-32287,
					-5520,
					18347,
					7870,
					2328,
					30871,
					-10634,
					-28453,
					-22563,
					-25062,
					-18617,
					29018,
					-1621,
					25575,
					16374,
					12818,
					-6115,
					-30897,
					25227,
					21533,
					7221,
					-12483,
					-30522,
					-26202,
					14498,
					-16445,
					-8649,
					-28109,
					14816,
					-23805,
					-9155,
					11946,
					-7853,
					1073,
					-27354,
					-21384,
					-7238,
					8168,
					26831,
					-13783,
					4827,
					-2847,
					-25208,
					16509,
					24781,
					-13041,
					-25488,
					-32063,
					27561,
					-7219,
					2630,
					23972,
					-9195,
					18516,
					-11588,
					-11229,
					7245,
					21310,
					-7177,
					6074,
					28780,
					2553,
					14528,
					20893,
					25950,
					-6202,
					1236,
					749,
					22357,
					-1394,
					-24529,
					-11124,
					-31900,
					-25780,
					24370,
					5523,
					27303,
					28475,
					-15637,
					1843,
					-29003,
					22855,
					20479,
					16826,
					27611,
					-34,
					-2944,
					-1769,
					3729,
					31285,
					-27644,
					-1282,
					-29315,
					-22953,
					-3880,
					30985,
					630,
					-1436,
					22408,
					29487,
					28171,
					-4593,
					22236,
					13431,
					-19155,
					-20815,
					4892,
					22914,
					14259,
					-14411,
					28841,
					30747,
					-27754,
					7383,
					26046,
					-32417,
					26022,
					26463,
					-11054,
					22569,
					-26444,
					8155,
					-4300,
					-5773,
					-2833,
					-23522,
					8324,
					-2039,
					-23495,
					17543,
					30179,
					-21115,
					-31807,
					-23512,
					-15987,
					-807,
					28125,
					7911,
					-19914,
					23568,
					-5671,
					-26849,
					27146,
					3719,
					-26371,
					31371,
					-8734,
					-27699,
					-26682,
					-4043,
					-21209);
				printf("HIL_STATE_QUATERNION \n");
			}

			void fill(const com::company::demo::SENSOR_OFFSETS& psensor_offsets) {

				psensor_offsets.mag_ofs_x(32194,
					-30220,
					-23308,
					-7281,
					14179,
					13189,
					-12548,
					-1721,
					24993,
					-17212,
					-22468,
					-14537,
					-277,
					-17266,
					25361,
					-5089,
					6204,
					30556,
					-8041,
					19807,
					-2932,
					-20184,
					18616,
					-4362,
					-17515,
					-10633,
					-15962,
					27404,
					-6030,
					-20919,
					-29196,
					-11454,
					-12712,
					5181,
					-5365,
					23324,
					4138,
					-22782,
					-21640,
					-8436,
					-3754,
					-13427,
					4479,
					-1096,
					14685,
					-6781,
					-27572,
					3306,
					-1045,
					22303,
					22747,
					-25636,
					-10894,
					-985,
					25381,
					-28628,
					-17045,
					29523,
					-30232,
					-13159,
					23226,
					30082,
					-14085,
					-23582,
					-21321,
					-1387,
					11357,
					7820,
					27120,
					31852,
					-26129,
					-19062,
					30364,
					-20030,
					-6944,
					-17955,
					-27577,
					5436,
					-28870,
					29934,
					7036,
					14359,
					5209,
					13087,
					-20825,
					9939,
					-21584,
					-14828,
					14554,
					5670,
					13933,
					-30755,
					-29669,
					-22609,
					-19166,
					-26183,
					-14624,
					-3650,
					564,
					20453,
					10500,
					23752,
					-11004,
					5364,
					-18294,
					-25282,
					11293,
					-20896,
					7240,
					-11689,
					29675,
					-2449,
					-12146,
					18482,
					-12933,
					20324,
					32282,
					14256,
					-27233,
					24181,
					-164,
					-22033,
					-2466,
					1000,
					-27007,
					26683,
					10138,
					-5587,
					7374,
					16895,
					10164,
					6821,
					-12950,
					12844,
					25196,
					-7503,
					-9192,
					-12081,
					-26515,
					-31588,
					-8471,
					10969,
					-21785,
					-3174,
					-17957,
					16193,
					-8212,
					10948,
					16178,
					15450,
					17233,
					-21196,
					-30953,
					4864,
					-3547,
					17769,
					1419,
					20071,
					3527,
					4302,
					2917,
					-18240,
					10604,
					-18189,
					2300,
					-28873,
					17711,
					-13823,
					-12980,
					1573,
					2739,
					-11897,
					15560,
					31002,
					-7260,
					-11129,
					31208,
					2990,
					18950,
					-26332,
					-18487,
					-713,
					27548,
					18550,
					-30554,
					2343,
					5739,
					-9872,
					7005,
					11215,
					-3516,
					-22291,
					-5346,
					-20152,
					31588,
					25647,
					907,
					25704,
					-31809,
					3727,
					-7866,
					-28573,
					20727,
					-15015,
					-17166,
					19357,
					-13789,
					20440,
					6853,
					13274,
					32250,
					-12463,
					28813,
					-17830,
					8577,
					28584,
					25391,
					14851,
					-2467,
					-3985,
					1627,
					-30275,
					-25190,
					-31112,
					614,
					25589,
					24948,
					25159,
					4119,
					8758,
					-11803,
					-30659,
					5612,
					-20273,
					3515,
					21300,
					4705,
					2277,
					8658,
					5183,
					-16541,
					-26101,
					-31773,
					-21542,
					-24492,
					27287,
					13597,
					-6836,
					-29459,
					-9786,
					-19196,
					-18602,
					-30293,
					9438,
					-7335);
				psensor_offsets.mag_ofs_y(-12662,
					20067,
					-2478,
					-19429,
					-5825,
					8598,
					-24224,
					27971,
					9290,
					-11904,
					-16304,
					10457,
					23017,
					6003,
					2945,
					-25814,
					21779,
					-31647,
					9780,
					-25236,
					-19856,
					-21461,
					-3600,
					-1862,
					3960,
					13537,
					7150,
					21454,
					-25624,
					28467,
					-2017,
					-26703,
					-8734,
					-7325,
					10758,
					16441,
					-3755,
					-32059,
					2361,
					10979,
					-32571,
					-2224,
					8362,
					-9477,
					-10620,
					-14617,
					-7003,
					20329,
					-29320,
					-7220,
					19641,
					-1950,
					-9938,
					10995,
					11309,
					-26146,
					2604,
					-32050,
					-12557,
					23567,
					29099,
					-8654,
					-11707,
					3420,
					26028,
					-5315,
					-72,
					26859,
					9310,
					-31400,
					-26931,
					26697,
					13782,
					-25035,
					-1766,
					-16958,
					17110,
					29442,
					-797,
					1875,
					-17423,
					21410,
					10256,
					-9726,
					-30195,
					7516,
					1798,
					5471,
					21734,
					-6414,
					30410,
					-18112,
					9530,
					-27966,
					22934,
					25978,
					2277,
					31767,
					14824,
					10595,
					16282,
					31650,
					30807,
					-26821,
					15492,
					21460,
					10565,
					22303,
					-26632,
					23159,
					18054,
					16436,
					8336,
					-10321,
					12359,
					17545,
					-12325,
					15665,
					9686,
					-27448,
					-27953,
					775,
					1961,
					17854,
					-21010,
					-27316,
					6189,
					15253,
					-11329,
					-20036,
					24380,
					-6242,
					25522,
					2348,
					-32526,
					2896,
					-4423,
					22676,
					866,
					12076,
					11996,
					-554,
					12449,
					7352,
					24055,
					-12710,
					7425,
					9088,
					-23580,
					32130,
					-4749,
					-11471,
					29822,
					18276,
					19178,
					19110,
					-19114,
					-9119,
					15348,
					-31912,
					-13718,
					9619,
					-23035,
					-16898,
					11915,
					15587,
					31492,
					2459,
					12367,
					-32176,
					27584,
					32729,
					27633,
					25513,
					-25754,
					-22109,
					6438,
					3843,
					22249,
					-27021,
					12932,
					-4062,
					-19910,
					-27787,
					13646,
					-16635,
					-409,
					-2530,
					10451,
					-5523,
					-12419,
					-1690,
					21105,
					19931,
					19601,
					-12523,
					-18356,
					30426,
					-30912,
					-22994,
					1014,
					2301,
					10350,
					27978,
					-9811,
					-25169,
					20224,
					-29421,
					-32688,
					-26064,
					-20842,
					-2770,
					10741,
					28532,
					12052,
					24344,
					-29034,
					-8516,
					29965,
					-31519,
					7887,
					29946,
					15768,
					12002,
					-22339,
					20658,
					27924,
					-17308,
					11105,
					25609,
					16869,
					-25328,
					25724,
					25605,
					-24490,
					28400,
					-1662,
					-6418,
					-26658,
					30331,
					20161,
					-18283,
					455,
					27310,
					-15077,
					-16224,
					31317,
					26424,
					28604,
					-759,
					-12907,
					28763,
					-28457,
					21678,
					11834);
				psensor_offsets.mag_ofs_z(15502,
					7375,
					22060,
					29879,
					-8251,
					-16836,
					13523,
					11050,
					-18593,
					17538,
					-967,
					31331,
					12909,
					31847,
					18745,
					-892,
					9922,
					11645,
					29146,
					9195,
					6469,
					24736,
					-29994,
					-28321,
					-13845,
					23771,
					-19660,
					1923,
					-9504,
					2874,
					-7920,
					-18710,
					17889,
					16437,
					21720,
					18484,
					4884,
					-19922,
					2662,
					-15172,
					-23774,
					21588,
					32363,
					8197,
					-11485,
					5929,
					15762,
					23421,
					10307,
					-31301,
					-23947,
					-3199,
					-29837,
					7457,
					-708,
					22324,
					-16860,
					-13206,
					664,
					-16615,
					9428,
					24365,
					12650,
					-16477,
					-25489,
					11564,
					-24209,
					-22255,
					-7801,
					-12474,
					-29327,
					4358,
					13761,
					-1178,
					32007,
					8160,
					269,
					-13777,
					-32126,
					14400,
					23754,
					9327,
					-25296,
					-5793,
					4389,
					686,
					-11252,
					24484,
					-15690,
					9796,
					-19150,
					-30515,
					-18582,
					-13496,
					28717,
					-2466,
					-21701,
					26252,
					15733,
					25964,
					191,
					3994,
					-30045,
					-21741,
					-15828,
					-32007,
					-27334,
					15922,
					32143,
					-26110,
					-175,
					-1213,
					-2233,
					26540,
					-10672,
					-27289,
					-14828,
					-12342,
					10974,
					8946,
					-5333,
					-1364,
					-22160,
					29911,
					24565,
					22536,
					27322,
					14527,
					-18619,
					8937,
					-2197,
					11193,
					13478,
					-9646,
					-31223,
					21722,
					6268,
					-25255,
					20706,
					-29701,
					7430,
					1941,
					14246,
					-12485,
					16205,
					-10517,
					-24763,
					16291,
					16070,
					14837,
					-17115,
					-3368,
					11050,
					-20563,
					-7180,
					9247,
					29921,
					-12179,
					5002,
					-15406,
					-20109,
					14673,
					-23552,
					-4625,
					-1609,
					11295,
					-15315,
					22613,
					26810,
					-31830,
					-13975,
					12674,
					21139,
					32437,
					13967,
					4271,
					10357,
					-24753,
					15947,
					12921,
					535,
					26796,
					-20429,
					11204,
					-28914,
					22025,
					7085,
					1278,
					23180,
					8990,
					8946,
					-29727,
					-13020,
					-19268,
					-12428,
					-29270,
					2993,
					29764,
					8519,
					8873,
					-31534,
					2838,
					-14277,
					21264,
					18499,
					-12737,
					-3336,
					-1807,
					-30507,
					30262,
					21916,
					9771,
					-20140,
					23386,
					19343,
					-8053,
					21841,
					27082,
					31646,
					-23724,
					-25567,
					-15311,
					19476,
					-6393,
					24258,
					823,
					9286,
					5628,
					23162,
					25519,
					-17266,
					-8801,
					17094,
					-8851,
					27974,
					-20813,
					-16789,
					-7229,
					11848,
					-139,
					9141,
					-22528,
					25763,
					1455,
					-5820,
					30892,
					26683,
					22833,
					29446,
					-24344,
					-24967,
					-31228,
					6605,
					-5931,
					24026);
				psensor_offsets.mag_declination(7.198383E37F,
					-1.4813208E37F,
					-1.4265554E38F,
					-3.0000785E38F,
					-2.5853919E38F,
					1.372009E38F,
					1.3901975E38F,
					-6.8527767E37F,
					2.1877725E38F,
					-9.665435E37F,
					2.5875487E37F,
					1.8808134E38F,
					3.3941485E38F,
					3.3166104E38F,
					2.9449714E38F,
					2.2990683E38F,
					2.3260511E37F,
					-2.7537E38F,
					2.6084984E38F,
					-6.6864655E37F,
					-2.5178176E38F,
					-2.2782192E38F,
					-2.4901313E38F,
					1.6240125E38F,
					3.3962672E38F,
					2.2884677E38F,
					1.1112191E38F,
					-2.0131407E38F,
					1.6397333E38F,
					-1.0714464E38F,
					2.86375E38F,
					-1.818125E38F,
					-2.8135834E38F,
					1.2262275E38F,
					-5.67645E37F,
					1.9047886E38F,
					-7.6026185E36F,
					7.3894406E37F,
					-2.515577E38F,
					-2.4722811E38F,
					-1.497269E38F,
					-1.9097424E38F,
					-3.1027105E38F,
					2.988242E38F,
					-2.8688065E38F,
					3.3944767E37F,
					3.1455312E38F,
					2.6401286E38F,
					-3.102474E38F,
					-2.1465077E38F,
					1.4651665E37F,
					-2.0512998E38F,
					2.7297768E37F,
					-2.0520205E38F,
					-2.857369E37F,
					-3.2596077E38F,
					-4.8132303E37F,
					-1.6531246E38F,
					-2.313047E38F,
					-1.966796E38F,
					4.755851E37F,
					1.3729712E38F,
					-2.821254E38F,
					-2.1506538E38F,
					7.0291773E37F,
					-2.7459496E36F,
					2.512205E38F,
					7.1345186E37F,
					4.3660184E37F,
					1.21036246E36F,
					1.63112E38F,
					-5.6817596E37F,
					-2.4585426E38F,
					2.907386E38F,
					2.3904615E38F,
					-7.2302247E37F,
					-9.067494E36F,
					2.5843901E38F,
					-1.2098209E38F,
					1.6503697E38F,
					2.8930324E38F,
					-1.7870365E38F,
					2.3064643E38F,
					2.6551627E38F,
					8.922532E37F,
					-8.400737E37F,
					-1.7136734E38F,
					1.3201361E38F,
					-1.5426128E38F,
					-1.6569804E38F,
					1.613539E38F,
					2.5224862E38F,
					-2.4726843E38F,
					1.3080874E38F,
					7.3908893E37F,
					2.2103409E38F,
					2.034061E38F,
					-1.2658558E38F,
					-1.287881E38F,
					2.7084373E38F,
					-1.1287353E38F,
					-9.220417E37F,
					2.211772E38F,
					3.9394473E37F,
					-2.9202751E38F,
					-3.3958163E38F,
					-2.6876002E38F,
					-3.652812E37F,
					1.580534E37F,
					-2.5527088E38F,
					-1.0105331E38F,
					1.395134E38F,
					1.3148635E38F,
					3.043749E38F,
					-9.01426E35F,
					-9.88604E37F,
					1.5635424E36F,
					1.7566473E38F,
					-1.2054751E38F,
					7.5126304E37F,
					-1.3411279E38F,
					2.7181796E38F,
					4.800982E37F,
					2.1710632E38F,
					-2.8548566E38F,
					1.9531606E38F,
					1.0160972E38F,
					-1.8453238E38F,
					3.1374176E38F,
					2.532824E38F,
					-1.3926826E38F,
					3.3547387E38F,
					2.5995252E38F,
					-4.1899343E37F,
					-1.1880046E38F,
					8.112593E37F,
					1.1695017E38F,
					2.7586036E38F,
					1.0874061E38F,
					-1.9521073E38F,
					-2.8592125E38F,
					-3.4010845E38F,
					-2.9533535E38F,
					8.577617E37F,
					2.030488E38F,
					-2.65988E38F,
					-1.2262938E38F,
					-3.1220214E38F,
					-1.3800497E38F,
					2.8569549E38F,
					2.6273943E38F,
					-3.2395468E38F,
					5.6460367E37F,
					-6.032784E37F,
					-8.126974E37F,
					5.0634255E37F,
					7.5971563E37F,
					-8.176748E37F,
					2.8250829E38F,
					-1.1671883E37F,
					7.483214E37F,
					-3.189614E38F,
					-1.2234118E38F,
					-2.4330146E38F,
					-3.0801413E38F,
					-3.0509571E38F,
					1.5098964E38F,
					-5.67014E37F,
					3.3171857E38F,
					2.4383916E37F,
					1.7935327E38F,
					2.4193872E38F,
					2.6607213E38F,
					-1.754119E38F,
					1.5369822E37F,
					2.3983826E38F,
					1.5707788E38F,
					-2.7927706E38F,
					-1.0326924E38F,
					2.076078E38F,
					1.3969082E38F,
					-1.4280363E38F,
					-2.5942346E38F,
					2.822498E38F,
					3.365957E38F,
					2.392918E38F,
					-2.756443E38F,
					-3.2779163E38F,
					-1.5445455E38F,
					-1.3636837E38F,
					-2.311294E38F,
					-3.3808373E38F,
					9.547489E36F,
					2.6600147E37F,
					8.598774E37F,
					-2.095681E38F,
					2.0571429E37F,
					-2.3614144E38F,
					-2.1576473E37F,
					-2.223223E38F,
					-2.6217613E38F,
					1.6747686E38F,
					1.1050709E38F,
					-1.012315E38F,
					3.3281655E38F,
					6.3270896E37F,
					2.2152217E38F,
					-6.608296E37F,
					-2.1709456E38F,
					3.277117E38F,
					1.5465936E38F,
					-1.4382256E38F,
					-1.3730801E38F,
					-1.2503492E38F,
					4.183124E37F,
					1.186128E38F,
					-1.9366766E38F,
					-2.0853442E37F,
					3.2028367E38F,
					5.367055E37F,
					2.778868E38F,
					1.265577E38F,
					-1.3554033E38F,
					-1.9725465E38F,
					2.0537088E38F,
					4.0239558E37F,
					1.1125782E38F,
					1.3494614E38F,
					-9.978574E37F,
					2.2055622E37F,
					-2.6627074E37F,
					1.4173725E38F,
					-1.5410342E38F,
					-4.398494E37F,
					5.0795267E37F,
					2.7454505E38F,
					-1.2476296E37F,
					1.4497054E38F,
					2.4809667E37F,
					1.3848134E38F,
					2.6928118E38F,
					-2.611067E38F,
					-1.1006076E38F,
					-2.486357E37F,
					-1.8709697E38F,
					-3.3096852E38F,
					2.3522744E38F,
					1.9589195E38F,
					-8.694715E37F,
					5.750006E37F,
					4.8366945E37F,
					-3.2296594E38F,
					-1.0934537E37F,
					3.0707637E38F,
					-6.399483E37F);
				psensor_offsets.raw_press(-593464035,
					338505746,
					374863513,
					228593385,
					-2030424896,
					264001654,
					-932280958,
					92855923,
					-662608414,
					32136761,
					1587146593,
					-1163881957,
					-894515769,
					-826067977,
					1106091899,
					-1553256797,
					1250413612,
					882398503,
					-1660024010,
					38044985,
					-153732318,
					1591994310,
					1686352152,
					1829673253,
					1321812524,
					1703484130,
					1348316599,
					-1366357473,
					500243014,
					-2020772364,
					-1184599371,
					1543190076,
					1596352499,
					1782726103,
					-237543429,
					915683750,
					20493282,
					-349687461,
					-1279623083,
					-420825501,
					-1750293350,
					-833143729,
					-1149056079,
					-423864323,
					1575133168,
					-2140797919,
					654987158,
					738787914,
					-674327883,
					-608950001,
					-1641973340,
					-1047599627,
					1579835483,
					-1811427872,
					430029102,
					240499948,
					453578677,
					-2031012468,
					-793110518,
					-306352309,
					-733144607,
					588702034,
					854465221,
					919586337,
					380239225,
					-925627534,
					-1876807945,
					-2012049163,
					-656508363,
					713194850,
					-198141497,
					1873695705,
					-1624309549,
					150301290,
					440490987,
					1524358525,
					-2103144077,
					-2031412631,
					1964398399,
					-2119096538,
					-1745781148,
					-1638293370,
					-653855968,
					1839490595,
					-391627953,
					-963472139,
					-1541523605,
					1218759772,
					-1165885788,
					1023806429,
					1067076479,
					-2070408386,
					-1332764360,
					1307838773,
					509434680,
					1276095754,
					-1602983170,
					-307632735,
					-1696479945,
					519002654,
					1863998317,
					-1521059163,
					210952917,
					996629098,
					-1776933621,
					-1747826616,
					925241459,
					-1983749587,
					1188315503,
					-898346343,
					-1244977109,
					-1072868870,
					820048645,
					244160738,
					-948936110,
					-2110793133,
					1216715005,
					-2120186114,
					-11546445,
					190969399,
					312889139,
					655802164,
					-1825569708,
					236859708,
					478963952,
					1870856704,
					-876010912,
					1072105579,
					1024716789,
					358415041,
					-40597712,
					-1456720313,
					-1409030485,
					311136522,
					170609984,
					-603871934,
					-1604357128,
					-1911534115,
					856274533,
					-90294918,
					487072570,
					-136173217,
					645910501,
					475710962,
					-1894901913,
					-109903207,
					-724450284,
					135703507,
					-180948108,
					-1041437784,
					-2098422414,
					1174428140,
					708184471,
					1051324828,
					-930570341,
					-2041873959,
					-420899773,
					-1293286614,
					-702059086,
					-1588650042,
					-412128875,
					523267652,
					1312681759,
					-1834265534,
					648207835,
					1896988196,
					-1987156219,
					1272955169,
					996130372,
					-1673376903,
					-1790050944,
					1672386608,
					-897902086,
					565820184,
					-1127225896,
					1119875446,
					2014198985,
					1102427769,
					-745826369,
					-1119446368,
					-1125893890,
					-1286409721,
					-1362838428,
					-1517830402,
					179211713,
					1088809984,
					1098532300,
					1463338594,
					1663073534,
					-420646835,
					-567772204,
					2028631509,
					-1373423242,
					598011623,
					-1390836034,
					-323965893,
					-624597691,
					-1379070346,
					-635496107,
					-748979910,
					-1500419974,
					1286607843,
					1327930444,
					-1885830181,
					-624827122,
					1947204007,
					1969538663,
					-1366126732,
					1278543550,
					669947654,
					1309365343,
					-202704351,
					-1715382854,
					2038838270,
					-326315205,
					1199295314,
					-451067154,
					-417538424,
					347543699,
					-750688611,
					-2130800661,
					1635562701,
					-1399117465,
					-871170785,
					-1045510949,
					-671762188,
					-407468231,
					2031837090,
					-68617769,
					-2003123571,
					-1295971573,
					-1144989614,
					292450444,
					1455783333,
					1449202105,
					-205015232,
					985600452,
					-1323134740,
					544338434,
					1043124844,
					-1434440297,
					1870248155,
					1591404432,
					2110838769,
					1664707709,
					1791198668,
					-1116385945,
					-2078438580,
					-238141124,
					-484917440,
					-270481006,
					200385354,
					1577069808,
					1688786174,
					264614658);
				psensor_offsets.raw_temp(881376994,
					1969746412,
					611878658,
					-711252591,
					947845563,
					258142540,
					-1601422698,
					2129222143,
					-759670781,
					1605222097,
					1702364678,
					1747610354,
					6872516,
					-711754996,
					344000832,
					789167562,
					-1941492123,
					-2139586589,
					332669549,
					-366541111,
					619955949,
					1458969721,
					258709298,
					2020603908,
					-1395234625,
					-1475778523,
					809992551,
					566159035,
					648967968,
					-1978850565,
					-458932571,
					-7998232,
					-39816950,
					2117068431,
					-1131367337,
					105442253,
					-539924318,
					-2031905349,
					1881355375,
					1330861240,
					-1357699942,
					-32354437,
					-2034693041,
					1666721239,
					-1240518357,
					1950512630,
					-8109350,
					-853161392,
					1071782996,
					-927531975,
					-836384454,
					397787891,
					-1300791682,
					1885256885,
					588416637,
					-162641100,
					-968887342,
					-780147148,
					-1005265121,
					-1480422923,
					215927674,
					-930714410,
					-1708498079,
					-54448453,
					-1950432892,
					928484932,
					944297635,
					-1883233970,
					-220727649,
					942898661,
					-189410001,
					2082573153,
					-1653960760,
					-610412379,
					-709786571,
					-1277330148,
					393548706,
					-164997716,
					-1232060501,
					-1952931065,
					1021318372,
					-631717497,
					-1181117400,
					-345485807,
					-2000291499,
					-2055610879,
					-2036410359,
					1221338408,
					1338965306,
					1176534398,
					1471137790,
					711412570,
					1354530934,
					764135476,
					-2075013000,
					-1226550209,
					-891797559,
					1098768561,
					-882201209,
					2061272808,
					734032225,
					1877265955,
					-248770458,
					615500950,
					1273596373,
					922572346,
					14295947,
					249312188,
					-912517814,
					-1280945251,
					-1084094284,
					-1301069748,
					-374813451,
					1687932188,
					1842433101,
					-2041194221,
					-1775660786,
					1947937411,
					-544265924,
					-1347953017,
					-1667626714,
					-880320431,
					1000188042,
					22851031,
					-1859172358,
					-907160051,
					-1597241191,
					1420603621,
					1985271782,
					1639601072,
					-1194161188,
					1850862279,
					775965434,
					143129744,
					-18166364,
					-1401308042,
					-1941974536,
					307141851,
					1560611889,
					-1409599536,
					1535678336,
					592391174,
					842063172,
					953707288,
					1365931622,
					1043343657,
					-788855715,
					1158595760,
					2089250485,
					-286753086,
					2007229337,
					-674615442,
					79711775,
					-154022867,
					1518791657,
					38601772,
					67636131,
					-1413107236,
					-307003779,
					-2060422978,
					696725739,
					-2045837795,
					-1807033448,
					-1202322489,
					-1434069869,
					679728233,
					-1889610403,
					-1924528580,
					530536344,
					775380499,
					48956831,
					1973745302,
					-349424478,
					-586715707,
					-1988551485,
					-851633037,
					1432736091,
					19916199,
					1041800495,
					1649485452,
					-995673857,
					1291150072,
					1343132151,
					-395898836,
					-345146423,
					-1761647856,
					2066714111,
					274315019,
					59104482,
					-944591791,
					683116224,
					872409758,
					1727833146,
					-1234406433,
					1505519418,
					1846115109,
					474591757,
					213854588,
					1546991880,
					985218875,
					-1307901313,
					2099765781,
					-1674343123,
					1770763064,
					565631895,
					332145305,
					-560898353,
					1058831104,
					480438611,
					-398193135,
					-2137841487,
					2015302061,
					132783898,
					-829181404,
					-936963831,
					-1098565830,
					497035693,
					-454296364,
					-925452806,
					679128962,
					-1245535919,
					2105423749,
					-2140831246,
					-307977480,
					598025860,
					-1691671469,
					-858566467,
					-544525502,
					1920208795,
					-1952476422,
					-1370508115,
					-2009242879,
					-1111661566,
					-795889226,
					-1521082801,
					-1615366461,
					493931344,
					2120727625,
					-1051257962,
					289371001,
					-573379063,
					1023555522,
					178914251,
					1989243733,
					-1491574937,
					-1272589986,
					-1927292835,
					-1066544969,
					367252967,
					-444489597,
					848551519,
					-1397186772,
					590562997,
					34518365,
					1964145913);
				psensor_offsets.gyro_cal_x(6.2783646E37F,
					2.2274057E38F,
					8.3505855E37F,
					-2.7448828E38F,
					9.0399505E36F,
					-2.6388366E38F,
					-2.4876964E38F,
					-4.5824804E37F,
					-1.8911808E38F,
					-1.2981543E38F,
					1.097619E38F,
					5.8290743E37F,
					6.3633393E37F,
					-4.8219385E35F,
					2.403433E38F,
					2.7210274E38F,
					-1.076754E37F,
					1.9505326E38F,
					-2.9004184E38F,
					-1.0065222E38F,
					2.078795E38F,
					-7.594092E37F,
					2.8679222E38F,
					-2.9920231E38F,
					1.9167597E38F,
					1.6261832E38F,
					-2.9887394E38F,
					-1.9570286E38F,
					-5.2971686E37F,
					3.170828E38F,
					3.324154E38F,
					-7.8066107E37F,
					-2.8952977E38F,
					-2.765904E38F,
					-1.1178774E38F,
					1.0725669E38F,
					-3.1069502E38F,
					-1.6819481E38F,
					9.644113E37F,
					-1.3484883E38F,
					-3.0262E38F,
					-3.2255883E38F,
					3.398029E38F,
					-1.0969798E38F,
					-1.5496737E38F,
					1.3911563E38F,
					9.969253E36F,
					-1.0970917E38F,
					-2.6040281E38F,
					1.8059664E38F,
					-3.0798836E36F,
					5.131624E37F,
					-1.2685053E38F,
					2.9459537E38F,
					2.6990922E38F,
					3.2699869E38F,
					-3.3043996E38F,
					-9.229403E37F,
					-1.6609774E36F,
					-1.5036411E38F,
					3.4511526E37F,
					3.344556E37F,
					-1.4625972E38F,
					-1.5898979E38F,
					-1.736835E38F,
					5.5885447E37F,
					-3.0558983E38F,
					-3.3872979E38F,
					1.2179064E38F,
					3.2825364E38F,
					-8.527526E37F,
					1.5892728E38F,
					1.1671797E38F,
					-8.268828E37F,
					3.2102152E38F,
					2.8866976E38F,
					5.0261165E37F,
					2.746226E38F,
					-6.188959E37F,
					1.8337728E38F,
					2.234341E38F,
					1.2346308E38F,
					9.511585E37F,
					-3.9814527E37F,
					-1.9121019E38F,
					-1.6973575E38F,
					-1.5237907E37F,
					3.2635551E38F,
					2.0112715E38F,
					1.4671539E38F,
					2.8223975E38F,
					-1.5679727E38F,
					3.056626E38F,
					1.322503E38F,
					3.6236545E37F,
					8.586971E37F,
					1.9854201E38F,
					2.9675068E38F,
					3.2254266E38F,
					1.4290037E38F,
					-9.022413E37F,
					1.4840809E37F,
					-1.5689901E38F,
					-2.80553E38F,
					-2.9153497E38F,
					4.2066785E37F,
					-1.3295812E37F,
					-6.822956E37F,
					-3.1332494E38F,
					2.8791663E38F,
					-3.2349553E37F,
					1.6919898E38F,
					1.5336631E38F,
					1.9142778E38F,
					-2.5068099E38F,
					2.1733344E38F,
					-2.3748843E37F,
					2.34597E38F,
					-2.6744925E38F,
					8.619577E37F,
					-1.9745193E38F,
					1.4824175E38F,
					-1.5298635E38F,
					8.436202E37F,
					-3.0256564E38F,
					-1.2418757E38F,
					-2.3468744E38F,
					-3.0112095E38F,
					-2.3832616E38F,
					3.2630527E38F,
					-2.4167856E38F,
					1.3703885E38F,
					-2.6950298E38F,
					-7.3766794E37F,
					2.4074987E38F,
					3.2773727E38F,
					-2.4745381E38F,
					-9.431976E36F,
					-2.2202028E37F,
					-3.9545572E37F,
					8.486058E37F,
					2.6952546E38F,
					2.0965505E38F,
					2.946363E38F,
					3.0012737E36F,
					2.7178368E38F,
					-8.058303E37F,
					-1.6842555E38F,
					-1.7423632E38F,
					-2.5216156E38F,
					-1.6613642E38F,
					-2.587458E38F,
					2.6326841E38F,
					-2.5378795E38F,
					-4.830211E37F,
					-2.5844686E38F,
					-8.576398E37F,
					-1.3231736E38F,
					2.160983E37F,
					-2.753969E37F,
					1.0631548E38F,
					2.0602206E38F,
					-8.662237E37F,
					-3.0354103E38F,
					-2.05632E38F,
					-2.4745286E38F,
					-3.2547886E38F,
					-2.2727142E36F,
					-2.7961857E38F,
					-1.7378857E38F,
					-2.6811983E38F,
					2.8945726E38F,
					1.5447864E38F,
					1.1065727E38F,
					3.2790079E38F,
					1.1908495E38F,
					-5.2183116E37F,
					1.670968E38F,
					1.3443008E38F,
					2.4676342E38F,
					2.9183637E38F,
					-1.3464597E38F,
					-1.5877624E38F,
					-5.371642E37F,
					2.084597E38F,
					-1.0054136E38F,
					1.4184641E38F,
					1.5845894E38F,
					4.824575E37F,
					4.414617E37F,
					-2.0371766E38F,
					-2.0864649E37F,
					1.094946E38F,
					2.7354087E38F,
					-1.3291685E38F,
					-2.5064663E38F,
					2.439302E38F,
					-3.2481906E38F,
					-1.5397336E38F,
					2.8553284E38F,
					-1.1918392E38F,
					3.2915568E38F,
					-2.4879736E38F,
					2.5854077E38F,
					2.5103628E38F,
					-1.3281174E38F,
					2.6103419E38F,
					-2.9515297E38F,
					-2.1364541E38F,
					-2.5616955E38F,
					3.0270602E38F,
					-2.9795365E38F,
					-2.6766027E38F,
					4.7713294E37F,
					7.6328944E37F,
					2.5665986E38F,
					-1.5313278E38F,
					5.6122436E37F,
					7.1300484E37F,
					-1.6037274E38F,
					1.4798308E38F,
					2.689205E38F,
					7.6494286E37F,
					2.0815768E38F,
					1.2827563E37F,
					-1.1406333E38F,
					-2.6900586E38F,
					2.667817E38F,
					7.078901E37F,
					7.5062424E37F,
					1.6551921E38F,
					1.3199332E35F,
					-2.1014398E38F,
					-1.8367959E37F,
					-3.2589042E38F,
					1.725262E38F,
					7.0042107E37F,
					9.870347E37F,
					-2.1562652E38F,
					2.3075822E37F,
					1.1116417E38F,
					-1.9106478E38F,
					-3.5859427E37F,
					2.2670067E38F,
					-2.9393035E37F,
					2.3700854E38F,
					-2.9249342E38F,
					-2.4740927E38F,
					-2.5878681E38F,
					2.9765105E38F,
					1.8260487E38F,
					-2.7202476E37F,
					1.459679E38F,
					1.921534E37F,
					2.0068487E38F);
				psensor_offsets.gyro_cal_y(-3.0166196E38F,
					1.4727467E38F,
					-1.9244857E38F,
					3.1221247E38F,
					-1.5627868E38F,
					1.8470164E38F,
					-3.0007862E38F,
					3.2369799E38F,
					6.085474E36F,
					2.1293498E38F,
					-3.2642887E38F,
					1.6782974E38F,
					-6.3374427E37F,
					-2.229821E38F,
					-2.7136822E38F,
					1.9158693E38F,
					3.3639321E38F,
					-8.0075004E36F,
					1.7238918E38F,
					-9.303517E37F,
					2.8422087E38F,
					-2.1766208E38F,
					-2.4602303E38F,
					1.5976769E38F,
					-1.1511518E38F,
					1.8479036E38F,
					2.411621E38F,
					1.1677852E38F,
					-5.8301604E37F,
					2.8423941E38F,
					1.3277521E38F,
					-1.2013337E38F,
					1.177877E38F,
					1.6246074E38F,
					2.0787494E38F,
					2.8793124E37F,
					-2.6479742E38F,
					-1.4203614E38F,
					8.3612155E37F,
					-1.7206258E38F,
					-2.9290112E38F,
					-2.7303036E38F,
					4.949039E37F,
					-3.2714202E38F,
					-2.463758E36F,
					2.1009414E38F,
					-7.2839766E37F,
					8.701426E37F,
					-2.3264524E38F,
					-1.5095544E38F,
					2.3451561E37F,
					-2.2535552E38F,
					2.7563728E38F,
					1.0253475E38F,
					-5.1661396E37F,
					2.7194048E38F,
					-4.5878623E37F,
					1.4003115E38F,
					7.052485E37F,
					1.6101702E38F,
					3.6759933E37F,
					3.3496939E38F,
					1.4161193E38F,
					-6.5638695E37F,
					-3.1004949E38F,
					1.7322E38F,
					-3.129247E38F,
					2.958635E38F,
					2.2756194E37F,
					-3.6028755E37F,
					-3.9897432E37F,
					1.4341036E38F,
					2.2868768E38F,
					-2.697133E38F,
					-2.1537862E38F,
					-2.8431675E38F,
					-3.3338436E38F,
					5.1324136E37F,
					2.609735E38F,
					-1.3799997E38F,
					6.4639646E36F,
					-1.2487534E38F,
					-1.2222188E38F,
					-2.3082116E38F,
					-2.1189064E38F,
					6.208424E37F,
					-2.6289035E38F,
					-2.1567941E38F,
					-2.7517042E38F,
					2.0134222E38F,
					2.502757E38F,
					9.25785E37F,
					-3.2076296E38F,
					-3.3838417E37F,
					-5.2540715E37F,
					2.7707106E38F,
					-2.1045655E38F,
					3.1922655E38F,
					-8.015593E37F,
					-6.4396843E37F,
					-5.5328796E37F,
					-3.0078763E38F,
					3.527415E37F,
					-3.0276544E37F,
					-1.5081745E38F,
					-1.5689717E38F,
					-1.7949332E38F,
					1.8301579E38F,
					-9.533507E37F,
					-1.8057348E38F,
					-2.919845E37F,
					-2.7955927E38F,
					3.3995939E38F,
					1.5444779E38F,
					2.3301284E38F,
					-2.937131E38F,
					-2.944628E38F,
					3.8841365E37F,
					3.0082998E38F,
					-2.9475572E38F,
					3.0377809E38F,
					1.716889E37F,
					3.0805548E38F,
					-1.5695705E38F,
					-7.7480356E37F,
					-2.8035448E38F,
					-1.7318576E38F,
					-1.0264561E38F,
					-9.666376E37F,
					2.4383188E38F,
					1.0488674E38F,
					1.1775092E38F,
					-3.2538108E38F,
					6.020887E37F,
					-2.1207864E38F,
					-1.681105E38F,
					-2.5752377E38F,
					6.3240685E37F,
					1.6905035E38F,
					-3.2888428E38F,
					2.3005254E38F,
					1.879652E37F,
					-2.7160137E37F,
					-8.033391E37F,
					2.4108885E38F,
					5.682378E37F,
					2.6254164E38F,
					2.4786887E38F,
					-6.643597E37F,
					-3.3893523E38F,
					2.2305667E38F,
					1.6441601E38F,
					2.2493628E38F,
					1.5692463E38F,
					-5.3368425E37F,
					2.8509722E38F,
					3.2011794E38F,
					-9.69981E36F,
					2.7808002E37F,
					-2.1912154E38F,
					3.0553487E38F,
					1.3807935E38F,
					-1.9733254E37F,
					1.800818E38F,
					-4.408174E37F,
					-2.3916433E38F,
					1.3104154E38F,
					1.5100115E38F,
					-2.6081027E38F,
					-2.6666111E38F,
					-2.4750209E38F,
					-5.194232E37F,
					1.3198029E38F,
					-1.281687E38F,
					7.965884E37F,
					-2.4328233E38F,
					2.9294854E38F,
					1.345804E38F,
					1.5125681E38F,
					2.5166012E38F,
					1.5457032E38F,
					1.0754581E38F,
					-3.2788048E38F,
					-1.7804289E38F,
					-2.3370417E38F,
					-1.544496E38F,
					4.083305E36F,
					5.8667975E37F,
					1.0949073E38F,
					-3.1534644E38F,
					-7.987995E37F,
					2.93329E38F,
					-2.888207E38F,
					-1.9970344E38F,
					-1.8541546E38F,
					-3.0918053E38F,
					-1.1018199E38F,
					-2.171778E38F,
					2.5334683E38F,
					-7.4971057E37F,
					-2.4244661E38F,
					-3.3896427E38F,
					9.625309E37F,
					-2.657395E38F,
					4.284389E36F,
					1.0960623E38F,
					7.7571967E37F,
					-8.3636184E37F,
					-2.1722556E38F,
					3.1791918E38F,
					1.2162111E38F,
					-6.578161E37F,
					2.0109344E38F,
					-7.5816387E37F,
					5.3090916E37F,
					-5.871447E37F,
					-1.761045E38F,
					-2.3734597E38F,
					-3.1112131E38F,
					2.4114065E38F,
					-1.4038151E38F,
					2.9914996E38F,
					-2.0251688E38F,
					-3.0518593E38F,
					-3.5623515E37F,
					1.9279578E38F,
					-8.699049E37F,
					2.6382044E38F,
					5.877563E37F,
					-1.4261234E38F,
					-1.2842039E38F,
					2.8373827E38F,
					-3.2427932E38F,
					1.651312E37F,
					3.026012E38F,
					2.8053436E38F,
					-1.4925081E38F,
					9.85866E36F,
					3.1016216E38F,
					1.9393981E38F,
					-3.0216373E38F,
					3.1648654E38F,
					4.5020763E37F,
					1.3308646E38F,
					2.700039E38F,
					9.0935214E36F,
					-9.065318E37F,
					-2.8139154E38F,
					-2.6777478E38F,
					-9.283442E37F,
					-1.2401805E38F,
					-2.263572E38F,
					6.4026466E37F,
					-3.1517155E38F,
					-7.769796E37F);
				psensor_offsets.gyro_cal_z(5.229922E37F,
					-5.0608846E37F,
					-2.8597125E37F,
					-3.2987875E38F,
					-3.2689788E38F,
					-1.6213825E38F,
					-3.183277E38F,
					2.735496E37F,
					-1.1471728E38F,
					-4.719895E36F,
					-3.1665443E38F,
					3.5562333E37F,
					2.759666E37F,
					-3.0130292E38F,
					-3.2025278E37F,
					-1.5347388E37F,
					1.9277313E38F,
					1.9222483E38F,
					1.2554601E38F,
					-3.3548296E38F,
					8.3597455E37F,
					-9.246724E37F,
					2.9776952E38F,
					-3.128109E37F,
					-3.2738659E38F,
					3.39047E38F,
					-1.9789679E38F,
					2.5537499E38F,
					-1.6213733E38F,
					1.1601086E36F,
					-1.521523E38F,
					2.4223767E38F,
					9.906816E36F,
					2.899903E38F,
					-3.2589666E38F,
					1.7312408E38F,
					-3.1077564E38F,
					7.4404544E37F,
					3.0790546E38F,
					3.8807807E37F,
					1.5803954E38F,
					-2.2394932E38F,
					-2.2122241E38F,
					-1.6780652E38F,
					-1.7245638E38F,
					2.4184885E38F,
					-2.4518624E38F,
					-2.0053462E38F,
					1.4563622E38F,
					2.0994691E37F,
					-4.29844E36F,
					2.087126E38F,
					3.5643843E37F,
					2.682609E37F,
					7.8463374E37F,
					-2.8280979E38F,
					-5.9085225E37F,
					-1.0179924E38F,
					-1.4167807E38F,
					7.085755E37F,
					-6.9044395E37F,
					-2.9537113E38F,
					-4.554803E37F,
					-1.970551E38F,
					7.685869E37F,
					2.4247973E37F,
					1.1940394E38F,
					-4.1385577E37F,
					-3.0509494E38F,
					1.2403824E38F,
					-2.8070285E38F,
					5.032915E37F,
					2.9279598E37F,
					-4.993567E37F,
					7.3788045E37F,
					5.678873E37F,
					1.791133E38F,
					-2.609866E38F,
					1.8454238E37F,
					-9.956488E37F,
					-7.531092E37F,
					-2.3557644E38F,
					-2.797243E38F,
					-2.5443279E38F,
					3.7984925E37F,
					3.330951E38F,
					9.532184E37F,
					2.2373047E38F,
					2.2454035E38F,
					1.7014682E38F,
					1.110409E37F,
					-2.9562957E38F,
					-2.3719712E38F,
					-3.3537383E37F,
					-6.110901E37F,
					1.1195443E38F,
					-8.2091045E37F,
					-2.5729092E38F,
					-3.2731444E38F,
					4.390655E37F,
					-9.732299E37F,
					5.635013E36F,
					2.0119416E38F,
					2.5448554E38F,
					-1.98734E38F,
					-8.331395E37F,
					-2.0116107E37F,
					4.4149943E37F,
					3.1425902E38F,
					-4.7014554E37F,
					-1.625897E38F,
					3.3498718E38F,
					1.8493016E38F,
					-3.3385835E37F,
					-3.2651323E38F,
					1.9804192E37F,
					-3.9863058E37F,
					-2.098424E38F,
					-1.993262E38F,
					-2.8481132E38F,
					1.208438E38F,
					3.0471548E38F,
					1.7465126E38F,
					1.6838624E38F,
					-2.160379E38F,
					-2.9552183E38F,
					6.499118E37F,
					2.7842684E38F,
					2.6538513E38F,
					-1.843037E38F,
					2.3335586E38F,
					-4.0508574E37F,
					1.374731E38F,
					1.2071552E38F,
					1.7434147E38F,
					-2.4705638E38F,
					-2.0917462E38F,
					2.3027553E38F,
					3.1125927E38F,
					4.1712383E37F,
					-1.6134577E38F,
					-3.2839848E38F,
					-2.9212156E38F,
					-1.4937921E38F,
					3.2919077E38F,
					8.1238636E37F,
					-7.063803E37F,
					2.778574E38F,
					2.6881223E38F,
					2.566029E38F,
					1.2647921E38F,
					-2.4673636E38F,
					2.6865392E38F,
					-3.081827E38F,
					-3.1383376E38F,
					-8.746569E37F,
					-2.8398913E38F,
					2.310219E38F,
					2.9706297E38F,
					6.1839064E37F,
					-2.1487844E38F,
					-1.1355987E38F,
					-1.314231E38F,
					-1.6786738E38F,
					3.2897598E38F,
					-1.1720504E38F,
					-2.3790622E37F,
					-8.558642E37F,
					-1.3748502E37F,
					1.9719404E38F,
					-1.9599714E38F,
					1.8782726E38F,
					7.022722E37F,
					-1.3635065E38F,
					-2.0098298E38F,
					8.667687E37F,
					-2.6744715E37F,
					2.8846671E38F,
					-6.8332594E37F,
					7.622603E37F,
					6.844073E37F,
					2.2440458E38F,
					-7.865564E37F,
					-2.9456904E38F,
					-3.3273334E38F,
					2.348353E38F,
					-1.0638206E38F,
					2.2067195E38F,
					-2.679374E37F,
					1.9700759E38F,
					1.7580227E38F,
					-1.4109958E38F,
					1.4760687E38F,
					-1.3856091E38F,
					1.5894529E38F,
					-3.2188734E38F,
					-3.0408891E38F,
					1.1184442E38F,
					-6.8452144E37F,
					-2.9402809E38F,
					-1.644533E37F,
					2.736758E38F,
					-1.3289001E38F,
					-7.357496E37F,
					-2.8666026E38F,
					2.9966094E38F,
					2.3272113E37F,
					2.7826312E37F,
					-3.162482E38F,
					-1.7782465E38F,
					2.3385314E38F,
					2.526605E38F,
					-8.584903E37F,
					7.487648E37F,
					1.9246152E37F,
					3.1484328E38F,
					1.1002912E38F,
					2.7199701E38F,
					-3.4203883E37F,
					3.5562132E37F,
					-2.5678457E38F,
					-1.515758E38F,
					2.8942145E38F,
					1.8742703E38F,
					1.9747114E38F,
					6.2029683E37F,
					1.5426231E38F,
					-2.2094604E38F,
					-3.0246287E38F,
					9.647426E34F,
					2.062178E38F,
					3.0758641E38F,
					-2.6512426E37F,
					3.1681144E38F,
					3.1539226E36F,
					7.2111055E37F,
					7.240302E37F,
					-3.1152307E38F,
					-1.4280003E38F,
					-2.8338309E38F,
					-2.8920136E38F,
					-2.537282E38F,
					-9.791249E37F,
					1.5563794E38F,
					1.9950017E38F,
					-2.4393723E38F,
					-3.0804972E37F,
					-2.8061868E38F,
					-1.8558559E38F,
					-1.6567086E38F,
					-3.0919416E38F,
					1.9836535E38F,
					3.1109452E38F,
					-1.5977194E38F,
					-6.6553026E37F);
				psensor_offsets.accel_cal_x(-3.0778863E38F,
					3.3448225E38F,
					-1.0326235E37F,
					-1.8552776E37F,
					3.1673634E38F,
					-2.8565894E38F,
					1.1151079E38F,
					3.0954137E38F,
					2.1746319E38F,
					1.7070224E38F,
					9.742104E37F,
					-3.420479E36F,
					-2.1804615E38F,
					-2.0878065E38F,
					-1.1482573E38F,
					-1.5500743E38F,
					1.7556987E38F,
					2.4343694E38F,
					3.3989682E38F,
					-9.462102E37F,
					-7.605237E37F,
					1.8080545E38F,
					2.4589132E38F,
					-2.6219961E38F,
					-2.4839074E38F,
					1.0792968E38F,
					2.5239108E38F,
					-2.6048741E38F,
					-2.5937326E38F,
					-2.9507454E38F,
					8.737545E37F,
					-2.3799513E38F,
					1.244957E38F,
					6.9382513E37F,
					-1.7353076E38F,
					-2.7778502E38F,
					-2.292016E38F,
					-2.0063374E38F,
					1.791267E38F,
					9.065147E37F,
					1.0963641E38F,
					-3.1131345E38F,
					-3.0645123E38F,
					-5.50973E37F,
					2.3033783E38F,
					8.1312834E37F,
					3.0300827E38F,
					-2.9841546E38F,
					-2.2373678E38F,
					1.2451503E38F,
					-9.832757E37F,
					-2.8742852E38F,
					2.3508824E38F,
					1.4754273E38F,
					1.7571355E38F,
					1.726856E38F,
					1.1952058E37F,
					-2.378648E38F,
					-2.7597027E38F,
					-2.8965932E38F,
					4.4099967E36F,
					2.9360313E38F,
					-3.8000628E37F,
					1.6382385E38F,
					-1.8628602E38F,
					4.3747733E37F,
					-2.3771175E38F,
					-1.3794319E38F,
					2.30485E38F,
					-1.5233481E38F,
					-4.602394E37F,
					3.534377E37F,
					-8.2521027E37F,
					1.0691734E38F,
					7.6163186E37F,
					4.351784E37F,
					-1.9866908E38F,
					1.813956E38F,
					1.203707E38F,
					-3.6486483E37F,
					-2.223494E38F,
					-3.3209612E38F,
					-1.8769768E38F,
					4.500324E37F,
					-9.617373E37F,
					2.060073E38F,
					1.8349147E38F,
					-8.0251603E37F,
					3.0442071E38F,
					2.0371705E38F,
					-3.0612535E38F,
					2.4954682E38F,
					3.0423335E38F,
					-2.494407E38F,
					-3.611773E37F,
					-2.4913698E37F,
					3.1719133E38F,
					-4.7021027E35F,
					2.4319564E38F,
					-2.076289E38F,
					-3.2022886E38F,
					7.754233E37F,
					-1.292648E38F,
					-1.3457474E38F,
					-3.3028261E38F,
					2.6654163E38F,
					7.0999675E37F,
					-4.612644E37F,
					2.1793301E38F,
					-2.8325375E38F,
					-9.653846E37F,
					3.7337158E37F,
					-9.449754E37F,
					-1.6866205E38F,
					-3.0817858E38F,
					3.0041147E38F,
					-2.4152727E38F,
					-4.217452E37F,
					-2.7196338E38F,
					6.257592E37F,
					-1.9207042E38F,
					-1.458375E38F,
					8.978681E37F,
					1.8900816E38F,
					1.6169521E38F,
					-1.5275468E38F,
					1.013768E38F,
					-2.7622151E38F,
					-3.2008161E38F,
					-1.8239567E38F,
					2.3995046E38F,
					-9.974242E37F,
					-3.1898417E38F,
					-3.0742582E38F,
					2.5618235E38F,
					2.5221677E38F,
					2.9641533E38F,
					2.5872538E38F,
					-1.6114545E38F,
					-1.5765134E37F,
					2.1907302E38F,
					-3.2931413E38F,
					8.4039546E37F,
					2.4929004E38F,
					1.8695976E38F,
					3.0259733E38F,
					8.738134E37F,
					2.2724391E38F,
					1.6583524E38F,
					-1.4762024E38F,
					1.813961E38F,
					-1.1861666E38F,
					-3.0883198E38F,
					2.7486728E38F,
					1.4072909E38F,
					9.202007E36F,
					2.4773258E38F,
					2.8102683E37F,
					-2.9284542E37F,
					-1.8943767E38F,
					1.7067579E38F,
					2.1740114E38F,
					-4.5128417E37F,
					-2.0035283E38F,
					-9.011529E37F,
					-2.633417E38F,
					-5.936846E37F,
					5.046362E37F,
					2.8002564E38F,
					3.3758736E38F,
					-2.651133E38F,
					-3.5584108E37F,
					5.695276E37F,
					2.9723539E38F,
					1.1482652E38F,
					1.5891085E37F,
					5.9412046E37F,
					1.6111561E38F,
					-3.0106917E38F,
					3.1297539E38F,
					-2.1097326E37F,
					-1.593998E37F,
					2.9784875E38F,
					2.0815052E38F,
					5.15483E37F,
					2.9154935E38F,
					-1.3317979E38F,
					-8.547434E37F,
					1.2183532E38F,
					1.510488E38F,
					-2.9743133E38F,
					9.22978E36F,
					2.1080725E38F,
					1.096827E38F,
					-7.8796715E37F,
					1.4240003E37F,
					-2.1767849E38F,
					-1.9356203E38F,
					4.225987E37F,
					2.500258E38F,
					2.5708177E37F,
					-3.1732667E38F,
					-3.1232872E38F,
					-3.311552E38F,
					1.713183E38F,
					-4.5765574E37F,
					-1.3950063E38F,
					1.5544034E38F,
					-1.257007E38F,
					4.6630806E37F,
					2.3245426E38F,
					-1.2803108E38F,
					3.0311721E37F,
					-7.310375E37F,
					7.606156E37F,
					-6.265157E37F,
					2.0860357E38F,
					2.7588136E37F,
					3.3854816E38F,
					2.4015687E38F,
					-2.958415E38F,
					-6.5885283E37F,
					2.9075242E37F,
					-5.8701294E37F,
					-2.6373564E38F,
					1.9994574E38F,
					-2.4149906E38F,
					-2.263872E38F,
					7.0547606E37F,
					-3.0339276E38F,
					2.8133651E38F,
					-2.0011785E38F,
					-1.6994997E38F,
					2.3322696E38F,
					-3.3534265E38F,
					2.7512983E38F,
					-1.0043051E38F,
					-4.264033E37F,
					-1.2034034E38F,
					3.1220689E38F,
					-3.1774952E38F,
					1.3169593E38F,
					1.6667159E38F,
					1.552108E38F,
					1.937266E38F,
					1.2797355E38F,
					2.2743471E38F,
					2.8246872E38F,
					-1.5637097E38F,
					1.4939145E38F,
					-1.8365785E38F,
					-1.2349426E38F,
					-2.045737E38F,
					-9.287329E37F,
					6.3929247E37F);
				psensor_offsets.accel_cal_y(1.0023837E38F,
					-8.169857E37F,
					-5.911658E37F,
					-2.5172705E38F,
					2.653653E38F,
					-2.9490536E38F,
					-3.2288382E37F,
					2.7153885E38F,
					-2.1403122E38F,
					-9.768264E37F,
					-3.2221498E38F,
					1.2748285E38F,
					-2.809936E37F,
					-1.6996737E38F,
					-5.345723E36F,
					-1.4270273E38F,
					3.0913096E38F,
					2.946366E36F,
					-2.8505047E38F,
					1.3114158E38F,
					3.0824283E38F,
					-2.3185549E38F,
					-7.483831E37F,
					3.2410487E38F,
					-1.2758534E38F,
					-1.7002134E36F,
					-7.1149897E37F,
					8.558951E37F,
					2.8452095E38F,
					-1.836191E38F,
					-2.5550768E38F,
					7.8371053E37F,
					-2.7777125E38F,
					1.5818268E38F,
					-1.8522034E38F,
					5.9073375E37F,
					-1.3694238E38F,
					-1.6795882E38F,
					-1.0486105E38F,
					2.504613E38F,
					-1.12331574E36F,
					3.2399894E38F,
					2.921927E38F,
					-2.2150379E38F,
					1.0549399E38F,
					1.4049514E38F,
					-2.6572443E38F,
					-2.9513303E38F,
					1.6099659E38F,
					-3.161714E38F,
					-2.8137795E38F,
					4.5065765E37F,
					1.0268579E38F,
					2.962067E37F,
					-2.606134E38F,
					1.3328169E38F,
					-1.8243597E38F,
					-6.873446E37F,
					2.837366E38F,
					3.0709233E38F,
					3.168887E38F,
					-3.8135798E37F,
					1.1815468E38F,
					3.288158E37F,
					3.9876586E37F,
					1.5879905E38F,
					-7.3173696E37F,
					2.0994422E38F,
					-2.4989971E38F,
					1.9410838E38F,
					2.7762621E38F,
					2.8039346E38F,
					2.2553672E38F,
					-2.9770262E37F,
					2.0997004E38F,
					2.7295499E38F,
					-3.0102294E38F,
					1.9320656E38F,
					7.0619806E37F,
					2.8095153E38F,
					2.514819E38F,
					-3.3862185E38F,
					-1.0439636E38F,
					3.1496708E38F,
					1.0362513E38F,
					3.2304834E38F,
					-1.1973284E37F,
					1.9449498E38F,
					-2.3975388E38F,
					-2.5929373E38F,
					-3.1259365E38F,
					2.6459028E38F,
					-1.5136595E38F,
					3.0842414E38F,
					1.4102448E38F,
					1.9843456E38F,
					-2.5006718E38F,
					-2.3404649E36F,
					2.1534272E38F,
					3.2278043E38F,
					1.9966531E38F,
					1.5157871E38F,
					-1.2463845E38F,
					-2.8123478E36F,
					-7.673413E37F,
					-2.3460412E37F,
					-4.2450411E37F,
					-9.481525E36F,
					9.3680843E36F,
					-3.5317357E36F,
					-9.952673E34F,
					3.1665265E38F,
					4.0107778E37F,
					2.7400807E38F,
					-1.905143E38F,
					1.823626E38F,
					1.8538593E37F,
					-2.6119939E38F,
					-4.897776E37F,
					2.6005578E38F,
					3.1195025E38F,
					-1.655564E38F,
					1.071787E38F,
					-1.312326E38F,
					1.0387339E38F,
					-6.9714204E36F,
					-3.2571432E38F,
					7.8970845E37F,
					-2.9177222E38F,
					1.5810587E38F,
					2.4836017E38F,
					-2.919027E37F,
					3.2508823E38F,
					-2.6735587E38F,
					-1.1410233E38F,
					1.0100517E38F,
					3.2242596E38F,
					-2.807153E38F,
					2.5963135E38F,
					-1.026086E38F,
					3.277936E38F,
					-1.9849678E38F,
					-7.810222E37F,
					6.25446E37F,
					-2.2150169E37F,
					1.8791981E38F,
					-1.5202843E36F,
					-3.0261043E38F,
					-1.1921874E38F,
					-3.36314E38F,
					1.2384421E38F,
					-1.6448076E38F,
					-2.9420046E37F,
					2.770417E38F,
					3.187852E38F,
					2.271044E38F,
					3.3644394E38F,
					-2.5849452E37F,
					-2.1472016E38F,
					-1.8259552E38F,
					2.2006664E38F,
					1.4688226E38F,
					2.871248E38F,
					-2.0800791E38F,
					2.031499E37F,
					-4.341697E37F,
					-1.6856278E38F,
					-2.6207794E38F,
					2.246994E38F,
					2.7728786E38F,
					-6.501103E37F,
					-3.102774E38F,
					-2.8721948E37F,
					-1.8066153E38F,
					1.7792257E38F,
					-1.6778731E38F,
					-2.9664789E38F,
					8.687362E37F,
					8.773866E36F,
					-1.5865869E38F,
					-1.4388127E38F,
					-1.2028217E38F,
					-3.2156134E38F,
					2.771721E38F,
					1.2656041E38F,
					2.414565E38F,
					-1.1249205E38F,
					-2.4139272E38F,
					-6.0639106E37F,
					-3.3789292E38F,
					-6.515293E37F,
					-4.019255E36F,
					2.5243947E38F,
					1.1232177E38F,
					2.1964698E38F,
					-1.3935598E38F,
					-1.1652248E38F,
					-1.4238058E38F,
					-6.237904E37F,
					-1.3037654E38F,
					-2.6999822E38F,
					-4.392206E35F,
					-3.2179357E38F,
					2.6203338E38F,
					1.4443375E38F,
					-1.1499784E38F,
					-2.0758022E38F,
					2.2926427E38F,
					1.5547239E38F,
					1.053808E38F,
					-2.428002E37F,
					3.2618187E38F,
					3.2074645E38F,
					3.1164888E38F,
					2.0648996E38F,
					-2.6347205E38F,
					1.1221689E38F,
					-7.9174404E37F,
					1.6770042E38F,
					1.9088658E38F,
					-3.5437074E37F,
					3.0718551E38F,
					-1.6395711E38F,
					5.972171E36F,
					1.1673286E38F,
					-2.168027E38F,
					2.0474247E38F,
					-2.0523505E38F,
					-4.1275132E37F,
					2.5219371E38F,
					3.2814655E38F,
					-3.6671354E36F,
					-3.0890187E38F,
					3.0980147E38F,
					-1.6461332E37F,
					2.545859E38F,
					2.7295671E38F,
					1.528559E38F,
					1.8814665E38F,
					-1.8589865E38F,
					2.6404184E38F,
					5.385819E37F,
					2.8365372E38F,
					-3.177899E38F,
					8.998662