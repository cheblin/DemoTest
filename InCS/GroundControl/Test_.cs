
using System;
using com.company.demo;
using com.company.demo.GroundControl;
using System.Diagnostics;
using System.Linq;
using Pack = org.unirail.AdHoc.Pack;
using Lib = org.unirail.AdHoc;
using System.IO;
using System.Text;
using HEARTBEAT = com.company.demo.GroundControl.HEARTBEAT;
using SYS_STATUS = com.company.demo.GroundControl.SYS_STATUS;
using SYSTEM_TIME = com.company.demo.GroundControl.SYSTEM_TIME;
using PING = com.company.demo.GroundControl.PING;
using CHANGE_OPERATOR_CONTROL = com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL;
using CHANGE_OPERATOR_CONTROL_ACK = com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL_ACK;
using AUTH_KEY = com.company.demo.GroundControl.AUTH_KEY;
using SET_MODE = com.company.demo.GroundControl.SET_MODE;
using PARAM_REQUEST_READ = com.company.demo.GroundControl.PARAM_REQUEST_READ;
using PARAM_REQUEST_LIST = com.company.demo.GroundControl.PARAM_REQUEST_LIST;
using PARAM_VALUE = com.company.demo.GroundControl.PARAM_VALUE;
using PARAM_SET = com.company.demo.GroundControl.PARAM_SET;
using GPS_RAW_INT = com.company.demo.GroundControl.GPS_RAW_INT;
using GPS_STATUS = com.company.demo.GroundControl.GPS_STATUS;
using SCALED_IMU = com.company.demo.GroundControl.SCALED_IMU;
using RAW_IMU = com.company.demo.GroundControl.RAW_IMU;
using RAW_PRESSURE = com.company.demo.GroundControl.RAW_PRESSURE;
using SCALED_PRESSURE = com.company.demo.GroundControl.SCALED_PRESSURE;
using ATTITUDE = com.company.demo.GroundControl.ATTITUDE;
using ATTITUDE_QUATERNION = com.company.demo.GroundControl.ATTITUDE_QUATERNION;
using LOCAL_POSITION_NED = com.company.demo.GroundControl.LOCAL_POSITION_NED;
using GLOBAL_POSITION_INT = com.company.demo.GroundControl.GLOBAL_POSITION_INT;
using RC_CHANNELS_SCALED = com.company.demo.GroundControl.RC_CHANNELS_SCALED;
using RC_CHANNELS_RAW = com.company.demo.GroundControl.RC_CHANNELS_RAW;
using SERVO_OUTPUT_RAW = com.company.demo.GroundControl.SERVO_OUTPUT_RAW;
using MISSION_REQUEST_PARTIAL_LIST = com.company.demo.GroundControl.MISSION_REQUEST_PARTIAL_LIST;
using MISSION_WRITE_PARTIAL_LIST = com.company.demo.GroundControl.MISSION_WRITE_PARTIAL_LIST;
using MISSION_ITEM = com.company.demo.GroundControl.MISSION_ITEM;
using MISSION_REQUEST = com.company.demo.GroundControl.MISSION_REQUEST;
using MISSION_SET_CURRENT = com.company.demo.GroundControl.MISSION_SET_CURRENT;
using MISSION_CURRENT = com.company.demo.GroundControl.MISSION_CURRENT;
using MISSION_REQUEST_LIST = com.company.demo.GroundControl.MISSION_REQUEST_LIST;
using MISSION_COUNT = com.company.demo.GroundControl.MISSION_COUNT;
using MISSION_CLEAR_ALL = com.company.demo.GroundControl.MISSION_CLEAR_ALL;
using MISSION_ITEM_REACHED = com.company.demo.GroundControl.MISSION_ITEM_REACHED;
using MISSION_ACK = com.company.demo.GroundControl.MISSION_ACK;
using SET_GPS_GLOBAL_ORIGIN = com.company.demo.GroundControl.SET_GPS_GLOBAL_ORIGIN;
using GPS_GLOBAL_ORIGIN = com.company.demo.GroundControl.GPS_GLOBAL_ORIGIN;
using PARAM_MAP_RC = com.company.demo.GroundControl.PARAM_MAP_RC;
using MISSION_REQUEST_INT = com.company.demo.GroundControl.MISSION_REQUEST_INT;
using SAFETY_SET_ALLOWED_AREA = com.company.demo.GroundControl.SAFETY_SET_ALLOWED_AREA;
using SAFETY_ALLOWED_AREA = com.company.demo.GroundControl.SAFETY_ALLOWED_AREA;
using ATTITUDE_QUATERNION_COV = com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV;
using NAV_CONTROLLER_OUTPUT = com.company.demo.GroundControl.NAV_CONTROLLER_OUTPUT;
using GLOBAL_POSITION_INT_COV = com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV;
using LOCAL_POSITION_NED_COV = com.company.demo.GroundControl.LOCAL_POSITION_NED_COV;
using RC_CHANNELS = com.company.demo.GroundControl.RC_CHANNELS;
using REQUEST_DATA_STREAM = com.company.demo.GroundControl.REQUEST_DATA_STREAM;
using DATA_STREAM = com.company.demo.GroundControl.DATA_STREAM;
using MANUAL_CONTROL = com.company.demo.GroundControl.MANUAL_CONTROL;
using RC_CHANNELS_OVERRIDE = com.company.demo.GroundControl.RC_CHANNELS_OVERRIDE;
using MISSION_ITEM_INT = com.company.demo.GroundControl.MISSION_ITEM_INT;
using VFR_HUD = com.company.demo.GroundControl.VFR_HUD;
using COMMAND_INT = com.company.demo.GroundControl.COMMAND_INT;
using COMMAND_LONG = com.company.demo.GroundControl.COMMAND_LONG;
using COMMAND_ACK = com.company.demo.GroundControl.COMMAND_ACK;
using MANUAL_SETPOINT = com.company.demo.GroundControl.MANUAL_SETPOINT;
using SET_ATTITUDE_TARGET = com.company.demo.GroundControl.SET_ATTITUDE_TARGET;
using ATTITUDE_TARGET = com.company.demo.GroundControl.ATTITUDE_TARGET;
using SET_POSITION_TARGET_LOCAL_NED = com.company.demo.GroundControl.SET_POSITION_TARGET_LOCAL_NED;
using POSITION_TARGET_LOCAL_NED = com.company.demo.GroundControl.POSITION_TARGET_LOCAL_NED;
using SET_POSITION_TARGET_GLOBAL_INT = com.company.demo.GroundControl.SET_POSITION_TARGET_GLOBAL_INT;
using POSITION_TARGET_GLOBAL_INT = com.company.demo.GroundControl.POSITION_TARGET_GLOBAL_INT;
using LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = com.company.demo.GroundControl.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET;
using HIL_STATE = com.company.demo.GroundControl.HIL_STATE;
using HIL_CONTROLS = com.company.demo.GroundControl.HIL_CONTROLS;
using HIL_RC_INPUTS_RAW = com.company.demo.GroundControl.HIL_RC_INPUTS_RAW;
using HIL_ACTUATOR_CONTROLS = com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS;
using OPTICAL_FLOW = com.company.demo.GroundControl.OPTICAL_FLOW;
using GLOBAL_VISION_POSITION_ESTIMATE = com.company.demo.GroundControl.GLOBAL_VISION_POSITION_ESTIMATE;
using VISION_POSITION_ESTIMATE = com.company.demo.GroundControl.VISION_POSITION_ESTIMATE;
using MAV_SYS_STATUS_SENSOR = com.company.demo.GroundControl.MAV_SYS_STATUS_SENSOR;
using MAV_PROTOCOL_CAPABILITY = com.company.demo.GroundControl.MAV_PROTOCOL_CAPABILITY;
using MAV_CMD = com.company.demo.GroundControl.MAV_CMD;
using ADSB_ALTITUDE_TYPE = com.company.demo.GroundControl.ADSB_ALTITUDE_TYPE;
using MAV_SENSOR_ORIENTATION = com.company.demo.GroundControl.MAV_SENSOR_ORIENTATION;
using MAV_MISSION_RESULT = com.company.demo.GroundControl.MAV_MISSION_RESULT;
using MAV_PARAM_TYPE = com.company.demo.GroundControl.MAV_PARAM_TYPE;
using GOPRO_REQUEST_STATUS = com.company.demo.GroundControl.GOPRO_REQUEST_STATUS;
using UAVIONIX_ADSB_OUT_DYNAMIC_STATE = com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_DYNAMIC_STATE;
using GPS_INPUT_IGNORE_FLAGS = com.company.demo.GroundControl.GPS_INPUT_IGNORE_FLAGS;
using ADSB_FLAGS = com.company.demo.GroundControl.ADSB_FLAGS;
using PID_TUNING_AXIS = com.company.demo.GroundControl.PID_TUNING_AXIS;
using MAV_MISSION_TYPE = com.company.demo.GroundControl.MAV_MISSION_TYPE;
using MAV_REMOTE_LOG_DATA_BLOCK_STATUSES = com.company.demo.GroundControl.MAV_REMOTE_LOG_DATA_BLOCK_STATUSES;
using ADSB_EMITTER_TYPE = com.company.demo.GroundControl.ADSB_EMITTER_TYPE;
using SERIAL_CONTROL_FLAG = com.company.demo.GroundControl.SERIAL_CONTROL_FLAG;
using GOPRO_COMMAND = com.company.demo.GroundControl.GOPRO_COMMAND;
using LIMIT_MODULE = com.company.demo.GroundControl.LIMIT_MODULE;
using MAV_COLLISION_THREAT_LEVEL = com.company.demo.GroundControl.MAV_COLLISION_THREAT_LEVEL;
using SERIAL_CONTROL_DEV = com.company.demo.GroundControl.SERIAL_CONTROL_DEV;
using MAV_RESULT = com.company.demo.GroundControl.MAV_RESULT;
using FENCE_BREACH = com.company.demo.GroundControl.FENCE_BREACH;
using UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE = com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE;
using MAV_SEVERITY = com.company.demo.GroundControl.MAV_SEVERITY;
using MAV_COLLISION_SRC = com.company.demo.GroundControl.MAV_COLLISION_SRC;
using MAV_VTOL_STATE = com.company.demo.GroundControl.MAV_VTOL_STATE;
using CAMERA_CAP_FLAGS = com.company.demo.GroundControl.CAMERA_CAP_FLAGS;
using UAVIONIX_ADSB_OUT_RF_SELECT = com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_RF_SELECT;
using RALLY_FLAGS = com.company.demo.GroundControl.RALLY_FLAGS;
using MAV_MODE = com.company.demo.GroundControl.MAV_MODE;
using UAVIONIX_ADSB_RF_HEALTH = com.company.demo.GroundControl.UAVIONIX_ADSB_RF_HEALTH;
using GOPRO_HEARTBEAT_STATUS = com.company.demo.GroundControl.GOPRO_HEARTBEAT_STATUS;
using MAV_DISTANCE_SENSOR = com.company.demo.GroundControl.MAV_DISTANCE_SENSOR;
using DEVICE_OP_BUSTYPE = com.company.demo.GroundControl.DEVICE_OP_BUSTYPE;
using LANDING_TARGET_TYPE = com.company.demo.GroundControl.LANDING_TARGET_TYPE;
using MAV_ESTIMATOR_TYPE = com.company.demo.GroundControl.MAV_ESTIMATOR_TYPE;
using MAV_AUTOPILOT = com.company.demo.GroundControl.MAV_AUTOPILOT;
using MAV_LANDED_STATE = com.company.demo.GroundControl.MAV_LANDED_STATE;
using CAMERA_MODE = com.company.demo.GroundControl.CAMERA_MODE;
using UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON = com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON;
using CAMERA_STATUS_TYPES = com.company.demo.GroundControl.CAMERA_STATUS_TYPES;
using MAV_POWER_STATUS = com.company.demo.GroundControl.MAV_POWER_STATUS;
using UAVCAN_NODE_MODE = com.company.demo.GroundControl.UAVCAN_NODE_MODE;
using UAVCAN_NODE_HEALTH = com.company.demo.GroundControl.UAVCAN_NODE_HEALTH;
using MAV_MODE_FLAG = com.company.demo.GroundControl.MAV_MODE_FLAG;
using UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT;
using MAV_FRAME = com.company.demo.GroundControl.MAV_FRAME;
using MAV_PARAM_EXT_TYPE = com.company.demo.GroundControl.MAV_PARAM_EXT_TYPE;
using MAV_TYPE = com.company.demo.GroundControl.MAV_TYPE;
using MAV_COLLISION_ACTION = com.company.demo.GroundControl.MAV_COLLISION_ACTION;
using GOPRO_HEARTBEAT_FLAGS = com.company.demo.GroundControl.GOPRO_HEARTBEAT_FLAGS;
using UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX = com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX;
using ESTIMATOR_STATUS_FLAGS = com.company.demo.GroundControl.ESTIMATOR_STATUS_FLAGS;
using LIMITS_STATE = com.company.demo.GroundControl.LIMITS_STATE;
using GOPRO_CAPTURE_MODE = com.company.demo.GroundControl.GOPRO_CAPTURE_MODE;
using EKF_STATUS_FLAGS = com.company.demo.GroundControl.EKF_STATUS_FLAGS;
using CAMERA_FEEDBACK_FLAGS = com.company.demo.GroundControl.CAMERA_FEEDBACK_FLAGS;
using UAVIONIX_ADSB_EMERGENCY_STATUS = com.company.demo.GroundControl.UAVIONIX_ADSB_EMERGENCY_STATUS;
using MAV_MOUNT_MODE = com.company.demo.GroundControl.MAV_MOUNT_MODE;
using MAV_STATE = com.company.demo.GroundControl.MAV_STATE;
using MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS = com.company.demo.GroundControl.MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS;
using PARAM_ACK = com.company.demo.GroundControl.PARAM_ACK;
using GPS_FIX_TYPE = com.company.demo.GroundControl.GPS_FIX_TYPE;
using MAV_BATTERY_FUNCTION = com.company.demo.GroundControl.MAV_BATTERY_FUNCTION;
using MAG_CAL_STATUS = com.company.demo.GroundControl.MAG_CAL_STATUS;
using MAV_BATTERY_TYPE = com.company.demo.GroundControl.MAV_BATTERY_TYPE;

namespace org.unirail
{
    public struct Test
    {

        public struct HEARTBEAT
        {
            internal Pack.Cursor data_;
            internal HEARTBEAT(Pack.Cursor data) { this.data_ = data; }

            public int custom_mode() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void custom_mode(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public sbyte mavlink_version() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void mavlink_version(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }


            public  MAV_TYPE? typE()
            {
                if(data_.field_bit !=  42 && !data_.set_field(42, -1))  return null;
                return (MAV_TYPE)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 5)));;
            }


            public void typE(MAV_TYPE src)
            {
                if(data_.field_bit !=  42) data_.set_field(42, 0);
                ;
                Lib.set_bits((ulong)(src), 5, data_.bytes, data_.BIT);;
            }




            public  MAV_AUTOPILOT? autopilot()
            {
                if(data_.field_bit !=  43 && !data_.set_field(43, -1))  return null;
                return (MAV_AUTOPILOT)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 5)));;
            }


            public void autopilot(MAV_AUTOPILOT src)
            {
                if(data_.field_bit !=  43) data_.set_field(43, 0);
                ;
                Lib.set_bits((ulong)(src), 5, data_.bytes, data_.BIT);;
            }




            public  MAV_MODE_FLAG? base_mode()
            {
                if(data_.field_bit !=  44 && !data_.set_field(44, -1))  return null;
                return    MAV_MODE_FLAG_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 4));;
            }


            public void base_mode(MAV_MODE_FLAG src)
            {
                if(data_.field_bit !=  44) data_.set_field(44, 0);
                ;
                Lib.set_bits(MAV_MODE_FLAG_.bits(src), 4, data_.bytes, data_.BIT) ;;
            }




            public  MAV_STATE? system_status()
            {
                if(data_.field_bit !=  45 && !data_.set_field(45, -1))  return null;
                return (MAV_STATE)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void system_status(MAV_STATE src)
            {
                if(data_.field_bit !=  45) data_.set_field(45, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct HEARTBEAT_dst_adapter : com.company.demo.GroundControl. HEARTBEAT.DST_
        {
            HEARTBEAT dst;
            public HEARTBEAT_dst_adapter(HEARTBEAT dst) { this.dst = dst; }
            public void typE(com.company.demo.GroundControl. MAV_TYPE src) { dst.typE(src); }
            public void autopilot(com.company.demo.GroundControl. MAV_AUTOPILOT src) { dst.autopilot(src); }
            public void base_mode(com.company.demo.GroundControl. MAV_MODE_FLAG src) { dst.base_mode(src); }
            public void custom_mode(int src) { dst.custom_mode(src); }
            public void system_status(com.company.demo.GroundControl. MAV_STATE src) { dst.system_status(src); }
            public void mavlink_version(sbyte src) { dst.mavlink_version(src); }

        }
        public struct SYS_STATUS
        {
            internal Pack.Cursor data_;
            internal SYS_STATUS(Pack.Cursor data) { this.data_ = data; }

            public short load() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void load(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short voltage_battery() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void voltage_battery(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short drop_rate_comm() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void drop_rate_comm(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short errors_comm() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void errors_comm(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short errors_count1() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void errors_count1(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short errors_count2() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void errors_count2(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short errors_count3() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void errors_count3(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short errors_count4() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void errors_count4(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public short current_battery() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 2)); }
            public void current_battery(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 16);  }

            public sbyte battery_remaining() { return (sbyte)(data_.bytes[data_.origin  + 18]); }
            public void battery_remaining(sbyte src) {    data_.bytes[data_.origin  + 18] = (byte)(src);  }


            public  MAV_SYS_STATUS_SENSOR? onboard_control_sensors_present()
            {
                if(data_.field_bit !=  154 && !data_.set_field(154, -1))  return null;
                return    MAV_SYS_STATUS_SENSOR_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 5));;
            }


            public void onboard_control_sensors_present(MAV_SYS_STATUS_SENSOR src)
            {
                if(data_.field_bit !=  154) data_.set_field(154, 0);
                ;
                Lib.set_bits(MAV_SYS_STATUS_SENSOR_.bits(src), 5, data_.bytes, data_.BIT) ;;
            }




            public  MAV_SYS_STATUS_SENSOR? onboard_control_sensors_enabled()
            {
                if(data_.field_bit !=  155 && !data_.set_field(155, -1))  return null;
                return    MAV_SYS_STATUS_SENSOR_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 5));;
            }


            public void onboard_control_sensors_enabled(MAV_SYS_STATUS_SENSOR src)
            {
                if(data_.field_bit !=  155) data_.set_field(155, 0);
                ;
                Lib.set_bits(MAV_SYS_STATUS_SENSOR_.bits(src), 5, data_.bytes, data_.BIT) ;;
            }




            public  MAV_SYS_STATUS_SENSOR? onboard_control_sensors_health()
            {
                if(data_.field_bit !=  156 && !data_.set_field(156, -1))  return null;
                return    MAV_SYS_STATUS_SENSOR_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 5));;
            }


            public void onboard_control_sensors_health(MAV_SYS_STATUS_SENSOR src)
            {
                if(data_.field_bit !=  156) data_.set_field(156, 0);
                ;
                Lib.set_bits(MAV_SYS_STATUS_SENSOR_.bits(src), 5, data_.bytes, data_.BIT) ;;
            }



        }
        public struct SYS_STATUS_dst_adapter : com.company.demo.GroundControl. SYS_STATUS.DST_
        {
            SYS_STATUS dst;
            public SYS_STATUS_dst_adapter(SYS_STATUS dst) { this.dst = dst; }
            public void onboard_control_sensors_present(com.company.demo.GroundControl. MAV_SYS_STATUS_SENSOR src) { dst.onboard_control_sensors_present(src); }
            public void onboard_control_sensors_enabled(com.company.demo.GroundControl. MAV_SYS_STATUS_SENSOR src) { dst.onboard_control_sensors_enabled(src); }
            public void onboard_control_sensors_health(com.company.demo.GroundControl. MAV_SYS_STATUS_SENSOR src) { dst.onboard_control_sensors_health(src); }
            public void load(short src) { dst.load(src); }
            public void voltage_battery(short src) { dst.voltage_battery(src); }
            public void current_battery(short src) { dst.current_battery(src); }
            public void battery_remaining(sbyte src) { dst.battery_remaining(src); }
            public void drop_rate_comm(short src) { dst.drop_rate_comm(src); }
            public void errors_comm(short src) { dst.errors_comm(src); }
            public void errors_count1(short src) { dst.errors_count1(src); }
            public void errors_count2(short src) { dst.errors_count2(src); }
            public void errors_count3(short src) { dst.errors_count3(src); }
            public void errors_count4(short src) { dst.errors_count4(src); }

        }
        public struct SYSTEM_TIME
        {
            internal Pack.Cursor data_;
            internal SYSTEM_TIME(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public long time_unix_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 8)); }
            public void time_unix_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin  + 4);  }

        }
        public struct SYSTEM_TIME_dst_adapter : com.company.demo.GroundControl. SYSTEM_TIME.DST_
        {
            SYSTEM_TIME dst;
            public SYSTEM_TIME_dst_adapter(SYSTEM_TIME dst) { this.dst = dst; }
            public void time_unix_usec(long src) { dst.time_unix_usec(src); }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }

        }
        public struct PING
        {
            internal Pack.Cursor data_;
            internal PING(Pack.Cursor data) { this.data_ = data; }

            public int seq() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void seq(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin  + 4);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 12]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 12] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 13]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 13] = (byte)(src);  }

        }
        public struct PING_dst_adapter : com.company.demo.GroundControl. PING.DST_
        {
            PING dst;
            public PING_dst_adapter(PING dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void seq(int src) { dst.seq(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }
        public struct CHANGE_OPERATOR_CONTROL
        {
            internal Pack.Cursor data_;
            internal CHANGE_OPERATOR_CONTROL(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte control_request() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void control_request(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public sbyte version() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void version(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }


            public passkey_? passkey()
            {
                if(data_.field_bit !=  26 && !data_.set_field(26, -1))  return (passkey_?) null;
                return new passkey_(data_);
            }



            public char[] passkey(string src, char[] reuse)
            {
                var len = src.Length;
                if(reuse == null || reuse.Length < len) reuse = src.ToCharArray();
                else src.CopyTo(0, reuse, 0, len);
                if(data_.field_bit !=  26) data_.set_field(26, Math.Min(Encoding.UTF8.GetByteCount(reuse, 0, len), CHANGE_OPERATOR_CONTROL.passkey_.item_len_max));
                Encoding.UTF8.GetBytes(reuse, 0, len, data_.bytes, data_.BYTE);
                return reuse;
            }


            public void passkey(byte[] src)
            {
                var len = Math.Min(src.Length, CHANGE_OPERATOR_CONTROL.passkey_.item_len_max);
                if(data_.field_bit !=  26) data_.set_field(26, len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.BYTE + index] = src[index];;
            }

            public passkey_ passkey(int len)
            {
                if(data_.field_bit !=  26) data_.set_field(26, Math.Min(len, CHANGE_OPERATOR_CONTROL.passkey_.item_len_max));
                return new passkey_(data_);
            }

            public struct passkey_
            {
                Pack.Cursor data_;
                public passkey_(Pack.Cursor data) {this.data_ = data;}

                public void set(byte src, int index) {  data_.bytes[data_.BYTE + index] =  src ; }

                public byte get(int index)  { return data_.bytes[data_.BYTE + index]; ;}
                public string get() { return Encoding.UTF8.GetString(data_.bytes, data_.BYTE, data_.item_len) ;}

                public bool same(byte [] other)
                {
                    if(other.Length != len()) return false;
                    for(int i = 0; i < other.Length; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(passkey_ other)
                {
                    if(other.len() != len()) return false;
                    for(int i = 0; i < len(); i++) if(other.get(i) != get(i)) return false;
                    return true;
                }
                public int len() { return data_.item_len;  }

                public const int item_len_max = 255 ;

            }


        }
        public struct CHANGE_OPERATOR_CONTROL_dst_adapter : com.company.demo.GroundControl. CHANGE_OPERATOR_CONTROL.DST_
        {
            CHANGE_OPERATOR_CONTROL dst;
            public CHANGE_OPERATOR_CONTROL_dst_adapter(CHANGE_OPERATOR_CONTROL dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void control_request(sbyte src) { dst.control_request(src); }
            public void version(sbyte src) { dst.version(src); }
            public void passkey(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL.passkey_ src)
            {
                var item = dst.passkey(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }
        public struct CHANGE_OPERATOR_CONTROL_ACK
        {
            internal Pack.Cursor data_;
            internal CHANGE_OPERATOR_CONTROL_ACK(Pack.Cursor data) { this.data_ = data; }

            public sbyte gcs_system_id() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void gcs_system_id(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte control_request() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void control_request(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public sbyte ack() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void ack(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

        }
        public struct CHANGE_OPERATOR_CONTROL_ACK_dst_adapter : com.company.demo.GroundControl. CHANGE_OPERATOR_CONTROL_ACK.DST_
        {
            CHANGE_OPERATOR_CONTROL_ACK dst;
            public CHANGE_OPERATOR_CONTROL_ACK_dst_adapter(CHANGE_OPERATOR_CONTROL_ACK dst) { this.dst = dst; }
            public void gcs_system_id(sbyte src) { dst.gcs_system_id(src); }
            public void control_request(sbyte src) { dst.control_request(src); }
            public void ack(sbyte src) { dst.ack(src); }

        }
        public struct AUTH_KEY
        {
            internal Pack.Cursor data_;
            internal AUTH_KEY(Pack.Cursor data) { this.data_ = data; }


            public key_? key()
            {
                if(data_.field_bit !=  2 && !data_.set_field(2, -1))  return (key_?) null;
                return new key_(data_);
            }



            public char[] key(string src, char[] reuse)
            {
                var len = src.Length;
                if(reuse == null || reuse.Length < len) reuse = src.ToCharArray();
                else src.CopyTo(0, reuse, 0, len);
                if(data_.field_bit !=  2) data_.set_field(2, Math.Min(Encoding.UTF8.GetByteCount(reuse, 0, len), AUTH_KEY.key_.item_len_max));
                Encoding.UTF8.GetBytes(reuse, 0, len, data_.bytes, data_.BYTE);
                return reuse;
            }


            public void key(byte[] src)
            {
                var len = Math.Min(src.Length, AUTH_KEY.key_.item_len_max);
                if(data_.field_bit !=  2) data_.set_field(2, len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.BYTE + index] = src[index];;
            }

            public key_ key(int len)
            {
                if(data_.field_bit !=  2) data_.set_field(2, Math.Min(len, AUTH_KEY.key_.item_len_max));
                return new key_(data_);
            }

            public struct key_
            {
                Pack.Cursor data_;
                public key_(Pack.Cursor data) {this.data_ = data;}

                public void set(byte src, int index) {  data_.bytes[data_.BYTE + index] =  src ; }

                public byte get(int index)  { return data_.bytes[data_.BYTE + index]; ;}
                public string get() { return Encoding.UTF8.GetString(data_.bytes, data_.BYTE, data_.item_len) ;}

                public bool same(byte [] other)
                {
                    if(other.Length != len()) return false;
                    for(int i = 0; i < other.Length; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(key_ other)
                {
                    if(other.len() != len()) return false;
                    for(int i = 0; i < len(); i++) if(other.get(i) != get(i)) return false;
                    return true;
                }
                public int len() { return data_.item_len;  }

                public const int item_len_max = 255 ;

            }


        }
        public struct AUTH_KEY_dst_adapter : com.company.demo.GroundControl. AUTH_KEY.DST_
        {
            AUTH_KEY dst;
            public AUTH_KEY_dst_adapter(AUTH_KEY dst) { this.dst = dst; }
            public void key(com.company.demo.GroundControl.AUTH_KEY.key_ src)
            {
                var item = dst.key(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }
        public struct SET_MODE
        {
            internal Pack.Cursor data_;
            internal SET_MODE(Pack.Cursor data) { this.data_ = data; }

            public int custom_mode() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void custom_mode(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }


            public  MAV_MODE? base_mode()
            {
                if(data_.field_bit !=  40 && !data_.set_field(40, -1))  return null;
                return    MAV_MODE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 4));;
            }


            public void base_mode(MAV_MODE src)
            {
                if(data_.field_bit !=  40) data_.set_field(40, 0);
                ;
                Lib.set_bits(MAV_MODE_.bits(src), 4, data_.bytes, data_.BIT) ;;
            }



        }
        public struct SET_MODE_dst_adapter : com.company.demo.GroundControl. SET_MODE.DST_
        {
            SET_MODE dst;
            public SET_MODE_dst_adapter(SET_MODE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void base_mode(com.company.demo.GroundControl. MAV_MODE src) { dst.base_mode(src); }
            public void custom_mode(int src) { dst.custom_mode(src); }

        }
        public struct PARAM_REQUEST_READ
        {
            internal Pack.Cursor data_;
            internal PARAM_REQUEST_READ(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public short param_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void param_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }


            public param_id_? param_id()
            {
                if(data_.field_bit !=  34 && !data_.set_field(34, -1))  return (param_id_?) null;
                return new param_id_(data_);
            }



            public char[] param_id(string src, char[] reuse)
            {
                var len = src.Length;
                if(reuse == null || reuse.Length < len) reuse = src.ToCharArray();
                else src.CopyTo(0, reuse, 0, len);
                if(data_.field_bit !=  34) data_.set_field(34, Math.Min(Encoding.UTF8.GetByteCount(reuse, 0, len), PARAM_REQUEST_READ.param_id_.item_len_max));
                Encoding.UTF8.GetBytes(reuse, 0, len, data_.bytes, data_.BYTE);
                return reuse;
            }


            public void param_id(byte[] src)
            {
                var len = Math.Min(src.Length, PARAM_REQUEST_READ.param_id_.item_len_max);
                if(data_.field_bit !=  34) data_.set_field(34, len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.BYTE + index] = src[index];;
            }

            public param_id_ param_id(int len)
            {
                if(data_.field_bit !=  34) data_.set_field(34, Math.Min(len, PARAM_REQUEST_READ.param_id_.item_len_max));
                return new param_id_(data_);
            }

            public struct param_id_
            {
                Pack.Cursor data_;
                public param_id_(Pack.Cursor data) {this.data_ = data;}

                public void set(byte src, int index) {  data_.bytes[data_.BYTE + index] =  src ; }

                public byte get(int index)  { return data_.bytes[data_.BYTE + index]; ;}
                public string get() { return Encoding.UTF8.GetString(data_.bytes, data_.BYTE, data_.item_len) ;}

                public bool same(byte [] other)
                {
                    if(other.Length != len()) return false;
                    for(int i = 0; i < other.Length; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(param_id_ other)
                {
                    if(other.len() != len()) return false;
                    for(int i = 0; i < len(); i++) if(other.get(i) != get(i)) return false;
                    return true;
                }
                public int len() { return data_.item_len;  }

                public const int item_len_max = 255 ;

            }


        }
        public struct PARAM_REQUEST_READ_dst_adapter : com.company.demo.GroundControl. PARAM_REQUEST_READ.DST_
        {
            PARAM_REQUEST_READ dst;
            public PARAM_REQUEST_READ_dst_adapter(PARAM_REQUEST_READ dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void param_id(com.company.demo.GroundControl.PARAM_REQUEST_READ.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_index(short src) { dst.param_index(src); }

        }
        public struct PARAM_REQUEST_LIST
        {
            internal Pack.Cursor data_;
            internal PARAM_REQUEST_LIST(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

        }
        public struct PARAM_REQUEST_LIST_dst_adapter : com.company.demo.GroundControl. PARAM_REQUEST_LIST.DST_
        {
            PARAM_REQUEST_LIST dst;
            public PARAM_REQUEST_LIST_dst_adapter(PARAM_REQUEST_LIST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }
        public struct PARAM_VALUE
        {
            internal Pack.Cursor data_;
            internal PARAM_VALUE(Pack.Cursor data) { this.data_ = data; }

            public short param_count() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void param_count(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short param_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void param_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public float param_value() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void param_value(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }


            public param_id_? param_id()
            {
                if(data_.field_bit !=  66 && !data_.set_field(66, -1))  return (param_id_?) null;
                return new param_id_(data_);
            }



            public char[] param_id(string src, char[] reuse)
            {
                var len = src.Length;
                if(reuse == null || reuse.Length < len) reuse = src.ToCharArray();
                else src.CopyTo(0, reuse, 0, len);
                if(data_.field_bit !=  66) data_.set_field(66, Math.Min(Encoding.UTF8.GetByteCount(reuse, 0, len), PARAM_VALUE.param_id_.item_len_max));
                Encoding.UTF8.GetBytes(reuse, 0, len, data_.bytes, data_.BYTE);
                return reuse;
            }


            public void param_id(byte[] src)
            {
                var len = Math.Min(src.Length, PARAM_VALUE.param_id_.item_len_max);
                if(data_.field_bit !=  66) data_.set_field(66, len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.BYTE + index] = src[index];;
            }

            public param_id_ param_id(int len)
            {
                if(data_.field_bit !=  66) data_.set_field(66, Math.Min(len, PARAM_VALUE.param_id_.item_len_max));
                return new param_id_(data_);
            }

            public struct param_id_
            {
                Pack.Cursor data_;
                public param_id_(Pack.Cursor data) {this.data_ = data;}

                public void set(byte src, int index) {  data_.bytes[data_.BYTE + index] =  src ; }

                public byte get(int index)  { return data_.bytes[data_.BYTE + index]; ;}
                public string get() { return Encoding.UTF8.GetString(data_.bytes, data_.BYTE, data_.item_len) ;}

                public bool same(byte [] other)
                {
                    if(other.Length != len()) return false;
                    for(int i = 0; i < other.Length; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(param_id_ other)
                {
                    if(other.len() != len()) return false;
                    for(int i = 0; i < len(); i++) if(other.get(i) != get(i)) return false;
                    return true;
                }
                public int len() { return data_.item_len;  }

                public const int item_len_max = 255 ;

            }



            public  MAV_PARAM_TYPE? param_type()
            {
                if(data_.field_bit !=  67 && !data_.set_field(67, -1))  return null;
                return (MAV_PARAM_TYPE)((1 + (sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void param_type(MAV_PARAM_TYPE src)
            {
                if(data_.field_bit !=  67) data_.set_field(67, 0);
                ;
                Lib.set_bits((ulong)(src   - 1), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct PARAM_VALUE_dst_adapter : com.company.demo.GroundControl. PARAM_VALUE.DST_
        {
            PARAM_VALUE dst;
            public PARAM_VALUE_dst_adapter(PARAM_VALUE dst) { this.dst = dst; }
            public void param_id(com.company.demo.GroundControl.PARAM_VALUE.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_value(float src) { dst.param_value(src); }
            public void param_type(com.company.demo.GroundControl. MAV_PARAM_TYPE src) { dst.param_type(src); }
            public void param_count(short src) { dst.param_count(src); }
            public void param_index(short src) { dst.param_index(src); }

        }
        public struct PARAM_SET
        {
            internal Pack.Cursor data_;
            internal PARAM_SET(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public float param_value() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 2); }
            public void param_value(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 2, 4);  }


            public param_id_? param_id()
            {
                if(data_.field_bit !=  50 && !data_.set_field(50, -1))  return (param_id_?) null;
                return new param_id_(data_);
            }



            public char[] param_id(string src, char[] reuse)
            {
                var len = src.Length;
                if(reuse == null || reuse.Length < len) reuse = src.ToCharArray();
                else src.CopyTo(0, reuse, 0, len);
                if(data_.field_bit !=  50) data_.set_field(50, Math.Min(Encoding.UTF8.GetByteCount(reuse, 0, len), PARAM_SET.param_id_.item_len_max));
                Encoding.UTF8.GetBytes(reuse, 0, len, data_.bytes, data_.BYTE);
                return reuse;
            }


            public void param_id(byte[] src)
            {
                var len = Math.Min(src.Length, PARAM_SET.param_id_.item_len_max);
                if(data_.field_bit !=  50) data_.set_field(50, len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.BYTE + index] = src[index];;
            }

            public param_id_ param_id(int len)
            {
                if(data_.field_bit !=  50) data_.set_field(50, Math.Min(len, PARAM_SET.param_id_.item_len_max));
                return new param_id_(data_);
            }

            public struct param_id_
            {
                Pack.Cursor data_;
                public param_id_(Pack.Cursor data) {this.data_ = data;}

                public void set(byte src, int index) {  data_.bytes[data_.BYTE + index] =  src ; }

                public byte get(int index)  { return data_.bytes[data_.BYTE + index]; ;}
                public string get() { return Encoding.UTF8.GetString(data_.bytes, data_.BYTE, data_.item_len) ;}

                public bool same(byte [] other)
                {
                    if(other.Length != len()) return false;
                    for(int i = 0; i < other.Length; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(param_id_ other)
                {
                    if(other.len() != len()) return false;
                    for(int i = 0; i < len(); i++) if(other.get(i) != get(i)) return false;
                    return true;
                }
                public int len() { return data_.item_len;  }

                public const int item_len_max = 255 ;

            }



            public  MAV_PARAM_TYPE? param_type()
            {
                if(data_.field_bit !=  51 && !data_.set_field(51, -1))  return null;
                return (MAV_PARAM_TYPE)((1 + (sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void param_type(MAV_PARAM_TYPE src)
            {
                if(data_.field_bit !=  51) data_.set_field(51, 0);
                ;
                Lib.set_bits((ulong)(src   - 1), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct PARAM_SET_dst_adapter : com.company.demo.GroundControl. PARAM_SET.DST_
        {
            PARAM_SET dst;
            public PARAM_SET_dst_adapter(PARAM_SET dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void param_id(com.company.demo.GroundControl.PARAM_SET.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_value(float src) { dst.param_value(src); }
            public void param_type(com.company.demo.GroundControl. MAV_PARAM_TYPE src) { dst.param_type(src); }

        }
        public struct GPS_RAW_INT
        {
            internal Pack.Cursor data_;
            internal GPS_RAW_INT(Pack.Cursor data) { this.data_ = data; }

            public short eph() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void eph(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short epv() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void epv(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short vel() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void vel(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short cog() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void cog(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin  + 8);  }

            public int lat() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 4)); }
            public void lat(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 16);  }

            public int lon() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 4)); }
            public void lon(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 20);  }

            public int alt() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 24, 4)); }
            public void alt(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 24);  }

            public sbyte satellites_visible() { return (sbyte)(data_.bytes[data_.origin  + 28]); }
            public void satellites_visible(sbyte src) {    data_.bytes[data_.origin  + 28] = (byte)(src);  }


            public  GPS_FIX_TYPE? fix_type()
            {
                if(data_.field_bit !=  234 && !data_.set_field(234, -1))  return null;
                return (GPS_FIX_TYPE)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void fix_type(GPS_FIX_TYPE src)
            {
                if(data_.field_bit !=  234) data_.set_field(234, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }




            public int? alt_ellipsoid()
            {
                if(data_.field_bit !=  235 && !data_.set_field(235, -1))  return null;
                return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.BYTE, 4));;
            }


            public void alt_ellipsoid(int src)
            {
                if(data_.field_bit !=  235) data_.set_field(235, 0);
                ;
                Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.BYTE);;
            }




            public int? h_acc()
            {
                if(data_.field_bit !=  236 && !data_.set_field(236, -1))  return null;
                return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.BYTE, 4));;
            }


            public void h_acc(int src)
            {
                if(data_.field_bit !=  236) data_.set_field(236, 0);
                ;
                Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.BYTE);;
            }




            public int? v_acc()
            {
                if(data_.field_bit !=  237 && !data_.set_field(237, -1))  return null;
                return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.BYTE, 4));;
            }


            public void v_acc(int src)
            {
                if(data_.field_bit !=  237) data_.set_field(237, 0);
                ;
                Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.BYTE);;
            }




            public int? vel_acc()
            {
                if(data_.field_bit !=  238 && !data_.set_field(238, -1))  return null;
                return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.BYTE, 4));;
            }


            public void vel_acc(int src)
            {
                if(data_.field_bit !=  238) data_.set_field(238, 0);
                ;
                Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.BYTE);;
            }




            public int? hdg_acc()
            {
                if(data_.field_bit !=  239 && !data_.set_field(239, -1))  return null;
                return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.BYTE, 4));;
            }


            public void hdg_acc(int src)
            {
                if(data_.field_bit !=  239) data_.set_field(239, 0);
                ;
                Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.BYTE);;
            }



        }
        public struct GPS_RAW_INT_dst_adapter : com.company.demo.GroundControl. GPS_RAW_INT.DST_
        {
            GPS_RAW_INT dst;
            public GPS_RAW_INT_dst_adapter(GPS_RAW_INT dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void fix_type(com.company.demo.GroundControl. GPS_FIX_TYPE src) { dst.fix_type(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void eph(short src) { dst.eph(src); }
            public void epv(short src) { dst.epv(src); }
            public void vel(short src) { dst.vel(src); }
            public void cog(short src) { dst.cog(src); }
            public void satellites_visible(sbyte src) { dst.satellites_visible(src); }
            public void alt_ellipsoid(int src) { dst.alt_ellipsoid(src); }
            public void h_acc(int src) { dst.h_acc(src); }
            public void v_acc(int src) { dst.v_acc(src); }
            public void vel_acc(int src) { dst.vel_acc(src); }
            public void hdg_acc(int src) { dst.hdg_acc(src); }

        }
        public struct GPS_STATUS
        {
            internal Pack.Cursor data_;
            internal GPS_STATUS(Pack.Cursor data) { this.data_ = data; }

            public sbyte satellites_visible() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void satellites_visible(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public satellite_prn_ satellite_prn()
            {
                return new  satellite_prn_(data_);
            }

            public struct satellite_prn_
            {
                internal Pack.Cursor data_;
                public satellite_prn_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return GPS_STATUS.satellite_prn_.item_len  ;}
                public sbyte get(int index) { return (sbyte)(data_.bytes[data_.origin  + 1 + index]); }

                public bool same(sbyte[] other)
                {
                    if(other.Length != GPS_STATUS.satellite_prn_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_prn_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(satellite_prn_ other)
                {
                    if(other.len() != GPS_STATUS.satellite_prn_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_prn_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(sbyte src, int index) {  data_.bytes[data_.origin  + 1 + index] = (byte)(src); }

                public const int item_len = 20 ;


            }

            public void satellite_prn(sbyte[] src)
            {
                var len =  Math.Min(src.Length, GPS_STATUS.satellite_prn_.item_len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.origin  + 1 + index] = (byte)(src[index]);
            }

            public satellite_used_ satellite_used()
            {
                return new  satellite_used_(data_);
            }

            public struct satellite_used_
            {
                internal Pack.Cursor data_;
                public satellite_used_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return GPS_STATUS.satellite_used_.item_len  ;}
                public sbyte get(int index) { return (sbyte)(data_.bytes[data_.origin  + 21 + index]); }

                public bool same(sbyte[] other)
                {
                    if(other.Length != GPS_STATUS.satellite_used_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_used_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(satellite_used_ other)
                {
                    if(other.len() != GPS_STATUS.satellite_used_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_used_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(sbyte src, int index) {  data_.bytes[data_.origin  + 21 + index] = (byte)(src); }

                public const int item_len = 20 ;


            }

            public void satellite_used(sbyte[] src)
            {
                var len =  Math.Min(src.Length, GPS_STATUS.satellite_used_.item_len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.origin  + 21 + index] = (byte)(src[index]);
            }

            public satellite_elevation_ satellite_elevation()
            {
                return new  satellite_elevation_(data_);
            }

            public struct satellite_elevation_
            {
                internal Pack.Cursor data_;
                public satellite_elevation_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return GPS_STATUS.satellite_elevation_.item_len  ;}
                public sbyte get(int index) { return (sbyte)(data_.bytes[data_.origin  + 41 + index]); }

                public bool same(sbyte[] other)
                {
                    if(other.Length != GPS_STATUS.satellite_elevation_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_elevation_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(satellite_elevation_ other)
                {
                    if(other.len() != GPS_STATUS.satellite_elevation_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_elevation_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(sbyte src, int index) {  data_.bytes[data_.origin  + 41 + index] = (byte)(src); }

                public const int item_len = 20 ;


            }

            public void satellite_elevation(sbyte[] src)
            {
                var len =  Math.Min(src.Length, GPS_STATUS.satellite_elevation_.item_len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.origin  + 41 + index] = (byte)(src[index]);
            }

            public satellite_azimuth_ satellite_azimuth()
            {
                return new  satellite_azimuth_(data_);
            }

            public struct satellite_azimuth_
            {
                internal Pack.Cursor data_;
                public satellite_azimuth_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return GPS_STATUS.satellite_azimuth_.item_len  ;}
                public sbyte get(int index) { return (sbyte)(data_.bytes[data_.origin  + 61 + index]); }

                public bool same(sbyte[] other)
                {
                    if(other.Length != GPS_STATUS.satellite_azimuth_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_azimuth_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(satellite_azimuth_ other)
                {
                    if(other.len() != GPS_STATUS.satellite_azimuth_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_azimuth_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(sbyte src, int index) {  data_.bytes[data_.origin  + 61 + index] = (byte)(src); }

                public const int item_len = 20 ;


            }

            public void satellite_azimuth(sbyte[] src)
            {
                var len =  Math.Min(src.Length, GPS_STATUS.satellite_azimuth_.item_len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.origin  + 61 + index] = (byte)(src[index]);
            }

            public satellite_snr_ satellite_snr()
            {
                return new  satellite_snr_(data_);
            }

            public struct satellite_snr_
            {
                internal Pack.Cursor data_;
                public satellite_snr_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return GPS_STATUS.satellite_snr_.item_len  ;}
                public sbyte get(int index) { return (sbyte)(data_.bytes[data_.origin  + 81 + index]); }

                public bool same(sbyte[] other)
                {
                    if(other.Length != GPS_STATUS.satellite_snr_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_snr_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(satellite_snr_ other)
                {
                    if(other.len() != GPS_STATUS.satellite_snr_.item_len) return false;
                    for(int i = 0; i < GPS_STATUS.satellite_snr_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(sbyte src, int index) {  data_.bytes[data_.origin  + 81 + index] = (byte)(src); }

                public const int item_len = 20 ;


            }

            public void satellite_snr(sbyte[] src)
            {
                var len =  Math.Min(src.Length, GPS_STATUS.satellite_snr_.item_len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.origin  + 81 + index] = (byte)(src[index]);
            }

        }
        public struct GPS_STATUS_dst_adapter : com.company.demo.GroundControl. GPS_STATUS.DST_
        {
            GPS_STATUS dst;
            public GPS_STATUS_dst_adapter(GPS_STATUS dst) { this.dst = dst; }
            public void satellites_visible(sbyte src) { dst.satellites_visible(src); }
            public void satellite_prn(com.company.demo.GroundControl.GPS_STATUS.satellite_prn_ src)
            {
                var item = dst.satellite_prn();
                for(int i = 0; i < com.company.demo.GroundControl.GPS_STATUS.satellite_prn_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void satellite_used(com.company.demo.GroundControl.GPS_STATUS.satellite_used_ src)
            {
                var item = dst.satellite_used();
                for(int i = 0; i < com.company.demo.GroundControl.GPS_STATUS.satellite_used_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void satellite_elevation(com.company.demo.GroundControl.GPS_STATUS.satellite_elevation_ src)
            {
                var item = dst.satellite_elevation();
                for(int i = 0; i < com.company.demo.GroundControl.GPS_STATUS.satellite_elevation_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void satellite_azimuth(com.company.demo.GroundControl.GPS_STATUS.satellite_azimuth_ src)
            {
                var item = dst.satellite_azimuth();
                for(int i = 0; i < com.company.demo.GroundControl.GPS_STATUS.satellite_azimuth_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void satellite_snr(com.company.demo.GroundControl.GPS_STATUS.satellite_snr_ src)
            {
                var item = dst.satellite_snr();
                for(int i = 0; i < com.company.demo.GroundControl.GPS_STATUS.satellite_snr_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }
        public struct SCALED_IMU
        {
            internal Pack.Cursor data_;
            internal SCALED_IMU(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public short xacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void xacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short yacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void yacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short zacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void zacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short xgyro() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void xgyro(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short ygyro() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void ygyro(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short zgyro() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void zgyro(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public short xmag() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 2)); }
            public void xmag(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 16);  }

            public short ymag() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 18, 2)); }
            public void ymag(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 18);  }

            public short zmag() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 2)); }
            public void zmag(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 20);  }

        }
        public struct SCALED_IMU_dst_adapter : com.company.demo.GroundControl. SCALED_IMU.DST_
        {
            SCALED_IMU dst;
            public SCALED_IMU_dst_adapter(SCALED_IMU dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void xacc(short src) { dst.xacc(src); }
            public void yacc(short src) { dst.yacc(src); }
            public void zacc(short src) { dst.zacc(src); }
            public void xgyro(short src) { dst.xgyro(src); }
            public void ygyro(short src) { dst.ygyro(src); }
            public void zgyro(short src) { dst.zgyro(src); }
            public void xmag(short src) { dst.xmag(src); }
            public void ymag(short src) { dst.ymag(src); }
            public void zmag(short src) { dst.zmag(src); }

        }
        public struct RAW_IMU
        {
            internal Pack.Cursor data_;
            internal RAW_IMU(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public short xacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void xacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short yacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void yacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short zacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void zacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short xgyro() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void xgyro(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public short ygyro() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 2)); }
            public void ygyro(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 16);  }

            public short zgyro() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 18, 2)); }
            public void zgyro(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 18);  }

            public short xmag() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 2)); }
            public void xmag(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 20);  }

            public short ymag() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 22, 2)); }
            public void ymag(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 22);  }

            public short zmag() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 24, 2)); }
            public void zmag(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 24);  }

        }
        public struct RAW_IMU_dst_adapter : com.company.demo.GroundControl. RAW_IMU.DST_
        {
            RAW_IMU dst;
            public RAW_IMU_dst_adapter(RAW_IMU dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void xacc(short src) { dst.xacc(src); }
            public void yacc(short src) { dst.yacc(src); }
            public void zacc(short src) { dst.zacc(src); }
            public void xgyro(short src) { dst.xgyro(src); }
            public void ygyro(short src) { dst.ygyro(src); }
            public void zgyro(short src) { dst.zgyro(src); }
            public void xmag(short src) { dst.xmag(src); }
            public void ymag(short src) { dst.ymag(src); }
            public void zmag(short src) { dst.zmag(src); }

        }
        public struct RAW_PRESSURE
        {
            internal Pack.Cursor data_;
            internal RAW_PRESSURE(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public short press_abs() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void press_abs(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short press_diff1() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void press_diff1(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short press_diff2() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void press_diff2(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short temperature() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void temperature(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

        }
        public struct RAW_PRESSURE_dst_adapter : com.company.demo.GroundControl. RAW_PRESSURE.DST_
        {
            RAW_PRESSURE dst;
            public RAW_PRESSURE_dst_adapter(RAW_PRESSURE dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void press_abs(short src) { dst.press_abs(src); }
            public void press_diff1(short src) { dst.press_diff1(src); }
            public void press_diff2(short src) { dst.press_diff2(src); }
            public void temperature(short src) { dst.temperature(src); }

        }
        public struct SCALED_PRESSURE
        {
            internal Pack.Cursor data_;
            internal SCALED_PRESSURE(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public float press_abs() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void press_abs(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float press_diff() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void press_diff(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public short temperature() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void temperature(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

        }
        public struct SCALED_PRESSURE_dst_adapter : com.company.demo.GroundControl. SCALED_PRESSURE.DST_
        {
            SCALED_PRESSURE dst;
            public SCALED_PRESSURE_dst_adapter(SCALED_PRESSURE dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void press_abs(float src) { dst.press_abs(src); }
            public void press_diff(float src) { dst.press_diff(src); }
            public void temperature(short src) { dst.temperature(src); }

        }
        public struct ATTITUDE
        {
            internal Pack.Cursor data_;
            internal ATTITUDE(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public float roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float rollspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void rollspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float pitchspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void pitchspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float yawspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void yawspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

        }
        public struct ATTITUDE_dst_adapter : com.company.demo.GroundControl. ATTITUDE.DST_
        {
            ATTITUDE dst;
            public ATTITUDE_dst_adapter(ATTITUDE dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void rollspeed(float src) { dst.rollspeed(src); }
            public void pitchspeed(float src) { dst.pitchspeed(src); }
            public void yawspeed(float src) { dst.yawspeed(src); }

        }
        public struct ATTITUDE_QUATERNION
        {
            internal Pack.Cursor data_;
            internal ATTITUDE_QUATERNION(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public float q1() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void q1(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float q2() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void q2(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float q3() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void q3(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float q4() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void q4(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float rollspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void rollspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float pitchspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void pitchspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float yawspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void yawspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

        }
        public struct ATTITUDE_QUATERNION_dst_adapter : com.company.demo.GroundControl. ATTITUDE_QUATERNION.DST_
        {
            ATTITUDE_QUATERNION dst;
            public ATTITUDE_QUATERNION_dst_adapter(ATTITUDE_QUATERNION dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void q1(float src) { dst.q1(src); }
            public void q2(float src) { dst.q2(src); }
            public void q3(float src) { dst.q3(src); }
            public void q4(float src) { dst.q4(src); }
            public void rollspeed(float src) { dst.rollspeed(src); }
            public void pitchspeed(float src) { dst.pitchspeed(src); }
            public void yawspeed(float src) { dst.yawspeed(src); }

        }
        public struct LOCAL_POSITION_NED
        {
            internal Pack.Cursor data_;
            internal LOCAL_POSITION_NED(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

        }
        public struct LOCAL_POSITION_NED_dst_adapter : com.company.demo.GroundControl. LOCAL_POSITION_NED.DST_
        {
            LOCAL_POSITION_NED dst;
            public LOCAL_POSITION_NED_dst_adapter(LOCAL_POSITION_NED dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }

        }
        public struct GLOBAL_POSITION_INT
        {
            internal Pack.Cursor data_;
            internal GLOBAL_POSITION_INT(Pack.Cursor data) { this.data_ = data; }

            public short hdg() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void hdg(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 2);  }

            public int lat() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 4)); }
            public void lat(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 6);  }

            public int lon() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 4)); }
            public void lon(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 10);  }

            public int alt() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 4)); }
            public void alt(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 14);  }

            public int relative_alt() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 18, 4)); }
            public void relative_alt(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 18);  }

            public short vx() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 22, 2)); }
            public void vx(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 22);  }

            public short vy() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 24, 2)); }
            public void vy(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 24);  }

            public short vz() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 26, 2)); }
            public void vz(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 26);  }

        }
        public struct GLOBAL_POSITION_INT_dst_adapter : com.company.demo.GroundControl. GLOBAL_POSITION_INT.DST_
        {
            GLOBAL_POSITION_INT dst;
            public GLOBAL_POSITION_INT_dst_adapter(GLOBAL_POSITION_INT dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void relative_alt(int src) { dst.relative_alt(src); }
            public void vx(short src) { dst.vx(src); }
            public void vy(short src) { dst.vy(src); }
            public void vz(short src) { dst.vz(src); }
            public void hdg(short src) { dst.hdg(src); }

        }
        public struct RC_CHANNELS_SCALED
        {
            internal Pack.Cursor data_;
            internal RC_CHANNELS_SCALED(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public sbyte port() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void port(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public short chan1_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 5, 2)); }
            public void chan1_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 5);  }

            public short chan2_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 7, 2)); }
            public void chan2_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 7);  }

            public short chan3_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 9, 2)); }
            public void chan3_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 9);  }

            public short chan4_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 11, 2)); }
            public void chan4_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 11);  }

            public short chan5_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 13, 2)); }
            public void chan5_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 13);  }

            public short chan6_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 15, 2)); }
            public void chan6_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 15);  }

            public short chan7_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 17, 2)); }
            public void chan7_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 17);  }

            public short chan8_scaled() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 19, 2)); }
            public void chan8_scaled(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 19);  }

            public sbyte rssi() { return (sbyte)(data_.bytes[data_.origin  + 21]); }
            public void rssi(sbyte src) {    data_.bytes[data_.origin  + 21] = (byte)(src);  }

        }
        public struct RC_CHANNELS_SCALED_dst_adapter : com.company.demo.GroundControl. RC_CHANNELS_SCALED.DST_
        {
            RC_CHANNELS_SCALED dst;
            public RC_CHANNELS_SCALED_dst_adapter(RC_CHANNELS_SCALED dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void port(sbyte src) { dst.port(src); }
            public void chan1_scaled(short src) { dst.chan1_scaled(src); }
            public void chan2_scaled(short src) { dst.chan2_scaled(src); }
            public void chan3_scaled(short src) { dst.chan3_scaled(src); }
            public void chan4_scaled(short src) { dst.chan4_scaled(src); }
            public void chan5_scaled(short src) { dst.chan5_scaled(src); }
            public void chan6_scaled(short src) { dst.chan6_scaled(src); }
            public void chan7_scaled(short src) { dst.chan7_scaled(src); }
            public void chan8_scaled(short src) { dst.chan8_scaled(src); }
            public void rssi(sbyte src) { dst.rssi(src); }

        }
        public struct RC_CHANNELS_RAW
        {
            internal Pack.Cursor data_;
            internal RC_CHANNELS_RAW(Pack.Cursor data) { this.data_ = data; }

            public short chan1_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void chan1_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short chan2_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void chan2_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short chan3_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void chan3_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short chan4_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void chan4_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short chan5_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void chan5_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short chan6_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void chan6_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short chan7_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void chan7_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short chan8_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void chan8_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 16);  }

            public sbyte port() { return (sbyte)(data_.bytes[data_.origin  + 20]); }
            public void port(sbyte src) {    data_.bytes[data_.origin  + 20] = (byte)(src);  }

            public sbyte rssi() { return (sbyte)(data_.bytes[data_.origin  + 21]); }
            public void rssi(sbyte src) {    data_.bytes[data_.origin  + 21] = (byte)(src);  }

        }
        public struct RC_CHANNELS_RAW_dst_adapter : com.company.demo.GroundControl. RC_CHANNELS_RAW.DST_
        {
            RC_CHANNELS_RAW dst;
            public RC_CHANNELS_RAW_dst_adapter(RC_CHANNELS_RAW dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void port(sbyte src) { dst.port(src); }
            public void chan1_raw(short src) { dst.chan1_raw(src); }
            public void chan2_raw(short src) { dst.chan2_raw(src); }
            public void chan3_raw(short src) { dst.chan3_raw(src); }
            public void chan4_raw(short src) { dst.chan4_raw(src); }
            public void chan5_raw(short src) { dst.chan5_raw(src); }
            public void chan6_raw(short src) { dst.chan6_raw(src); }
            public void chan7_raw(short src) { dst.chan7_raw(src); }
            public void chan8_raw(short src) { dst.chan8_raw(src); }
            public void rssi(sbyte src) { dst.rssi(src); }

        }
        public struct SERVO_OUTPUT_RAW
        {
            internal Pack.Cursor data_;
            internal SERVO_OUTPUT_RAW(Pack.Cursor data) { this.data_ = data; }

            public short servo1_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void servo1_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short servo2_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void servo2_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short servo3_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void servo3_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short servo4_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void servo4_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short servo5_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void servo5_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short servo6_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void servo6_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short servo7_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void servo7_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short servo8_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void servo8_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public int time_usec() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 4)); }
            public void time_usec(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 16);  }

            public sbyte port() { return (sbyte)(data_.bytes[data_.origin  + 20]); }
            public void port(sbyte src) {    data_.bytes[data_.origin  + 20] = (byte)(src);  }


            public short? servo9_raw()
            {
                if(data_.field_bit !=  168 && !data_.set_field(168, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo9_raw(short src)
            {
                if(data_.field_bit !=  168) data_.set_field(168, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo10_raw()
            {
                if(data_.field_bit !=  169 && !data_.set_field(169, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo10_raw(short src)
            {
                if(data_.field_bit !=  169) data_.set_field(169, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo11_raw()
            {
                if(data_.field_bit !=  170 && !data_.set_field(170, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo11_raw(short src)
            {
                if(data_.field_bit !=  170) data_.set_field(170, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo12_raw()
            {
                if(data_.field_bit !=  171 && !data_.set_field(171, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo12_raw(short src)
            {
                if(data_.field_bit !=  171) data_.set_field(171, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo13_raw()
            {
                if(data_.field_bit !=  172 && !data_.set_field(172, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo13_raw(short src)
            {
                if(data_.field_bit !=  172) data_.set_field(172, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo14_raw()
            {
                if(data_.field_bit !=  173 && !data_.set_field(173, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo14_raw(short src)
            {
                if(data_.field_bit !=  173) data_.set_field(173, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo15_raw()
            {
                if(data_.field_bit !=  174 && !data_.set_field(174, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo15_raw(short src)
            {
                if(data_.field_bit !=  174) data_.set_field(174, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }




            public short? servo16_raw()
            {
                if(data_.field_bit !=  175 && !data_.set_field(175, -1))  return null;
                return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.BYTE, 2));;
            }


            public void servo16_raw(short src)
            {
                if(data_.field_bit !=  175) data_.set_field(175, 0);
                ;
                Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.BYTE);;
            }



        }
        public struct SERVO_OUTPUT_RAW_dst_adapter : com.company.demo.GroundControl. SERVO_OUTPUT_RAW.DST_
        {
            SERVO_OUTPUT_RAW dst;
            public SERVO_OUTPUT_RAW_dst_adapter(SERVO_OUTPUT_RAW dst) { this.dst = dst; }
            public void time_usec(int src) { dst.time_usec(src); }
            public void port(sbyte src) { dst.port(src); }
            public void servo1_raw(short src) { dst.servo1_raw(src); }
            public void servo2_raw(short src) { dst.servo2_raw(src); }
            public void servo3_raw(short src) { dst.servo3_raw(src); }
            public void servo4_raw(short src) { dst.servo4_raw(src); }
            public void servo5_raw(short src) { dst.servo5_raw(src); }
            public void servo6_raw(short src) { dst.servo6_raw(src); }
            public void servo7_raw(short src) { dst.servo7_raw(src); }
            public void servo8_raw(short src) { dst.servo8_raw(src); }
            public void servo9_raw(short src) { dst.servo9_raw(src); }
            public void servo10_raw(short src) { dst.servo10_raw(src); }
            public void servo11_raw(short src) { dst.servo11_raw(src); }
            public void servo12_raw(short src) { dst.servo12_raw(src); }
            public void servo13_raw(short src) { dst.servo13_raw(src); }
            public void servo14_raw(short src) { dst.servo14_raw(src); }
            public void servo15_raw(short src) { dst.servo15_raw(src); }
            public void servo16_raw(short src) { dst.servo16_raw(src); }

        }
        public struct MISSION_REQUEST_PARTIAL_LIST
        {
            internal Pack.Cursor data_;
            internal MISSION_REQUEST_PARTIAL_LIST(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public short start_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void start_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short end_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void end_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  48 && !data_.set_field(48, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  48) data_.set_field(48, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_REQUEST_PARTIAL_LIST_dst_adapter : com.company.demo.GroundControl. MISSION_REQUEST_PARTIAL_LIST.DST_
        {
            MISSION_REQUEST_PARTIAL_LIST dst;
            public MISSION_REQUEST_PARTIAL_LIST_dst_adapter(MISSION_REQUEST_PARTIAL_LIST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void start_index(short src) { dst.start_index(src); }
            public void end_index(short src) { dst.end_index(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_WRITE_PARTIAL_LIST
        {
            internal Pack.Cursor data_;
            internal MISSION_WRITE_PARTIAL_LIST(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public short start_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void start_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short end_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void end_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  48 && !data_.set_field(48, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  48) data_.set_field(48, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_WRITE_PARTIAL_LIST_dst_adapter : com.company.demo.GroundControl. MISSION_WRITE_PARTIAL_LIST.DST_
        {
            MISSION_WRITE_PARTIAL_LIST dst;
            public MISSION_WRITE_PARTIAL_LIST_dst_adapter(MISSION_WRITE_PARTIAL_LIST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void start_index(short src) { dst.start_index(src); }
            public void end_index(short src) { dst.end_index(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_ITEM
        {
            internal Pack.Cursor data_;
            internal MISSION_ITEM(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }

            public sbyte current() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void current(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public sbyte autocontinue() { return (sbyte)(data_.bytes[data_.origin  + 5]); }
            public void autocontinue(sbyte src) {    data_.bytes[data_.origin  + 5] = (byte)(src);  }

            public float param1() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 6); }
            public void param1(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 6, 4);  }

            public float param2() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 10); }
            public void param2(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 10, 4);  }

            public float param3() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 14); }
            public void param3(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 14, 4);  }

            public float param4() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 18); }
            public void param4(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 18, 4);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 22); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 22, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 26); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 26, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 30); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 30, 4);  }


            public  MAV_FRAME? frame()
            {
                if(data_.field_bit !=  274 && !data_.set_field(274, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  274) data_.set_field(274, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }




            public  MAV_CMD? command()
            {
                if(data_.field_bit !=  275 && !data_.set_field(275, -1))  return null;
                return    MAV_CMD_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 8));;
            }


            public void command(MAV_CMD src)
            {
                if(data_.field_bit !=  275) data_.set_field(275, 0);
                ;
                Lib.set_bits(MAV_CMD_.bits(src), 8, data_.bytes, data_.BIT) ;;
            }




            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  276 && !data_.set_field(276, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  276) data_.set_field(276, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_ITEM_dst_adapter : com.company.demo.GroundControl. MISSION_ITEM.DST_
        {
            MISSION_ITEM dst;
            public MISSION_ITEM_dst_adapter(MISSION_ITEM dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seq(short src) { dst.seq(src); }
            public void frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.frame(src); }
            public void command(com.company.demo.GroundControl. MAV_CMD src) { dst.command(src); }
            public void current(sbyte src) { dst.current(src); }
            public void autocontinue(sbyte src) { dst.autocontinue(src); }
            public void param1(float src) { dst.param1(src); }
            public void param2(float src) { dst.param2(src); }
            public void param3(float src) { dst.param3(src); }
            public void param4(float src) { dst.param4(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_REQUEST
        {
            internal Pack.Cursor data_;
            internal MISSION_REQUEST(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  32 && !data_.set_field(32, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  32) data_.set_field(32, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_REQUEST_dst_adapter : com.company.demo.GroundControl. MISSION_REQUEST.DST_
        {
            MISSION_REQUEST dst;
            public MISSION_REQUEST_dst_adapter(MISSION_REQUEST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seq(short src) { dst.seq(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_SET_CURRENT
        {
            internal Pack.Cursor data_;
            internal MISSION_SET_CURRENT(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }

        }
        public struct MISSION_SET_CURRENT_dst_adapter : com.company.demo.GroundControl. MISSION_SET_CURRENT.DST_
        {
            MISSION_SET_CURRENT dst;
            public MISSION_SET_CURRENT_dst_adapter(MISSION_SET_CURRENT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seq(short src) { dst.seq(src); }

        }
        public struct MISSION_CURRENT
        {
            internal Pack.Cursor data_;
            internal MISSION_CURRENT(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

        }
        public struct MISSION_CURRENT_dst_adapter : com.company.demo.GroundControl. MISSION_CURRENT.DST_
        {
            MISSION_CURRENT dst;
            public MISSION_CURRENT_dst_adapter(MISSION_CURRENT dst) { this.dst = dst; }
            public void seq(short src) { dst.seq(src); }

        }
        public struct MISSION_REQUEST_LIST
        {
            internal Pack.Cursor data_;
            internal MISSION_REQUEST_LIST(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  16 && !data_.set_field(16, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  16) data_.set_field(16, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_REQUEST_LIST_dst_adapter : com.company.demo.GroundControl. MISSION_REQUEST_LIST.DST_
        {
            MISSION_REQUEST_LIST dst;
            public MISSION_REQUEST_LIST_dst_adapter(MISSION_REQUEST_LIST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_COUNT
        {
            internal Pack.Cursor data_;
            internal MISSION_COUNT(Pack.Cursor data) { this.data_ = data; }

            public short count() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void count(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  32 && !data_.set_field(32, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  32) data_.set_field(32, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_COUNT_dst_adapter : com.company.demo.GroundControl. MISSION_COUNT.DST_
        {
            MISSION_COUNT dst;
            public MISSION_COUNT_dst_adapter(MISSION_COUNT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void count(short src) { dst.count(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_CLEAR_ALL
        {
            internal Pack.Cursor data_;
            internal MISSION_CLEAR_ALL(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  16 && !data_.set_field(16, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  16) data_.set_field(16, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_CLEAR_ALL_dst_adapter : com.company.demo.GroundControl. MISSION_CLEAR_ALL.DST_
        {
            MISSION_CLEAR_ALL dst;
            public MISSION_CLEAR_ALL_dst_adapter(MISSION_CLEAR_ALL dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct MISSION_ITEM_REACHED
        {
            internal Pack.Cursor data_;
            internal MISSION_ITEM_REACHED(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

        }
        public struct MISSION_ITEM_REACHED_dst_adapter : com.company.demo.GroundControl. MISSION_ITEM_REACHED.DST_
        {
            MISSION_ITEM_REACHED dst;
            public MISSION_ITEM_REACHED_dst_adapter(MISSION_ITEM_REACHED dst) { this.dst = dst; }
            public void seq(short src) { dst.seq(src); }

        }
        public struct MISSION_ACK
        {
            internal Pack.Cursor data_;
            internal MISSION_ACK(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }


            public  MAV_MISSION_RESULT? typE()
            {
                if(data_.field_bit !=  18 && !data_.set_field(18, -1))  return null;
                return (MAV_MISSION_RESULT)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void typE(MAV_MISSION_RESULT src)
            {
                if(data_.field_bit !=  18) data_.set_field(18, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }




            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  19 && !data_.set_field(19, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  19) data_.set_field(19, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_ACK_dst_adapter : com.company.demo.GroundControl. MISSION_ACK.DST_
        {
            MISSION_ACK dst;
            public MISSION_ACK_dst_adapter(MISSION_ACK dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void typE(com.company.demo.GroundControl. MAV_MISSION_RESULT src) { dst.typE(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct SET_GPS_GLOBAL_ORIGIN
        {
            internal Pack.Cursor data_;
            internal SET_GPS_GLOBAL_ORIGIN(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public int latitude() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 1, 4)); }
            public void latitude(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 1);  }

            public int longitude() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 5, 4)); }
            public void longitude(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 5);  }

            public int altitude() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 9, 4)); }
            public void altitude(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 9);  }


            public long? time_usec()
            {
                if(data_.field_bit !=  104 && !data_.set_field(104, -1))  return null;
                return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.BYTE, 8));;
            }


            public void time_usec(long src)
            {
                if(data_.field_bit !=  104) data_.set_field(104, 0);
                ;
                Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.BYTE);;
            }



        }
        public struct SET_GPS_GLOBAL_ORIGIN_dst_adapter : com.company.demo.GroundControl. SET_GPS_GLOBAL_ORIGIN.DST_
        {
            SET_GPS_GLOBAL_ORIGIN dst;
            public SET_GPS_GLOBAL_ORIGIN_dst_adapter(SET_GPS_GLOBAL_ORIGIN dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void latitude(int src) { dst.latitude(src); }
            public void longitude(int src) { dst.longitude(src); }
            public void altitude(int src) { dst.altitude(src); }
            public void time_usec(long src) { dst.time_usec(src); }

        }
        public struct GPS_GLOBAL_ORIGIN
        {
            internal Pack.Cursor data_;
            internal GPS_GLOBAL_ORIGIN(Pack.Cursor data) { this.data_ = data; }

            public int latitude() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void latitude(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public int longitude() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 4)); }
            public void longitude(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 4);  }

            public int altitude() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 4)); }
            public void altitude(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 8);  }


            public long? time_usec()
            {
                if(data_.field_bit !=  96 && !data_.set_field(96, -1))  return null;
                return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.BYTE, 8));;
            }


            public void time_usec(long src)
            {
                if(data_.field_bit !=  96) data_.set_field(96, 0);
                ;
                Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.BYTE);;
            }



        }
        public struct GPS_GLOBAL_ORIGIN_dst_adapter : com.company.demo.GroundControl. GPS_GLOBAL_ORIGIN.DST_
        {
            GPS_GLOBAL_ORIGIN dst;
            public GPS_GLOBAL_ORIGIN_dst_adapter(GPS_GLOBAL_ORIGIN dst) { this.dst = dst; }
            public void latitude(int src) { dst.latitude(src); }
            public void longitude(int src) { dst.longitude(src); }
            public void altitude(int src) { dst.altitude(src); }
            public void time_usec(long src) { dst.time_usec(src); }

        }
        public struct PARAM_MAP_RC
        {
            internal Pack.Cursor data_;
            internal PARAM_MAP_RC(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public short param_index() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void param_index(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public sbyte parameter_rc_channel_index() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void parameter_rc_channel_index(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public float param_value0() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 5); }
            public void param_value0(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 5, 4);  }

            public float scale() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 9); }
            public void scale(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 9, 4);  }

            public float param_value_min() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 13); }
            public void param_value_min(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 13, 4);  }

            public float param_value_max() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 17); }
            public void param_value_max(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 17, 4);  }


            public param_id_? param_id()
            {
                if(data_.field_bit !=  170 && !data_.set_field(170, -1))  return (param_id_?) null;
                return new param_id_(data_);
            }



            public char[] param_id(string src, char[] reuse)
            {
                var len = src.Length;
                if(reuse == null || reuse.Length < len) reuse = src.ToCharArray();
                else src.CopyTo(0, reuse, 0, len);
                if(data_.field_bit !=  170) data_.set_field(170, Math.Min(Encoding.UTF8.GetByteCount(reuse, 0, len), PARAM_MAP_RC.param_id_.item_len_max));
                Encoding.UTF8.GetBytes(reuse, 0, len, data_.bytes, data_.BYTE);
                return reuse;
            }


            public void param_id(byte[] src)
            {
                var len = Math.Min(src.Length, PARAM_MAP_RC.param_id_.item_len_max);
                if(data_.field_bit !=  170) data_.set_field(170, len);
                for(int index = 0; index < len; index++)
                    data_.bytes[data_.BYTE + index] = src[index];;
            }

            public param_id_ param_id(int len)
            {
                if(data_.field_bit !=  170) data_.set_field(170, Math.Min(len, PARAM_MAP_RC.param_id_.item_len_max));
                return new param_id_(data_);
            }

            public struct param_id_
            {
                Pack.Cursor data_;
                public param_id_(Pack.Cursor data) {this.data_ = data;}

                public void set(byte src, int index) {  data_.bytes[data_.BYTE + index] =  src ; }

                public byte get(int index)  { return data_.bytes[data_.BYTE + index]; ;}
                public string get() { return Encoding.UTF8.GetString(data_.bytes, data_.BYTE, data_.item_len) ;}

                public bool same(byte [] other)
                {
                    if(other.Length != len()) return false;
                    for(int i = 0; i < other.Length; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(param_id_ other)
                {
                    if(other.len() != len()) return false;
                    for(int i = 0; i < len(); i++) if(other.get(i) != get(i)) return false;
                    return true;
                }
                public int len() { return data_.item_len;  }

                public const int item_len_max = 255 ;

            }


        }
        public struct PARAM_MAP_RC_dst_adapter : com.company.demo.GroundControl. PARAM_MAP_RC.DST_
        {
            PARAM_MAP_RC dst;
            public PARAM_MAP_RC_dst_adapter(PARAM_MAP_RC dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void param_id(com.company.demo.GroundControl.PARAM_MAP_RC.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_index(short src) { dst.param_index(src); }
            public void parameter_rc_channel_index(sbyte src) { dst.parameter_rc_channel_index(src); }
            public void param_value0(float src) { dst.param_value0(src); }
            public void scale(float src) { dst.scale(src); }
            public void param_value_min(float src) { dst.param_value_min(src); }
            public void param_value_max(float src) { dst.param_value_max(src); }

        }
        public struct MISSION_REQUEST_INT
        {
            internal Pack.Cursor data_;
            internal MISSION_REQUEST_INT(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }


            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  32 && !data_.set_field(32, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  32) data_.set_field(32, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_REQUEST_INT_dst_adapter : com.company.demo.GroundControl. MISSION_REQUEST_INT.DST_
        {
            MISSION_REQUEST_INT dst;
            public MISSION_REQUEST_INT_dst_adapter(MISSION_REQUEST_INT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seq(short src) { dst.seq(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct SAFETY_SET_ALLOWED_AREA
        {
            internal Pack.Cursor data_;
            internal SAFETY_SET_ALLOWED_AREA(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public float p1x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 2); }
            public void p1x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 2, 4);  }

            public float p1y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 6); }
            public void p1y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 6, 4);  }

            public float p1z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 10); }
            public void p1z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 10, 4);  }

            public float p2x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 14); }
            public void p2x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 14, 4);  }

            public float p2y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 18); }
            public void p2y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 18, 4);  }

            public float p2z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 22); }
            public void p2z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 22, 4);  }


            public  MAV_FRAME? frame()
            {
                if(data_.field_bit !=  208 && !data_.set_field(208, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  208) data_.set_field(208, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct SAFETY_SET_ALLOWED_AREA_dst_adapter : com.company.demo.GroundControl. SAFETY_SET_ALLOWED_AREA.DST_
        {
            SAFETY_SET_ALLOWED_AREA dst;
            public SAFETY_SET_ALLOWED_AREA_dst_adapter(SAFETY_SET_ALLOWED_AREA dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.frame(src); }
            public void p1x(float src) { dst.p1x(src); }
            public void p1y(float src) { dst.p1y(src); }
            public void p1z(float src) { dst.p1z(src); }
            public void p2x(float src) { dst.p2x(src); }
            public void p2y(float src) { dst.p2y(src); }
            public void p2z(float src) { dst.p2z(src); }

        }
        public struct SAFETY_ALLOWED_AREA
        {
            internal Pack.Cursor data_;
            internal SAFETY_ALLOWED_AREA(Pack.Cursor data) { this.data_ = data; }

            public float p1x() { return  BitConverter.ToSingle(data_.bytes, data_.origin); }
            public void p1x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin, 4);  }

            public float p1y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void p1y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float p1z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void p1z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float p2x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void p2x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float p2y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void p2y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float p2z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void p2z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }


            public  MAV_FRAME? frame()
            {
                if(data_.field_bit !=  192 && !data_.set_field(192, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  192) data_.set_field(192, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct SAFETY_ALLOWED_AREA_dst_adapter : com.company.demo.GroundControl. SAFETY_ALLOWED_AREA.DST_
        {
            SAFETY_ALLOWED_AREA dst;
            public SAFETY_ALLOWED_AREA_dst_adapter(SAFETY_ALLOWED_AREA dst) { this.dst = dst; }
            public void frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.frame(src); }
            public void p1x(float src) { dst.p1x(src); }
            public void p1y(float src) { dst.p1y(src); }
            public void p1z(float src) { dst.p1z(src); }
            public void p2x(float src) { dst.p2x(src); }
            public void p2y(float src) { dst.p2y(src); }
            public void p2z(float src) { dst.p2z(src); }

        }
        public struct ATTITUDE_QUATERNION_COV
        {
            internal Pack.Cursor data_;
            internal ATTITUDE_QUATERNION_COV(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public q_ q()
            {
                return new  q_(data_);
            }

            public struct q_
            {
                internal Pack.Cursor data_;
                public q_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return ATTITUDE_QUATERNION_COV.q_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != ATTITUDE_QUATERNION_COV.q_.item_len) return false;
                    for(int i = 0; i < ATTITUDE_QUATERNION_COV.q_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(q_ other)
                {
                    if(other.len() != ATTITUDE_QUATERNION_COV.q_.item_len) return false;
                    for(int i = 0; i < ATTITUDE_QUATERNION_COV.q_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8 + index * 4, 4); }

                public const int item_len = 4 ;


            }

            public void q(float[] src)
            {
                var len =  Math.Min(src.Length, ATTITUDE_QUATERNION_COV.q_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 8 + index * 4, 4);
            }

            public float rollspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void rollspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float pitchspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void pitchspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public float yawspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 32); }
            public void yawspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 32, 4);  }

            public covariance_ covariance()
            {
                return new  covariance_(data_);
            }

            public struct covariance_
            {
                internal Pack.Cursor data_;
                public covariance_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return ATTITUDE_QUATERNION_COV.covariance_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 36 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != ATTITUDE_QUATERNION_COV.covariance_.item_len) return false;
                    for(int i = 0; i < ATTITUDE_QUATERNION_COV.covariance_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(covariance_ other)
                {
                    if(other.len() != ATTITUDE_QUATERNION_COV.covariance_.item_len) return false;
                    for(int i = 0; i < ATTITUDE_QUATERNION_COV.covariance_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 36 + index * 4, 4); }

                public const int item_len = 9 ;


            }

            public void covariance(float[] src)
            {
                var len =  Math.Min(src.Length, ATTITUDE_QUATERNION_COV.covariance_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 36 + index * 4, 4);
            }

        }
        public struct ATTITUDE_QUATERNION_COV_dst_adapter : com.company.demo.GroundControl. ATTITUDE_QUATERNION_COV.DST_
        {
            ATTITUDE_QUATERNION_COV dst;
            public ATTITUDE_QUATERNION_COV_dst_adapter(ATTITUDE_QUATERNION_COV dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void q(com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void rollspeed(float src) { dst.rollspeed(src); }
            public void pitchspeed(float src) { dst.pitchspeed(src); }
            public void yawspeed(float src) { dst.yawspeed(src); }
            public void covariance(com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV.covariance_ src)
            {
                var item = dst.covariance();
                for(int i = 0; i < com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV.covariance_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }
        public struct NAV_CONTROLLER_OUTPUT
        {
            internal Pack.Cursor data_;
            internal NAV_CONTROLLER_OUTPUT(Pack.Cursor data) { this.data_ = data; }

            public short wp_dist() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void wp_dist(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public float nav_roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 2); }
            public void nav_roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 2, 4);  }

            public float nav_pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 6); }
            public void nav_pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 6, 4);  }

            public short nav_bearing() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void nav_bearing(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short target_bearing() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void target_bearing(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public float alt_error() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 14); }
            public void alt_error(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 14, 4);  }

            public float aspd_error() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 18); }
            public void aspd_error(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 18, 4);  }

            public float xtrack_error() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 22); }
            public void xtrack_error(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 22, 4);  }

        }
        public struct NAV_CONTROLLER_OUTPUT_dst_adapter : com.company.demo.GroundControl. NAV_CONTROLLER_OUTPUT.DST_
        {
            NAV_CONTROLLER_OUTPUT dst;
            public NAV_CONTROLLER_OUTPUT_dst_adapter(NAV_CONTROLLER_OUTPUT dst) { this.dst = dst; }
            public void nav_roll(float src) { dst.nav_roll(src); }
            public void nav_pitch(float src) { dst.nav_pitch(src); }
            public void nav_bearing(short src) { dst.nav_bearing(src); }
            public void target_bearing(short src) { dst.target_bearing(src); }
            public void wp_dist(short src) { dst.wp_dist(src); }
            public void alt_error(float src) { dst.alt_error(src); }
            public void aspd_error(float src) { dst.aspd_error(src); }
            public void xtrack_error(float src) { dst.xtrack_error(src); }

        }
        public struct GLOBAL_POSITION_INT_COV
        {
            internal Pack.Cursor data_;
            internal GLOBAL_POSITION_INT_COV(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public int lat() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 4)); }
            public void lat(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 8);  }

            public int lon() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 4)); }
            public void lon(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 12);  }

            public int alt() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 4)); }
            public void alt(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 16);  }

            public int relative_alt() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 4)); }
            public void relative_alt(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 20);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 32); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 32, 4);  }

            public covariance_ covariance()
            {
                return new  covariance_(data_);
            }

            public struct covariance_
            {
                internal Pack.Cursor data_;
                public covariance_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return GLOBAL_POSITION_INT_COV.covariance_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 36 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != GLOBAL_POSITION_INT_COV.covariance_.item_len) return false;
                    for(int i = 0; i < GLOBAL_POSITION_INT_COV.covariance_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(covariance_ other)
                {
                    if(other.len() != GLOBAL_POSITION_INT_COV.covariance_.item_len) return false;
                    for(int i = 0; i < GLOBAL_POSITION_INT_COV.covariance_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 36 + index * 4, 4); }

                public const int item_len = 36 ;


            }

            public void covariance(float[] src)
            {
                var len =  Math.Min(src.Length, GLOBAL_POSITION_INT_COV.covariance_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 36 + index * 4, 4);
            }


            public  MAV_ESTIMATOR_TYPE? estimator_type()
            {
                if(data_.field_bit !=  1440 && !data_.set_field(1440, -1))  return null;
                return (MAV_ESTIMATOR_TYPE)((1 + (sbyte)Lib.get_bits(data_.bytes, data_.BIT, 3)));;
            }


            public void estimator_type(MAV_ESTIMATOR_TYPE src)
            {
                if(data_.field_bit !=  1440) data_.set_field(1440, 0);
                ;
                Lib.set_bits((ulong)(src   - 1), 3, data_.bytes, data_.BIT);;
            }



        }
        public struct GLOBAL_POSITION_INT_COV_dst_adapter : com.company.demo.GroundControl. GLOBAL_POSITION_INT_COV.DST_
        {
            GLOBAL_POSITION_INT_COV dst;
            public GLOBAL_POSITION_INT_COV_dst_adapter(GLOBAL_POSITION_INT_COV dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void estimator_type(com.company.demo.GroundControl. MAV_ESTIMATOR_TYPE src) { dst.estimator_type(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void relative_alt(int src) { dst.relative_alt(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void covariance(com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV.covariance_ src)
            {
                var item = dst.covariance();
                for(int i = 0; i < com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV.covariance_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }
        public struct LOCAL_POSITION_NED_COV
        {
            internal Pack.Cursor data_;
            internal LOCAL_POSITION_NED_COV(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public float ax() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 32); }
            public void ax(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 32, 4);  }

            public float ay() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 36); }
            public void ay(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 36, 4);  }

            public float az() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 40); }
            public void az(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 40, 4);  }

            public covariance_ covariance()
            {
                return new  covariance_(data_);
            }

            public struct covariance_
            {
                internal Pack.Cursor data_;
                public covariance_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return LOCAL_POSITION_NED_COV.covariance_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 44 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != LOCAL_POSITION_NED_COV.covariance_.item_len) return false;
                    for(int i = 0; i < LOCAL_POSITION_NED_COV.covariance_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(covariance_ other)
                {
                    if(other.len() != LOCAL_POSITION_NED_COV.covariance_.item_len) return false;
                    for(int i = 0; i < LOCAL_POSITION_NED_COV.covariance_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 44 + index * 4, 4); }

                public const int item_len = 45 ;


            }

            public void covariance(float[] src)
            {
                var len =  Math.Min(src.Length, LOCAL_POSITION_NED_COV.covariance_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 44 + index * 4, 4);
            }


            public  MAV_ESTIMATOR_TYPE? estimator_type()
            {
                if(data_.field_bit !=  1792 && !data_.set_field(1792, -1))  return null;
                return (MAV_ESTIMATOR_TYPE)((1 + (sbyte)Lib.get_bits(data_.bytes, data_.BIT, 3)));;
            }


            public void estimator_type(MAV_ESTIMATOR_TYPE src)
            {
                if(data_.field_bit !=  1792) data_.set_field(1792, 0);
                ;
                Lib.set_bits((ulong)(src   - 1), 3, data_.bytes, data_.BIT);;
            }



        }
        public struct LOCAL_POSITION_NED_COV_dst_adapter : com.company.demo.GroundControl. LOCAL_POSITION_NED_COV.DST_
        {
            LOCAL_POSITION_NED_COV dst;
            public LOCAL_POSITION_NED_COV_dst_adapter(LOCAL_POSITION_NED_COV dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void estimator_type(com.company.demo.GroundControl. MAV_ESTIMATOR_TYPE src) { dst.estimator_type(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void ax(float src) { dst.ax(src); }
            public void ay(float src) { dst.ay(src); }
            public void az(float src) { dst.az(src); }
            public void covariance(com.company.demo.GroundControl.LOCAL_POSITION_NED_COV.covariance_ src)
            {
                var item = dst.covariance();
                for(int i = 0; i < com.company.demo.GroundControl.LOCAL_POSITION_NED_COV.covariance_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }
        public struct RC_CHANNELS
        {
            internal Pack.Cursor data_;
            internal RC_CHANNELS(Pack.Cursor data) { this.data_ = data; }

            public short chan1_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void chan1_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short chan2_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void chan2_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short chan3_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void chan3_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short chan4_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void chan4_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short chan5_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void chan5_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short chan6_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void chan6_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short chan7_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void chan7_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short chan8_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void chan8_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public short chan9_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 2)); }
            public void chan9_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 16);  }

            public short chan10_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 18, 2)); }
            public void chan10_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 18);  }

            public short chan11_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 2)); }
            public void chan11_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 20);  }

            public short chan12_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 22, 2)); }
            public void chan12_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 22);  }

            public short chan13_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 24, 2)); }
            public void chan13_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 24);  }

            public short chan14_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 26, 2)); }
            public void chan14_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 26);  }

            public short chan15_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 28, 2)); }
            public void chan15_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 28);  }

            public short chan16_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 30, 2)); }
            public void chan16_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 30);  }

            public short chan17_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 32, 2)); }
            public void chan17_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 32);  }

            public short chan18_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 34, 2)); }
            public void chan18_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 34);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 36, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 36);  }

            public sbyte chancount() { return (sbyte)(data_.bytes[data_.origin  + 40]); }
            public void chancount(sbyte src) {    data_.bytes[data_.origin  + 40] = (byte)(src);  }

            public sbyte rssi() { return (sbyte)(data_.bytes[data_.origin  + 41]); }
            public void rssi(sbyte src) {    data_.bytes[data_.origin  + 41] = (byte)(src);  }

        }
        public struct RC_CHANNELS_dst_adapter : com.company.demo.GroundControl. RC_CHANNELS.DST_
        {
            RC_CHANNELS dst;
            public RC_CHANNELS_dst_adapter(RC_CHANNELS dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void chancount(sbyte src) { dst.chancount(src); }
            public void chan1_raw(short src) { dst.chan1_raw(src); }
            public void chan2_raw(short src) { dst.chan2_raw(src); }
            public void chan3_raw(short src) { dst.chan3_raw(src); }
            public void chan4_raw(short src) { dst.chan4_raw(src); }
            public void chan5_raw(short src) { dst.chan5_raw(src); }
            public void chan6_raw(short src) { dst.chan6_raw(src); }
            public void chan7_raw(short src) { dst.chan7_raw(src); }
            public void chan8_raw(short src) { dst.chan8_raw(src); }
            public void chan9_raw(short src) { dst.chan9_raw(src); }
            public void chan10_raw(short src) { dst.chan10_raw(src); }
            public void chan11_raw(short src) { dst.chan11_raw(src); }
            public void chan12_raw(short src) { dst.chan12_raw(src); }
            public void chan13_raw(short src) { dst.chan13_raw(src); }
            public void chan14_raw(short src) { dst.chan14_raw(src); }
            public void chan15_raw(short src) { dst.chan15_raw(src); }
            public void chan16_raw(short src) { dst.chan16_raw(src); }
            public void chan17_raw(short src) { dst.chan17_raw(src); }
            public void chan18_raw(short src) { dst.chan18_raw(src); }
            public void rssi(sbyte src) { dst.rssi(src); }

        }
        public struct REQUEST_DATA_STREAM
        {
            internal Pack.Cursor data_;
            internal REQUEST_DATA_STREAM(Pack.Cursor data) { this.data_ = data; }

            public short req_message_rate() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void req_message_rate(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }

            public sbyte req_stream_id() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void req_stream_id(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public sbyte start_stop() { return (sbyte)(data_.bytes[data_.origin  + 5]); }
            public void start_stop(sbyte src) {    data_.bytes[data_.origin  + 5] = (byte)(src);  }

        }
        public struct REQUEST_DATA_STREAM_dst_adapter : com.company.demo.GroundControl. REQUEST_DATA_STREAM.DST_
        {
            REQUEST_DATA_STREAM dst;
            public REQUEST_DATA_STREAM_dst_adapter(REQUEST_DATA_STREAM dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void req_stream_id(sbyte src) { dst.req_stream_id(src); }
            public void req_message_rate(short src) { dst.req_message_rate(src); }
            public void start_stop(sbyte src) { dst.start_stop(src); }

        }
        public struct DATA_STREAM
        {
            internal Pack.Cursor data_;
            internal DATA_STREAM(Pack.Cursor data) { this.data_ = data; }

            public short message_rate() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void message_rate(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte stream_id() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void stream_id(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte on_off() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void on_off(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }

        }
        public struct DATA_STREAM_dst_adapter : com.company.demo.GroundControl. DATA_STREAM.DST_
        {
            DATA_STREAM dst;
            public DATA_STREAM_dst_adapter(DATA_STREAM dst) { this.dst = dst; }
            public void stream_id(sbyte src) { dst.stream_id(src); }
            public void message_rate(short src) { dst.message_rate(src); }
            public void on_off(sbyte src) { dst.on_off(src); }

        }
        public struct MANUAL_CONTROL
        {
            internal Pack.Cursor data_;
            internal MANUAL_CONTROL(Pack.Cursor data) { this.data_ = data; }

            public short buttons() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void buttons(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public short x() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 3, 2)); }
            public void x(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 3);  }

            public short y() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 5, 2)); }
            public void y(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 5);  }

            public short z() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 7, 2)); }
            public void z(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 7);  }

            public short r() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 9, 2)); }
            public void r(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 9);  }

        }
        public struct MANUAL_CONTROL_dst_adapter : com.company.demo.GroundControl. MANUAL_CONTROL.DST_
        {
            MANUAL_CONTROL dst;
            public MANUAL_CONTROL_dst_adapter(MANUAL_CONTROL dst) { this.dst = dst; }
            public void target(sbyte src) { dst.target(src); }
            public void x(short src) { dst.x(src); }
            public void y(short src) { dst.y(src); }
            public void z(short src) { dst.z(src); }
            public void r(short src) { dst.r(src); }
            public void buttons(short src) { dst.buttons(src); }

        }
        public struct RC_CHANNELS_OVERRIDE
        {
            internal Pack.Cursor data_;
            internal RC_CHANNELS_OVERRIDE(Pack.Cursor data) { this.data_ = data; }

            public short chan1_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void chan1_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short chan2_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void chan2_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short chan3_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void chan3_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short chan4_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void chan4_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short chan5_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void chan5_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short chan6_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void chan6_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short chan7_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void chan7_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short chan8_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void chan8_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 16]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 16] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 17]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 17] = (byte)(src);  }

        }
        public struct RC_CHANNELS_OVERRIDE_dst_adapter : com.company.demo.GroundControl. RC_CHANNELS_OVERRIDE.DST_
        {
            RC_CHANNELS_OVERRIDE dst;
            public RC_CHANNELS_OVERRIDE_dst_adapter(RC_CHANNELS_OVERRIDE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void chan1_raw(short src) { dst.chan1_raw(src); }
            public void chan2_raw(short src) { dst.chan2_raw(src); }
            public void chan3_raw(short src) { dst.chan3_raw(src); }
            public void chan4_raw(short src) { dst.chan4_raw(src); }
            public void chan5_raw(short src) { dst.chan5_raw(src); }
            public void chan6_raw(short src) { dst.chan6_raw(src); }
            public void chan7_raw(short src) { dst.chan7_raw(src); }
            public void chan8_raw(short src) { dst.chan8_raw(src); }

        }
        public struct MISSION_ITEM_INT
        {
            internal Pack.Cursor data_;
            internal MISSION_ITEM_INT(Pack.Cursor data) { this.data_ = data; }

            public short seq() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void seq(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }

            public sbyte current() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void current(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public sbyte autocontinue() { return (sbyte)(data_.bytes[data_.origin  + 5]); }
            public void autocontinue(sbyte src) {    data_.bytes[data_.origin  + 5] = (byte)(src);  }

            public float param1() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 6); }
            public void param1(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 6, 4);  }

            public float param2() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 10); }
            public void param2(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 10, 4);  }

            public float param3() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 14); }
            public void param3(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 14, 4);  }

            public float param4() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 18); }
            public void param4(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 18, 4);  }

            public int x() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 22, 4)); }
            public void x(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 22);  }

            public int y() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 26, 4)); }
            public void y(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 26);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 30); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 30, 4);  }


            public  MAV_FRAME? frame()
            {
                if(data_.field_bit !=  274 && !data_.set_field(274, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  274) data_.set_field(274, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }




            public  MAV_CMD? command()
            {
                if(data_.field_bit !=  275 && !data_.set_field(275, -1))  return null;
                return    MAV_CMD_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 8));;
            }


            public void command(MAV_CMD src)
            {
                if(data_.field_bit !=  275) data_.set_field(275, 0);
                ;
                Lib.set_bits(MAV_CMD_.bits(src), 8, data_.bytes, data_.BIT) ;;
            }




            public  MAV_MISSION_TYPE? mission_type()
            {
                if(data_.field_bit !=  276 && !data_.set_field(276, -1))  return null;
                return    MAV_MISSION_TYPE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 3));;
            }


            public void mission_type(MAV_MISSION_TYPE src)
            {
                if(data_.field_bit !=  276) data_.set_field(276, 0);
                ;
                Lib.set_bits(MAV_MISSION_TYPE_.bits(src), 3, data_.bytes, data_.BIT) ;;
            }



        }
        public struct MISSION_ITEM_INT_dst_adapter : com.company.demo.GroundControl. MISSION_ITEM_INT.DST_
        {
            MISSION_ITEM_INT dst;
            public MISSION_ITEM_INT_dst_adapter(MISSION_ITEM_INT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seq(short src) { dst.seq(src); }
            public void frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.frame(src); }
            public void command(com.company.demo.GroundControl. MAV_CMD src) { dst.command(src); }
            public void current(sbyte src) { dst.current(src); }
            public void autocontinue(sbyte src) { dst.autocontinue(src); }
            public void param1(float src) { dst.param1(src); }
            public void param2(float src) { dst.param2(src); }
            public void param3(float src) { dst.param3(src); }
            public void param4(float src) { dst.param4(src); }
            public void x(int src) { dst.x(src); }
            public void y(int src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void mission_type(com.company.demo.GroundControl. MAV_MISSION_TYPE src) { dst.mission_type(src); }

        }
        public struct VFR_HUD
        {
            internal Pack.Cursor data_;
            internal VFR_HUD(Pack.Cursor data) { this.data_ = data; }

            public short throttle() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void throttle(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public float airspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 2); }
            public void airspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 2, 4);  }

            public float groundspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 6); }
            public void groundspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 6, 4);  }

            public short heading() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void heading(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public float alt() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void alt(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float climb() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void climb(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

        }
        public struct VFR_HUD_dst_adapter : com.company.demo.GroundControl. VFR_HUD.DST_
        {
            VFR_HUD dst;
            public VFR_HUD_dst_adapter(VFR_HUD dst) { this.dst = dst; }
            public void airspeed(float src) { dst.airspeed(src); }
            public void groundspeed(float src) { dst.groundspeed(src); }
            public void heading(short src) { dst.heading(src); }
            public void throttle(short src) { dst.throttle(src); }
            public void alt(float src) { dst.alt(src); }
            public void climb(float src) { dst.climb(src); }

        }
        public struct COMMAND_INT
        {
            internal Pack.Cursor data_;
            internal COMMAND_INT(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public sbyte current() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void current(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public sbyte autocontinue() { return (sbyte)(data_.bytes[data_.origin  + 3]); }
            public void autocontinue(sbyte src) {    data_.bytes[data_.origin  + 3] = (byte)(src);  }

            public float param1() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void param1(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float param2() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void param2(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float param3() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void param3(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float param4() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void param4(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public int x() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 4)); }
            public void x(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 20);  }

            public int y() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 24, 4)); }
            public void y(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 24);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }


            public  MAV_FRAME? frame()
            {
                if(data_.field_bit !=  258 && !data_.set_field(258, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  258) data_.set_field(258, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }




            public  MAV_CMD? command()
            {
                if(data_.field_bit !=  259 && !data_.set_field(259, -1))  return null;
                return    MAV_CMD_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 8));;
            }


            public void command(MAV_CMD src)
            {
                if(data_.field_bit !=  259) data_.set_field(259, 0);
                ;
                Lib.set_bits(MAV_CMD_.bits(src), 8, data_.bytes, data_.BIT) ;;
            }



        }
        public struct COMMAND_INT_dst_adapter : com.company.demo.GroundControl. COMMAND_INT.DST_
        {
            COMMAND_INT dst;
            public COMMAND_INT_dst_adapter(COMMAND_INT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.frame(src); }
            public void command(com.company.demo.GroundControl. MAV_CMD src) { dst.command(src); }
            public void current(sbyte src) { dst.current(src); }
            public void autocontinue(sbyte src) { dst.autocontinue(src); }
            public void param1(float src) { dst.param1(src); }
            public void param2(float src) { dst.param2(src); }
            public void param3(float src) { dst.param3(src); }
            public void param4(float src) { dst.param4(src); }
            public void x(int src) { dst.x(src); }
            public void y(int src) { dst.y(src); }
            public void z(float src) { dst.z(src); }

        }
        public struct COMMAND_LONG
        {
            internal Pack.Cursor data_;
            internal COMMAND_LONG(Pack.Cursor data) { this.data_ = data; }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin ]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin ] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 1]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 1] = (byte)(src);  }

            public sbyte confirmation() { return (sbyte)(data_.bytes[data_.origin  + 2]); }
            public void confirmation(sbyte src) {    data_.bytes[data_.origin  + 2] = (byte)(src);  }

            public float param1() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 3); }
            public void param1(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 3, 4);  }

            public float param2() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 7); }
            public void param2(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 7, 4);  }

            public float param3() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 11); }
            public void param3(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 11, 4);  }

            public float param4() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 15); }
            public void param4(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 15, 4);  }

            public float param5() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 19); }
            public void param5(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 19, 4);  }

            public float param6() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 23); }
            public void param6(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 23, 4);  }

            public float param7() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 27); }
            public void param7(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 27, 4);  }


            public  MAV_CMD? command()
            {
                if(data_.field_bit !=  250 && !data_.set_field(250, -1))  return null;
                return    MAV_CMD_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 8));;
            }


            public void command(MAV_CMD src)
            {
                if(data_.field_bit !=  250) data_.set_field(250, 0);
                ;
                Lib.set_bits(MAV_CMD_.bits(src), 8, data_.bytes, data_.BIT) ;;
            }



        }
        public struct COMMAND_LONG_dst_adapter : com.company.demo.GroundControl. COMMAND_LONG.DST_
        {
            COMMAND_LONG dst;
            public COMMAND_LONG_dst_adapter(COMMAND_LONG dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void command(com.company.demo.GroundControl. MAV_CMD src) { dst.command(src); }
            public void confirmation(sbyte src) { dst.confirmation(src); }
            public void param1(float src) { dst.param1(src); }
            public void param2(float src) { dst.param2(src); }
            public void param3(float src) { dst.param3(src); }
            public void param4(float src) { dst.param4(src); }
            public void param5(float src) { dst.param5(src); }
            public void param6(float src) { dst.param6(src); }
            public void param7(float src) { dst.param7(src); }

        }
        public struct COMMAND_ACK
        {
            internal Pack.Cursor data_;
            internal COMMAND_ACK(Pack.Cursor data) { this.data_ = data; }


            public  MAV_CMD? command()
            {
                if(data_.field_bit !=  2 && !data_.set_field(2, -1))  return null;
                return    MAV_CMD_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 8));;
            }


            public void command(MAV_CMD src)
            {
                if(data_.field_bit !=  2) data_.set_field(2, 0);
                ;
                Lib.set_bits(MAV_CMD_.bits(src), 8, data_.bytes, data_.BIT) ;;
            }




            public  MAV_RESULT? result()
            {
                if(data_.field_bit !=  3 && !data_.set_field(3, -1))  return null;
                return (MAV_RESULT)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 3)));;
            }


            public void result(MAV_RESULT src)
            {
                if(data_.field_bit !=  3) data_.set_field(3, 0);
                ;
                Lib.set_bits((ulong)(src), 3, data_.bytes, data_.BIT);;
            }




            public sbyte? progress()
            {
                if(data_.field_bit !=  4 && !data_.set_field(4, -1))  return null;
                return (sbyte)(data_.bytes[data_.BYTE]);;
            }


            public void progress(sbyte src)
            {
                if(data_.field_bit !=  4) data_.set_field(4, 0);
                ;
                data_.bytes[data_.BYTE] = (byte)(src);;
            }




            public int? result_param2()
            {
                if(data_.field_bit !=  5 && !data_.set_field(5, -1))  return null;
                return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.BYTE, 4));;
            }


            public void result_param2(int src)
            {
                if(data_.field_bit !=  5) data_.set_field(5, 0);
                ;
                Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.BYTE);;
            }




            public sbyte? target_system()
            {
                if(data_.field_bit !=  6 && !data_.set_field(6, -1))  return null;
                return (sbyte)(data_.bytes[data_.BYTE]);;
            }


            public void target_system(sbyte src)
            {
                if(data_.field_bit !=  6) data_.set_field(6, 0);
                ;
                data_.bytes[data_.BYTE] = (byte)(src);;
            }




            public sbyte? target_component()
            {
                if(data_.field_bit !=  7 && !data_.set_field(7, -1))  return null;
                return (sbyte)(data_.bytes[data_.BYTE]);;
            }


            public void target_component(sbyte src)
            {
                if(data_.field_bit !=  7) data_.set_field(7, 0);
                ;
                data_.bytes[data_.BYTE] = (byte)(src);;
            }



        }
        public struct COMMAND_ACK_dst_adapter : com.company.demo.GroundControl. COMMAND_ACK.DST_
        {
            COMMAND_ACK dst;
            public COMMAND_ACK_dst_adapter(COMMAND_ACK dst) { this.dst = dst; }
            public void command(com.company.demo.GroundControl. MAV_CMD src) { dst.command(src); }
            public void result(com.company.demo.GroundControl. MAV_RESULT src) { dst.result(src); }
            public void progress(sbyte src) { dst.progress(src); }
            public void result_param2(int src) { dst.result_param2(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }
        public struct MANUAL_SETPOINT
        {
            internal Pack.Cursor data_;
            internal MANUAL_SETPOINT(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public float roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float thrust() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void thrust(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public sbyte mode_switch() { return (sbyte)(data_.bytes[data_.origin  + 20]); }
            public void mode_switch(sbyte src) {    data_.bytes[data_.origin  + 20] = (byte)(src);  }

            public sbyte manual_override_switch() { return (sbyte)(data_.bytes[data_.origin  + 21]); }
            public void manual_override_switch(sbyte src) {    data_.bytes[data_.origin  + 21] = (byte)(src);  }

        }
        public struct MANUAL_SETPOINT_dst_adapter : com.company.demo.GroundControl. MANUAL_SETPOINT.DST_
        {
            MANUAL_SETPOINT dst;
            public MANUAL_SETPOINT_dst_adapter(MANUAL_SETPOINT dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void thrust(float src) { dst.thrust(src); }
            public void mode_switch(sbyte src) { dst.mode_switch(src); }
            public void manual_override_switch(sbyte src) { dst.manual_override_switch(src); }

        }
        public struct SET_ATTITUDE_TARGET
        {
            internal Pack.Cursor data_;
            internal SET_ATTITUDE_TARGET(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 5]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 5] = (byte)(src);  }

            public sbyte type_mask() { return (sbyte)(data_.bytes[data_.origin  + 6]); }
            public void type_mask(sbyte src) {    data_.bytes[data_.origin  + 6] = (byte)(src);  }

            public q_ q()
            {
                return new  q_(data_);
            }

            public struct q_
            {
                internal Pack.Cursor data_;
                public q_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return SET_ATTITUDE_TARGET.q_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 7 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != SET_ATTITUDE_TARGET.q_.item_len) return false;
                    for(int i = 0; i < SET_ATTITUDE_TARGET.q_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(q_ other)
                {
                    if(other.len() != SET_ATTITUDE_TARGET.q_.item_len) return false;
                    for(int i = 0; i < SET_ATTITUDE_TARGET.q_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 7 + index * 4, 4); }

                public const int item_len = 4 ;


            }

            public void q(float[] src)
            {
                var len =  Math.Min(src.Length, SET_ATTITUDE_TARGET.q_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 7 + index * 4, 4);
            }

            public float body_roll_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 23); }
            public void body_roll_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 23, 4);  }

            public float body_pitch_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 27); }
            public void body_pitch_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 27, 4);  }

            public float body_yaw_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 31); }
            public void body_yaw_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 31, 4);  }

            public float thrust() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 35); }
            public void thrust(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 35, 4);  }

        }
        public struct SET_ATTITUDE_TARGET_dst_adapter : com.company.demo.GroundControl. SET_ATTITUDE_TARGET.DST_
        {
            SET_ATTITUDE_TARGET dst;
            public SET_ATTITUDE_TARGET_dst_adapter(SET_ATTITUDE_TARGET dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void type_mask(sbyte src) { dst.type_mask(src); }
            public void q(com.company.demo.GroundControl.SET_ATTITUDE_TARGET.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < com.company.demo.GroundControl.SET_ATTITUDE_TARGET.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void body_roll_rate(float src) { dst.body_roll_rate(src); }
            public void body_pitch_rate(float src) { dst.body_pitch_rate(src); }
            public void body_yaw_rate(float src) { dst.body_yaw_rate(src); }
            public void thrust(float src) { dst.thrust(src); }

        }
        public struct ATTITUDE_TARGET
        {
            internal Pack.Cursor data_;
            internal ATTITUDE_TARGET(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public sbyte type_mask() { return (sbyte)(data_.bytes[data_.origin  + 4]); }
            public void type_mask(sbyte src) {    data_.bytes[data_.origin  + 4] = (byte)(src);  }

            public q_ q()
            {
                return new  q_(data_);
            }

            public struct q_
            {
                internal Pack.Cursor data_;
                public q_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return ATTITUDE_TARGET.q_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 5 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != ATTITUDE_TARGET.q_.item_len) return false;
                    for(int i = 0; i < ATTITUDE_TARGET.q_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(q_ other)
                {
                    if(other.len() != ATTITUDE_TARGET.q_.item_len) return false;
                    for(int i = 0; i < ATTITUDE_TARGET.q_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 5 + index * 4, 4); }

                public const int item_len = 4 ;


            }

            public void q(float[] src)
            {
                var len =  Math.Min(src.Length, ATTITUDE_TARGET.q_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 5 + index * 4, 4);
            }

            public float body_roll_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 21); }
            public void body_roll_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 21, 4);  }

            public float body_pitch_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 25); }
            public void body_pitch_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 25, 4);  }

            public float body_yaw_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 29); }
            public void body_yaw_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 29, 4);  }

            public float thrust() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 33); }
            public void thrust(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 33, 4);  }

        }
        public struct ATTITUDE_TARGET_dst_adapter : com.company.demo.GroundControl. ATTITUDE_TARGET.DST_
        {
            ATTITUDE_TARGET dst;
            public ATTITUDE_TARGET_dst_adapter(ATTITUDE_TARGET dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void type_mask(sbyte src) { dst.type_mask(src); }
            public void q(com.company.demo.GroundControl.ATTITUDE_TARGET.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < com.company.demo.GroundControl.ATTITUDE_TARGET.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void body_roll_rate(float src) { dst.body_roll_rate(src); }
            public void body_pitch_rate(float src) { dst.body_pitch_rate(src); }
            public void body_yaw_rate(float src) { dst.body_yaw_rate(src); }
            public void thrust(float src) { dst.thrust(src); }

        }
        public struct SET_POSITION_TARGET_LOCAL_NED
        {
            internal Pack.Cursor data_;
            internal SET_POSITION_TARGET_LOCAL_NED(Pack.Cursor data) { this.data_ = data; }

            public short type_mask() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void type_mask(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 2);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 6]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 6] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 7]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 7] = (byte)(src);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public float afx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 32); }
            public void afx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 32, 4);  }

            public float afy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 36); }
            public void afy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 36, 4);  }

            public float afz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 40); }
            public void afz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 40, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 44); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 44, 4);  }

            public float yaw_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 48); }
            public void yaw_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 48, 4);  }


            public  MAV_FRAME? coordinate_frame()
            {
                if(data_.field_bit !=  416 && !data_.set_field(416, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void coordinate_frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  416) data_.set_field(416, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct SET_POSITION_TARGET_LOCAL_NED_dst_adapter : com.company.demo.GroundControl. SET_POSITION_TARGET_LOCAL_NED.DST_
        {
            SET_POSITION_TARGET_LOCAL_NED dst;
            public SET_POSITION_TARGET_LOCAL_NED_dst_adapter(SET_POSITION_TARGET_LOCAL_NED dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void coordinate_frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.coordinate_frame(src); }
            public void type_mask(short src) { dst.type_mask(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void afx(float src) { dst.afx(src); }
            public void afy(float src) { dst.afy(src); }
            public void afz(float src) { dst.afz(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void yaw_rate(float src) { dst.yaw_rate(src); }

        }
        public struct POSITION_TARGET_LOCAL_NED
        {
            internal Pack.Cursor data_;
            internal POSITION_TARGET_LOCAL_NED(Pack.Cursor data) { this.data_ = data; }

            public short type_mask() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void type_mask(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 2);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 6); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 6, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 10); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 10, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 14); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 14, 4);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 18); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 18, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 22); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 22, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 26); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 26, 4);  }

            public float afx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 30); }
            public void afx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 30, 4);  }

            public float afy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 34); }
            public void afy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 34, 4);  }

            public float afz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 38); }
            public void afz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 38, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 42); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 42, 4);  }

            public float yaw_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 46); }
            public void yaw_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 46, 4);  }


            public  MAV_FRAME? coordinate_frame()
            {
                if(data_.field_bit !=  400 && !data_.set_field(400, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void coordinate_frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  400) data_.set_field(400, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct POSITION_TARGET_LOCAL_NED_dst_adapter : com.company.demo.GroundControl. POSITION_TARGET_LOCAL_NED.DST_
        {
            POSITION_TARGET_LOCAL_NED dst;
            public POSITION_TARGET_LOCAL_NED_dst_adapter(POSITION_TARGET_LOCAL_NED dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void coordinate_frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.coordinate_frame(src); }
            public void type_mask(short src) { dst.type_mask(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void afx(float src) { dst.afx(src); }
            public void afy(float src) { dst.afy(src); }
            public void afz(float src) { dst.afz(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void yaw_rate(float src) { dst.yaw_rate(src); }

        }
        public struct SET_POSITION_TARGET_GLOBAL_INT
        {
            internal Pack.Cursor data_;
            internal SET_POSITION_TARGET_GLOBAL_INT(Pack.Cursor data) { this.data_ = data; }

            public short type_mask() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void type_mask(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 2);  }

            public sbyte target_system() { return (sbyte)(data_.bytes[data_.origin  + 6]); }
            public void target_system(sbyte src) {    data_.bytes[data_.origin  + 6] = (byte)(src);  }

            public sbyte target_component() { return (sbyte)(data_.bytes[data_.origin  + 7]); }
            public void target_component(sbyte src) {    data_.bytes[data_.origin  + 7] = (byte)(src);  }

            public int lat_int() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 4)); }
            public void lat_int(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 8);  }

            public int lon_int() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 4)); }
            public void lon_int(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 12);  }

            public float alt() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void alt(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public float afx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 32); }
            public void afx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 32, 4);  }

            public float afy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 36); }
            public void afy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 36, 4);  }

            public float afz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 40); }
            public void afz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 40, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 44); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 44, 4);  }

            public float yaw_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 48); }
            public void yaw_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 48, 4);  }


            public  MAV_FRAME? coordinate_frame()
            {
                if(data_.field_bit !=  416 && !data_.set_field(416, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void coordinate_frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  416) data_.set_field(416, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct SET_POSITION_TARGET_GLOBAL_INT_dst_adapter : com.company.demo.GroundControl. SET_POSITION_TARGET_GLOBAL_INT.DST_
        {
            SET_POSITION_TARGET_GLOBAL_INT dst;
            public SET_POSITION_TARGET_GLOBAL_INT_dst_adapter(SET_POSITION_TARGET_GLOBAL_INT dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void coordinate_frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.coordinate_frame(src); }
            public void type_mask(short src) { dst.type_mask(src); }
            public void lat_int(int src) { dst.lat_int(src); }
            public void lon_int(int src) { dst.lon_int(src); }
            public void alt(float src) { dst.alt(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void afx(float src) { dst.afx(src); }
            public void afy(float src) { dst.afy(src); }
            public void afz(float src) { dst.afz(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void yaw_rate(float src) { dst.yaw_rate(src); }

        }
        public struct POSITION_TARGET_GLOBAL_INT
        {
            internal Pack.Cursor data_;
            internal POSITION_TARGET_GLOBAL_INT(Pack.Cursor data) { this.data_ = data; }

            public short type_mask() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void type_mask(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 2);  }

            public int lat_int() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 4)); }
            public void lat_int(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 6);  }

            public int lon_int() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 4)); }
            public void lon_int(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 10);  }

            public float alt() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 14); }
            public void alt(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 14, 4);  }

            public float vx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 18); }
            public void vx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 18, 4);  }

            public float vy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 22); }
            public void vy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 22, 4);  }

            public float vz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 26); }
            public void vz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 26, 4);  }

            public float afx() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 30); }
            public void afx(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 30, 4);  }

            public float afy() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 34); }
            public void afy(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 34, 4);  }

            public float afz() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 38); }
            public void afz(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 38, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 42); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 42, 4);  }

            public float yaw_rate() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 46); }
            public void yaw_rate(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 46, 4);  }


            public  MAV_FRAME? coordinate_frame()
            {
                if(data_.field_bit !=  400 && !data_.set_field(400, -1))  return null;
                return (MAV_FRAME)(((sbyte)Lib.get_bits(data_.bytes, data_.BIT, 4)));;
            }


            public void coordinate_frame(MAV_FRAME src)
            {
                if(data_.field_bit !=  400) data_.set_field(400, 0);
                ;
                Lib.set_bits((ulong)(src), 4, data_.bytes, data_.BIT);;
            }



        }
        public struct POSITION_TARGET_GLOBAL_INT_dst_adapter : com.company.demo.GroundControl. POSITION_TARGET_GLOBAL_INT.DST_
        {
            POSITION_TARGET_GLOBAL_INT dst;
            public POSITION_TARGET_GLOBAL_INT_dst_adapter(POSITION_TARGET_GLOBAL_INT dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void coordinate_frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.coordinate_frame(src); }
            public void type_mask(short src) { dst.type_mask(src); }
            public void lat_int(int src) { dst.lat_int(src); }
            public void lon_int(int src) { dst.lon_int(src); }
            public void alt(float src) { dst.alt(src); }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void afx(float src) { dst.afx(src); }
            public void afy(float src) { dst.afy(src); }
            public void afz(float src) { dst.afz(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void yaw_rate(float src) { dst.yaw_rate(src); }

        }
        public struct LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
        {
            internal Pack.Cursor data_;
            internal LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(Pack.Cursor data) { this.data_ = data; }

            public int time_boot_ms() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin, 4)); }
            public void time_boot_ms(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 4); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 4, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

        }
        public struct LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_dst_adapter : com.company.demo.GroundControl. LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET.DST_
        {
            LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET dst;
            public LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_dst_adapter(LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }

        }
        public struct HIL_STATE
        {
            internal Pack.Cursor data_;
            internal HIL_STATE(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public float roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float rollspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void rollspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float pitchspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void pitchspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float yawspeed() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void yawspeed(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public int lat() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 32, 4)); }
            public void lat(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 32);  }

            public int lon() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 36, 4)); }
            public void lon(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 36);  }

            public int alt() { return (int)((int)(int)Lib.get_bytes(data_.bytes,  data_.origin  + 40, 4)); }
            public void alt(int src) {   Lib.set_bytes((ulong)(src), 4, data_.bytes,  data_.origin  + 40);  }

            public short vx() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 44, 2)); }
            public void vx(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 44);  }

            public short vy() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 46, 2)); }
            public void vy(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 46);  }

            public short vz() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 48, 2)); }
            public void vz(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 48);  }

            public short xacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 50, 2)); }
            public void xacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 50);  }

            public short yacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 52, 2)); }
            public void yacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 52);  }

            public short zacc() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 54, 2)); }
            public void zacc(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 54);  }

        }
        public struct HIL_STATE_dst_adapter : com.company.demo.GroundControl. HIL_STATE.DST_
        {
            HIL_STATE dst;
            public HIL_STATE_dst_adapter(HIL_STATE dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void rollspeed(float src) { dst.rollspeed(src); }
            public void pitchspeed(float src) { dst.pitchspeed(src); }
            public void yawspeed(float src) { dst.yawspeed(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void vx(short src) { dst.vx(src); }
            public void vy(short src) { dst.vy(src); }
            public void vz(short src) { dst.vz(src); }
            public void xacc(short src) { dst.xacc(src); }
            public void yacc(short src) { dst.yacc(src); }
            public void zacc(short src) { dst.zacc(src); }

        }
        public struct HIL_CONTROLS
        {
            internal Pack.Cursor data_;
            internal HIL_CONTROLS(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public float roll_ailerons() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void roll_ailerons(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float pitch_elevator() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void pitch_elevator(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float yaw_rudder() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void yaw_rudder(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float throttle() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void throttle(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float aux1() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void aux1(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float aux2() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void aux2(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

            public float aux3() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 32); }
            public void aux3(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 32, 4);  }

            public float aux4() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 36); }
            public void aux4(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 36, 4);  }

            public sbyte nav_mode() { return (sbyte)(data_.bytes[data_.origin  + 40]); }
            public void nav_mode(sbyte src) {    data_.bytes[data_.origin  + 40] = (byte)(src);  }


            public  MAV_MODE? mode()
            {
                if(data_.field_bit !=  328 && !data_.set_field(328, -1))  return null;
                return    MAV_MODE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 4));;
            }


            public void mode(MAV_MODE src)
            {
                if(data_.field_bit !=  328) data_.set_field(328, 0);
                ;
                Lib.set_bits(MAV_MODE_.bits(src), 4, data_.bytes, data_.BIT) ;;
            }



        }
        public struct HIL_CONTROLS_dst_adapter : com.company.demo.GroundControl. HIL_CONTROLS.DST_
        {
            HIL_CONTROLS dst;
            public HIL_CONTROLS_dst_adapter(HIL_CONTROLS dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void roll_ailerons(float src) { dst.roll_ailerons(src); }
            public void pitch_elevator(float src) { dst.pitch_elevator(src); }
            public void yaw_rudder(float src) { dst.yaw_rudder(src); }
            public void throttle(float src) { dst.throttle(src); }
            public void aux1(float src) { dst.aux1(src); }
            public void aux2(float src) { dst.aux2(src); }
            public void aux3(float src) { dst.aux3(src); }
            public void aux4(float src) { dst.aux4(src); }
            public void mode(com.company.demo.GroundControl. MAV_MODE src) { dst.mode(src); }
            public void nav_mode(sbyte src) { dst.nav_mode(src); }

        }
        public struct HIL_RC_INPUTS_RAW
        {
            internal Pack.Cursor data_;
            internal HIL_RC_INPUTS_RAW(Pack.Cursor data) { this.data_ = data; }

            public short chan1_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin, 2)); }
            public void chan1_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin);  }

            public short chan2_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 2, 2)); }
            public void chan2_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 2);  }

            public short chan3_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 4, 2)); }
            public void chan3_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 4);  }

            public short chan4_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 6, 2)); }
            public void chan4_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 6);  }

            public short chan5_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 2)); }
            public void chan5_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 8);  }

            public short chan6_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 10, 2)); }
            public void chan6_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 10);  }

            public short chan7_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 12, 2)); }
            public void chan7_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 12);  }

            public short chan8_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 14, 2)); }
            public void chan8_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 14);  }

            public short chan9_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 16, 2)); }
            public void chan9_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 16);  }

            public short chan10_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 18, 2)); }
            public void chan10_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 18);  }

            public short chan11_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 20, 2)); }
            public void chan11_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 20);  }

            public short chan12_raw() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 22, 2)); }
            public void chan12_raw(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 22);  }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin  + 24, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin  + 24);  }

            public sbyte rssi() { return (sbyte)(data_.bytes[data_.origin  + 32]); }
            public void rssi(sbyte src) {    data_.bytes[data_.origin  + 32] = (byte)(src);  }

        }
        public struct HIL_RC_INPUTS_RAW_dst_adapter : com.company.demo.GroundControl. HIL_RC_INPUTS_RAW.DST_
        {
            HIL_RC_INPUTS_RAW dst;
            public HIL_RC_INPUTS_RAW_dst_adapter(HIL_RC_INPUTS_RAW dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void chan1_raw(short src) { dst.chan1_raw(src); }
            public void chan2_raw(short src) { dst.chan2_raw(src); }
            public void chan3_raw(short src) { dst.chan3_raw(src); }
            public void chan4_raw(short src) { dst.chan4_raw(src); }
            public void chan5_raw(short src) { dst.chan5_raw(src); }
            public void chan6_raw(short src) { dst.chan6_raw(src); }
            public void chan7_raw(short src) { dst.chan7_raw(src); }
            public void chan8_raw(short src) { dst.chan8_raw(src); }
            public void chan9_raw(short src) { dst.chan9_raw(src); }
            public void chan10_raw(short src) { dst.chan10_raw(src); }
            public void chan11_raw(short src) { dst.chan11_raw(src); }
            public void chan12_raw(short src) { dst.chan12_raw(src); }
            public void rssi(sbyte src) { dst.rssi(src); }

        }
        public struct HIL_ACTUATOR_CONTROLS
        {
            internal Pack.Cursor data_;
            internal HIL_ACTUATOR_CONTROLS(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public long flags() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin  + 8, 8)); }
            public void flags(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin  + 8);  }

            public controls_ controls()
            {
                return new  controls_(data_);
            }

            public struct controls_
            {
                internal Pack.Cursor data_;
                public controls_(Pack.Cursor data) { this.data_ = data; }
                public int len() { return HIL_ACTUATOR_CONTROLS.controls_.item_len  ;}
                public float get(int index) { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16 + index * 4); }

                public bool same(float[] other)
                {
                    if(other.Length != HIL_ACTUATOR_CONTROLS.controls_.item_len) return false;
                    for(int i = 0; i < HIL_ACTUATOR_CONTROLS.controls_.item_len  ; i++) if(other[i] != get(i)) return false;
                    return true;
                }

                public bool same(controls_ other)
                {
                    if(other.len() != HIL_ACTUATOR_CONTROLS.controls_.item_len) return false;
                    for(int i = 0; i < HIL_ACTUATOR_CONTROLS.controls_.item_len ; i++)	if(other.get(i) != get(i)) return false ;
                    return true;
                }

                public void set(float src, int index) { Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16 + index * 4, 4); }

                public const int item_len = 16 ;


            }

            public void controls(float[] src)
            {
                var len =  Math.Min(src.Length, HIL_ACTUATOR_CONTROLS.controls_.item_len);
                for(int index = 0; index < len; index++)
                    Array.Copy(BitConverter.GetBytes((float)(src[index])), 0, data_.bytes, data_.origin  + 16 + index * 4, 4);
            }


            public  MAV_MODE? mode()
            {
                if(data_.field_bit !=  640 && !data_.set_field(640, -1))  return null;
                return    MAV_MODE_.from_bits(Lib.get_bits(data_.bytes, data_.BIT, 4));;
            }


            public void mode(MAV_MODE src)
            {
                if(data_.field_bit !=  640) data_.set_field(640, 0);
                ;
                Lib.set_bits(MAV_MODE_.bits(src), 4, data_.bytes, data_.BIT) ;;
            }



        }
        public struct HIL_ACTUATOR_CONTROLS_dst_adapter : com.company.demo.GroundControl. HIL_ACTUATOR_CONTROLS.DST_
        {
            HIL_ACTUATOR_CONTROLS dst;
            public HIL_ACTUATOR_CONTROLS_dst_adapter(HIL_ACTUATOR_CONTROLS dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void controls(com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS.controls_ src)
            {
                var item = dst.controls();
                for(int i = 0; i < com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS.controls_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void mode(com.company.demo.GroundControl. MAV_MODE src) { dst.mode(src); }
            public void flags(long src) { dst.flags(src); }

        }
        public struct OPTICAL_FLOW
        {
            internal Pack.Cursor data_;
            internal OPTICAL_FLOW(Pack.Cursor data) { this.data_ = data; }

            public long time_usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void time_usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public sbyte sensor_id() { return (sbyte)(data_.bytes[data_.origin  + 8]); }
            public void sensor_id(sbyte src) {    data_.bytes[data_.origin  + 8] = (byte)(src);  }

            public short flow_x() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 9, 2)); }
            public void flow_x(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 9);  }

            public short flow_y() { return (short)((short)(short)Lib.get_bytes(data_.bytes,  data_.origin  + 11, 2)); }
            public void flow_y(short src) {   Lib.set_bytes((ulong)(src), 2, data_.bytes,  data_.origin  + 11);  }

            public float flow_comp_m_x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 13); }
            public void flow_comp_m_x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 13, 4);  }

            public float flow_comp_m_y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 17); }
            public void flow_comp_m_y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 17, 4);  }

            public sbyte quality() { return (sbyte)(data_.bytes[data_.origin  + 21]); }
            public void quality(sbyte src) {    data_.bytes[data_.origin  + 21] = (byte)(src);  }

            public float ground_distance() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 22); }
            public void ground_distance(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 22, 4);  }


            public float? flow_rate_x()
            {
                if(data_.field_bit !=  208 && !data_.set_field(208, -1))  return null;
                return   BitConverter.ToSingle(data_.bytes, data_.BYTE);;
            }


            public void flow_rate_x(float src)
            {
                if(data_.field_bit !=  208) data_.set_field(208, 0);
                ;
                Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.BYTE, 4);;
            }




            public float? flow_rate_y()
            {
                if(data_.field_bit !=  209 && !data_.set_field(209, -1))  return null;
                return   BitConverter.ToSingle(data_.bytes, data_.BYTE);;
            }


            public void flow_rate_y(float src)
            {
                if(data_.field_bit !=  209) data_.set_field(209, 0);
                ;
                Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.BYTE, 4);;
            }



        }
        public struct OPTICAL_FLOW_dst_adapter : com.company.demo.GroundControl. OPTICAL_FLOW.DST_
        {
            OPTICAL_FLOW dst;
            public OPTICAL_FLOW_dst_adapter(OPTICAL_FLOW dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void sensor_id(sbyte src) { dst.sensor_id(src); }
            public void flow_x(short src) { dst.flow_x(src); }
            public void flow_y(short src) { dst.flow_y(src); }
            public void flow_comp_m_x(float src) { dst.flow_comp_m_x(src); }
            public void flow_comp_m_y(float src) { dst.flow_comp_m_y(src); }
            public void quality(sbyte src) { dst.quality(src); }
            public void ground_distance(float src) { dst.ground_distance(src); }
            public void flow_rate_x(float src) { dst.flow_rate_x(src); }
            public void flow_rate_y(float src) { dst.flow_rate_y(src); }

        }
        public struct GLOBAL_VISION_POSITION_ESTIMATE
        {
            internal Pack.Cursor data_;
            internal GLOBAL_VISION_POSITION_ESTIMATE(Pack.Cursor data) { this.data_ = data; }

            public long usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

        }
        public struct GLOBAL_VISION_POSITION_ESTIMATE_dst_adapter : com.company.demo.GroundControl. GLOBAL_VISION_POSITION_ESTIMATE.DST_
        {
            GLOBAL_VISION_POSITION_ESTIMATE dst;
            public GLOBAL_VISION_POSITION_ESTIMATE_dst_adapter(GLOBAL_VISION_POSITION_ESTIMATE dst) { this.dst = dst; }
            public void usec(long src) { dst.usec(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }

        }
        public struct VISION_POSITION_ESTIMATE
        {
            internal Pack.Cursor data_;
            internal VISION_POSITION_ESTIMATE(Pack.Cursor data) { this.data_ = data; }

            public long usec() { return (long)((long)(long)Lib.get_bytes(data_.bytes,  data_.origin, 8)); }
            public void usec(long src) {   Lib.set_bytes((ulong)(src), 8, data_.bytes,  data_.origin);  }

            public float x() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 8); }
            public void x(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 8, 4);  }

            public float y() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 12); }
            public void y(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 12, 4);  }

            public float z() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 16); }
            public void z(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 16, 4);  }

            public float roll() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 20); }
            public void roll(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 20, 4);  }

            public float pitch() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 24); }
            public void pitch(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 24, 4);  }

            public float yaw() { return  BitConverter.ToSingle(data_.bytes, data_.origin  + 28); }
            public void yaw(float src) {   Array.Copy(BitConverter.GetBytes((float)(src)), 0, data_.bytes, data_.origin  + 28, 4);  }

        }
        public struct VISION_POSITION_ESTIMATE_dst_adapter : com.company.demo.GroundControl. VISION_POSITION_ESTIMATE.DST_
        {
            VISION_POSITION_ESTIMATE dst;
            public VISION_POSITION_ESTIMATE_dst_adapter(VISION_POSITION_ESTIMATE dst) { this.dst = dst; }
            public void usec(long src) { dst.usec(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }

        }

        public struct PING33_dst_adapter : PING33.DST_
        {
            PING33 dst;
            public PING33_dst_adapter(PING33 dst) { this.dst = dst; }
            public void testBOOL(bool src) { dst.testBOOL(src); }
            public void seq(long src) { dst.seq(src); }
            public void field(long src) { dst.field(src); }
            public void field1_init(int d0) { dst.field1().Initializer().Value.init(d0) ;}
            public void field1(int src, int d0, int d1, int d2) { dst.field1().Field()?.set(src, d0, d1, d2); }
            public void field12(int src, int d0, int d1, int d2) { dst.field12(src, d0, d1, d2); }
            public void field13(int src, int d0, int d1, int d2) { dst.field13(src, d0, d1, d2); }
            public void TTTT(int src, int d0, int d1, int d2) { dst.TTTT(src, d0, d1, d2); }
            public void WWWWWWWW(int src) { dst.WWWWWWWW(src); }
            public void testBOOL2(bool src) { dst.testBOOL2(src); }
            public void testBOOL3(bool src) { dst.testBOOL3(src); }
            public void bit_field(sbyte src) { dst.bit_field(src); }
            public void bit_field2(sbyte src) { dst.bit_field2(src); }
            public void Field_Bits(sbyte src, int d0, int d1, int d2) { dst.Field_Bits(src, d0, d1, d2); }
            public void SparseFixAllBits_init(int d0) { dst.SparseFixAllBits().Initializer().Value.init(d0) ;}
            public void SparseFixAllBits(sbyte src, int d0, int d1, int d2) { dst.SparseFixAllBits().Field()?.set(src, d0, d1, d2); }
            public void FixAllBits_init(int d0) { dst.FixAllBits().Initializer().Value.init(d0) ;}
            public void FixAllBits(sbyte src, int d0, int d1, int d2) { dst.FixAllBits().Field()?.set(src, d0, d1, d2); }
            public void VarAllBits_init(int d0, int d2) { dst.VarAllBits().Initializer().Value.init(d0, d2) ;}
            public void VarAllBits(sbyte src, int d0, int d1, int d2) { dst.VarAllBits().Field()?.set(src, d0, d1, d2); }
            public void SparseVarAllBits_init(int d0, int d2) { dst.SparseVarAllBits().Initializer().Value.init(d0, d2) ;}
            public void SparseVarAllBits(sbyte src, int d0, int d1, int d2) { dst.SparseVarAllBits().Field()?.set(src, d0, d1, d2); }
            public void VarEachBits_init(int d0) { dst.VarEachBits().Initializer().Value.init(d0) ;}
            public void VarEachBits(sbyte src, int d0, int d1, int d2) { dst.VarEachBits().Field()?.set(src, d0, d1, d2); }
            public void SparsVarEachBits_init(int d0) { dst.SparsVarEachBits().Initializer().Value.init(d0) ;}
            public void SparsVarEachBits(short src, int d0, int d1, int d2) { dst.SparsVarEachBits().Field()?.set(src, d0, d1, d2); }
            public void testBOOLX(bool src) { dst.testBOOLX(src); }
            public void testBOOL2X(bool src) { dst.testBOOL2X(src); }
            public void testBOOL3X(bool src) { dst.testBOOL3X(src); }
            public void MMMMMM(com.company.demo.GroundControl. MAV_MODE src) { dst.MMMMMM(src); }
            public void field44_init(int d2) { dst.field44().Initializer().Value.init(d2) ;}
            public void field44(int src, int d0, int d1, int d2) { dst.field44().Field()?.set(src, d0, d1, d2); }
            public void field634_init(int d2) { dst.field634().Initializer().Value.init(d2) ;}
            public void field634(int src, int d0, int d1, int d2) { dst.field634().Field()?.set(src, d0, d1, d2); }
            public void field33344_init(int d2) { dst.field33344().Initializer().Value.init(d2) ;}
            public void field33344(int src, int d0, int d1, int d2) { dst.field33344().Field()?.set(src, d0, d1, d2); }
            public void field333634_init(int d2) { dst.field333634().Initializer().Value.init(d2) ;}
            public void field333634(int src, int d0, int d1, int d2) { dst.field333634().Field()?.set(src, d0, d1, d2); }
            public void field__(int src, int d0, int d1, int d2) { dst.field__(src, d0, d1, d2); }
            public void field6(int src, int d0, int d1, int d2) { dst.field6(src, d0, d1, d2); }
            public void field63_init(int d2) { dst.field63().Initializer().Value.init(d2) ;}
            public void field63(int src, int d0, int d1, int d2) { dst.field63().Field()?.set(src, d0, d1, d2); }
            public void uid2(sbyte src, int d0) { dst.uid2(src, d0); }
            public void field2(int src, int d0, int d1, int d2) { dst.field2(src, d0, d1, d2); }
            public void field4(int src, int d0, int d1, int d2) { dst.field4(src, d0, d1, d2); }
            public void stringtest1(PING33.stringtest1_ src)
            {
                var item = dst.stringtest1(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void stringtest2_init(int d2) { dst.stringtest2().Initializer().Value.init(d2) ;}
            public void stringtest2(PING33.stringtest2_.Item src, int d0, int d1, int d2)
            {
                var item = dst.stringtest2().Field().Value.set(src.len(), d0, d1, d2);
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void stringtest3(PING33.stringtest3_ src)
            {
                var item = dst.stringtest3(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void stringtest4(PING33.stringtest4_ src)
            {
                var item = dst.stringtest4(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct PING33_src_adapter : PING33.SRC_
        {
            PING33 src;
            public PING33_src_adapter(PING33 src) { this.src = src; }
            public  bool?  testBOOL() { return src.testBOOL(); }
            public  long?  seq() { return src.seq(); }
            public long field() { return src.field();}
            public void field1_init(PING33.field1_.Initializer_ init_field)
            {
                var _fld = src.field1().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0());
                }
            }
            public int field1(int d0, int d1, int d2)
            {
                return src.field1().Field().Value.get(d0, d1, d2);
            }
            public bool field12_exist() { return src.field12().HasValue ;}
            public int field12(int d0, int d1, int d2)
            {
                return src.field12().Value.get(d0, d1, d2);
            }
            public bool field13_exist() { return src.field13().HasValue ;}
            public  int?  field13(int d0, int d1, int d2) { return src.field13()  .Value.get(d0, d1, d2); }
            public int TTTT(int d0, int d1, int d2) { return src.TTTT(d0, d1, d2);}
            public  int?  WWWWWWWW() { return src.WWWWWWWW(); }
            public bool testBOOL2() { return src.testBOOL2();}
            public bool testBOOL3() { return src.testBOOL3();}
            public sbyte bit_field() { return src.bit_field();}
            public  sbyte?  bit_field2() { return src.bit_field2(); }
            public bool Field_Bits_exist() { return src.Field_Bits().HasValue ;}
            public sbyte Field_Bits(int d0, int d1, int d2)
            {
                return src.Field_Bits().Value.get(d0, d1, d2);
            }
            public void SparseFixAllBits_init(PING33.SparseFixAllBits_.Initializer_ init_field)
            {
                var _fld = src.SparseFixAllBits().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0());
                }
            }
            public  sbyte?  SparseFixAllBits(int d0, int d1, int d2) { return src.SparseFixAllBits() .Field() .Value.get(d0, d1, d2); }
            public void FixAllBits_init(PING33.FixAllBits_.Initializer_ init_field)
            {
                var _fld = src.FixAllBits().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0());
                }
            }
            public sbyte FixAllBits(int d0, int d1, int d2)
            {
                return src.FixAllBits().Field().Value.get(d0, d1, d2);
            }
            public void VarAllBits_init(PING33.VarAllBits_.Initializer_ init_field)
            {
                var _fld = src.VarAllBits().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0(), fld.d2());
                }
            }
            public sbyte VarAllBits(int d0, int d1, int d2)
            {
                return src.VarAllBits().Field().Value.get(d0, d1, d2);
            }
            public void SparseVarAllBits_init(PING33.SparseVarAllBits_.Initializer_ init_field)
            {
                var _fld = src.SparseVarAllBits().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0(), fld.d2());
                }
            }
            public  sbyte?  SparseVarAllBits(int d0, int d1, int d2) { return src.SparseVarAllBits() .Field() .Value.get(d0, d1, d2); }
            public void VarEachBits_init(PING33.VarEachBits_.Initializer_ init_field)
            {
                var _fld = src.VarEachBits().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0());
                }
            }
            public sbyte VarEachBits(int d0, int d1, int d2)
            {
                return src.VarEachBits().Field().Value.get(d0, d1, d2);
            }
            public void SparsVarEachBits_init(PING33.SparsVarEachBits_.Initializer_ init_field)
            {
                var _fld = src.SparsVarEachBits().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d0());
                }
            }
            public  short?  SparsVarEachBits(int d0, int d1, int d2) { return src.SparsVarEachBits() .Field() .Value.get(d0, d1, d2); }
            public  bool?  testBOOLX() { return src.testBOOLX(); }
            public  bool?  testBOOL2X() { return src.testBOOL2X(); }
            public  bool?  testBOOL3X() { return src.testBOOL3X(); }
            public  com.company.demo.GroundControl. MAV_MODE?  MMMMMM() { return src.MMMMMM(); }
            public void field44_init(PING33.field44_.Initializer_ init_field)
            {
                var _fld = src.field44().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d2());
                }
            }
            public int field44(int d0, int d1, int d2)
            {
                return src.field44().Field().Value.get(d0, d1, d2);
            }
            public void field634_init(PING33.field634_.Initializer_ init_field)
            {
                var _fld = src.field634().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d2());
                }
            }
            public int field634(int d0, int d1, int d2)
            {
                return src.field634().Field().Value.get(d0, d1, d2);
            }
            public void field33344_init(PING33.field33344_.Initializer_ init_field)
            {
                var _fld = src.field33344().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d2());
                }
            }
            public  int?  field33344(int d0, int d1, int d2) { return src.field33344() .Field() .Value.get(d0, d1, d2); }
            public void field333634_init(PING33.field333634_.Initializer_ init_field)
            {
                var _fld = src.field333634().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d2());
                }
            }
            public  int?  field333634(int d0, int d1, int d2) { return src.field333634() .Field() .Value.get(d0, d1, d2); }
            public bool field___exist() { return src.field__().HasValue ;}
            public  int?  field__(int d0, int d1, int d2) { return src.field__()  .Value.get(d0, d1, d2); }
            public int field6(int d0, int d1, int d2) { return src.field6(d0, d1, d2);}
            public void field63_init(PING33.field63_.Initializer_ init_field)
            {
                var _fld = src.field63().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d2());
                }
            }
            public int field63(int d0, int d1, int d2)
            {
                return src.field63().Field().Value.get(d0, d1, d2);
            }
            public bool uid2_exist() { return src.uid2().HasValue ;}
            public  sbyte?  uid2(int d0) { return src.uid2()  .Value.get(d0); }
            public bool field2_exist() { return src.field2().HasValue ;}
            public  int?  field2(int d0, int d1, int d2) { return src.field2()  .Value.get(d0, d1, d2); }
            public bool field4_exist() { return src.field4().HasValue ;}
            public  int?  field4(int d0, int d1, int d2) { return src.field4()  .Value.get(d0, d1, d2); }
            public int stringtest1_exist() { return src.stringtest1()?.len() ?? 0 ;}
            public void stringtest1(PING33.stringtest1_ dst)
            {
                var item = src.stringtest1();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public void stringtest2_init(PING33.stringtest2_.Initializer_ init_field)
            {
                var _fld = src.stringtest2().Field();
                if(_fld.HasValue)
                {
                    var fld = _fld.Value;
                    init_field.init(fld.d2());
                }
            }
            public int stringtest2_item_exist(int d0, int d1, int d2) { return src.stringtest2().Field().Value.get(d0, d1, d2)?.len() ?? 0 ;}
            public void stringtest2(PING33.stringtest2_.Item dst, int d0, int d1, int d2)
            {
                var item = src.stringtest2().Field().Value.get(d0, d1, d2);
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int stringtest3_exist() { return src.stringtest3()?.len() ?? 0 ;}
            public void stringtest3(PING33.stringtest3_ dst)
            {
                var item = src.stringtest3();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int stringtest4_exist() { return src.stringtest4()?.len() ?? 0 ;}
            public void stringtest4(PING33.stringtest4_ dst)
            {
                var item = src.stringtest4();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct VISION_SPEED_ESTIMATE_dst_adapter : VISION_SPEED_ESTIMATE.DST_
        {
            VISION_SPEED_ESTIMATE dst;
            public VISION_SPEED_ESTIMATE_dst_adapter(VISION_SPEED_ESTIMATE dst) { this.dst = dst; }
            public void usec(long src) { dst.usec(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }

        }

        public struct VISION_SPEED_ESTIMATE_src_adapter : VISION_SPEED_ESTIMATE.SRC_
        {
            VISION_SPEED_ESTIMATE src;
            public VISION_SPEED_ESTIMATE_src_adapter(VISION_SPEED_ESTIMATE src) { this.src = src; }
            public long usec() { return src.usec();}
            public float x() { return src.x();}
            public float y() { return src.y();}
            public float z() { return src.z();}

        }

        public struct VICON_POSITION_ESTIMATE_dst_adapter : VICON_POSITION_ESTIMATE.DST_
        {
            VICON_POSITION_ESTIMATE dst;
            public VICON_POSITION_ESTIMATE_dst_adapter(VICON_POSITION_ESTIMATE dst) { this.dst = dst; }
            public void usec(long src) { dst.usec(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }

        }

        public struct VICON_POSITION_ESTIMATE_src_adapter : VICON_POSITION_ESTIMATE.SRC_
        {
            VICON_POSITION_ESTIMATE src;
            public VICON_POSITION_ESTIMATE_src_adapter(VICON_POSITION_ESTIMATE src) { this.src = src; }
            public long usec() { return src.usec();}
            public float x() { return src.x();}
            public float y() { return src.y();}
            public float z() { return src.z();}
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}

        }

        public struct HIGHRES_IMU_dst_adapter : HIGHRES_IMU.DST_
        {
            HIGHRES_IMU dst;
            public HIGHRES_IMU_dst_adapter(HIGHRES_IMU dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void xacc(float src) { dst.xacc(src); }
            public void yacc(float src) { dst.yacc(src); }
            public void zacc(float src) { dst.zacc(src); }
            public void xgyro(float src) { dst.xgyro(src); }
            public void ygyro(float src) { dst.ygyro(src); }
            public void zgyro(float src) { dst.zgyro(src); }
            public void xmag(float src) { dst.xmag(src); }
            public void ymag(float src) { dst.ymag(src); }
            public void zmag(float src) { dst.zmag(src); }
            public void abs_pressure(float src) { dst.abs_pressure(src); }
            public void diff_pressure(float src) { dst.diff_pressure(src); }
            public void pressure_alt(float src) { dst.pressure_alt(src); }
            public void temperature(float src) { dst.temperature(src); }
            public void fields_updated(short src) { dst.fields_updated(src); }

        }

        public struct HIGHRES_IMU_src_adapter : HIGHRES_IMU.SRC_
        {
            HIGHRES_IMU src;
            public HIGHRES_IMU_src_adapter(HIGHRES_IMU src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public float xacc() { return src.xacc();}
            public float yacc() { return src.yacc();}
            public float zacc() { return src.zacc();}
            public float xgyro() { return src.xgyro();}
            public float ygyro() { return src.ygyro();}
            public float zgyro() { return src.zgyro();}
            public float xmag() { return src.xmag();}
            public float ymag() { return src.ymag();}
            public float zmag() { return src.zmag();}
            public float abs_pressure() { return src.abs_pressure();}
            public float diff_pressure() { return src.diff_pressure();}
            public float pressure_alt() { return src.pressure_alt();}
            public float temperature() { return src.temperature();}
            public short fields_updated() { return src.fields_updated();}

        }

        public struct OPTICAL_FLOW_RAD_dst_adapter : OPTICAL_FLOW_RAD.DST_
        {
            OPTICAL_FLOW_RAD dst;
            public OPTICAL_FLOW_RAD_dst_adapter(OPTICAL_FLOW_RAD dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void sensor_id(sbyte src) { dst.sensor_id(src); }
            public void integration_time_us(int src) { dst.integration_time_us(src); }
            public void integrated_x(float src) { dst.integrated_x(src); }
            public void integrated_y(float src) { dst.integrated_y(src); }
            public void integrated_xgyro(float src) { dst.integrated_xgyro(src); }
            public void integrated_ygyro(float src) { dst.integrated_ygyro(src); }
            public void integrated_zgyro(float src) { dst.integrated_zgyro(src); }
            public void temperature(short src) { dst.temperature(src); }
            public void quality(sbyte src) { dst.quality(src); }
            public void time_delta_distance_us(int src) { dst.time_delta_distance_us(src); }
            public void distance(float src) { dst.distance(src); }

        }

        public struct OPTICAL_FLOW_RAD_src_adapter : OPTICAL_FLOW_RAD.SRC_
        {
            OPTICAL_FLOW_RAD src;
            public OPTICAL_FLOW_RAD_src_adapter(OPTICAL_FLOW_RAD src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte sensor_id() { return src.sensor_id();}
            public int integration_time_us() { return src.integration_time_us();}
            public float integrated_x() { return src.integrated_x();}
            public float integrated_y() { return src.integrated_y();}
            public float integrated_xgyro() { return src.integrated_xgyro();}
            public float integrated_ygyro() { return src.integrated_ygyro();}
            public float integrated_zgyro() { return src.integrated_zgyro();}
            public short temperature() { return src.temperature();}
            public sbyte quality() { return src.quality();}
            public int time_delta_distance_us() { return src.time_delta_distance_us();}
            public float distance() { return src.distance();}

        }

        public struct HIL_SENSOR_dst_adapter : HIL_SENSOR.DST_
        {
            HIL_SENSOR dst;
            public HIL_SENSOR_dst_adapter(HIL_SENSOR dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void xacc(float src) { dst.xacc(src); }
            public void yacc(float src) { dst.yacc(src); }
            public void zacc(float src) { dst.zacc(src); }
            public void xgyro(float src) { dst.xgyro(src); }
            public void ygyro(float src) { dst.ygyro(src); }
            public void zgyro(float src) { dst.zgyro(src); }
            public void xmag(float src) { dst.xmag(src); }
            public void ymag(float src) { dst.ymag(src); }
            public void zmag(float src) { dst.zmag(src); }
            public void abs_pressure(float src) { dst.abs_pressure(src); }
            public void diff_pressure(float src) { dst.diff_pressure(src); }
            public void pressure_alt(float src) { dst.pressure_alt(src); }
            public void temperature(float src) { dst.temperature(src); }
            public void fields_updated(int src) { dst.fields_updated(src); }

        }

        public struct HIL_SENSOR_src_adapter : HIL_SENSOR.SRC_
        {
            HIL_SENSOR src;
            public HIL_SENSOR_src_adapter(HIL_SENSOR src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public float xacc() { return src.xacc();}
            public float yacc() { return src.yacc();}
            public float zacc() { return src.zacc();}
            public float xgyro() { return src.xgyro();}
            public float ygyro() { return src.ygyro();}
            public float zgyro() { return src.zgyro();}
            public float xmag() { return src.xmag();}
            public float ymag() { return src.ymag();}
            public float zmag() { return src.zmag();}
            public float abs_pressure() { return src.abs_pressure();}
            public float diff_pressure() { return src.diff_pressure();}
            public float pressure_alt() { return src.pressure_alt();}
            public float temperature() { return src.temperature();}
            public int fields_updated() { return src.fields_updated();}

        }

        public struct SIM_STATE_dst_adapter : SIM_STATE.DST_
        {
            SIM_STATE dst;
            public SIM_STATE_dst_adapter(SIM_STATE dst) { this.dst = dst; }
            public void q1(float src) { dst.q1(src); }
            public void q2(float src) { dst.q2(src); }
            public void q3(float src) { dst.q3(src); }
            public void q4(float src) { dst.q4(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void xacc(float src) { dst.xacc(src); }
            public void yacc(float src) { dst.yacc(src); }
            public void zacc(float src) { dst.zacc(src); }
            public void xgyro(float src) { dst.xgyro(src); }
            public void ygyro(float src) { dst.ygyro(src); }
            public void zgyro(float src) { dst.zgyro(src); }
            public void lat(float src) { dst.lat(src); }
            public void lon(float src) { dst.lon(src); }
            public void alt(float src) { dst.alt(src); }
            public void std_dev_horz(float src) { dst.std_dev_horz(src); }
            public void std_dev_vert(float src) { dst.std_dev_vert(src); }
            public void vn(float src) { dst.vn(src); }
            public void ve(float src) { dst.ve(src); }
            public void vd(float src) { dst.vd(src); }

        }

        public struct SIM_STATE_src_adapter : SIM_STATE.SRC_
        {
            SIM_STATE src;
            public SIM_STATE_src_adapter(SIM_STATE src) { this.src = src; }
            public float q1() { return src.q1();}
            public float q2() { return src.q2();}
            public float q3() { return src.q3();}
            public float q4() { return src.q4();}
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}
            public float xacc() { return src.xacc();}
            public float yacc() { return src.yacc();}
            public float zacc() { return src.zacc();}
            public float xgyro() { return src.xgyro();}
            public float ygyro() { return src.ygyro();}
            public float zgyro() { return src.zgyro();}
            public float lat() { return src.lat();}
            public float lon() { return src.lon();}
            public float alt() { return src.alt();}
            public float std_dev_horz() { return src.std_dev_horz();}
            public float std_dev_vert() { return src.std_dev_vert();}
            public float vn() { return src.vn();}
            public float ve() { return src.ve();}
            public float vd() { return src.vd();}

        }

        public struct RADIO_STATUS_dst_adapter : RADIO_STATUS.DST_
        {
            RADIO_STATUS dst;
            public RADIO_STATUS_dst_adapter(RADIO_STATUS dst) { this.dst = dst; }
            public void rssi(sbyte src) { dst.rssi(src); }
            public void remrssi(sbyte src) { dst.remrssi(src); }
            public void txbuf(sbyte src) { dst.txbuf(src); }
            public void noise(sbyte src) { dst.noise(src); }
            public void remnoise(sbyte src) { dst.remnoise(src); }
            public void rxerrors(short src) { dst.rxerrors(src); }
            public void fixeD(short src) { dst.fixeD(src); }

        }

        public struct RADIO_STATUS_src_adapter : RADIO_STATUS.SRC_
        {
            RADIO_STATUS src;
            public RADIO_STATUS_src_adapter(RADIO_STATUS src) { this.src = src; }
            public sbyte rssi() { return src.rssi();}
            public sbyte remrssi() { return src.remrssi();}
            public sbyte txbuf() { return src.txbuf();}
            public sbyte noise() { return src.noise();}
            public sbyte remnoise() { return src.remnoise();}
            public short rxerrors() { return src.rxerrors();}
            public short fixeD() { return src.fixeD();}

        }

        public struct FILE_TRANSFER_PROTOCOL_dst_adapter : FILE_TRANSFER_PROTOCOL.DST_
        {
            FILE_TRANSFER_PROTOCOL dst;
            public FILE_TRANSFER_PROTOCOL_dst_adapter(FILE_TRANSFER_PROTOCOL dst) { this.dst = dst; }
            public void target_network(sbyte src) { dst.target_network(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void payload(FILE_TRANSFER_PROTOCOL.payload_ src)
            {
                var item = dst.payload();
                for(int i = 0; i < FILE_TRANSFER_PROTOCOL.payload_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct FILE_TRANSFER_PROTOCOL_src_adapter : FILE_TRANSFER_PROTOCOL.SRC_
        {
            FILE_TRANSFER_PROTOCOL src;
            public FILE_TRANSFER_PROTOCOL_src_adapter(FILE_TRANSFER_PROTOCOL src) { this.src = src; }
            public sbyte target_network() { return src.target_network();}
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public void payload(FILE_TRANSFER_PROTOCOL.payload_ dst)
            {
                var item = src.payload();
                for(int i = 0; i < FILE_TRANSFER_PROTOCOL.payload_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct TIMESYNC_dst_adapter : TIMESYNC.DST_
        {
            TIMESYNC dst;
            public TIMESYNC_dst_adapter(TIMESYNC dst) { this.dst = dst; }
            public void tc1(long src) { dst.tc1(src); }
            public void ts1(long src) { dst.ts1(src); }

        }

        public struct TIMESYNC_src_adapter : TIMESYNC.SRC_
        {
            TIMESYNC src;
            public TIMESYNC_src_adapter(TIMESYNC src) { this.src = src; }
            public long tc1() { return src.tc1();}
            public long ts1() { return src.ts1();}

        }

        public struct CAMERA_TRIGGER_dst_adapter : CAMERA_TRIGGER.DST_
        {
            CAMERA_TRIGGER dst;
            public CAMERA_TRIGGER_dst_adapter(CAMERA_TRIGGER dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void seq(int src) { dst.seq(src); }

        }

        public struct CAMERA_TRIGGER_src_adapter : CAMERA_TRIGGER.SRC_
        {
            CAMERA_TRIGGER src;
            public CAMERA_TRIGGER_src_adapter(CAMERA_TRIGGER src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public int seq() { return src.seq();}

        }

        public struct HIL_GPS_dst_adapter : HIL_GPS.DST_
        {
            HIL_GPS dst;
            public HIL_GPS_dst_adapter(HIL_GPS dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void fix_type(sbyte src) { dst.fix_type(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void eph(short src) { dst.eph(src); }
            public void epv(short src) { dst.epv(src); }
            public void vel(short src) { dst.vel(src); }
            public void vn(short src) { dst.vn(src); }
            public void ve(short src) { dst.ve(src); }
            public void vd(short src) { dst.vd(src); }
            public void cog(short src) { dst.cog(src); }
            public void satellites_visible(sbyte src) { dst.satellites_visible(src); }

        }

        public struct HIL_GPS_src_adapter : HIL_GPS.SRC_
        {
            HIL_GPS src;
            public HIL_GPS_src_adapter(HIL_GPS src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte fix_type() { return src.fix_type();}
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public int alt() { return src.alt();}
            public short eph() { return src.eph();}
            public short epv() { return src.epv();}
            public short vel() { return src.vel();}
            public short vn() { return src.vn();}
            public short ve() { return src.ve();}
            public short vd() { return src.vd();}
            public short cog() { return src.cog();}
            public sbyte satellites_visible() { return src.satellites_visible();}

        }

        public struct HIL_OPTICAL_FLOW_dst_adapter : HIL_OPTICAL_FLOW.DST_
        {
            HIL_OPTICAL_FLOW dst;
            public HIL_OPTICAL_FLOW_dst_adapter(HIL_OPTICAL_FLOW dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void sensor_id(sbyte src) { dst.sensor_id(src); }
            public void integration_time_us(int src) { dst.integration_time_us(src); }
            public void integrated_x(float src) { dst.integrated_x(src); }
            public void integrated_y(float src) { dst.integrated_y(src); }
            public void integrated_xgyro(float src) { dst.integrated_xgyro(src); }
            public void integrated_ygyro(float src) { dst.integrated_ygyro(src); }
            public void integrated_zgyro(float src) { dst.integrated_zgyro(src); }
            public void temperature(short src) { dst.temperature(src); }
            public void quality(sbyte src) { dst.quality(src); }
            public void time_delta_distance_us(int src) { dst.time_delta_distance_us(src); }
            public void distance(float src) { dst.distance(src); }

        }

        public struct HIL_OPTICAL_FLOW_src_adapter : HIL_OPTICAL_FLOW.SRC_
        {
            HIL_OPTICAL_FLOW src;
            public HIL_OPTICAL_FLOW_src_adapter(HIL_OPTICAL_FLOW src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte sensor_id() { return src.sensor_id();}
            public int integration_time_us() { return src.integration_time_us();}
            public float integrated_x() { return src.integrated_x();}
            public float integrated_y() { return src.integrated_y();}
            public float integrated_xgyro() { return src.integrated_xgyro();}
            public float integrated_ygyro() { return src.integrated_ygyro();}
            public float integrated_zgyro() { return src.integrated_zgyro();}
            public short temperature() { return src.temperature();}
            public sbyte quality() { return src.quality();}
            public int time_delta_distance_us() { return src.time_delta_distance_us();}
            public float distance() { return src.distance();}

        }

        public struct HIL_STATE_QUATERNION_dst_adapter : HIL_STATE_QUATERNION.DST_
        {
            HIL_STATE_QUATERNION dst;
            public HIL_STATE_QUATERNION_dst_adapter(HIL_STATE_QUATERNION dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void attitude_quaternion(HIL_STATE_QUATERNION.attitude_quaternion_ src)
            {
                var item = dst.attitude_quaternion();
                for(int i = 0; i < HIL_STATE_QUATERNION.attitude_quaternion_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void rollspeed(float src) { dst.rollspeed(src); }
            public void pitchspeed(float src) { dst.pitchspeed(src); }
            public void yawspeed(float src) { dst.yawspeed(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void vx(short src) { dst.vx(src); }
            public void vy(short src) { dst.vy(src); }
            public void vz(short src) { dst.vz(src); }
            public void ind_airspeed(short src) { dst.ind_airspeed(src); }
            public void true_airspeed(short src) { dst.true_airspeed(src); }
            public void xacc(short src) { dst.xacc(src); }
            public void yacc(short src) { dst.yacc(src); }
            public void zacc(short src) { dst.zacc(src); }

        }

        public struct HIL_STATE_QUATERNION_src_adapter : HIL_STATE_QUATERNION.SRC_
        {
            HIL_STATE_QUATERNION src;
            public HIL_STATE_QUATERNION_src_adapter(HIL_STATE_QUATERNION src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public void attitude_quaternion(HIL_STATE_QUATERNION.attitude_quaternion_ dst)
            {
                var item = src.attitude_quaternion();
                for(int i = 0; i < HIL_STATE_QUATERNION.attitude_quaternion_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float rollspeed() { return src.rollspeed();}
            public float pitchspeed() { return src.pitchspeed();}
            public float yawspeed() { return src.yawspeed();}
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public int alt() { return src.alt();}
            public short vx() { return src.vx();}
            public short vy() { return src.vy();}
            public short vz() { return src.vz();}
            public short ind_airspeed() { return src.ind_airspeed();}
            public short true_airspeed() { return src.true_airspeed();}
            public short xacc() { return src.xacc();}
            public short yacc() { return src.yacc();}
            public short zacc() { return src.zacc();}

        }

        public struct SCALED_IMU2_dst_adapter : SCALED_IMU2.DST_
        {
            SCALED_IMU2 dst;
            public SCALED_IMU2_dst_adapter(SCALED_IMU2 dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void xacc(short src) { dst.xacc(src); }
            public void yacc(short src) { dst.yacc(src); }
            public void zacc(short src) { dst.zacc(src); }
            public void xgyro(short src) { dst.xgyro(src); }
            public void ygyro(short src) { dst.ygyro(src); }
            public void zgyro(short src) { dst.zgyro(src); }
            public void xmag(short src) { dst.xmag(src); }
            public void ymag(short src) { dst.ymag(src); }
            public void zmag(short src) { dst.zmag(src); }

        }

        public struct SCALED_IMU2_src_adapter : SCALED_IMU2.SRC_
        {
            SCALED_IMU2 src;
            public SCALED_IMU2_src_adapter(SCALED_IMU2 src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public short xacc() { return src.xacc();}
            public short yacc() { return src.yacc();}
            public short zacc() { return src.zacc();}
            public short xgyro() { return src.xgyro();}
            public short ygyro() { return src.ygyro();}
            public short zgyro() { return src.zgyro();}
            public short xmag() { return src.xmag();}
            public short ymag() { return src.ymag();}
            public short zmag() { return src.zmag();}

        }

        public struct LOG_REQUEST_LIST_dst_adapter : LOG_REQUEST_LIST.DST_
        {
            LOG_REQUEST_LIST dst;
            public LOG_REQUEST_LIST_dst_adapter(LOG_REQUEST_LIST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void start(short src) { dst.start(src); }
            public void end(short src) { dst.end(src); }

        }

        public struct LOG_REQUEST_LIST_src_adapter : LOG_REQUEST_LIST.SRC_
        {
            LOG_REQUEST_LIST src;
            public LOG_REQUEST_LIST_src_adapter(LOG_REQUEST_LIST src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short start() { return src.start();}
            public short end() { return src.end();}

        }

        public struct LOG_ENTRY_dst_adapter : LOG_ENTRY.DST_
        {
            LOG_ENTRY dst;
            public LOG_ENTRY_dst_adapter(LOG_ENTRY dst) { this.dst = dst; }
            public void id(short src) { dst.id(src); }
            public void num_logs(short src) { dst.num_logs(src); }
            public void last_log_num(short src) { dst.last_log_num(src); }
            public void time_utc(int src) { dst.time_utc(src); }
            public void size(int src) { dst.size(src); }

        }

        public struct LOG_ENTRY_src_adapter : LOG_ENTRY.SRC_
        {
            LOG_ENTRY src;
            public LOG_ENTRY_src_adapter(LOG_ENTRY src) { this.src = src; }
            public short id() { return src.id();}
            public short num_logs() { return src.num_logs();}
            public short last_log_num() { return src.last_log_num();}
            public int time_utc() { return src.time_utc();}
            public int size() { return src.size();}

        }

        public struct LOG_REQUEST_DATA_dst_adapter : LOG_REQUEST_DATA.DST_
        {
            LOG_REQUEST_DATA dst;
            public LOG_REQUEST_DATA_dst_adapter(LOG_REQUEST_DATA dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void id(short src) { dst.id(src); }
            public void ofs(int src) { dst.ofs(src); }
            public void count(int src) { dst.count(src); }

        }

        public struct LOG_REQUEST_DATA_src_adapter : LOG_REQUEST_DATA.SRC_
        {
            LOG_REQUEST_DATA src;
            public LOG_REQUEST_DATA_src_adapter(LOG_REQUEST_DATA src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short id() { return src.id();}
            public int ofs() { return src.ofs();}
            public int count() { return src.count();}

        }

        public struct LOG_DATA_dst_adapter : LOG_DATA.DST_
        {
            LOG_DATA dst;
            public LOG_DATA_dst_adapter(LOG_DATA dst) { this.dst = dst; }
            public void id(short src) { dst.id(src); }
            public void ofs(int src) { dst.ofs(src); }
            public void count(sbyte src) { dst.count(src); }
            public void daTa(LOG_DATA.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < LOG_DATA.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct LOG_DATA_src_adapter : LOG_DATA.SRC_
        {
            LOG_DATA src;
            public LOG_DATA_src_adapter(LOG_DATA src) { this.src = src; }
            public short id() { return src.id();}
            public int ofs() { return src.ofs();}
            public sbyte count() { return src.count();}
            public void daTa(LOG_DATA.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < LOG_DATA.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct LOG_ERASE_dst_adapter : LOG_ERASE.DST_
        {
            LOG_ERASE dst;
            public LOG_ERASE_dst_adapter(LOG_ERASE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }

        public struct LOG_ERASE_src_adapter : LOG_ERASE.SRC_
        {
            LOG_ERASE src;
            public LOG_ERASE_src_adapter(LOG_ERASE src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}

        }

        public struct LOG_REQUEST_END_dst_adapter : LOG_REQUEST_END.DST_
        {
            LOG_REQUEST_END dst;
            public LOG_REQUEST_END_dst_adapter(LOG_REQUEST_END dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }

        public struct LOG_REQUEST_END_src_adapter : LOG_REQUEST_END.SRC_
        {
            LOG_REQUEST_END src;
            public LOG_REQUEST_END_src_adapter(LOG_REQUEST_END src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}

        }

        public struct GPS_INJECT_DATA_dst_adapter : GPS_INJECT_DATA.DST_
        {
            GPS_INJECT_DATA dst;
            public GPS_INJECT_DATA_dst_adapter(GPS_INJECT_DATA dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void len(sbyte src) { dst.len(src); }
            public void daTa(GPS_INJECT_DATA.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < GPS_INJECT_DATA.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct GPS_INJECT_DATA_src_adapter : GPS_INJECT_DATA.SRC_
        {
            GPS_INJECT_DATA src;
            public GPS_INJECT_DATA_src_adapter(GPS_INJECT_DATA src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte len() { return src.len();}
            public void daTa(GPS_INJECT_DATA.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < GPS_INJECT_DATA.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct GPS2_RAW_dst_adapter : GPS2_RAW.DST_
        {
            GPS2_RAW dst;
            public GPS2_RAW_dst_adapter(GPS2_RAW dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void fix_type(com.company.demo.GroundControl. GPS_FIX_TYPE src) { dst.fix_type(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void eph(short src) { dst.eph(src); }
            public void epv(short src) { dst.epv(src); }
            public void vel(short src) { dst.vel(src); }
            public void cog(short src) { dst.cog(src); }
            public void satellites_visible(sbyte src) { dst.satellites_visible(src); }
            public void dgps_numch(sbyte src) { dst.dgps_numch(src); }
            public void dgps_age(int src) { dst.dgps_age(src); }

        }

        public struct GPS2_RAW_src_adapter : GPS2_RAW.SRC_
        {
            GPS2_RAW src;
            public GPS2_RAW_src_adapter(GPS2_RAW src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public  com.company.demo.GroundControl. GPS_FIX_TYPE?  fix_type() { return src.fix_type(); }
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public int alt() { return src.alt();}
            public short eph() { return src.eph();}
            public short epv() { return src.epv();}
            public short vel() { return src.vel();}
            public short cog() { return src.cog();}
            public sbyte satellites_visible() { return src.satellites_visible();}
            public sbyte dgps_numch() { return src.dgps_numch();}
            public int dgps_age() { return src.dgps_age();}

        }

        public struct POWER_STATUS_dst_adapter : POWER_STATUS.DST_
        {
            POWER_STATUS dst;
            public POWER_STATUS_dst_adapter(POWER_STATUS dst) { this.dst = dst; }
            public void Vcc(short src) { dst.Vcc(src); }
            public void Vservo(short src) { dst.Vservo(src); }
            public void flags(com.company.demo.GroundControl. MAV_POWER_STATUS src) { dst.flags(src); }

        }

        public struct POWER_STATUS_src_adapter : POWER_STATUS.SRC_
        {
            POWER_STATUS src;
            public POWER_STATUS_src_adapter(POWER_STATUS src) { this.src = src; }
            public short Vcc() { return src.Vcc();}
            public short Vservo() { return src.Vservo();}
            public  com.company.demo.GroundControl. MAV_POWER_STATUS?  flags() { return src.flags(); }

        }

        public struct SERIAL_CONTROL_dst_adapter : SERIAL_CONTROL.DST_
        {
            SERIAL_CONTROL dst;
            public SERIAL_CONTROL_dst_adapter(SERIAL_CONTROL dst) { this.dst = dst; }
            public void device(com.company.demo.GroundControl. SERIAL_CONTROL_DEV src) { dst.device(src); }
            public void flags(com.company.demo.GroundControl. SERIAL_CONTROL_FLAG src) { dst.flags(src); }
            public void timeout(short src) { dst.timeout(src); }
            public void baudrate(int src) { dst.baudrate(src); }
            public void count(sbyte src) { dst.count(src); }
            public void daTa(SERIAL_CONTROL.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < SERIAL_CONTROL.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct SERIAL_CONTROL_src_adapter : SERIAL_CONTROL.SRC_
        {
            SERIAL_CONTROL src;
            public SERIAL_CONTROL_src_adapter(SERIAL_CONTROL src) { this.src = src; }
            public  com.company.demo.GroundControl. SERIAL_CONTROL_DEV?  device() { return src.device(); }
            public  com.company.demo.GroundControl. SERIAL_CONTROL_FLAG?  flags() { return src.flags(); }
            public short timeout() { return src.timeout();}
            public int baudrate() { return src.baudrate();}
            public sbyte count() { return src.count();}
            public void daTa(SERIAL_CONTROL.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < SERIAL_CONTROL.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct GPS_RTK_dst_adapter : GPS_RTK.DST_
        {
            GPS_RTK dst;
            public GPS_RTK_dst_adapter(GPS_RTK dst) { this.dst = dst; }
            public void time_last_baseline_ms(int src) { dst.time_last_baseline_ms(src); }
            public void rtk_receiver_id(sbyte src) { dst.rtk_receiver_id(src); }
            public void wn(short src) { dst.wn(src); }
            public void tow(int src) { dst.tow(src); }
            public void rtk_health(sbyte src) { dst.rtk_health(src); }
            public void rtk_rate(sbyte src) { dst.rtk_rate(src); }
            public void nsats(sbyte src) { dst.nsats(src); }
            public void baseline_coords_type(sbyte src) { dst.baseline_coords_type(src); }
            public void baseline_a_mm(int src) { dst.baseline_a_mm(src); }
            public void baseline_b_mm(int src) { dst.baseline_b_mm(src); }
            public void baseline_c_mm(int src) { dst.baseline_c_mm(src); }
            public void accuracy(int src) { dst.accuracy(src); }
            public void iar_num_hypotheses(int src) { dst.iar_num_hypotheses(src); }

        }

        public struct GPS_RTK_src_adapter : GPS_RTK.SRC_
        {
            GPS_RTK src;
            public GPS_RTK_src_adapter(GPS_RTK src) { this.src = src; }
            public int time_last_baseline_ms() { return src.time_last_baseline_ms();}
            public sbyte rtk_receiver_id() { return src.rtk_receiver_id();}
            public short wn() { return src.wn();}
            public int tow() { return src.tow();}
            public sbyte rtk_health() { return src.rtk_health();}
            public sbyte rtk_rate() { return src.rtk_rate();}
            public sbyte nsats() { return src.nsats();}
            public sbyte baseline_coords_type() { return src.baseline_coords_type();}
            public int baseline_a_mm() { return src.baseline_a_mm();}
            public int baseline_b_mm() { return src.baseline_b_mm();}
            public int baseline_c_mm() { return src.baseline_c_mm();}
            public int accuracy() { return src.accuracy();}
            public int iar_num_hypotheses() { return src.iar_num_hypotheses();}

        }

        public struct GPS2_RTK_dst_adapter : GPS2_RTK.DST_
        {
            GPS2_RTK dst;
            public GPS2_RTK_dst_adapter(GPS2_RTK dst) { this.dst = dst; }
            public void time_last_baseline_ms(int src) { dst.time_last_baseline_ms(src); }
            public void rtk_receiver_id(sbyte src) { dst.rtk_receiver_id(src); }
            public void wn(short src) { dst.wn(src); }
            public void tow(int src) { dst.tow(src); }
            public void rtk_health(sbyte src) { dst.rtk_health(src); }
            public void rtk_rate(sbyte src) { dst.rtk_rate(src); }
            public void nsats(sbyte src) { dst.nsats(src); }
            public void baseline_coords_type(sbyte src) { dst.baseline_coords_type(src); }
            public void baseline_a_mm(int src) { dst.baseline_a_mm(src); }
            public void baseline_b_mm(int src) { dst.baseline_b_mm(src); }
            public void baseline_c_mm(int src) { dst.baseline_c_mm(src); }
            public void accuracy(int src) { dst.accuracy(src); }
            public void iar_num_hypotheses(int src) { dst.iar_num_hypotheses(src); }

        }

        public struct GPS2_RTK_src_adapter : GPS2_RTK.SRC_
        {
            GPS2_RTK src;
            public GPS2_RTK_src_adapter(GPS2_RTK src) { this.src = src; }
            public int time_last_baseline_ms() { return src.time_last_baseline_ms();}
            public sbyte rtk_receiver_id() { return src.rtk_receiver_id();}
            public short wn() { return src.wn();}
            public int tow() { return src.tow();}
            public sbyte rtk_health() { return src.rtk_health();}
            public sbyte rtk_rate() { return src.rtk_rate();}
            public sbyte nsats() { return src.nsats();}
            public sbyte baseline_coords_type() { return src.baseline_coords_type();}
            public int baseline_a_mm() { return src.baseline_a_mm();}
            public int baseline_b_mm() { return src.baseline_b_mm();}
            public int baseline_c_mm() { return src.baseline_c_mm();}
            public int accuracy() { return src.accuracy();}
            public int iar_num_hypotheses() { return src.iar_num_hypotheses();}

        }

        public struct SCALED_IMU3_dst_adapter : SCALED_IMU3.DST_
        {
            SCALED_IMU3 dst;
            public SCALED_IMU3_dst_adapter(SCALED_IMU3 dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void xacc(short src) { dst.xacc(src); }
            public void yacc(short src) { dst.yacc(src); }
            public void zacc(short src) { dst.zacc(src); }
            public void xgyro(short src) { dst.xgyro(src); }
            public void ygyro(short src) { dst.ygyro(src); }
            public void zgyro(short src) { dst.zgyro(src); }
            public void xmag(short src) { dst.xmag(src); }
            public void ymag(short src) { dst.ymag(src); }
            public void zmag(short src) { dst.zmag(src); }

        }

        public struct SCALED_IMU3_src_adapter : SCALED_IMU3.SRC_
        {
            SCALED_IMU3 src;
            public SCALED_IMU3_src_adapter(SCALED_IMU3 src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public short xacc() { return src.xacc();}
            public short yacc() { return src.yacc();}
            public short zacc() { return src.zacc();}
            public short xgyro() { return src.xgyro();}
            public short ygyro() { return src.ygyro();}
            public short zgyro() { return src.zgyro();}
            public short xmag() { return src.xmag();}
            public short ymag() { return src.ymag();}
            public short zmag() { return src.zmag();}

        }

        public struct DATA_TRANSMISSION_HANDSHAKE_dst_adapter : DATA_TRANSMISSION_HANDSHAKE.DST_
        {
            DATA_TRANSMISSION_HANDSHAKE dst;
            public DATA_TRANSMISSION_HANDSHAKE_dst_adapter(DATA_TRANSMISSION_HANDSHAKE dst) { this.dst = dst; }
            public void typE(sbyte src) { dst.typE(src); }
            public void size(int src) { dst.size(src); }
            public void width(short src) { dst.width(src); }
            public void height(short src) { dst.height(src); }
            public void packets(short src) { dst.packets(src); }
            public void payload(sbyte src) { dst.payload(src); }
            public void jpg_quality(sbyte src) { dst.jpg_quality(src); }

        }

        public struct DATA_TRANSMISSION_HANDSHAKE_src_adapter : DATA_TRANSMISSION_HANDSHAKE.SRC_
        {
            DATA_TRANSMISSION_HANDSHAKE src;
            public DATA_TRANSMISSION_HANDSHAKE_src_adapter(DATA_TRANSMISSION_HANDSHAKE src) { this.src = src; }
            public sbyte typE() { return src.typE();}
            public int size() { return src.size();}
            public short width() { return src.width();}
            public short height() { return src.height();}
            public short packets() { return src.packets();}
            public sbyte payload() { return src.payload();}
            public sbyte jpg_quality() { return src.jpg_quality();}

        }

        public struct ENCAPSULATED_DATA_dst_adapter : ENCAPSULATED_DATA.DST_
        {
            ENCAPSULATED_DATA dst;
            public ENCAPSULATED_DATA_dst_adapter(ENCAPSULATED_DATA dst) { this.dst = dst; }
            public void seqnr(short src) { dst.seqnr(src); }
            public void daTa(ENCAPSULATED_DATA.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < ENCAPSULATED_DATA.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct ENCAPSULATED_DATA_src_adapter : ENCAPSULATED_DATA.SRC_
        {
            ENCAPSULATED_DATA src;
            public ENCAPSULATED_DATA_src_adapter(ENCAPSULATED_DATA src) { this.src = src; }
            public short seqnr() { return src.seqnr();}
            public void daTa(ENCAPSULATED_DATA.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < ENCAPSULATED_DATA.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DISTANCE_SENSOR_dst_adapter : DISTANCE_SENSOR.DST_
        {
            DISTANCE_SENSOR dst;
            public DISTANCE_SENSOR_dst_adapter(DISTANCE_SENSOR dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void min_distance(short src) { dst.min_distance(src); }
            public void max_distance(short src) { dst.max_distance(src); }
            public void current_distance(short src) { dst.current_distance(src); }
            public void typE(com.company.demo.GroundControl. MAV_DISTANCE_SENSOR src) { dst.typE(src); }
            public void id(sbyte src) { dst.id(src); }
            public void orientation(com.company.demo.GroundControl. MAV_SENSOR_ORIENTATION src) { dst.orientation(src); }
            public void covariance(sbyte src) { dst.covariance(src); }

        }

        public struct DISTANCE_SENSOR_src_adapter : DISTANCE_SENSOR.SRC_
        {
            DISTANCE_SENSOR src;
            public DISTANCE_SENSOR_src_adapter(DISTANCE_SENSOR src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public short min_distance() { return src.min_distance();}
            public short max_distance() { return src.max_distance();}
            public short current_distance() { return src.current_distance();}
            public  com.company.demo.GroundControl. MAV_DISTANCE_SENSOR?  typE() { return src.typE(); }
            public sbyte id() { return src.id();}
            public  com.company.demo.GroundControl. MAV_SENSOR_ORIENTATION?  orientation() { return src.orientation(); }
            public sbyte covariance() { return src.covariance();}

        }

        public struct TERRAIN_REQUEST_dst_adapter : TERRAIN_REQUEST.DST_
        {
            TERRAIN_REQUEST dst;
            public TERRAIN_REQUEST_dst_adapter(TERRAIN_REQUEST dst) { this.dst = dst; }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void grid_spacing(short src) { dst.grid_spacing(src); }
            public void mask(long src) { dst.mask(src); }

        }

        public struct TERRAIN_REQUEST_src_adapter : TERRAIN_REQUEST.SRC_
        {
            TERRAIN_REQUEST src;
            public TERRAIN_REQUEST_src_adapter(TERRAIN_REQUEST src) { this.src = src; }
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public short grid_spacing() { return src.grid_spacing();}
            public long mask() { return src.mask();}

        }

        public struct TERRAIN_DATA_dst_adapter : TERRAIN_DATA.DST_
        {
            TERRAIN_DATA dst;
            public TERRAIN_DATA_dst_adapter(TERRAIN_DATA dst) { this.dst = dst; }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void grid_spacing(short src) { dst.grid_spacing(src); }
            public void gridbit(sbyte src) { dst.gridbit(src); }
            public void daTa(TERRAIN_DATA.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < TERRAIN_DATA.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct TERRAIN_DATA_src_adapter : TERRAIN_DATA.SRC_
        {
            TERRAIN_DATA src;
            public TERRAIN_DATA_src_adapter(TERRAIN_DATA src) { this.src = src; }
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public short grid_spacing() { return src.grid_spacing();}
            public sbyte gridbit() { return src.gridbit();}
            public void daTa(TERRAIN_DATA.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < TERRAIN_DATA.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct TERRAIN_CHECK_dst_adapter : TERRAIN_CHECK.DST_
        {
            TERRAIN_CHECK dst;
            public TERRAIN_CHECK_dst_adapter(TERRAIN_CHECK dst) { this.dst = dst; }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }

        }

        public struct TERRAIN_CHECK_src_adapter : TERRAIN_CHECK.SRC_
        {
            TERRAIN_CHECK src;
            public TERRAIN_CHECK_src_adapter(TERRAIN_CHECK src) { this.src = src; }
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}

        }

        public struct TERRAIN_REPORT_dst_adapter : TERRAIN_REPORT.DST_
        {
            TERRAIN_REPORT dst;
            public TERRAIN_REPORT_dst_adapter(TERRAIN_REPORT dst) { this.dst = dst; }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void spacing(short src) { dst.spacing(src); }
            public void terrain_height(float src) { dst.terrain_height(src); }
            public void current_height(float src) { dst.current_height(src); }
            public void pending(short src) { dst.pending(src); }
            public void loaded(short src) { dst.loaded(src); }

        }

        public struct TERRAIN_REPORT_src_adapter : TERRAIN_REPORT.SRC_
        {
            TERRAIN_REPORT src;
            public TERRAIN_REPORT_src_adapter(TERRAIN_REPORT src) { this.src = src; }
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public short spacing() { return src.spacing();}
            public float terrain_height() { return src.terrain_height();}
            public float current_height() { return src.current_height();}
            public short pending() { return src.pending();}
            public short loaded() { return src.loaded();}

        }

        public struct SCALED_PRESSURE2_dst_adapter : SCALED_PRESSURE2.DST_
        {
            SCALED_PRESSURE2 dst;
            public SCALED_PRESSURE2_dst_adapter(SCALED_PRESSURE2 dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void press_abs(float src) { dst.press_abs(src); }
            public void press_diff(float src) { dst.press_diff(src); }
            public void temperature(short src) { dst.temperature(src); }

        }

        public struct SCALED_PRESSURE2_src_adapter : SCALED_PRESSURE2.SRC_
        {
            SCALED_PRESSURE2 src;
            public SCALED_PRESSURE2_src_adapter(SCALED_PRESSURE2 src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public float press_abs() { return src.press_abs();}
            public float press_diff() { return src.press_diff();}
            public short temperature() { return src.temperature();}

        }

        public struct ATT_POS_MOCAP_dst_adapter : ATT_POS_MOCAP.DST_
        {
            ATT_POS_MOCAP dst;
            public ATT_POS_MOCAP_dst_adapter(ATT_POS_MOCAP dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void q(ATT_POS_MOCAP.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < ATT_POS_MOCAP.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }

        }

        public struct ATT_POS_MOCAP_src_adapter : ATT_POS_MOCAP.SRC_
        {
            ATT_POS_MOCAP src;
            public ATT_POS_MOCAP_src_adapter(ATT_POS_MOCAP src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public void q(ATT_POS_MOCAP.q_ dst)
            {
                var item = src.q();
                for(int i = 0; i < ATT_POS_MOCAP.q_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float x() { return src.x();}
            public float y() { return src.y();}
            public float z() { return src.z();}

        }

        public struct SET_ACTUATOR_CONTROL_TARGET_dst_adapter : SET_ACTUATOR_CONTROL_TARGET.DST_
        {
            SET_ACTUATOR_CONTROL_TARGET dst;
            public SET_ACTUATOR_CONTROL_TARGET_dst_adapter(SET_ACTUATOR_CONTROL_TARGET dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void group_mlx(sbyte src) { dst.group_mlx(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void controls(SET_ACTUATOR_CONTROL_TARGET.controls_ src)
            {
                var item = dst.controls();
                for(int i = 0; i < SET_ACTUATOR_CONTROL_TARGET.controls_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct SET_ACTUATOR_CONTROL_TARGET_src_adapter : SET_ACTUATOR_CONTROL_TARGET.SRC_
        {
            SET_ACTUATOR_CONTROL_TARGET src;
            public SET_ACTUATOR_CONTROL_TARGET_src_adapter(SET_ACTUATOR_CONTROL_TARGET src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte group_mlx() { return src.group_mlx();}
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public void controls(SET_ACTUATOR_CONTROL_TARGET.controls_ dst)
            {
                var item = src.controls();
                for(int i = 0; i < SET_ACTUATOR_CONTROL_TARGET.controls_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct ACTUATOR_CONTROL_TARGET_dst_adapter : ACTUATOR_CONTROL_TARGET.DST_
        {
            ACTUATOR_CONTROL_TARGET dst;
            public ACTUATOR_CONTROL_TARGET_dst_adapter(ACTUATOR_CONTROL_TARGET dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void group_mlx(sbyte src) { dst.group_mlx(src); }
            public void controls(ACTUATOR_CONTROL_TARGET.controls_ src)
            {
                var item = dst.controls();
                for(int i = 0; i < ACTUATOR_CONTROL_TARGET.controls_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct ACTUATOR_CONTROL_TARGET_src_adapter : ACTUATOR_CONTROL_TARGET.SRC_
        {
            ACTUATOR_CONTROL_TARGET src;
            public ACTUATOR_CONTROL_TARGET_src_adapter(ACTUATOR_CONTROL_TARGET src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte group_mlx() { return src.group_mlx();}
            public void controls(ACTUATOR_CONTROL_TARGET.controls_ dst)
            {
                var item = src.controls();
                for(int i = 0; i < ACTUATOR_CONTROL_TARGET.controls_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct ALTITUDE_dst_adapter : ALTITUDE.DST_
        {
            ALTITUDE dst;
            public ALTITUDE_dst_adapter(ALTITUDE dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void altitude_monotonic(float src) { dst.altitude_monotonic(src); }
            public void altitude_amsl(float src) { dst.altitude_amsl(src); }
            public void altitude_local(float src) { dst.altitude_local(src); }
            public void altitude_relative(float src) { dst.altitude_relative(src); }
            public void altitude_terrain(float src) { dst.altitude_terrain(src); }
            public void bottom_clearance(float src) { dst.bottom_clearance(src); }

        }

        public struct ALTITUDE_src_adapter : ALTITUDE.SRC_
        {
            ALTITUDE src;
            public ALTITUDE_src_adapter(ALTITUDE src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public float altitude_monotonic() { return src.altitude_monotonic();}
            public float altitude_amsl() { return src.altitude_amsl();}
            public float altitude_local() { return src.altitude_local();}
            public float altitude_relative() { return src.altitude_relative();}
            public float altitude_terrain() { return src.altitude_terrain();}
            public float bottom_clearance() { return src.bottom_clearance();}

        }

        public struct RESOURCE_REQUEST_dst_adapter : RESOURCE_REQUEST.DST_
        {
            RESOURCE_REQUEST dst;
            public RESOURCE_REQUEST_dst_adapter(RESOURCE_REQUEST dst) { this.dst = dst; }
            public void request_id(sbyte src) { dst.request_id(src); }
            public void uri_type(sbyte src) { dst.uri_type(src); }
            public void uri(RESOURCE_REQUEST.uri_ src)
            {
                var item = dst.uri();
                for(int i = 0; i < RESOURCE_REQUEST.uri_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void transfer_type(sbyte src) { dst.transfer_type(src); }
            public void storage(RESOURCE_REQUEST.storage_ src)
            {
                var item = dst.storage();
                for(int i = 0; i < RESOURCE_REQUEST.storage_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct RESOURCE_REQUEST_src_adapter : RESOURCE_REQUEST.SRC_
        {
            RESOURCE_REQUEST src;
            public RESOURCE_REQUEST_src_adapter(RESOURCE_REQUEST src) { this.src = src; }
            public sbyte request_id() { return src.request_id();}
            public sbyte uri_type() { return src.uri_type();}
            public void uri(RESOURCE_REQUEST.uri_ dst)
            {
                var item = src.uri();
                for(int i = 0; i < RESOURCE_REQUEST.uri_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public sbyte transfer_type() { return src.transfer_type();}
            public void storage(RESOURCE_REQUEST.storage_ dst)
            {
                var item = src.storage();
                for(int i = 0; i < RESOURCE_REQUEST.storage_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct SCALED_PRESSURE3_dst_adapter : SCALED_PRESSURE3.DST_
        {
            SCALED_PRESSURE3 dst;
            public SCALED_PRESSURE3_dst_adapter(SCALED_PRESSURE3 dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void press_abs(float src) { dst.press_abs(src); }
            public void press_diff(float src) { dst.press_diff(src); }
            public void temperature(short src) { dst.temperature(src); }

        }

        public struct SCALED_PRESSURE3_src_adapter : SCALED_PRESSURE3.SRC_
        {
            SCALED_PRESSURE3 src;
            public SCALED_PRESSURE3_src_adapter(SCALED_PRESSURE3 src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public float press_abs() { return src.press_abs();}
            public float press_diff() { return src.press_diff();}
            public short temperature() { return src.temperature();}

        }

        public struct FOLLOW_TARGET_dst_adapter : FOLLOW_TARGET.DST_
        {
            FOLLOW_TARGET dst;
            public FOLLOW_TARGET_dst_adapter(FOLLOW_TARGET dst) { this.dst = dst; }
            public void timestamp(long src) { dst.timestamp(src); }
            public void est_capabilities(sbyte src) { dst.est_capabilities(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(float src) { dst.alt(src); }
            public void vel(FOLLOW_TARGET.vel_ src)
            {
                var item = dst.vel();
                for(int i = 0; i < FOLLOW_TARGET.vel_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void acc(FOLLOW_TARGET.acc_ src)
            {
                var item = dst.acc();
                for(int i = 0; i < FOLLOW_TARGET.acc_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void attitude_q(FOLLOW_TARGET.attitude_q_ src)
            {
                var item = dst.attitude_q();
                for(int i = 0; i < FOLLOW_TARGET.attitude_q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void rates(FOLLOW_TARGET.rates_ src)
            {
                var item = dst.rates();
                for(int i = 0; i < FOLLOW_TARGET.rates_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void position_cov(FOLLOW_TARGET.position_cov_ src)
            {
                var item = dst.position_cov();
                for(int i = 0; i < FOLLOW_TARGET.position_cov_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void custom_state(long src) { dst.custom_state(src); }

        }

        public struct FOLLOW_TARGET_src_adapter : FOLLOW_TARGET.SRC_
        {
            FOLLOW_TARGET src;
            public FOLLOW_TARGET_src_adapter(FOLLOW_TARGET src) { this.src = src; }
            public long timestamp() { return src.timestamp();}
            public sbyte est_capabilities() { return src.est_capabilities();}
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public float alt() { return src.alt();}
            public void vel(FOLLOW_TARGET.vel_ dst)
            {
                var item = src.vel();
                for(int i = 0; i < FOLLOW_TARGET.vel_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void acc(FOLLOW_TARGET.acc_ dst)
            {
                var item = src.acc();
                for(int i = 0; i < FOLLOW_TARGET.acc_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void attitude_q(FOLLOW_TARGET.attitude_q_ dst)
            {
                var item = src.attitude_q();
                for(int i = 0; i < FOLLOW_TARGET.attitude_q_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void rates(FOLLOW_TARGET.rates_ dst)
            {
                var item = src.rates();
                for(int i = 0; i < FOLLOW_TARGET.rates_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void position_cov(FOLLOW_TARGET.position_cov_ dst)
            {
                var item = src.position_cov();
                for(int i = 0; i < FOLLOW_TARGET.position_cov_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public long custom_state() { return src.custom_state();}

        }

        public struct CONTROL_SYSTEM_STATE_dst_adapter : CONTROL_SYSTEM_STATE.DST_
        {
            CONTROL_SYSTEM_STATE dst;
            public CONTROL_SYSTEM_STATE_dst_adapter(CONTROL_SYSTEM_STATE dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void x_acc(float src) { dst.x_acc(src); }
            public void y_acc(float src) { dst.y_acc(src); }
            public void z_acc(float src) { dst.z_acc(src); }
            public void x_vel(float src) { dst.x_vel(src); }
            public void y_vel(float src) { dst.y_vel(src); }
            public void z_vel(float src) { dst.z_vel(src); }
            public void x_pos(float src) { dst.x_pos(src); }
            public void y_pos(float src) { dst.y_pos(src); }
            public void z_pos(float src) { dst.z_pos(src); }
            public void airspeed(float src) { dst.airspeed(src); }
            public void vel_variance(CONTROL_SYSTEM_STATE.vel_variance_ src)
            {
                var item = dst.vel_variance();
                for(int i = 0; i < CONTROL_SYSTEM_STATE.vel_variance_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void pos_variance(CONTROL_SYSTEM_STATE.pos_variance_ src)
            {
                var item = dst.pos_variance();
                for(int i = 0; i < CONTROL_SYSTEM_STATE.pos_variance_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void q(CONTROL_SYSTEM_STATE.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < CONTROL_SYSTEM_STATE.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void roll_rate(float src) { dst.roll_rate(src); }
            public void pitch_rate(float src) { dst.pitch_rate(src); }
            public void yaw_rate(float src) { dst.yaw_rate(src); }

        }

        public struct CONTROL_SYSTEM_STATE_src_adapter : CONTROL_SYSTEM_STATE.SRC_
        {
            CONTROL_SYSTEM_STATE src;
            public CONTROL_SYSTEM_STATE_src_adapter(CONTROL_SYSTEM_STATE src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public float x_acc() { return src.x_acc();}
            public float y_acc() { return src.y_acc();}
            public float z_acc() { return src.z_acc();}
            public float x_vel() { return src.x_vel();}
            public float y_vel() { return src.y_vel();}
            public float z_vel() { return src.z_vel();}
            public float x_pos() { return src.x_pos();}
            public float y_pos() { return src.y_pos();}
            public float z_pos() { return src.z_pos();}
            public float airspeed() { return src.airspeed();}
            public void vel_variance(CONTROL_SYSTEM_STATE.vel_variance_ dst)
            {
                var item = src.vel_variance();
                for(int i = 0; i < CONTROL_SYSTEM_STATE.vel_variance_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void pos_variance(CONTROL_SYSTEM_STATE.pos_variance_ dst)
            {
                var item = src.pos_variance();
                for(int i = 0; i < CONTROL_SYSTEM_STATE.pos_variance_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void q(CONTROL_SYSTEM_STATE.q_ dst)
            {
                var item = src.q();
                for(int i = 0; i < CONTROL_SYSTEM_STATE.q_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float roll_rate() { return src.roll_rate();}
            public float pitch_rate() { return src.pitch_rate();}
            public float yaw_rate() { return src.yaw_rate();}

        }

        public struct BATTERY_STATUS_dst_adapter : BATTERY_STATUS.DST_
        {
            BATTERY_STATUS dst;
            public BATTERY_STATUS_dst_adapter(BATTERY_STATUS dst) { this.dst = dst; }
            public void id(sbyte src) { dst.id(src); }
            public void battery_function(com.company.demo.GroundControl. MAV_BATTERY_FUNCTION src) { dst.battery_function(src); }
            public void typE(com.company.demo.GroundControl. MAV_BATTERY_TYPE src) { dst.typE(src); }
            public void temperature(short src) { dst.temperature(src); }
            public void voltages(BATTERY_STATUS.voltages_ src)
            {
                var item = dst.voltages();
                for(int i = 0; i < BATTERY_STATUS.voltages_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void current_battery(short src) { dst.current_battery(src); }
            public void current_consumed(int src) { dst.current_consumed(src); }
            public void energy_consumed(int src) { dst.energy_consumed(src); }
            public void battery_remaining(sbyte src) { dst.battery_remaining(src); }

        }

        public struct BATTERY_STATUS_src_adapter : BATTERY_STATUS.SRC_
        {
            BATTERY_STATUS src;
            public BATTERY_STATUS_src_adapter(BATTERY_STATUS src) { this.src = src; }
            public sbyte id() { return src.id();}
            public  com.company.demo.GroundControl. MAV_BATTERY_FUNCTION?  battery_function() { return src.battery_function(); }
            public  com.company.demo.GroundControl. MAV_BATTERY_TYPE?  typE() { return src.typE(); }
            public short temperature() { return src.temperature();}
            public void voltages(BATTERY_STATUS.voltages_ dst)
            {
                var item = src.voltages();
                for(int i = 0; i < BATTERY_STATUS.voltages_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public short current_battery() { return src.current_battery();}
            public int current_consumed() { return src.current_consumed();}
            public int energy_consumed() { return src.energy_consumed();}
            public sbyte battery_remaining() { return src.battery_remaining();}

        }

        public struct AUTOPILOT_VERSION_dst_adapter : AUTOPILOT_VERSION.DST_
        {
            AUTOPILOT_VERSION dst;
            public AUTOPILOT_VERSION_dst_adapter(AUTOPILOT_VERSION dst) { this.dst = dst; }
            public void capabilities(com.company.demo.GroundControl. MAV_PROTOCOL_CAPABILITY src) { dst.capabilities(src); }
            public void flight_sw_version(int src) { dst.flight_sw_version(src); }
            public void middleware_sw_version(int src) { dst.middleware_sw_version(src); }
            public void os_sw_version(int src) { dst.os_sw_version(src); }
            public void board_version(int src) { dst.board_version(src); }
            public void flight_custom_version(AUTOPILOT_VERSION.flight_custom_version_ src)
            {
                var item = dst.flight_custom_version();
                for(int i = 0; i < AUTOPILOT_VERSION.flight_custom_version_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void middleware_custom_version(AUTOPILOT_VERSION.middleware_custom_version_ src)
            {
                var item = dst.middleware_custom_version();
                for(int i = 0; i < AUTOPILOT_VERSION.middleware_custom_version_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void os_custom_version(AUTOPILOT_VERSION.os_custom_version_ src)
            {
                var item = dst.os_custom_version();
                for(int i = 0; i < AUTOPILOT_VERSION.os_custom_version_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void vendor_id(short src) { dst.vendor_id(src); }
            public void product_id(short src) { dst.product_id(src); }
            public void uid(long src) { dst.uid(src); }
            public void uid2(sbyte src, int d0) { dst.uid2(src, d0); }

        }

        public struct AUTOPILOT_VERSION_src_adapter : AUTOPILOT_VERSION.SRC_
        {
            AUTOPILOT_VERSION src;
            public AUTOPILOT_VERSION_src_adapter(AUTOPILOT_VERSION src) { this.src = src; }
            public  com.company.demo.GroundControl. MAV_PROTOCOL_CAPABILITY?  capabilities() { return src.capabilities(); }
            public int flight_sw_version() { return src.flight_sw_version();}
            public int middleware_sw_version() { return src.middleware_sw_version();}
            public int os_sw_version() { return src.os_sw_version();}
            public int board_version() { return src.board_version();}
            public void flight_custom_version(AUTOPILOT_VERSION.flight_custom_version_ dst)
            {
                var item = src.flight_custom_version();
                for(int i = 0; i < AUTOPILOT_VERSION.flight_custom_version_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void middleware_custom_version(AUTOPILOT_VERSION.middleware_custom_version_ dst)
            {
                var item = src.middleware_custom_version();
                for(int i = 0; i < AUTOPILOT_VERSION.middleware_custom_version_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void os_custom_version(AUTOPILOT_VERSION.os_custom_version_ dst)
            {
                var item = src.os_custom_version();
                for(int i = 0; i < AUTOPILOT_VERSION.os_custom_version_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public short vendor_id() { return src.vendor_id();}
            public short product_id() { return src.product_id();}
            public long uid() { return src.uid();}
            public bool uid2_exist() { return src.uid2().HasValue ;}
            public  sbyte?  uid2(int d0) { return src.uid2()  .Value.get(d0); }

        }

        public struct LANDING_TARGET_dst_adapter : LANDING_TARGET.DST_
        {
            LANDING_TARGET dst;
            public LANDING_TARGET_dst_adapter(LANDING_TARGET dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void target_num(sbyte src) { dst.target_num(src); }
            public void frame(com.company.demo.GroundControl. MAV_FRAME src) { dst.frame(src); }
            public void angle_x(float src) { dst.angle_x(src); }
            public void angle_y(float src) { dst.angle_y(src); }
            public void distance(float src) { dst.distance(src); }
            public void size_x(float src) { dst.size_x(src); }
            public void size_y(float src) { dst.size_y(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void q(float src, int d0) { dst.q(src, d0); }
            public void typE(com.company.demo.GroundControl. LANDING_TARGET_TYPE src) { dst.typE(src); }
            public void position_valid(sbyte src) { dst.position_valid(src); }

        }

        public struct LANDING_TARGET_src_adapter : LANDING_TARGET.SRC_
        {
            LANDING_TARGET src;
            public LANDING_TARGET_src_adapter(LANDING_TARGET src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte target_num() { return src.target_num();}
            public  com.company.demo.GroundControl. MAV_FRAME?  frame() { return src.frame(); }
            public float angle_x() { return src.angle_x();}
            public float angle_y() { return src.angle_y();}
            public float distance() { return src.distance();}
            public float size_x() { return src.size_x();}
            public float size_y() { return src.size_y();}
            public  float?  x() { return src.x(); }
            public  float?  y() { return src.y(); }
            public  float?  z() { return src.z(); }
            public bool q_exist() { return src.q().HasValue ;}
            public  float?  q(int d0) { return src.q()  .Value.get(d0); }
            public  com.company.demo.GroundControl. LANDING_TARGET_TYPE?  typE() { return src.typE(); }
            public  sbyte?  position_valid() { return src.position_valid(); }

        }

        public struct ESTIMATOR_STATUS_dst_adapter : ESTIMATOR_STATUS.DST_
        {
            ESTIMATOR_STATUS dst;
            public ESTIMATOR_STATUS_dst_adapter(ESTIMATOR_STATUS dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void flags(com.company.demo.GroundControl. ESTIMATOR_STATUS_FLAGS src) { dst.flags(src); }
            public void vel_ratio(float src) { dst.vel_ratio(src); }
            public void pos_horiz_ratio(float src) { dst.pos_horiz_ratio(src); }
            public void pos_vert_ratio(float src) { dst.pos_vert_ratio(src); }
            public void mag_ratio(float src) { dst.mag_ratio(src); }
            public void hagl_ratio(float src) { dst.hagl_ratio(src); }
            public void tas_ratio(float src) { dst.tas_ratio(src); }
            public void pos_horiz_accuracy(float src) { dst.pos_horiz_accuracy(src); }
            public void pos_vert_accuracy(float src) { dst.pos_vert_accuracy(src); }

        }

        public struct ESTIMATOR_STATUS_src_adapter : ESTIMATOR_STATUS.SRC_
        {
            ESTIMATOR_STATUS src;
            public ESTIMATOR_STATUS_src_adapter(ESTIMATOR_STATUS src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public  com.company.demo.GroundControl. ESTIMATOR_STATUS_FLAGS?  flags() { return src.flags(); }
            public float vel_ratio() { return src.vel_ratio();}
            public float pos_horiz_ratio() { return src.pos_horiz_ratio();}
            public float pos_vert_ratio() { return src.pos_vert_ratio();}
            public float mag_ratio() { return src.mag_ratio();}
            public float hagl_ratio() { return src.hagl_ratio();}
            public float tas_ratio() { return src.tas_ratio();}
            public float pos_horiz_accuracy() { return src.pos_horiz_accuracy();}
            public float pos_vert_accuracy() { return src.pos_vert_accuracy();}

        }

        public struct WIND_COV_dst_adapter : WIND_COV.DST_
        {
            WIND_COV dst;
            public WIND_COV_dst_adapter(WIND_COV dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void wind_x(float src) { dst.wind_x(src); }
            public void wind_y(float src) { dst.wind_y(src); }
            public void wind_z(float src) { dst.wind_z(src); }
            public void var_horiz(float src) { dst.var_horiz(src); }
            public void var_vert(float src) { dst.var_vert(src); }
            public void wind_alt(float src) { dst.wind_alt(src); }
            public void horiz_accuracy(float src) { dst.horiz_accuracy(src); }
            public void vert_accuracy(float src) { dst.vert_accuracy(src); }

        }

        public struct WIND_COV_src_adapter : WIND_COV.SRC_
        {
            WIND_COV src;
            public WIND_COV_src_adapter(WIND_COV src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public float wind_x() { return src.wind_x();}
            public float wind_y() { return src.wind_y();}
            public float wind_z() { return src.wind_z();}
            public float var_horiz() { return src.var_horiz();}
            public float var_vert() { return src.var_vert();}
            public float wind_alt() { return src.wind_alt();}
            public float horiz_accuracy() { return src.horiz_accuracy();}
            public float vert_accuracy() { return src.vert_accuracy();}

        }

        public struct GPS_INPUT_dst_adapter : GPS_INPUT.DST_
        {
            GPS_INPUT dst;
            public GPS_INPUT_dst_adapter(GPS_INPUT dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void gps_id(sbyte src) { dst.gps_id(src); }
            public void ignore_flags(com.company.demo.GroundControl. GPS_INPUT_IGNORE_FLAGS src) { dst.ignore_flags(src); }
            public void time_week_ms(int src) { dst.time_week_ms(src); }
            public void time_week(short src) { dst.time_week(src); }
            public void fix_type(sbyte src) { dst.fix_type(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(float src) { dst.alt(src); }
            public void hdop(float src) { dst.hdop(src); }
            public void vdop(float src) { dst.vdop(src); }
            public void vn(float src) { dst.vn(src); }
            public void ve(float src) { dst.ve(src); }
            public void vd(float src) { dst.vd(src); }
            public void speed_accuracy(float src) { dst.speed_accuracy(src); }
            public void horiz_accuracy(float src) { dst.horiz_accuracy(src); }
            public void vert_accuracy(float src) { dst.vert_accuracy(src); }
            public void satellites_visible(sbyte src) { dst.satellites_visible(src); }

        }

        public struct GPS_INPUT_src_adapter : GPS_INPUT.SRC_
        {
            GPS_INPUT src;
            public GPS_INPUT_src_adapter(GPS_INPUT src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte gps_id() { return src.gps_id();}
            public  com.company.demo.GroundControl. GPS_INPUT_IGNORE_FLAGS?  ignore_flags() { return src.ignore_flags(); }
            public int time_week_ms() { return src.time_week_ms();}
            public short time_week() { return src.time_week();}
            public sbyte fix_type() { return src.fix_type();}
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public float alt() { return src.alt();}
            public float hdop() { return src.hdop();}
            public float vdop() { return src.vdop();}
            public float vn() { return src.vn();}
            public float ve() { return src.ve();}
            public float vd() { return src.vd();}
            public float speed_accuracy() { return src.speed_accuracy();}
            public float horiz_accuracy() { return src.horiz_accuracy();}
            public float vert_accuracy() { return src.vert_accuracy();}
            public sbyte satellites_visible() { return src.satellites_visible();}

        }

        public struct GPS_RTCM_DATA_dst_adapter : GPS_RTCM_DATA.DST_
        {
            GPS_RTCM_DATA dst;
            public GPS_RTCM_DATA_dst_adapter(GPS_RTCM_DATA dst) { this.dst = dst; }
            public void flags(sbyte src) { dst.flags(src); }
            public void len(sbyte src) { dst.len(src); }
            public void daTa(GPS_RTCM_DATA.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < GPS_RTCM_DATA.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct GPS_RTCM_DATA_src_adapter : GPS_RTCM_DATA.SRC_
        {
            GPS_RTCM_DATA src;
            public GPS_RTCM_DATA_src_adapter(GPS_RTCM_DATA src) { this.src = src; }
            public sbyte flags() { return src.flags();}
            public sbyte len() { return src.len();}
            public void daTa(GPS_RTCM_DATA.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < GPS_RTCM_DATA.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct HIGH_LATENCY_dst_adapter : HIGH_LATENCY.DST_
        {
            HIGH_LATENCY dst;
            public HIGH_LATENCY_dst_adapter(HIGH_LATENCY dst) { this.dst = dst; }
            public void base_mode(com.company.demo.GroundControl. MAV_MODE_FLAG src) { dst.base_mode(src); }
            public void custom_mode(int src) { dst.custom_mode(src); }
            public void landed_state(com.company.demo.GroundControl. MAV_LANDED_STATE src) { dst.landed_state(src); }
            public void roll(short src) { dst.roll(src); }
            public void pitch(short src) { dst.pitch(src); }
            public void heading(short src) { dst.heading(src); }
            public void throttle(sbyte src) { dst.throttle(src); }
            public void heading_sp(short src) { dst.heading_sp(src); }
            public void latitude(int src) { dst.latitude(src); }
            public void longitude(int src) { dst.longitude(src); }
            public void altitude_amsl(short src) { dst.altitude_amsl(src); }
            public void altitude_sp(short src) { dst.altitude_sp(src); }
            public void airspeed(sbyte src) { dst.airspeed(src); }
            public void airspeed_sp(sbyte src) { dst.airspeed_sp(src); }
            public void groundspeed(sbyte src) { dst.groundspeed(src); }
            public void climb_rate(sbyte src) { dst.climb_rate(src); }
            public void gps_nsat(sbyte src) { dst.gps_nsat(src); }
            public void gps_fix_type(com.company.demo.GroundControl. GPS_FIX_TYPE src) { dst.gps_fix_type(src); }
            public void battery_remaining(sbyte src) { dst.battery_remaining(src); }
            public void temperature(sbyte src) { dst.temperature(src); }
            public void temperature_air(sbyte src) { dst.temperature_air(src); }
            public void failsafe(sbyte src) { dst.failsafe(src); }
            public void wp_num(sbyte src) { dst.wp_num(src); }
            public void wp_distance(short src) { dst.wp_distance(src); }

        }

        public struct HIGH_LATENCY_src_adapter : HIGH_LATENCY.SRC_
        {
            HIGH_LATENCY src;
            public HIGH_LATENCY_src_adapter(HIGH_LATENCY src) { this.src = src; }
            public  com.company.demo.GroundControl. MAV_MODE_FLAG?  base_mode() { return src.base_mode(); }
            public int custom_mode() { return src.custom_mode();}
            public  com.company.demo.GroundControl. MAV_LANDED_STATE?  landed_state() { return src.landed_state(); }
            public short roll() { return src.roll();}
            public short pitch() { return src.pitch();}
            public short heading() { return src.heading();}
            public sbyte throttle() { return src.throttle();}
            public short heading_sp() { return src.heading_sp();}
            public int latitude() { return src.latitude();}
            public int longitude() { return src.longitude();}
            public short altitude_amsl() { return src.altitude_amsl();}
            public short altitude_sp() { return src.altitude_sp();}
            public sbyte airspeed() { return src.airspeed();}
            public sbyte airspeed_sp() { return src.airspeed_sp();}
            public sbyte groundspeed() { return src.groundspeed();}
            public sbyte climb_rate() { return src.climb_rate();}
            public sbyte gps_nsat() { return src.gps_nsat();}
            public  com.company.demo.GroundControl. GPS_FIX_TYPE?  gps_fix_type() { return src.gps_fix_type(); }
            public sbyte battery_remaining() { return src.battery_remaining();}
            public sbyte temperature() { return src.temperature();}
            public sbyte temperature_air() { return src.temperature_air();}
            public sbyte failsafe() { return src.failsafe();}
            public sbyte wp_num() { return src.wp_num();}
            public short wp_distance() { return src.wp_distance();}

        }

        public struct VIBRATION_dst_adapter : VIBRATION.DST_
        {
            VIBRATION dst;
            public VIBRATION_dst_adapter(VIBRATION dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void vibration_x(float src) { dst.vibration_x(src); }
            public void vibration_y(float src) { dst.vibration_y(src); }
            public void vibration_z(float src) { dst.vibration_z(src); }
            public void clipping_0(int src) { dst.clipping_0(src); }
            public void clipping_1(int src) { dst.clipping_1(src); }
            public void clipping_2(int src) { dst.clipping_2(src); }

        }

        public struct VIBRATION_src_adapter : VIBRATION.SRC_
        {
            VIBRATION src;
            public VIBRATION_src_adapter(VIBRATION src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public float vibration_x() { return src.vibration_x();}
            public float vibration_y() { return src.vibration_y();}
            public float vibration_z() { return src.vibration_z();}
            public int clipping_0() { return src.clipping_0();}
            public int clipping_1() { return src.clipping_1();}
            public int clipping_2() { return src.clipping_2();}

        }

        public struct HOME_POSITION_dst_adapter : HOME_POSITION.DST_
        {
            HOME_POSITION dst;
            public HOME_POSITION_dst_adapter(HOME_POSITION dst) { this.dst = dst; }
            public void latitude(int src) { dst.latitude(src); }
            public void longitude(int src) { dst.longitude(src); }
            public void altitude(int src) { dst.altitude(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void q(HOME_POSITION.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < HOME_POSITION.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void approach_x(float src) { dst.approach_x(src); }
            public void approach_y(float src) { dst.approach_y(src); }
            public void approach_z(float src) { dst.approach_z(src); }
            public void time_usec(long src) { dst.time_usec(src); }

        }

        public struct HOME_POSITION_src_adapter : HOME_POSITION.SRC_
        {
            HOME_POSITION src;
            public HOME_POSITION_src_adapter(HOME_POSITION src) { this.src = src; }
            public int latitude() { return src.latitude();}
            public int longitude() { return src.longitude();}
            public int altitude() { return src.altitude();}
            public float x() { return src.x();}
            public float y() { return src.y();}
            public float z() { return src.z();}
            public void q(HOME_POSITION.q_ dst)
            {
                var item = src.q();
                for(int i = 0; i < HOME_POSITION.q_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float approach_x() { return src.approach_x();}
            public float approach_y() { return src.approach_y();}
            public float approach_z() { return src.approach_z();}
            public  long?  time_usec() { return src.time_usec(); }

        }

        public struct SET_HOME_POSITION_dst_adapter : SET_HOME_POSITION.DST_
        {
            SET_HOME_POSITION dst;
            public SET_HOME_POSITION_dst_adapter(SET_HOME_POSITION dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void latitude(int src) { dst.latitude(src); }
            public void longitude(int src) { dst.longitude(src); }
            public void altitude(int src) { dst.altitude(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }
            public void q(SET_HOME_POSITION.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < SET_HOME_POSITION.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void approach_x(float src) { dst.approach_x(src); }
            public void approach_y(float src) { dst.approach_y(src); }
            public void approach_z(float src) { dst.approach_z(src); }
            public void time_usec(long src) { dst.time_usec(src); }

        }

        public struct SET_HOME_POSITION_src_adapter : SET_HOME_POSITION.SRC_
        {
            SET_HOME_POSITION src;
            public SET_HOME_POSITION_src_adapter(SET_HOME_POSITION src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public int latitude() { return src.latitude();}
            public int longitude() { return src.longitude();}
            public int altitude() { return src.altitude();}
            public float x() { return src.x();}
            public float y() { return src.y();}
            public float z() { return src.z();}
            public void q(SET_HOME_POSITION.q_ dst)
            {
                var item = src.q();
                for(int i = 0; i < SET_HOME_POSITION.q_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float approach_x() { return src.approach_x();}
            public float approach_y() { return src.approach_y();}
            public float approach_z() { return src.approach_z();}
            public  long?  time_usec() { return src.time_usec(); }

        }

        public struct MESSAGE_INTERVAL_dst_adapter : MESSAGE_INTERVAL.DST_
        {
            MESSAGE_INTERVAL dst;
            public MESSAGE_INTERVAL_dst_adapter(MESSAGE_INTERVAL dst) { this.dst = dst; }
            public void message_id(short src) { dst.message_id(src); }
            public void interval_us(int src) { dst.interval_us(src); }

        }

        public struct MESSAGE_INTERVAL_src_adapter : MESSAGE_INTERVAL.SRC_
        {
            MESSAGE_INTERVAL src;
            public MESSAGE_INTERVAL_src_adapter(MESSAGE_INTERVAL src) { this.src = src; }
            public short message_id() { return src.message_id();}
            public int interval_us() { return src.interval_us();}

        }

        public struct EXTENDED_SYS_STATE_dst_adapter : EXTENDED_SYS_STATE.DST_
        {
            EXTENDED_SYS_STATE dst;
            public EXTENDED_SYS_STATE_dst_adapter(EXTENDED_SYS_STATE dst) { this.dst = dst; }
            public void vtol_state(com.company.demo.GroundControl. MAV_VTOL_STATE src) { dst.vtol_state(src); }
            public void landed_state(com.company.demo.GroundControl. MAV_LANDED_STATE src) { dst.landed_state(src); }

        }

        public struct EXTENDED_SYS_STATE_src_adapter : EXTENDED_SYS_STATE.SRC_
        {
            EXTENDED_SYS_STATE src;
            public EXTENDED_SYS_STATE_src_adapter(EXTENDED_SYS_STATE src) { this.src = src; }
            public  com.company.demo.GroundControl. MAV_VTOL_STATE?  vtol_state() { return src.vtol_state(); }
            public  com.company.demo.GroundControl. MAV_LANDED_STATE?  landed_state() { return src.landed_state(); }

        }

        public struct ADSB_VEHICLE_dst_adapter : ADSB_VEHICLE.DST_
        {
            ADSB_VEHICLE dst;
            public ADSB_VEHICLE_dst_adapter(ADSB_VEHICLE dst) { this.dst = dst; }
            public void ICAO_address(int src) { dst.ICAO_address(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void altitude_type(com.company.demo.GroundControl. ADSB_ALTITUDE_TYPE src) { dst.altitude_type(src); }
            public void altitude(int src) { dst.altitude(src); }
            public void heading(short src) { dst.heading(src); }
            public void hor_velocity(short src) { dst.hor_velocity(src); }
            public void ver_velocity(short src) { dst.ver_velocity(src); }
            public void callsign(ADSB_VEHICLE.callsign_ src)
            {
                var item = dst.callsign(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void emitter_type(com.company.demo.GroundControl. ADSB_EMITTER_TYPE src) { dst.emitter_type(src); }
            public void tslc(sbyte src) { dst.tslc(src); }
            public void flags(com.company.demo.GroundControl. ADSB_FLAGS src) { dst.flags(src); }
            public void squawk(short src) { dst.squawk(src); }

        }

        public struct ADSB_VEHICLE_src_adapter : ADSB_VEHICLE.SRC_
        {
            ADSB_VEHICLE src;
            public ADSB_VEHICLE_src_adapter(ADSB_VEHICLE src) { this.src = src; }
            public int ICAO_address() { return src.ICAO_address();}
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public  com.company.demo.GroundControl. ADSB_ALTITUDE_TYPE?  altitude_type() { return src.altitude_type(); }
            public int altitude() { return src.altitude();}
            public short heading() { return src.heading();}
            public short hor_velocity() { return src.hor_velocity();}
            public short ver_velocity() { return src.ver_velocity();}
            public int callsign_exist() { return src.callsign()?.len() ?? 0 ;}
            public void callsign(ADSB_VEHICLE.callsign_ dst)
            {
                var item = src.callsign();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public  com.company.demo.GroundControl. ADSB_EMITTER_TYPE?  emitter_type() { return src.emitter_type(); }
            public sbyte tslc() { return src.tslc();}
            public  com.company.demo.GroundControl. ADSB_FLAGS?  flags() { return src.flags(); }
            public short squawk() { return src.squawk();}

        }

        public struct COLLISION_dst_adapter : COLLISION.DST_
        {
            COLLISION dst;
            public COLLISION_dst_adapter(COLLISION dst) { this.dst = dst; }
            public void sRc(com.company.demo.GroundControl. MAV_COLLISION_SRC src) { dst.sRc(src); }
            public void id(int src) { dst.id(src); }
            public void action(com.company.demo.GroundControl. MAV_COLLISION_ACTION src) { dst.action(src); }
            public void threat_level(com.company.demo.GroundControl. MAV_COLLISION_THREAT_LEVEL src) { dst.threat_level(src); }
            public void time_to_minimum_delta(float src) { dst.time_to_minimum_delta(src); }
            public void altitude_minimum_delta(float src) { dst.altitude_minimum_delta(src); }
            public void horizontal_minimum_delta(float src) { dst.horizontal_minimum_delta(src); }

        }

        public struct COLLISION_src_adapter : COLLISION.SRC_
        {
            COLLISION src;
            public COLLISION_src_adapter(COLLISION src) { this.src = src; }
            public  com.company.demo.GroundControl. MAV_COLLISION_SRC?  sRc() { return src.sRc(); }
            public int id() { return src.id();}
            public  com.company.demo.GroundControl. MAV_COLLISION_ACTION?  action() { return src.action(); }
            public  com.company.demo.GroundControl. MAV_COLLISION_THREAT_LEVEL?  threat_level() { return src.threat_level(); }
            public float time_to_minimum_delta() { return src.time_to_minimum_delta();}
            public float altitude_minimum_delta() { return src.altitude_minimum_delta();}
            public float horizontal_minimum_delta() { return src.horizontal_minimum_delta();}

        }

        public struct V2_EXTENSION_dst_adapter : V2_EXTENSION.DST_
        {
            V2_EXTENSION dst;
            public V2_EXTENSION_dst_adapter(V2_EXTENSION dst) { this.dst = dst; }
            public void target_network(sbyte src) { dst.target_network(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void message_type(short src) { dst.message_type(src); }
            public void payload(V2_EXTENSION.payload_ src)
            {
                var item = dst.payload();
                for(int i = 0; i < V2_EXTENSION.payload_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct V2_EXTENSION_src_adapter : V2_EXTENSION.SRC_
        {
            V2_EXTENSION src;
            public V2_EXTENSION_src_adapter(V2_EXTENSION src) { this.src = src; }
            public sbyte target_network() { return src.target_network();}
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short message_type() { return src.message_type();}
            public void payload(V2_EXTENSION.payload_ dst)
            {
                var item = src.payload();
                for(int i = 0; i < V2_EXTENSION.payload_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct MEMORY_VECT_dst_adapter : MEMORY_VECT.DST_
        {
            MEMORY_VECT dst;
            public MEMORY_VECT_dst_adapter(MEMORY_VECT dst) { this.dst = dst; }
            public void address(short src) { dst.address(src); }
            public void ver(sbyte src) { dst.ver(src); }
            public void typE(sbyte src) { dst.typE(src); }
            public void value(MEMORY_VECT.value_ src)
            {
                var item = dst.value();
                for(int i = 0; i < MEMORY_VECT.value_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct MEMORY_VECT_src_adapter : MEMORY_VECT.SRC_
        {
            MEMORY_VECT src;
            public MEMORY_VECT_src_adapter(MEMORY_VECT src) { this.src = src; }
            public short address() { return src.address();}
            public sbyte ver() { return src.ver();}
            public sbyte typE() { return src.typE();}
            public void value(MEMORY_VECT.value_ dst)
            {
                var item = src.value();
                for(int i = 0; i < MEMORY_VECT.value_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DEBUG_VECT_dst_adapter : DEBUG_VECT.DST_
        {
            DEBUG_VECT dst;
            public DEBUG_VECT_dst_adapter(DEBUG_VECT dst) { this.dst = dst; }
            public void name(DEBUG_VECT.name_ src)
            {
                var item = dst.name(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void time_usec(long src) { dst.time_usec(src); }
            public void x(float src) { dst.x(src); }
            public void y(float src) { dst.y(src); }
            public void z(float src) { dst.z(src); }

        }

        public struct DEBUG_VECT_src_adapter : DEBUG_VECT.SRC_
        {
            DEBUG_VECT src;
            public DEBUG_VECT_src_adapter(DEBUG_VECT src) { this.src = src; }
            public int name_exist() { return src.name()?.len() ?? 0 ;}
            public void name(DEBUG_VECT.name_ dst)
            {
                var item = src.name();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public long time_usec() { return src.time_usec();}
            public float x() { return src.x();}
            public float y() { return src.y();}
            public float z() { return src.z();}

        }

        public struct NAMED_VALUE_FLOAT_dst_adapter : NAMED_VALUE_FLOAT.DST_
        {
            NAMED_VALUE_FLOAT dst;
            public NAMED_VALUE_FLOAT_dst_adapter(NAMED_VALUE_FLOAT dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void name(NAMED_VALUE_FLOAT.name_ src)
            {
                var item = dst.name(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void value(float src) { dst.value(src); }

        }

        public struct NAMED_VALUE_FLOAT_src_adapter : NAMED_VALUE_FLOAT.SRC_
        {
            NAMED_VALUE_FLOAT src;
            public NAMED_VALUE_FLOAT_src_adapter(NAMED_VALUE_FLOAT src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public int name_exist() { return src.name()?.len() ?? 0 ;}
            public void name(NAMED_VALUE_FLOAT.name_ dst)
            {
                var item = src.name();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public float value() { return src.value();}

        }

        public struct NAMED_VALUE_INT_dst_adapter : NAMED_VALUE_INT.DST_
        {
            NAMED_VALUE_INT dst;
            public NAMED_VALUE_INT_dst_adapter(NAMED_VALUE_INT dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void name(NAMED_VALUE_INT.name_ src)
            {
                var item = dst.name(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void value(int src) { dst.value(src); }

        }

        public struct NAMED_VALUE_INT_src_adapter : NAMED_VALUE_INT.SRC_
        {
            NAMED_VALUE_INT src;
            public NAMED_VALUE_INT_src_adapter(NAMED_VALUE_INT src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public int name_exist() { return src.name()?.len() ?? 0 ;}
            public void name(NAMED_VALUE_INT.name_ dst)
            {
                var item = src.name();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int value() { return src.value();}

        }

        public struct STATUSTEXT_dst_adapter : STATUSTEXT.DST_
        {
            STATUSTEXT dst;
            public STATUSTEXT_dst_adapter(STATUSTEXT dst) { this.dst = dst; }
            public void severity(com.company.demo.GroundControl. MAV_SEVERITY src) { dst.severity(src); }
            public void text(STATUSTEXT.text_ src)
            {
                var item = dst.text(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct STATUSTEXT_src_adapter : STATUSTEXT.SRC_
        {
            STATUSTEXT src;
            public STATUSTEXT_src_adapter(STATUSTEXT src) { this.src = src; }
            public  com.company.demo.GroundControl. MAV_SEVERITY?  severity() { return src.severity(); }
            public int text_exist() { return src.text()?.len() ?? 0 ;}
            public void text(STATUSTEXT.text_ dst)
            {
                var item = src.text();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct DEBUG_dst_adapter : DEBUG.DST_
        {
            DEBUG dst;
            public DEBUG_dst_adapter(DEBUG dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void ind(sbyte src) { dst.ind(src); }
            public void value(float src) { dst.value(src); }

        }

        public struct DEBUG_src_adapter : DEBUG.SRC_
        {
            DEBUG src;
            public DEBUG_src_adapter(DEBUG src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public sbyte ind() { return src.ind();}
            public float value() { return src.value();}

        }

        public struct SETUP_SIGNING_dst_adapter : SETUP_SIGNING.DST_
        {
            SETUP_SIGNING dst;
            public SETUP_SIGNING_dst_adapter(SETUP_SIGNING dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void secret_key(SETUP_SIGNING.secret_key_ src)
            {
                var item = dst.secret_key();
                for(int i = 0; i < SETUP_SIGNING.secret_key_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void initial_timestamp(long src) { dst.initial_timestamp(src); }

        }

        public struct SETUP_SIGNING_src_adapter : SETUP_SIGNING.SRC_
        {
            SETUP_SIGNING src;
            public SETUP_SIGNING_src_adapter(SETUP_SIGNING src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public void secret_key(SETUP_SIGNING.secret_key_ dst)
            {
                var item = src.secret_key();
                for(int i = 0; i < SETUP_SIGNING.secret_key_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public long initial_timestamp() { return src.initial_timestamp();}

        }

        public struct BUTTON_CHANGE_dst_adapter : BUTTON_CHANGE.DST_
        {
            BUTTON_CHANGE dst;
            public BUTTON_CHANGE_dst_adapter(BUTTON_CHANGE dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void last_change_ms(int src) { dst.last_change_ms(src); }
            public void state(sbyte src) { dst.state(src); }

        }

        public struct BUTTON_CHANGE_src_adapter : BUTTON_CHANGE.SRC_
        {
            BUTTON_CHANGE src;
            public BUTTON_CHANGE_src_adapter(BUTTON_CHANGE src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public int last_change_ms() { return src.last_change_ms();}
            public sbyte state() { return src.state();}

        }

        public struct PLAY_TUNE_dst_adapter : PLAY_TUNE.DST_
        {
            PLAY_TUNE dst;
            public PLAY_TUNE_dst_adapter(PLAY_TUNE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void tune(PLAY_TUNE.tune_ src)
            {
                var item = dst.tune(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct PLAY_TUNE_src_adapter : PLAY_TUNE.SRC_
        {
            PLAY_TUNE src;
            public PLAY_TUNE_src_adapter(PLAY_TUNE src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int tune_exist() { return src.tune()?.len() ?? 0 ;}
            public void tune(PLAY_TUNE.tune_ dst)
            {
                var item = src.tune();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct CAMERA_INFORMATION_dst_adapter : CAMERA_INFORMATION.DST_
        {
            CAMERA_INFORMATION dst;
            public CAMERA_INFORMATION_dst_adapter(CAMERA_INFORMATION dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void vendor_name(CAMERA_INFORMATION.vendor_name_ src)
            {
                var item = dst.vendor_name();
                for(int i = 0; i < CAMERA_INFORMATION.vendor_name_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void model_name(CAMERA_INFORMATION.model_name_ src)
            {
                var item = dst.model_name();
                for(int i = 0; i < CAMERA_INFORMATION.model_name_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void firmware_version(int src) { dst.firmware_version(src); }
            public void focal_length(float src) { dst.focal_length(src); }
            public void sensor_size_h(float src) { dst.sensor_size_h(src); }
            public void sensor_size_v(float src) { dst.sensor_size_v(src); }
            public void resolution_h(short src) { dst.resolution_h(src); }
            public void resolution_v(short src) { dst.resolution_v(src); }
            public void lens_id(sbyte src) { dst.lens_id(src); }
            public void flags(com.company.demo.GroundControl. CAMERA_CAP_FLAGS src) { dst.flags(src); }
            public void cam_definition_version(short src) { dst.cam_definition_version(src); }
            public void cam_definition_uri(CAMERA_INFORMATION.cam_definition_uri_ src)
            {
                var item = dst.cam_definition_uri(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct CAMERA_INFORMATION_src_adapter : CAMERA_INFORMATION.SRC_
        {
            CAMERA_INFORMATION src;
            public CAMERA_INFORMATION_src_adapter(CAMERA_INFORMATION src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public void vendor_name(CAMERA_INFORMATION.vendor_name_ dst)
            {
                var item = src.vendor_name();
                for(int i = 0; i < CAMERA_INFORMATION.vendor_name_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void model_name(CAMERA_INFORMATION.model_name_ dst)
            {
                var item = src.model_name();
                for(int i = 0; i < CAMERA_INFORMATION.model_name_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public int firmware_version() { return src.firmware_version();}
            public float focal_length() { return src.focal_length();}
            public float sensor_size_h() { return src.sensor_size_h();}
            public float sensor_size_v() { return src.sensor_size_v();}
            public short resolution_h() { return src.resolution_h();}
            public short resolution_v() { return src.resolution_v();}
            public sbyte lens_id() { return src.lens_id();}
            public  com.company.demo.GroundControl. CAMERA_CAP_FLAGS?  flags() { return src.flags(); }
            public short cam_definition_version() { return src.cam_definition_version();}
            public int cam_definition_uri_exist() { return src.cam_definition_uri()?.len() ?? 0 ;}
            public void cam_definition_uri(CAMERA_INFORMATION.cam_definition_uri_ dst)
            {
                var item = src.cam_definition_uri();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct CAMERA_SETTINGS_dst_adapter : CAMERA_SETTINGS.DST_
        {
            CAMERA_SETTINGS dst;
            public CAMERA_SETTINGS_dst_adapter(CAMERA_SETTINGS dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void mode_id(com.company.demo.GroundControl. CAMERA_MODE src) { dst.mode_id(src); }

        }

        public struct CAMERA_SETTINGS_src_adapter : CAMERA_SETTINGS.SRC_
        {
            CAMERA_SETTINGS src;
            public CAMERA_SETTINGS_src_adapter(CAMERA_SETTINGS src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public  com.company.demo.GroundControl. CAMERA_MODE?  mode_id() { return src.mode_id(); }

        }

        public struct STORAGE_INFORMATION_dst_adapter : STORAGE_INFORMATION.DST_
        {
            STORAGE_INFORMATION dst;
            public STORAGE_INFORMATION_dst_adapter(STORAGE_INFORMATION dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void storage_id(sbyte src) { dst.storage_id(src); }
            public void storage_count(sbyte src) { dst.storage_count(src); }
            public void status(sbyte src) { dst.status(src); }
            public void total_capacity(float src) { dst.total_capacity(src); }
            public void used_capacity(float src) { dst.used_capacity(src); }
            public void available_capacity(float src) { dst.available_capacity(src); }
            public void read_speed(float src) { dst.read_speed(src); }
            public void write_speed(float src) { dst.write_speed(src); }

        }

        public struct STORAGE_INFORMATION_src_adapter : STORAGE_INFORMATION.SRC_
        {
            STORAGE_INFORMATION src;
            public STORAGE_INFORMATION_src_adapter(STORAGE_INFORMATION src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public sbyte storage_id() { return src.storage_id();}
            public sbyte storage_count() { return src.storage_count();}
            public sbyte status() { return src.status();}
            public float total_capacity() { return src.total_capacity();}
            public float used_capacity() { return src.used_capacity();}
            public float available_capacity() { return src.available_capacity();}
            public float read_speed() { return src.read_speed();}
            public float write_speed() { return src.write_speed();}

        }

        public struct CAMERA_CAPTURE_STATUS_dst_adapter : CAMERA_CAPTURE_STATUS.DST_
        {
            CAMERA_CAPTURE_STATUS dst;
            public CAMERA_CAPTURE_STATUS_dst_adapter(CAMERA_CAPTURE_STATUS dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void image_status(sbyte src) { dst.image_status(src); }
            public void video_status(sbyte src) { dst.video_status(src); }
            public void image_interval(float src) { dst.image_interval(src); }
            public void recording_time_ms(int src) { dst.recording_time_ms(src); }
            public void available_capacity(float src) { dst.available_capacity(src); }

        }

        public struct CAMERA_CAPTURE_STATUS_src_adapter : CAMERA_CAPTURE_STATUS.SRC_
        {
            CAMERA_CAPTURE_STATUS src;
            public CAMERA_CAPTURE_STATUS_src_adapter(CAMERA_CAPTURE_STATUS src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public sbyte image_status() { return src.image_status();}
            public sbyte video_status() { return src.video_status();}
            public float image_interval() { return src.image_interval();}
            public int recording_time_ms() { return src.recording_time_ms();}
            public float available_capacity() { return src.available_capacity();}

        }

        public struct CAMERA_IMAGE_CAPTURED_dst_adapter : CAMERA_IMAGE_CAPTURED.DST_
        {
            CAMERA_IMAGE_CAPTURED dst;
            public CAMERA_IMAGE_CAPTURED_dst_adapter(CAMERA_IMAGE_CAPTURED dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void time_utc(long src) { dst.time_utc(src); }
            public void camera_id(sbyte src) { dst.camera_id(src); }
            public void lat(int src) { dst.lat(src); }
            public void lon(int src) { dst.lon(src); }
            public void alt(int src) { dst.alt(src); }
            public void relative_alt(int src) { dst.relative_alt(src); }
            public void q(CAMERA_IMAGE_CAPTURED.q_ src)
            {
                var item = dst.q();
                for(int i = 0; i < CAMERA_IMAGE_CAPTURED.q_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void image_index(int src) { dst.image_index(src); }
            public void capture_result(sbyte src) { dst.capture_result(src); }
            public void file_url(CAMERA_IMAGE_CAPTURED.file_url_ src)
            {
                var item = dst.file_url(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct CAMERA_IMAGE_CAPTURED_src_adapter : CAMERA_IMAGE_CAPTURED.SRC_
        {
            CAMERA_IMAGE_CAPTURED src;
            public CAMERA_IMAGE_CAPTURED_src_adapter(CAMERA_IMAGE_CAPTURED src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public long time_utc() { return src.time_utc();}
            public sbyte camera_id() { return src.camera_id();}
            public int lat() { return src.lat();}
            public int lon() { return src.lon();}
            public int alt() { return src.alt();}
            public int relative_alt() { return src.relative_alt();}
            public void q(CAMERA_IMAGE_CAPTURED.q_ dst)
            {
                var item = src.q();
                for(int i = 0; i < CAMERA_IMAGE_CAPTURED.q_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public int image_index() { return src.image_index();}
            public sbyte capture_result() { return src.capture_result();}
            public int file_url_exist() { return src.file_url()?.len() ?? 0 ;}
            public void file_url(CAMERA_IMAGE_CAPTURED.file_url_ dst)
            {
                var item = src.file_url();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct FLIGHT_INFORMATION_dst_adapter : FLIGHT_INFORMATION.DST_
        {
            FLIGHT_INFORMATION dst;
            public FLIGHT_INFORMATION_dst_adapter(FLIGHT_INFORMATION dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void arming_time_utc(long src) { dst.arming_time_utc(src); }
            public void takeoff_time_utc(long src) { dst.takeoff_time_utc(src); }
            public void flight_uuid(long src) { dst.flight_uuid(src); }

        }

        public struct FLIGHT_INFORMATION_src_adapter : FLIGHT_INFORMATION.SRC_
        {
            FLIGHT_INFORMATION src;
            public FLIGHT_INFORMATION_src_adapter(FLIGHT_INFORMATION src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public long arming_time_utc() { return src.arming_time_utc();}
            public long takeoff_time_utc() { return src.takeoff_time_utc();}
            public long flight_uuid() { return src.flight_uuid();}

        }

        public struct MOUNT_ORIENTATION_dst_adapter : MOUNT_ORIENTATION.DST_
        {
            MOUNT_ORIENTATION dst;
            public MOUNT_ORIENTATION_dst_adapter(MOUNT_ORIENTATION dst) { this.dst = dst; }
            public void time_boot_ms(int src) { dst.time_boot_ms(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }

        }

        public struct MOUNT_ORIENTATION_src_adapter : MOUNT_ORIENTATION.SRC_
        {
            MOUNT_ORIENTATION src;
            public MOUNT_ORIENTATION_src_adapter(MOUNT_ORIENTATION src) { this.src = src; }
            public int time_boot_ms() { return src.time_boot_ms();}
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}

        }

        public struct LOGGING_DATA_dst_adapter : LOGGING_DATA.DST_
        {
            LOGGING_DATA dst;
            public LOGGING_DATA_dst_adapter(LOGGING_DATA dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void sequence(short src) { dst.sequence(src); }
            public void length(sbyte src) { dst.length(src); }
            public void first_message_offset(sbyte src) { dst.first_message_offset(src); }
            public void daTa(LOGGING_DATA.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < LOGGING_DATA.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct LOGGING_DATA_src_adapter : LOGGING_DATA.SRC_
        {
            LOGGING_DATA src;
            public LOGGING_DATA_src_adapter(LOGGING_DATA src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short sequence() { return src.sequence();}
            public sbyte length() { return src.length();}
            public sbyte first_message_offset() { return src.first_message_offset();}
            public void daTa(LOGGING_DATA.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < LOGGING_DATA.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct LOGGING_DATA_ACKED_dst_adapter : LOGGING_DATA_ACKED.DST_
        {
            LOGGING_DATA_ACKED dst;
            public LOGGING_DATA_ACKED_dst_adapter(LOGGING_DATA_ACKED dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void sequence(short src) { dst.sequence(src); }
            public void length(sbyte src) { dst.length(src); }
            public void first_message_offset(sbyte src) { dst.first_message_offset(src); }
            public void daTa(LOGGING_DATA_ACKED.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < LOGGING_DATA_ACKED.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct LOGGING_DATA_ACKED_src_adapter : LOGGING_DATA_ACKED.SRC_
        {
            LOGGING_DATA_ACKED src;
            public LOGGING_DATA_ACKED_src_adapter(LOGGING_DATA_ACKED src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short sequence() { return src.sequence();}
            public sbyte length() { return src.length();}
            public sbyte first_message_offset() { return src.first_message_offset();}
            public void daTa(LOGGING_DATA_ACKED.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < LOGGING_DATA_ACKED.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct LOGGING_ACK_dst_adapter : LOGGING_ACK.DST_
        {
            LOGGING_ACK dst;
            public LOGGING_ACK_dst_adapter(LOGGING_ACK dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void sequence(short src) { dst.sequence(src); }

        }

        public struct LOGGING_ACK_src_adapter : LOGGING_ACK.SRC_
        {
            LOGGING_ACK src;
            public LOGGING_ACK_src_adapter(LOGGING_ACK src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short sequence() { return src.sequence();}

        }

        public struct VIDEO_STREAM_INFORMATION_dst_adapter : VIDEO_STREAM_INFORMATION.DST_
        {
            VIDEO_STREAM_INFORMATION dst;
            public VIDEO_STREAM_INFORMATION_dst_adapter(VIDEO_STREAM_INFORMATION dst) { this.dst = dst; }
            public void camera_id(sbyte src) { dst.camera_id(src); }
            public void status(sbyte src) { dst.status(src); }
            public void framerate(float src) { dst.framerate(src); }
            public void resolution_h(short src) { dst.resolution_h(src); }
            public void resolution_v(short src) { dst.resolution_v(src); }
            public void bitrate(int src) { dst.bitrate(src); }
            public void rotation(short src) { dst.rotation(src); }
            public void uri(VIDEO_STREAM_INFORMATION.uri_ src)
            {
                var item = dst.uri(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct VIDEO_STREAM_INFORMATION_src_adapter : VIDEO_STREAM_INFORMATION.SRC_
        {
            VIDEO_STREAM_INFORMATION src;
            public VIDEO_STREAM_INFORMATION_src_adapter(VIDEO_STREAM_INFORMATION src) { this.src = src; }
            public sbyte camera_id() { return src.camera_id();}
            public sbyte status() { return src.status();}
            public float framerate() { return src.framerate();}
            public short resolution_h() { return src.resolution_h();}
            public short resolution_v() { return src.resolution_v();}
            public int bitrate() { return src.bitrate();}
            public short rotation() { return src.rotation();}
            public int uri_exist() { return src.uri()?.len() ?? 0 ;}
            public void uri(VIDEO_STREAM_INFORMATION.uri_ dst)
            {
                var item = src.uri();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct SET_VIDEO_STREAM_SETTINGS_dst_adapter : SET_VIDEO_STREAM_SETTINGS.DST_
        {
            SET_VIDEO_STREAM_SETTINGS dst;
            public SET_VIDEO_STREAM_SETTINGS_dst_adapter(SET_VIDEO_STREAM_SETTINGS dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void camera_id(sbyte src) { dst.camera_id(src); }
            public void framerate(float src) { dst.framerate(src); }
            public void resolution_h(short src) { dst.resolution_h(src); }
            public void resolution_v(short src) { dst.resolution_v(src); }
            public void bitrate(int src) { dst.bitrate(src); }
            public void rotation(short src) { dst.rotation(src); }
            public void uri(SET_VIDEO_STREAM_SETTINGS.uri_ src)
            {
                var item = dst.uri(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct SET_VIDEO_STREAM_SETTINGS_src_adapter : SET_VIDEO_STREAM_SETTINGS.SRC_
        {
            SET_VIDEO_STREAM_SETTINGS src;
            public SET_VIDEO_STREAM_SETTINGS_src_adapter(SET_VIDEO_STREAM_SETTINGS src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte camera_id() { return src.camera_id();}
            public float framerate() { return src.framerate();}
            public short resolution_h() { return src.resolution_h();}
            public short resolution_v() { return src.resolution_v();}
            public int bitrate() { return src.bitrate();}
            public short rotation() { return src.rotation();}
            public int uri_exist() { return src.uri()?.len() ?? 0 ;}
            public void uri(SET_VIDEO_STREAM_SETTINGS.uri_ dst)
            {
                var item = src.uri();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct WIFI_CONFIG_AP_dst_adapter : WIFI_CONFIG_AP.DST_
        {
            WIFI_CONFIG_AP dst;
            public WIFI_CONFIG_AP_dst_adapter(WIFI_CONFIG_AP dst) { this.dst = dst; }
            public void ssid(WIFI_CONFIG_AP.ssid_ src)
            {
                var item = dst.ssid(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void password(WIFI_CONFIG_AP.password_ src)
            {
                var item = dst.password(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }

        }

        public struct WIFI_CONFIG_AP_src_adapter : WIFI_CONFIG_AP.SRC_
        {
            WIFI_CONFIG_AP src;
            public WIFI_CONFIG_AP_src_adapter(WIFI_CONFIG_AP src) { this.src = src; }
            public int ssid_exist() { return src.ssid()?.len() ?? 0 ;}
            public void ssid(WIFI_CONFIG_AP.ssid_ dst)
            {
                var item = src.ssid();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int password_exist() { return src.password()?.len() ?? 0 ;}
            public void password(WIFI_CONFIG_AP.password_ dst)
            {
                var item = src.password();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }

        }

        public struct PROTOCOL_VERSION_dst_adapter : PROTOCOL_VERSION.DST_
        {
            PROTOCOL_VERSION dst;
            public PROTOCOL_VERSION_dst_adapter(PROTOCOL_VERSION dst) { this.dst = dst; }
            public void version(short src) { dst.version(src); }
            public void min_version(short src) { dst.min_version(src); }
            public void max_version(short src) { dst.max_version(src); }
            public void spec_version_hash(PROTOCOL_VERSION.spec_version_hash_ src)
            {
                var item = dst.spec_version_hash();
                for(int i = 0; i < PROTOCOL_VERSION.spec_version_hash_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void library_version_hash(PROTOCOL_VERSION.library_version_hash_ src)
            {
                var item = dst.library_version_hash();
                for(int i = 0; i < PROTOCOL_VERSION.library_version_hash_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct PROTOCOL_VERSION_src_adapter : PROTOCOL_VERSION.SRC_
        {
            PROTOCOL_VERSION src;
            public PROTOCOL_VERSION_src_adapter(PROTOCOL_VERSION src) { this.src = src; }
            public short version() { return src.version();}
            public short min_version() { return src.min_version();}
            public short max_version() { return src.max_version();}
            public void spec_version_hash(PROTOCOL_VERSION.spec_version_hash_ dst)
            {
                var item = src.spec_version_hash();
                for(int i = 0; i < PROTOCOL_VERSION.spec_version_hash_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void library_version_hash(PROTOCOL_VERSION.library_version_hash_ dst)
            {
                var item = src.library_version_hash();
                for(int i = 0; i < PROTOCOL_VERSION.library_version_hash_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct UAVCAN_NODE_STATUS_dst_adapter : UAVCAN_NODE_STATUS.DST_
        {
            UAVCAN_NODE_STATUS dst;
            public UAVCAN_NODE_STATUS_dst_adapter(UAVCAN_NODE_STATUS dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void uptime_sec(int src) { dst.uptime_sec(src); }
            public void health(com.company.demo.GroundControl. UAVCAN_NODE_HEALTH src) { dst.health(src); }
            public void mode(com.company.demo.GroundControl. UAVCAN_NODE_MODE src) { dst.mode(src); }
            public void sub_mode(sbyte src) { dst.sub_mode(src); }
            public void vendor_specific_status_code(short src) { dst.vendor_specific_status_code(src); }

        }

        public struct UAVCAN_NODE_STATUS_src_adapter : UAVCAN_NODE_STATUS.SRC_
        {
            UAVCAN_NODE_STATUS src;
            public UAVCAN_NODE_STATUS_src_adapter(UAVCAN_NODE_STATUS src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public int uptime_sec() { return src.uptime_sec();}
            public  com.company.demo.GroundControl. UAVCAN_NODE_HEALTH?  health() { return src.health(); }
            public  com.company.demo.GroundControl. UAVCAN_NODE_MODE?  mode() { return src.mode(); }
            public sbyte sub_mode() { return src.sub_mode();}
            public short vendor_specific_status_code() { return src.vendor_specific_status_code();}

        }

        public struct UAVCAN_NODE_INFO_dst_adapter : UAVCAN_NODE_INFO.DST_
        {
            UAVCAN_NODE_INFO dst;
            public UAVCAN_NODE_INFO_dst_adapter(UAVCAN_NODE_INFO dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void uptime_sec(int src) { dst.uptime_sec(src); }
            public void name(UAVCAN_NODE_INFO.name_ src)
            {
                var item = dst.name(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void hw_version_major(sbyte src) { dst.hw_version_major(src); }
            public void hw_version_minor(sbyte src) { dst.hw_version_minor(src); }
            public void hw_unique_id(UAVCAN_NODE_INFO.hw_unique_id_ src)
            {
                var item = dst.hw_unique_id();
                for(int i = 0; i < UAVCAN_NODE_INFO.hw_unique_id_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void sw_version_major(sbyte src) { dst.sw_version_major(src); }
            public void sw_version_minor(sbyte src) { dst.sw_version_minor(src); }
            public void sw_vcs_commit(int src) { dst.sw_vcs_commit(src); }

        }

        public struct UAVCAN_NODE_INFO_src_adapter : UAVCAN_NODE_INFO.SRC_
        {
            UAVCAN_NODE_INFO src;
            public UAVCAN_NODE_INFO_src_adapter(UAVCAN_NODE_INFO src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public int uptime_sec() { return src.uptime_sec();}
            public int name_exist() { return src.name()?.len() ?? 0 ;}
            public void name(UAVCAN_NODE_INFO.name_ dst)
            {
                var item = src.name();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public sbyte hw_version_major() { return src.hw_version_major();}
            public sbyte hw_version_minor() { return src.hw_version_minor();}
            public void hw_unique_id(UAVCAN_NODE_INFO.hw_unique_id_ dst)
            {
                var item = src.hw_unique_id();
                for(int i = 0; i < UAVCAN_NODE_INFO.hw_unique_id_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public sbyte sw_version_major() { return src.sw_version_major();}
            public sbyte sw_version_minor() { return src.sw_version_minor();}
            public int sw_vcs_commit() { return src.sw_vcs_commit();}

        }

        public struct PARAM_EXT_REQUEST_READ_dst_adapter : PARAM_EXT_REQUEST_READ.DST_
        {
            PARAM_EXT_REQUEST_READ dst;
            public PARAM_EXT_REQUEST_READ_dst_adapter(PARAM_EXT_REQUEST_READ dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void param_id(PARAM_EXT_REQUEST_READ.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_index(short src) { dst.param_index(src); }

        }

        public struct PARAM_EXT_REQUEST_READ_src_adapter : PARAM_EXT_REQUEST_READ.SRC_
        {
            PARAM_EXT_REQUEST_READ src;
            public PARAM_EXT_REQUEST_READ_src_adapter(PARAM_EXT_REQUEST_READ src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int param_id_exist() { return src.param_id()?.len() ?? 0 ;}
            public void param_id(PARAM_EXT_REQUEST_READ.param_id_ dst)
            {
                var item = src.param_id();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public short param_index() { return src.param_index();}

        }

        public struct PARAM_EXT_REQUEST_LIST_dst_adapter : PARAM_EXT_REQUEST_LIST.DST_
        {
            PARAM_EXT_REQUEST_LIST dst;
            public PARAM_EXT_REQUEST_LIST_dst_adapter(PARAM_EXT_REQUEST_LIST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }

        public struct PARAM_EXT_REQUEST_LIST_src_adapter : PARAM_EXT_REQUEST_LIST.SRC_
        {
            PARAM_EXT_REQUEST_LIST src;
            public PARAM_EXT_REQUEST_LIST_src_adapter(PARAM_EXT_REQUEST_LIST src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}

        }

        public struct PARAM_EXT_VALUE_dst_adapter : PARAM_EXT_VALUE.DST_
        {
            PARAM_EXT_VALUE dst;
            public PARAM_EXT_VALUE_dst_adapter(PARAM_EXT_VALUE dst) { this.dst = dst; }
            public void param_id(PARAM_EXT_VALUE.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_value(PARAM_EXT_VALUE.param_value_ src)
            {
                var item = dst.param_value(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_type(com.company.demo.GroundControl. MAV_PARAM_EXT_TYPE src) { dst.param_type(src); }
            public void param_count(short src) { dst.param_count(src); }
            public void param_index(short src) { dst.param_index(src); }

        }

        public struct PARAM_EXT_VALUE_src_adapter : PARAM_EXT_VALUE.SRC_
        {
            PARAM_EXT_VALUE src;
            public PARAM_EXT_VALUE_src_adapter(PARAM_EXT_VALUE src) { this.src = src; }
            public int param_id_exist() { return src.param_id()?.len() ?? 0 ;}
            public void param_id(PARAM_EXT_VALUE.param_id_ dst)
            {
                var item = src.param_id();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int param_value_exist() { return src.param_value()?.len() ?? 0 ;}
            public void param_value(PARAM_EXT_VALUE.param_value_ dst)
            {
                var item = src.param_value();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public  com.company.demo.GroundControl. MAV_PARAM_EXT_TYPE?  param_type() { return src.param_type(); }
            public short param_count() { return src.param_count();}
            public short param_index() { return src.param_index();}

        }

        public struct PARAM_EXT_SET_dst_adapter : PARAM_EXT_SET.DST_
        {
            PARAM_EXT_SET dst;
            public PARAM_EXT_SET_dst_adapter(PARAM_EXT_SET dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void param_id(PARAM_EXT_SET.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_value(PARAM_EXT_SET.param_value_ src)
            {
                var item = dst.param_value(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_type(com.company.demo.GroundControl. MAV_PARAM_EXT_TYPE src) { dst.param_type(src); }

        }

        public struct PARAM_EXT_SET_src_adapter : PARAM_EXT_SET.SRC_
        {
            PARAM_EXT_SET src;
            public PARAM_EXT_SET_src_adapter(PARAM_EXT_SET src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int param_id_exist() { return src.param_id()?.len() ?? 0 ;}
            public void param_id(PARAM_EXT_SET.param_id_ dst)
            {
                var item = src.param_id();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int param_value_exist() { return src.param_value()?.len() ?? 0 ;}
            public void param_value(PARAM_EXT_SET.param_value_ dst)
            {
                var item = src.param_value();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public  com.company.demo.GroundControl. MAV_PARAM_EXT_TYPE?  param_type() { return src.param_type(); }

        }

        public struct PARAM_EXT_ACK_dst_adapter : PARAM_EXT_ACK.DST_
        {
            PARAM_EXT_ACK dst;
            public PARAM_EXT_ACK_dst_adapter(PARAM_EXT_ACK dst) { this.dst = dst; }
            public void param_id(PARAM_EXT_ACK.param_id_ src)
            {
                var item = dst.param_id(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_value(PARAM_EXT_ACK.param_value_ src)
            {
                var item = dst.param_value(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void param_type(com.company.demo.GroundControl. MAV_PARAM_EXT_TYPE src) { dst.param_type(src); }
            public void param_result(com.company.demo.GroundControl. PARAM_ACK src) { dst.param_result(src); }

        }

        public struct PARAM_EXT_ACK_src_adapter : PARAM_EXT_ACK.SRC_
        {
            PARAM_EXT_ACK src;
            public PARAM_EXT_ACK_src_adapter(PARAM_EXT_ACK src) { this.src = src; }
            public int param_id_exist() { return src.param_id()?.len() ?? 0 ;}
            public void param_id(PARAM_EXT_ACK.param_id_ dst)
            {
                var item = src.param_id();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public int param_value_exist() { return src.param_value()?.len() ?? 0 ;}
            public void param_value(PARAM_EXT_ACK.param_value_ dst)
            {
                var item = src.param_value();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public  com.company.demo.GroundControl. MAV_PARAM_EXT_TYPE?  param_type() { return src.param_type(); }
            public  com.company.demo.GroundControl. PARAM_ACK?  param_result() { return src.param_result(); }

        }

        public struct OBSTACLE_DISTANCE_dst_adapter : OBSTACLE_DISTANCE.DST_
        {
            OBSTACLE_DISTANCE dst;
            public OBSTACLE_DISTANCE_dst_adapter(OBSTACLE_DISTANCE dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void sensor_type(com.company.demo.GroundControl. MAV_DISTANCE_SENSOR src) { dst.sensor_type(src); }
            public void distances(OBSTACLE_DISTANCE.distances_ src)
            {
                var item = dst.distances();
                for(int i = 0; i < OBSTACLE_DISTANCE.distances_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void increment(sbyte src) { dst.increment(src); }
            public void min_distance(short src) { dst.min_distance(src); }
            public void max_distance(short src) { dst.max_distance(src); }

        }

        public struct OBSTACLE_DISTANCE_src_adapter : OBSTACLE_DISTANCE.SRC_
        {
            OBSTACLE_DISTANCE src;
            public OBSTACLE_DISTANCE_src_adapter(OBSTACLE_DISTANCE src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public  com.company.demo.GroundControl. MAV_DISTANCE_SENSOR?  sensor_type() { return src.sensor_type(); }
            public void distances(OBSTACLE_DISTANCE.distances_ dst)
            {
                var item = src.distances();
                for(int i = 0; i < OBSTACLE_DISTANCE.distances_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public sbyte increment() { return src.increment();}
            public short min_distance() { return src.min_distance();}
            public short max_distance() { return src.max_distance();}

        }

        public struct UAVIONIX_ADSB_OUT_CFG_dst_adapter : UAVIONIX_ADSB_OUT_CFG.DST_
        {
            UAVIONIX_ADSB_OUT_CFG dst;
            public UAVIONIX_ADSB_OUT_CFG_dst_adapter(UAVIONIX_ADSB_OUT_CFG dst) { this.dst = dst; }
            public void ICAO(int src) { dst.ICAO(src); }
            public void callsign(UAVIONIX_ADSB_OUT_CFG.callsign_ src)
            {
                var item = dst.callsign(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void emitterType(com.company.demo.GroundControl. ADSB_EMITTER_TYPE src) { dst.emitterType(src); }
            public void aircraftSize(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE src) { dst.aircraftSize(src); }
            public void gpsOffsetLat(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT src) { dst.gpsOffsetLat(src); }
            public void gpsOffsetLon(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON src) { dst.gpsOffsetLon(src); }
            public void stallSpeed(short src) { dst.stallSpeed(src); }
            public void rfSelect(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_RF_SELECT src) { dst.rfSelect(src); }

        }

        public struct UAVIONIX_ADSB_OUT_CFG_src_adapter : UAVIONIX_ADSB_OUT_CFG.SRC_
        {
            UAVIONIX_ADSB_OUT_CFG src;
            public UAVIONIX_ADSB_OUT_CFG_src_adapter(UAVIONIX_ADSB_OUT_CFG src) { this.src = src; }
            public int ICAO() { return src.ICAO();}
            public int callsign_exist() { return src.callsign()?.len() ?? 0 ;}
            public void callsign(UAVIONIX_ADSB_OUT_CFG.callsign_ dst)
            {
                var item = src.callsign();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public  com.company.demo.GroundControl. ADSB_EMITTER_TYPE?  emitterType() { return src.emitterType(); }
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE?  aircraftSize() { return src.aircraftSize(); }
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT?  gpsOffsetLat() { return src.gpsOffsetLat(); }
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON?  gpsOffsetLon() { return src.gpsOffsetLon(); }
            public short stallSpeed() { return src.stallSpeed();}
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_RF_SELECT?  rfSelect() { return src.rfSelect(); }

        }

        public struct UAVIONIX_ADSB_OUT_DYNAMIC_dst_adapter : UAVIONIX_ADSB_OUT_DYNAMIC.DST_
        {
            UAVIONIX_ADSB_OUT_DYNAMIC dst;
            public UAVIONIX_ADSB_OUT_DYNAMIC_dst_adapter(UAVIONIX_ADSB_OUT_DYNAMIC dst) { this.dst = dst; }
            public void utcTime(int src) { dst.utcTime(src); }
            public void gpsLat(int src) { dst.gpsLat(src); }
            public void gpsLon(int src) { dst.gpsLon(src); }
            public void gpsAlt(int src) { dst.gpsAlt(src); }
            public void gpsFix(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX src) { dst.gpsFix(src); }
            public void numSats(sbyte src) { dst.numSats(src); }
            public void baroAltMSL(int src) { dst.baroAltMSL(src); }
            public void accuracyHor(int src) { dst.accuracyHor(src); }
            public void accuracyVert(short src) { dst.accuracyVert(src); }
            public void accuracyVel(short src) { dst.accuracyVel(src); }
            public void velVert(short src) { dst.velVert(src); }
            public void velNS(short src) { dst.velNS(src); }
            public void VelEW(short src) { dst.VelEW(src); }
            public void emergencyStatus(com.company.demo.GroundControl. UAVIONIX_ADSB_EMERGENCY_STATUS src) { dst.emergencyStatus(src); }
            public void state(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_DYNAMIC_STATE src) { dst.state(src); }
            public void squawk(short src) { dst.squawk(src); }

        }

        public struct UAVIONIX_ADSB_OUT_DYNAMIC_src_adapter : UAVIONIX_ADSB_OUT_DYNAMIC.SRC_
        {
            UAVIONIX_ADSB_OUT_DYNAMIC src;
            public UAVIONIX_ADSB_OUT_DYNAMIC_src_adapter(UAVIONIX_ADSB_OUT_DYNAMIC src) { this.src = src; }
            public int utcTime() { return src.utcTime();}
            public int gpsLat() { return src.gpsLat();}
            public int gpsLon() { return src.gpsLon();}
            public int gpsAlt() { return src.gpsAlt();}
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX?  gpsFix() { return src.gpsFix(); }
            public sbyte numSats() { return src.numSats();}
            public int baroAltMSL() { return src.baroAltMSL();}
            public int accuracyHor() { return src.accuracyHor();}
            public short accuracyVert() { return src.accuracyVert();}
            public short accuracyVel() { return src.accuracyVel();}
            public short velVert() { return src.velVert();}
            public short velNS() { return src.velNS();}
            public short VelEW() { return src.VelEW();}
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_EMERGENCY_STATUS?  emergencyStatus() { return src.emergencyStatus(); }
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_DYNAMIC_STATE?  state() { return src.state(); }
            public short squawk() { return src.squawk();}

        }

        public struct UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_dst_adapter : UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT.DST_
        {
            UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT dst;
            public UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_dst_adapter(UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT dst) { this.dst = dst; }
            public void rfHealth(com.company.demo.GroundControl. UAVIONIX_ADSB_RF_HEALTH src) { dst.rfHealth(src); }

        }

        public struct UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_src_adapter : UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT.SRC_
        {
            UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT src;
            public UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_src_adapter(UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT src) { this.src = src; }
            public  com.company.demo.GroundControl. UAVIONIX_ADSB_RF_HEALTH?  rfHealth() { return src.rfHealth(); }

        }

        public struct SENSOR_OFFSETS_dst_adapter : SENSOR_OFFSETS.DST_
        {
            SENSOR_OFFSETS dst;
            public SENSOR_OFFSETS_dst_adapter(SENSOR_OFFSETS dst) { this.dst = dst; }
            public void mag_ofs_x(short src) { dst.mag_ofs_x(src); }
            public void mag_ofs_y(short src) { dst.mag_ofs_y(src); }
            public void mag_ofs_z(short src) { dst.mag_ofs_z(src); }
            public void mag_declination(float src) { dst.mag_declination(src); }
            public void raw_press(int src) { dst.raw_press(src); }
            public void raw_temp(int src) { dst.raw_temp(src); }
            public void gyro_cal_x(float src) { dst.gyro_cal_x(src); }
            public void gyro_cal_y(float src) { dst.gyro_cal_y(src); }
            public void gyro_cal_z(float src) { dst.gyro_cal_z(src); }
            public void accel_cal_x(float src) { dst.accel_cal_x(src); }
            public void accel_cal_y(float src) { dst.accel_cal_y(src); }
            public void accel_cal_z(float src) { dst.accel_cal_z(src); }

        }

        public struct SENSOR_OFFSETS_src_adapter : SENSOR_OFFSETS.SRC_
        {
            SENSOR_OFFSETS src;
            public SENSOR_OFFSETS_src_adapter(SENSOR_OFFSETS src) { this.src = src; }
            public short mag_ofs_x() { return src.mag_ofs_x();}
            public short mag_ofs_y() { return src.mag_ofs_y();}
            public short mag_ofs_z() { return src.mag_ofs_z();}
            public float mag_declination() { return src.mag_declination();}
            public int raw_press() { return src.raw_press();}
            public int raw_temp() { return src.raw_temp();}
            public float gyro_cal_x() { return src.gyro_cal_x();}
            public float gyro_cal_y() { return src.gyro_cal_y();}
            public float gyro_cal_z() { return src.gyro_cal_z();}
            public float accel_cal_x() { return src.accel_cal_x();}
            public float accel_cal_y() { return src.accel_cal_y();}
            public float accel_cal_z() { return src.accel_cal_z();}

        }

        public struct SET_MAG_OFFSETS_dst_adapter : SET_MAG_OFFSETS.DST_
        {
            SET_MAG_OFFSETS dst;
            public SET_MAG_OFFSETS_dst_adapter(SET_MAG_OFFSETS dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void mag_ofs_x(short src) { dst.mag_ofs_x(src); }
            public void mag_ofs_y(short src) { dst.mag_ofs_y(src); }
            public void mag_ofs_z(short src) { dst.mag_ofs_z(src); }

        }

        public struct SET_MAG_OFFSETS_src_adapter : SET_MAG_OFFSETS.SRC_
        {
            SET_MAG_OFFSETS src;
            public SET_MAG_OFFSETS_src_adapter(SET_MAG_OFFSETS src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short mag_ofs_x() { return src.mag_ofs_x();}
            public short mag_ofs_y() { return src.mag_ofs_y();}
            public short mag_ofs_z() { return src.mag_ofs_z();}

        }

        public struct MEMINFO_dst_adapter : MEMINFO.DST_
        {
            MEMINFO dst;
            public MEMINFO_dst_adapter(MEMINFO dst) { this.dst = dst; }
            public void brkval(short src) { dst.brkval(src); }
            public void freemem(short src) { dst.freemem(src); }
            public void freemem32(int src) { dst.freemem32(src); }

        }

        public struct MEMINFO_src_adapter : MEMINFO.SRC_
        {
            MEMINFO src;
            public MEMINFO_src_adapter(MEMINFO src) { this.src = src; }
            public short brkval() { return src.brkval();}
            public short freemem() { return src.freemem();}
            public  int?  freemem32() { return src.freemem32(); }

        }

        public struct AP_ADC_dst_adapter : AP_ADC.DST_
        {
            AP_ADC dst;
            public AP_ADC_dst_adapter(AP_ADC dst) { this.dst = dst; }
            public void adc1(short src) { dst.adc1(src); }
            public void adc2(short src) { dst.adc2(src); }
            public void adc3(short src) { dst.adc3(src); }
            public void adc4(short src) { dst.adc4(src); }
            public void adc5(short src) { dst.adc5(src); }
            public void adc6(short src) { dst.adc6(src); }

        }

        public struct AP_ADC_src_adapter : AP_ADC.SRC_
        {
            AP_ADC src;
            public AP_ADC_src_adapter(AP_ADC src) { this.src = src; }
            public short adc1() { return src.adc1();}
            public short adc2() { return src.adc2();}
            public short adc3() { return src.adc3();}
            public short adc4() { return src.adc4();}
            public short adc5() { return src.adc5();}
            public short adc6() { return src.adc6();}

        }

        public struct DIGICAM_CONFIGURE_dst_adapter : DIGICAM_CONFIGURE.DST_
        {
            DIGICAM_CONFIGURE dst;
            public DIGICAM_CONFIGURE_dst_adapter(DIGICAM_CONFIGURE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void mode(sbyte src) { dst.mode(src); }
            public void shutter_speed(short src) { dst.shutter_speed(src); }
            public void aperture(sbyte src) { dst.aperture(src); }
            public void iso(sbyte src) { dst.iso(src); }
            public void exposure_type(sbyte src) { dst.exposure_type(src); }
            public void command_id(sbyte src) { dst.command_id(src); }
            public void engine_cut_off(sbyte src) { dst.engine_cut_off(src); }
            public void extra_param(sbyte src) { dst.extra_param(src); }
            public void extra_value(float src) { dst.extra_value(src); }

        }

        public struct DIGICAM_CONFIGURE_src_adapter : DIGICAM_CONFIGURE.SRC_
        {
            DIGICAM_CONFIGURE src;
            public DIGICAM_CONFIGURE_src_adapter(DIGICAM_CONFIGURE src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte mode() { return src.mode();}
            public short shutter_speed() { return src.shutter_speed();}
            public sbyte aperture() { return src.aperture();}
            public sbyte iso() { return src.iso();}
            public sbyte exposure_type() { return src.exposure_type();}
            public sbyte command_id() { return src.command_id();}
            public sbyte engine_cut_off() { return src.engine_cut_off();}
            public sbyte extra_param() { return src.extra_param();}
            public float extra_value() { return src.extra_value();}

        }

        public struct DIGICAM_CONTROL_dst_adapter : DIGICAM_CONTROL.DST_
        {
            DIGICAM_CONTROL dst;
            public DIGICAM_CONTROL_dst_adapter(DIGICAM_CONTROL dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void session(sbyte src) { dst.session(src); }
            public void zoom_pos(sbyte src) { dst.zoom_pos(src); }
            public void zoom_step(sbyte src) { dst.zoom_step(src); }
            public void focus_lock(sbyte src) { dst.focus_lock(src); }
            public void shot(sbyte src) { dst.shot(src); }
            public void command_id(sbyte src) { dst.command_id(src); }
            public void extra_param(sbyte src) { dst.extra_param(src); }
            public void extra_value(float src) { dst.extra_value(src); }

        }

        public struct DIGICAM_CONTROL_src_adapter : DIGICAM_CONTROL.SRC_
        {
            DIGICAM_CONTROL src;
            public DIGICAM_CONTROL_src_adapter(DIGICAM_CONTROL src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte session() { return src.session();}
            public sbyte zoom_pos() { return src.zoom_pos();}
            public sbyte zoom_step() { return src.zoom_step();}
            public sbyte focus_lock() { return src.focus_lock();}
            public sbyte shot() { return src.shot();}
            public sbyte command_id() { return src.command_id();}
            public sbyte extra_param() { return src.extra_param();}
            public float extra_value() { return src.extra_value();}

        }

        public struct MOUNT_CONFIGURE_dst_adapter : MOUNT_CONFIGURE.DST_
        {
            MOUNT_CONFIGURE dst;
            public MOUNT_CONFIGURE_dst_adapter(MOUNT_CONFIGURE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void mount_mode(com.company.demo.GroundControl. MAV_MOUNT_MODE src) { dst.mount_mode(src); }
            public void stab_roll(sbyte src) { dst.stab_roll(src); }
            public void stab_pitch(sbyte src) { dst.stab_pitch(src); }
            public void stab_yaw(sbyte src) { dst.stab_yaw(src); }

        }

        public struct MOUNT_CONFIGURE_src_adapter : MOUNT_CONFIGURE.SRC_
        {
            MOUNT_CONFIGURE src;
            public MOUNT_CONFIGURE_src_adapter(MOUNT_CONFIGURE src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public  com.company.demo.GroundControl. MAV_MOUNT_MODE?  mount_mode() { return src.mount_mode(); }
            public sbyte stab_roll() { return src.stab_roll();}
            public sbyte stab_pitch() { return src.stab_pitch();}
            public sbyte stab_yaw() { return src.stab_yaw();}

        }

        public struct MOUNT_CONTROL_dst_adapter : MOUNT_CONTROL.DST_
        {
            MOUNT_CONTROL dst;
            public MOUNT_CONTROL_dst_adapter(MOUNT_CONTROL dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void input_a(int src) { dst.input_a(src); }
            public void input_b(int src) { dst.input_b(src); }
            public void input_c(int src) { dst.input_c(src); }
            public void save_position(sbyte src) { dst.save_position(src); }

        }

        public struct MOUNT_CONTROL_src_adapter : MOUNT_CONTROL.SRC_
        {
            MOUNT_CONTROL src;
            public MOUNT_CONTROL_src_adapter(MOUNT_CONTROL src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int input_a() { return src.input_a();}
            public int input_b() { return src.input_b();}
            public int input_c() { return src.input_c();}
            public sbyte save_position() { return src.save_position();}

        }

        public struct MOUNT_STATUS_dst_adapter : MOUNT_STATUS.DST_
        {
            MOUNT_STATUS dst;
            public MOUNT_STATUS_dst_adapter(MOUNT_STATUS dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void pointing_a(int src) { dst.pointing_a(src); }
            public void pointing_b(int src) { dst.pointing_b(src); }
            public void pointing_c(int src) { dst.pointing_c(src); }

        }

        public struct MOUNT_STATUS_src_adapter : MOUNT_STATUS.SRC_
        {
            MOUNT_STATUS src;
            public MOUNT_STATUS_src_adapter(MOUNT_STATUS src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int pointing_a() { return src.pointing_a();}
            public int pointing_b() { return src.pointing_b();}
            public int pointing_c() { return src.pointing_c();}

        }

        public struct FENCE_POINT_dst_adapter : FENCE_POINT.DST_
        {
            FENCE_POINT dst;
            public FENCE_POINT_dst_adapter(FENCE_POINT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void idx(sbyte src) { dst.idx(src); }
            public void count(sbyte src) { dst.count(src); }
            public void lat(float src) { dst.lat(src); }
            public void lng(float src) { dst.lng(src); }

        }

        public struct FENCE_POINT_src_adapter : FENCE_POINT.SRC_
        {
            FENCE_POINT src;
            public FENCE_POINT_src_adapter(FENCE_POINT src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte idx() { return src.idx();}
            public sbyte count() { return src.count();}
            public float lat() { return src.lat();}
            public float lng() { return src.lng();}

        }

        public struct FENCE_FETCH_POINT_dst_adapter : FENCE_FETCH_POINT.DST_
        {
            FENCE_FETCH_POINT dst;
            public FENCE_FETCH_POINT_dst_adapter(FENCE_FETCH_POINT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void idx(sbyte src) { dst.idx(src); }

        }

        public struct FENCE_FETCH_POINT_src_adapter : FENCE_FETCH_POINT.SRC_
        {
            FENCE_FETCH_POINT src;
            public FENCE_FETCH_POINT_src_adapter(FENCE_FETCH_POINT src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte idx() { return src.idx();}

        }

        public struct FENCE_STATUS_dst_adapter : FENCE_STATUS.DST_
        {
            FENCE_STATUS dst;
            public FENCE_STATUS_dst_adapter(FENCE_STATUS dst) { this.dst = dst; }
            public void breach_status(sbyte src) { dst.breach_status(src); }
            public void breach_count(short src) { dst.breach_count(src); }
            public void breach_type(com.company.demo.GroundControl. FENCE_BREACH src) { dst.breach_type(src); }
            public void breach_time(int src) { dst.breach_time(src); }

        }

        public struct FENCE_STATUS_src_adapter : FENCE_STATUS.SRC_
        {
            FENCE_STATUS src;
            public FENCE_STATUS_src_adapter(FENCE_STATUS src) { this.src = src; }
            public sbyte breach_status() { return src.breach_status();}
            public short breach_count() { return src.breach_count();}
            public  com.company.demo.GroundControl. FENCE_BREACH?  breach_type() { return src.breach_type(); }
            public int breach_time() { return src.breach_time();}

        }

        public struct AHRS_dst_adapter : AHRS.DST_
        {
            AHRS dst;
            public AHRS_dst_adapter(AHRS dst) { this.dst = dst; }
            public void omegaIx(float src) { dst.omegaIx(src); }
            public void omegaIy(float src) { dst.omegaIy(src); }
            public void omegaIz(float src) { dst.omegaIz(src); }
            public void accel_weight(float src) { dst.accel_weight(src); }
            public void renorm_val(float src) { dst.renorm_val(src); }
            public void error_rp(float src) { dst.error_rp(src); }
            public void error_yaw(float src) { dst.error_yaw(src); }

        }

        public struct AHRS_src_adapter : AHRS.SRC_
        {
            AHRS src;
            public AHRS_src_adapter(AHRS src) { this.src = src; }
            public float omegaIx() { return src.omegaIx();}
            public float omegaIy() { return src.omegaIy();}
            public float omegaIz() { return src.omegaIz();}
            public float accel_weight() { return src.accel_weight();}
            public float renorm_val() { return src.renorm_val();}
            public float error_rp() { return src.error_rp();}
            public float error_yaw() { return src.error_yaw();}

        }

        public struct SIMSTATE_dst_adapter : SIMSTATE.DST_
        {
            SIMSTATE dst;
            public SIMSTATE_dst_adapter(SIMSTATE dst) { this.dst = dst; }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void xacc(float src) { dst.xacc(src); }
            public void yacc(float src) { dst.yacc(src); }
            public void zacc(float src) { dst.zacc(src); }
            public void xgyro(float src) { dst.xgyro(src); }
            public void ygyro(float src) { dst.ygyro(src); }
            public void zgyro(float src) { dst.zgyro(src); }
            public void lat(int src) { dst.lat(src); }
            public void lng(int src) { dst.lng(src); }

        }

        public struct SIMSTATE_src_adapter : SIMSTATE.SRC_
        {
            SIMSTATE src;
            public SIMSTATE_src_adapter(SIMSTATE src) { this.src = src; }
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}
            public float xacc() { return src.xacc();}
            public float yacc() { return src.yacc();}
            public float zacc() { return src.zacc();}
            public float xgyro() { return src.xgyro();}
            public float ygyro() { return src.ygyro();}
            public float zgyro() { return src.zgyro();}
            public int lat() { return src.lat();}
            public int lng() { return src.lng();}

        }

        public struct HWSTATUS_dst_adapter : HWSTATUS.DST_
        {
            HWSTATUS dst;
            public HWSTATUS_dst_adapter(HWSTATUS dst) { this.dst = dst; }
            public void Vcc(short src) { dst.Vcc(src); }
            public void I2Cerr(sbyte src) { dst.I2Cerr(src); }

        }

        public struct HWSTATUS_src_adapter : HWSTATUS.SRC_
        {
            HWSTATUS src;
            public HWSTATUS_src_adapter(HWSTATUS src) { this.src = src; }
            public short Vcc() { return src.Vcc();}
            public sbyte I2Cerr() { return src.I2Cerr();}

        }

        public struct RADIO_dst_adapter : RADIO.DST_
        {
            RADIO dst;
            public RADIO_dst_adapter(RADIO dst) { this.dst = dst; }
            public void rssi(sbyte src) { dst.rssi(src); }
            public void remrssi(sbyte src) { dst.remrssi(src); }
            public void txbuf(sbyte src) { dst.txbuf(src); }
            public void noise(sbyte src) { dst.noise(src); }
            public void remnoise(sbyte src) { dst.remnoise(src); }
            public void rxerrors(short src) { dst.rxerrors(src); }
            public void fixeD(short src) { dst.fixeD(src); }

        }

        public struct RADIO_src_adapter : RADIO.SRC_
        {
            RADIO src;
            public RADIO_src_adapter(RADIO src) { this.src = src; }
            public sbyte rssi() { return src.rssi();}
            public sbyte remrssi() { return src.remrssi();}
            public sbyte txbuf() { return src.txbuf();}
            public sbyte noise() { return src.noise();}
            public sbyte remnoise() { return src.remnoise();}
            public short rxerrors() { return src.rxerrors();}
            public short fixeD() { return src.fixeD();}

        }

        public struct LIMITS_STATUS_dst_adapter : LIMITS_STATUS.DST_
        {
            LIMITS_STATUS dst;
            public LIMITS_STATUS_dst_adapter(LIMITS_STATUS dst) { this.dst = dst; }
            public void limits_state(com.company.demo.GroundControl. LIMITS_STATE src) { dst.limits_state(src); }
            public void last_trigger(int src) { dst.last_trigger(src); }
            public void last_action(int src) { dst.last_action(src); }
            public void last_recovery(int src) { dst.last_recovery(src); }
            public void last_clear(int src) { dst.last_clear(src); }
            public void breach_count(short src) { dst.breach_count(src); }
            public void mods_enabled(com.company.demo.GroundControl. LIMIT_MODULE src) { dst.mods_enabled(src); }
            public void mods_required(com.company.demo.GroundControl. LIMIT_MODULE src) { dst.mods_required(src); }
            public void mods_triggered(com.company.demo.GroundControl. LIMIT_MODULE src) { dst.mods_triggered(src); }

        }

        public struct LIMITS_STATUS_src_adapter : LIMITS_STATUS.SRC_
        {
            LIMITS_STATUS src;
            public LIMITS_STATUS_src_adapter(LIMITS_STATUS src) { this.src = src; }
            public  com.company.demo.GroundControl. LIMITS_STATE?  limits_state() { return src.limits_state(); }
            public int last_trigger() { return src.last_trigger();}
            public int last_action() { return src.last_action();}
            public int last_recovery() { return src.last_recovery();}
            public int last_clear() { return src.last_clear();}
            public short breach_count() { return src.breach_count();}
            public  com.company.demo.GroundControl. LIMIT_MODULE?  mods_enabled() { return src.mods_enabled(); }
            public  com.company.demo.GroundControl. LIMIT_MODULE?  mods_required() { return src.mods_required(); }
            public  com.company.demo.GroundControl. LIMIT_MODULE?  mods_triggered() { return src.mods_triggered(); }

        }

        public struct WIND_dst_adapter : WIND.DST_
        {
            WIND dst;
            public WIND_dst_adapter(WIND dst) { this.dst = dst; }
            public void direction(float src) { dst.direction(src); }
            public void speed(float src) { dst.speed(src); }
            public void speed_z(float src) { dst.speed_z(src); }

        }

        public struct WIND_src_adapter : WIND.SRC_
        {
            WIND src;
            public WIND_src_adapter(WIND src) { this.src = src; }
            public float direction() { return src.direction();}
            public float speed() { return src.speed();}
            public float speed_z() { return src.speed_z();}

        }

        public struct DATA16_dst_adapter : DATA16.DST_
        {
            DATA16 dst;
            public DATA16_dst_adapter(DATA16 dst) { this.dst = dst; }
            public void typE(sbyte src) { dst.typE(src); }
            public void len(sbyte src) { dst.len(src); }
            public void daTa(DATA16.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < DATA16.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct DATA16_src_adapter : DATA16.SRC_
        {
            DATA16 src;
            public DATA16_src_adapter(DATA16 src) { this.src = src; }
            public sbyte typE() { return src.typE();}
            public sbyte len() { return src.len();}
            public void daTa(DATA16.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < DATA16.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DATA32_dst_adapter : DATA32.DST_
        {
            DATA32 dst;
            public DATA32_dst_adapter(DATA32 dst) { this.dst = dst; }
            public void typE(sbyte src) { dst.typE(src); }
            public void len(sbyte src) { dst.len(src); }
            public void daTa(DATA32.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < DATA32.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct DATA32_src_adapter : DATA32.SRC_
        {
            DATA32 src;
            public DATA32_src_adapter(DATA32 src) { this.src = src; }
            public sbyte typE() { return src.typE();}
            public sbyte len() { return src.len();}
            public void daTa(DATA32.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < DATA32.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DATA64_dst_adapter : DATA64.DST_
        {
            DATA64 dst;
            public DATA64_dst_adapter(DATA64 dst) { this.dst = dst; }
            public void typE(sbyte src) { dst.typE(src); }
            public void len(sbyte src) { dst.len(src); }
            public void daTa(DATA64.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < DATA64.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct DATA64_src_adapter : DATA64.SRC_
        {
            DATA64 src;
            public DATA64_src_adapter(DATA64 src) { this.src = src; }
            public sbyte typE() { return src.typE();}
            public sbyte len() { return src.len();}
            public void daTa(DATA64.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < DATA64.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DATA96_dst_adapter : DATA96.DST_
        {
            DATA96 dst;
            public DATA96_dst_adapter(DATA96 dst) { this.dst = dst; }
            public void typE(sbyte src) { dst.typE(src); }
            public void len(sbyte src) { dst.len(src); }
            public void daTa(DATA96.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < DATA96.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct DATA96_src_adapter : DATA96.SRC_
        {
            DATA96 src;
            public DATA96_src_adapter(DATA96 src) { this.src = src; }
            public sbyte typE() { return src.typE();}
            public sbyte len() { return src.len();}
            public void daTa(DATA96.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < DATA96.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct RANGEFINDER_dst_adapter : RANGEFINDER.DST_
        {
            RANGEFINDER dst;
            public RANGEFINDER_dst_adapter(RANGEFINDER dst) { this.dst = dst; }
            public void distance(float src) { dst.distance(src); }
            public void voltage(float src) { dst.voltage(src); }

        }

        public struct RANGEFINDER_src_adapter : RANGEFINDER.SRC_
        {
            RANGEFINDER src;
            public RANGEFINDER_src_adapter(RANGEFINDER src) { this.src = src; }
            public float distance() { return src.distance();}
            public float voltage() { return src.voltage();}

        }

        public struct AIRSPEED_AUTOCAL_dst_adapter : AIRSPEED_AUTOCAL.DST_
        {
            AIRSPEED_AUTOCAL dst;
            public AIRSPEED_AUTOCAL_dst_adapter(AIRSPEED_AUTOCAL dst) { this.dst = dst; }
            public void vx(float src) { dst.vx(src); }
            public void vy(float src) { dst.vy(src); }
            public void vz(float src) { dst.vz(src); }
            public void diff_pressure(float src) { dst.diff_pressure(src); }
            public void EAS2TAS(float src) { dst.EAS2TAS(src); }
            public void ratio(float src) { dst.ratio(src); }
            public void state_x(float src) { dst.state_x(src); }
            public void state_y(float src) { dst.state_y(src); }
            public void state_z(float src) { dst.state_z(src); }
            public void Pax(float src) { dst.Pax(src); }
            public void Pby(float src) { dst.Pby(src); }
            public void Pcz(float src) { dst.Pcz(src); }

        }

        public struct AIRSPEED_AUTOCAL_src_adapter : AIRSPEED_AUTOCAL.SRC_
        {
            AIRSPEED_AUTOCAL src;
            public AIRSPEED_AUTOCAL_src_adapter(AIRSPEED_AUTOCAL src) { this.src = src; }
            public float vx() { return src.vx();}
            public float vy() { return src.vy();}
            public float vz() { return src.vz();}
            public float diff_pressure() { return src.diff_pressure();}
            public float EAS2TAS() { return src.EAS2TAS();}
            public float ratio() { return src.ratio();}
            public float state_x() { return src.state_x();}
            public float state_y() { return src.state_y();}
            public float state_z() { return src.state_z();}
            public float Pax() { return src.Pax();}
            public float Pby() { return src.Pby();}
            public float Pcz() { return src.Pcz();}

        }

        public struct RALLY_POINT_dst_adapter : RALLY_POINT.DST_
        {
            RALLY_POINT dst;
            public RALLY_POINT_dst_adapter(RALLY_POINT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void idx(sbyte src) { dst.idx(src); }
            public void count(sbyte src) { dst.count(src); }
            public void lat(int src) { dst.lat(src); }
            public void lng(int src) { dst.lng(src); }
            public void alt(short src) { dst.alt(src); }
            public void break_alt(short src) { dst.break_alt(src); }
            public void land_dir(short src) { dst.land_dir(src); }
            public void flags(com.company.demo.GroundControl. RALLY_FLAGS src) { dst.flags(src); }

        }

        public struct RALLY_POINT_src_adapter : RALLY_POINT.SRC_
        {
            RALLY_POINT src;
            public RALLY_POINT_src_adapter(RALLY_POINT src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte idx() { return src.idx();}
            public sbyte count() { return src.count();}
            public int lat() { return src.lat();}
            public int lng() { return src.lng();}
            public short alt() { return src.alt();}
            public short break_alt() { return src.break_alt();}
            public short land_dir() { return src.land_dir();}
            public  com.company.demo.GroundControl. RALLY_FLAGS?  flags() { return src.flags(); }

        }

        public struct RALLY_FETCH_POINT_dst_adapter : RALLY_FETCH_POINT.DST_
        {
            RALLY_FETCH_POINT dst;
            public RALLY_FETCH_POINT_dst_adapter(RALLY_FETCH_POINT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void idx(sbyte src) { dst.idx(src); }

        }

        public struct RALLY_FETCH_POINT_src_adapter : RALLY_FETCH_POINT.SRC_
        {
            RALLY_FETCH_POINT src;
            public RALLY_FETCH_POINT_src_adapter(RALLY_FETCH_POINT src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte idx() { return src.idx();}

        }

        public struct COMPASSMOT_STATUS_dst_adapter : COMPASSMOT_STATUS.DST_
        {
            COMPASSMOT_STATUS dst;
            public COMPASSMOT_STATUS_dst_adapter(COMPASSMOT_STATUS dst) { this.dst = dst; }
            public void throttle(short src) { dst.throttle(src); }
            public void current(float src) { dst.current(src); }
            public void interference(short src) { dst.interference(src); }
            public void CompensationX(float src) { dst.CompensationX(src); }
            public void CompensationY(float src) { dst.CompensationY(src); }
            public void CompensationZ(float src) { dst.CompensationZ(src); }

        }

        public struct COMPASSMOT_STATUS_src_adapter : COMPASSMOT_STATUS.SRC_
        {
            COMPASSMOT_STATUS src;
            public COMPASSMOT_STATUS_src_adapter(COMPASSMOT_STATUS src) { this.src = src; }
            public short throttle() { return src.throttle();}
            public float current() { return src.current();}
            public short interference() { return src.interference();}
            public float CompensationX() { return src.CompensationX();}
            public float CompensationY() { return src.CompensationY();}
            public float CompensationZ() { return src.CompensationZ();}

        }

        public struct AHRS2_dst_adapter : AHRS2.DST_
        {
            AHRS2 dst;
            public AHRS2_dst_adapter(AHRS2 dst) { this.dst = dst; }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void altitude(float src) { dst.altitude(src); }
            public void lat(int src) { dst.lat(src); }
            public void lng(int src) { dst.lng(src); }

        }

        public struct AHRS2_src_adapter : AHRS2.SRC_
        {
            AHRS2 src;
            public AHRS2_src_adapter(AHRS2 src) { this.src = src; }
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}
            public float altitude() { return src.altitude();}
            public int lat() { return src.lat();}
            public int lng() { return src.lng();}

        }

        public struct CAMERA_STATUS_dst_adapter : CAMERA_STATUS.DST_
        {
            CAMERA_STATUS dst;
            public CAMERA_STATUS_dst_adapter(CAMERA_STATUS dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void cam_idx(sbyte src) { dst.cam_idx(src); }
            public void img_idx(short src) { dst.img_idx(src); }
            public void event_id(com.company.demo.GroundControl. CAMERA_STATUS_TYPES src) { dst.event_id(src); }
            public void p1(float src) { dst.p1(src); }
            public void p2(float src) { dst.p2(src); }
            public void p3(float src) { dst.p3(src); }
            public void p4(float src) { dst.p4(src); }

        }

        public struct CAMERA_STATUS_src_adapter : CAMERA_STATUS.SRC_
        {
            CAMERA_STATUS src;
            public CAMERA_STATUS_src_adapter(CAMERA_STATUS src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte target_system() { return src.target_system();}
            public sbyte cam_idx() { return src.cam_idx();}
            public short img_idx() { return src.img_idx();}
            public  com.company.demo.GroundControl. CAMERA_STATUS_TYPES?  event_id() { return src.event_id(); }
            public float p1() { return src.p1();}
            public float p2() { return src.p2();}
            public float p3() { return src.p3();}
            public float p4() { return src.p4();}

        }

        public struct CAMERA_FEEDBACK_dst_adapter : CAMERA_FEEDBACK.DST_
        {
            CAMERA_FEEDBACK dst;
            public CAMERA_FEEDBACK_dst_adapter(CAMERA_FEEDBACK dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void cam_idx(sbyte src) { dst.cam_idx(src); }
            public void img_idx(short src) { dst.img_idx(src); }
            public void lat(int src) { dst.lat(src); }
            public void lng(int src) { dst.lng(src); }
            public void alt_msl(float src) { dst.alt_msl(src); }
            public void alt_rel(float src) { dst.alt_rel(src); }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void foc_len(float src) { dst.foc_len(src); }
            public void flags(com.company.demo.GroundControl. CAMERA_FEEDBACK_FLAGS src) { dst.flags(src); }

        }

        public struct CAMERA_FEEDBACK_src_adapter : CAMERA_FEEDBACK.SRC_
        {
            CAMERA_FEEDBACK src;
            public CAMERA_FEEDBACK_src_adapter(CAMERA_FEEDBACK src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public sbyte target_system() { return src.target_system();}
            public sbyte cam_idx() { return src.cam_idx();}
            public short img_idx() { return src.img_idx();}
            public int lat() { return src.lat();}
            public int lng() { return src.lng();}
            public float alt_msl() { return src.alt_msl();}
            public float alt_rel() { return src.alt_rel();}
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}
            public float foc_len() { return src.foc_len();}
            public  com.company.demo.GroundControl. CAMERA_FEEDBACK_FLAGS?  flags() { return src.flags(); }

        }

        public struct BATTERY2_dst_adapter : BATTERY2.DST_
        {
            BATTERY2 dst;
            public BATTERY2_dst_adapter(BATTERY2 dst) { this.dst = dst; }
            public void voltage(short src) { dst.voltage(src); }
            public void current_battery(short src) { dst.current_battery(src); }

        }

        public struct BATTERY2_src_adapter : BATTERY2.SRC_
        {
            BATTERY2 src;
            public BATTERY2_src_adapter(BATTERY2 src) { this.src = src; }
            public short voltage() { return src.voltage();}
            public short current_battery() { return src.current_battery();}

        }

        public struct AHRS3_dst_adapter : AHRS3.DST_
        {
            AHRS3 dst;
            public AHRS3_dst_adapter(AHRS3 dst) { this.dst = dst; }
            public void roll(float src) { dst.roll(src); }
            public void pitch(float src) { dst.pitch(src); }
            public void yaw(float src) { dst.yaw(src); }
            public void altitude(float src) { dst.altitude(src); }
            public void lat(int src) { dst.lat(src); }
            public void lng(int src) { dst.lng(src); }
            public void v1(float src) { dst.v1(src); }
            public void v2(float src) { dst.v2(src); }
            public void v3(float src) { dst.v3(src); }
            public void v4(float src) { dst.v4(src); }

        }

        public struct AHRS3_src_adapter : AHRS3.SRC_
        {
            AHRS3 src;
            public AHRS3_src_adapter(AHRS3 src) { this.src = src; }
            public float roll() { return src.roll();}
            public float pitch() { return src.pitch();}
            public float yaw() { return src.yaw();}
            public float altitude() { return src.altitude();}
            public int lat() { return src.lat();}
            public int lng() { return src.lng();}
            public float v1() { return src.v1();}
            public float v2() { return src.v2();}
            public float v3() { return src.v3();}
            public float v4() { return src.v4();}

        }

        public struct AUTOPILOT_VERSION_REQUEST_dst_adapter : AUTOPILOT_VERSION_REQUEST.DST_
        {
            AUTOPILOT_VERSION_REQUEST dst;
            public AUTOPILOT_VERSION_REQUEST_dst_adapter(AUTOPILOT_VERSION_REQUEST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }

        }

        public struct AUTOPILOT_VERSION_REQUEST_src_adapter : AUTOPILOT_VERSION_REQUEST.SRC_
        {
            AUTOPILOT_VERSION_REQUEST src;
            public AUTOPILOT_VERSION_REQUEST_src_adapter(AUTOPILOT_VERSION_REQUEST src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}

        }

        public struct REMOTE_LOG_DATA_BLOCK_dst_adapter : REMOTE_LOG_DATA_BLOCK.DST_
        {
            REMOTE_LOG_DATA_BLOCK dst;
            public REMOTE_LOG_DATA_BLOCK_dst_adapter(REMOTE_LOG_DATA_BLOCK dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seqno(com.company.demo.GroundControl. MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS src) { dst.seqno(src); }
            public void daTa(REMOTE_LOG_DATA_BLOCK.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < REMOTE_LOG_DATA_BLOCK.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct REMOTE_LOG_DATA_BLOCK_src_adapter : REMOTE_LOG_DATA_BLOCK.SRC_
        {
            REMOTE_LOG_DATA_BLOCK src;
            public REMOTE_LOG_DATA_BLOCK_src_adapter(REMOTE_LOG_DATA_BLOCK src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public  com.company.demo.GroundControl. MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS?  seqno() { return src.seqno(); }
            public void daTa(REMOTE_LOG_DATA_BLOCK.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < REMOTE_LOG_DATA_BLOCK.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct REMOTE_LOG_BLOCK_STATUS_dst_adapter : REMOTE_LOG_BLOCK_STATUS.DST_
        {
            REMOTE_LOG_BLOCK_STATUS dst;
            public REMOTE_LOG_BLOCK_STATUS_dst_adapter(REMOTE_LOG_BLOCK_STATUS dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void seqno(int src) { dst.seqno(src); }
            public void status(com.company.demo.GroundControl. MAV_REMOTE_LOG_DATA_BLOCK_STATUSES src) { dst.status(src); }

        }

        public struct REMOTE_LOG_BLOCK_STATUS_src_adapter : REMOTE_LOG_BLOCK_STATUS.SRC_
        {
            REMOTE_LOG_BLOCK_STATUS src;
            public REMOTE_LOG_BLOCK_STATUS_src_adapter(REMOTE_LOG_BLOCK_STATUS src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int seqno() { return src.seqno();}
            public  com.company.demo.GroundControl. MAV_REMOTE_LOG_DATA_BLOCK_STATUSES?  status() { return src.status(); }

        }

        public struct LED_CONTROL_dst_adapter : LED_CONTROL.DST_
        {
            LED_CONTROL dst;
            public LED_CONTROL_dst_adapter(LED_CONTROL dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void instance(sbyte src) { dst.instance(src); }
            public void pattern(sbyte src) { dst.pattern(src); }
            public void custom_len(sbyte src) { dst.custom_len(src); }
            public void custom_bytes(LED_CONTROL.custom_bytes_ src)
            {
                var item = dst.custom_bytes();
                for(int i = 0; i < LED_CONTROL.custom_bytes_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct LED_CONTROL_src_adapter : LED_CONTROL.SRC_
        {
            LED_CONTROL src;
            public LED_CONTROL_src_adapter(LED_CONTROL src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public sbyte instance() { return src.instance();}
            public sbyte pattern() { return src.pattern();}
            public sbyte custom_len() { return src.custom_len();}
            public void custom_bytes(LED_CONTROL.custom_bytes_ dst)
            {
                var item = src.custom_bytes();
                for(int i = 0; i < LED_CONTROL.custom_bytes_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct MAG_CAL_PROGRESS_dst_adapter : MAG_CAL_PROGRESS.DST_
        {
            MAG_CAL_PROGRESS dst;
            public MAG_CAL_PROGRESS_dst_adapter(MAG_CAL_PROGRESS dst) { this.dst = dst; }
            public void compass_id(sbyte src) { dst.compass_id(src); }
            public void cal_mask(sbyte src) { dst.cal_mask(src); }
            public void cal_status(com.company.demo.GroundControl. MAG_CAL_STATUS src) { dst.cal_status(src); }
            public void attempt(sbyte src) { dst.attempt(src); }
            public void completion_pct(sbyte src) { dst.completion_pct(src); }
            public void completion_mask(MAG_CAL_PROGRESS.completion_mask_ src)
            {
                var item = dst.completion_mask();
                for(int i = 0; i < MAG_CAL_PROGRESS.completion_mask_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void direction_x(float src) { dst.direction_x(src); }
            public void direction_y(float src) { dst.direction_y(src); }
            public void direction_z(float src) { dst.direction_z(src); }

        }

        public struct MAG_CAL_PROGRESS_src_adapter : MAG_CAL_PROGRESS.SRC_
        {
            MAG_CAL_PROGRESS src;
            public MAG_CAL_PROGRESS_src_adapter(MAG_CAL_PROGRESS src) { this.src = src; }
            public sbyte compass_id() { return src.compass_id();}
            public sbyte cal_mask() { return src.cal_mask();}
            public  com.company.demo.GroundControl. MAG_CAL_STATUS?  cal_status() { return src.cal_status(); }
            public sbyte attempt() { return src.attempt();}
            public sbyte completion_pct() { return src.completion_pct();}
            public void completion_mask(MAG_CAL_PROGRESS.completion_mask_ dst)
            {
                var item = src.completion_mask();
                for(int i = 0; i < MAG_CAL_PROGRESS.completion_mask_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float direction_x() { return src.direction_x();}
            public float direction_y() { return src.direction_y();}
            public float direction_z() { return src.direction_z();}

        }

        public struct MAG_CAL_REPORT_dst_adapter : MAG_CAL_REPORT.DST_
        {
            MAG_CAL_REPORT dst;
            public MAG_CAL_REPORT_dst_adapter(MAG_CAL_REPORT dst) { this.dst = dst; }
            public void compass_id(sbyte src) { dst.compass_id(src); }
            public void cal_mask(sbyte src) { dst.cal_mask(src); }
            public void cal_status(com.company.demo.GroundControl. MAG_CAL_STATUS src) { dst.cal_status(src); }
            public void autosaved(sbyte src) { dst.autosaved(src); }
            public void fitness(float src) { dst.fitness(src); }
            public void ofs_x(float src) { dst.ofs_x(src); }
            public void ofs_y(float src) { dst.ofs_y(src); }
            public void ofs_z(float src) { dst.ofs_z(src); }
            public void diag_x(float src) { dst.diag_x(src); }
            public void diag_y(float src) { dst.diag_y(src); }
            public void diag_z(float src) { dst.diag_z(src); }
            public void offdiag_x(float src) { dst.offdiag_x(src); }
            public void offdiag_y(float src) { dst.offdiag_y(src); }
            public void offdiag_z(float src) { dst.offdiag_z(src); }

        }

        public struct MAG_CAL_REPORT_src_adapter : MAG_CAL_REPORT.SRC_
        {
            MAG_CAL_REPORT src;
            public MAG_CAL_REPORT_src_adapter(MAG_CAL_REPORT src) { this.src = src; }
            public sbyte compass_id() { return src.compass_id();}
            public sbyte cal_mask() { return src.cal_mask();}
            public  com.company.demo.GroundControl. MAG_CAL_STATUS?  cal_status() { return src.cal_status(); }
            public sbyte autosaved() { return src.autosaved();}
            public float fitness() { return src.fitness();}
            public float ofs_x() { return src.ofs_x();}
            public float ofs_y() { return src.ofs_y();}
            public float ofs_z() { return src.ofs_z();}
            public float diag_x() { return src.diag_x();}
            public float diag_y() { return src.diag_y();}
            public float diag_z() { return src.diag_z();}
            public float offdiag_x() { return src.offdiag_x();}
            public float offdiag_y() { return src.offdiag_y();}
            public float offdiag_z() { return src.offdiag_z();}

        }

        public struct EKF_STATUS_REPORT_dst_adapter : EKF_STATUS_REPORT.DST_
        {
            EKF_STATUS_REPORT dst;
            public EKF_STATUS_REPORT_dst_adapter(EKF_STATUS_REPORT dst) { this.dst = dst; }
            public void flags(com.company.demo.GroundControl. EKF_STATUS_FLAGS src) { dst.flags(src); }
            public void velocity_variance(float src) { dst.velocity_variance(src); }
            public void pos_horiz_variance(float src) { dst.pos_horiz_variance(src); }
            public void pos_vert_variance(float src) { dst.pos_vert_variance(src); }
            public void compass_variance(float src) { dst.compass_variance(src); }
            public void terrain_alt_variance(float src) { dst.terrain_alt_variance(src); }

        }

        public struct EKF_STATUS_REPORT_src_adapter : EKF_STATUS_REPORT.SRC_
        {
            EKF_STATUS_REPORT src;
            public EKF_STATUS_REPORT_src_adapter(EKF_STATUS_REPORT src) { this.src = src; }
            public  com.company.demo.GroundControl. EKF_STATUS_FLAGS?  flags() { return src.flags(); }
            public float velocity_variance() { return src.velocity_variance();}
            public float pos_horiz_variance() { return src.pos_horiz_variance();}
            public float pos_vert_variance() { return src.pos_vert_variance();}
            public float compass_variance() { return src.compass_variance();}
            public float terrain_alt_variance() { return src.terrain_alt_variance();}

        }

        public struct PID_TUNING_dst_adapter : PID_TUNING.DST_
        {
            PID_TUNING dst;
            public PID_TUNING_dst_adapter(PID_TUNING dst) { this.dst = dst; }
            public void axis(com.company.demo.GroundControl. PID_TUNING_AXIS src) { dst.axis(src); }
            public void desired(float src) { dst.desired(src); }
            public void achieved(float src) { dst.achieved(src); }
            public void FF(float src) { dst.FF(src); }
            public void P(float src) { dst.P(src); }
            public void I(float src) { dst.I(src); }
            public void D(float src) { dst.D(src); }

        }

        public struct PID_TUNING_src_adapter : PID_TUNING.SRC_
        {
            PID_TUNING src;
            public PID_TUNING_src_adapter(PID_TUNING src) { this.src = src; }
            public  com.company.demo.GroundControl. PID_TUNING_AXIS?  axis() { return src.axis(); }
            public float desired() { return src.desired();}
            public float achieved() { return src.achieved();}
            public float FF() { return src.FF();}
            public float P() { return src.P();}
            public float I() { return src.I();}
            public float D() { return src.D();}

        }

        public struct GIMBAL_REPORT_dst_adapter : GIMBAL_REPORT.DST_
        {
            GIMBAL_REPORT dst;
            public GIMBAL_REPORT_dst_adapter(GIMBAL_REPORT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void delta_time(float src) { dst.delta_time(src); }
            public void delta_angle_x(float src) { dst.delta_angle_x(src); }
            public void delta_angle_y(float src) { dst.delta_angle_y(src); }
            public void delta_angle_z(float src) { dst.delta_angle_z(src); }
            public void delta_velocity_x(float src) { dst.delta_velocity_x(src); }
            public void delta_velocity_y(float src) { dst.delta_velocity_y(src); }
            public void delta_velocity_z(float src) { dst.delta_velocity_z(src); }
            public void joint_roll(float src) { dst.joint_roll(src); }
            public void joint_el(float src) { dst.joint_el(src); }
            public void joint_az(float src) { dst.joint_az(src); }

        }

        public struct GIMBAL_REPORT_src_adapter : GIMBAL_REPORT.SRC_
        {
            GIMBAL_REPORT src;
            public GIMBAL_REPORT_src_adapter(GIMBAL_REPORT src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public float delta_time() { return src.delta_time();}
            public float delta_angle_x() { return src.delta_angle_x();}
            public float delta_angle_y() { return src.delta_angle_y();}
            public float delta_angle_z() { return src.delta_angle_z();}
            public float delta_velocity_x() { return src.delta_velocity_x();}
            public float delta_velocity_y() { return src.delta_velocity_y();}
            public float delta_velocity_z() { return src.delta_velocity_z();}
            public float joint_roll() { return src.joint_roll();}
            public float joint_el() { return src.joint_el();}
            public float joint_az() { return src.joint_az();}

        }

        public struct GIMBAL_CONTROL_dst_adapter : GIMBAL_CONTROL.DST_
        {
            GIMBAL_CONTROL dst;
            public GIMBAL_CONTROL_dst_adapter(GIMBAL_CONTROL dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void demanded_rate_x(float src) { dst.demanded_rate_x(src); }
            public void demanded_rate_y(float src) { dst.demanded_rate_y(src); }
            public void demanded_rate_z(float src) { dst.demanded_rate_z(src); }

        }

        public struct GIMBAL_CONTROL_src_adapter : GIMBAL_CONTROL.SRC_
        {
            GIMBAL_CONTROL src;
            public GIMBAL_CONTROL_src_adapter(GIMBAL_CONTROL src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public float demanded_rate_x() { return src.demanded_rate_x();}
            public float demanded_rate_y() { return src.demanded_rate_y();}
            public float demanded_rate_z() { return src.demanded_rate_z();}

        }

        public struct GIMBAL_TORQUE_CMD_REPORT_dst_adapter : GIMBAL_TORQUE_CMD_REPORT.DST_
        {
            GIMBAL_TORQUE_CMD_REPORT dst;
            public GIMBAL_TORQUE_CMD_REPORT_dst_adapter(GIMBAL_TORQUE_CMD_REPORT dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void rl_torque_cmd(short src) { dst.rl_torque_cmd(src); }
            public void el_torque_cmd(short src) { dst.el_torque_cmd(src); }
            public void az_torque_cmd(short src) { dst.az_torque_cmd(src); }

        }

        public struct GIMBAL_TORQUE_CMD_REPORT_src_adapter : GIMBAL_TORQUE_CMD_REPORT.SRC_
        {
            GIMBAL_TORQUE_CMD_REPORT src;
            public GIMBAL_TORQUE_CMD_REPORT_src_adapter(GIMBAL_TORQUE_CMD_REPORT src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public short rl_torque_cmd() { return src.rl_torque_cmd();}
            public short el_torque_cmd() { return src.el_torque_cmd();}
            public short az_torque_cmd() { return src.az_torque_cmd();}

        }

        public struct GOPRO_HEARTBEAT_dst_adapter : GOPRO_HEARTBEAT.DST_
        {
            GOPRO_HEARTBEAT dst;
            public GOPRO_HEARTBEAT_dst_adapter(GOPRO_HEARTBEAT dst) { this.dst = dst; }
            public void status(com.company.demo.GroundControl. GOPRO_HEARTBEAT_STATUS src) { dst.status(src); }
            public void capture_mode(com.company.demo.GroundControl. GOPRO_CAPTURE_MODE src) { dst.capture_mode(src); }
            public void flags(com.company.demo.GroundControl. GOPRO_HEARTBEAT_FLAGS src) { dst.flags(src); }

        }

        public struct GOPRO_HEARTBEAT_src_adapter : GOPRO_HEARTBEAT.SRC_
        {
            GOPRO_HEARTBEAT src;
            public GOPRO_HEARTBEAT_src_adapter(GOPRO_HEARTBEAT src) { this.src = src; }
            public  com.company.demo.GroundControl. GOPRO_HEARTBEAT_STATUS?  status() { return src.status(); }
            public  com.company.demo.GroundControl. GOPRO_CAPTURE_MODE?  capture_mode() { return src.capture_mode(); }
            public  com.company.demo.GroundControl. GOPRO_HEARTBEAT_FLAGS?  flags() { return src.flags(); }

        }

        public struct GOPRO_GET_REQUEST_dst_adapter : GOPRO_GET_REQUEST.DST_
        {
            GOPRO_GET_REQUEST dst;
            public GOPRO_GET_REQUEST_dst_adapter(GOPRO_GET_REQUEST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void cmd_id(com.company.demo.GroundControl. GOPRO_COMMAND src) { dst.cmd_id(src); }

        }

        public struct GOPRO_GET_REQUEST_src_adapter : GOPRO_GET_REQUEST.SRC_
        {
            GOPRO_GET_REQUEST src;
            public GOPRO_GET_REQUEST_src_adapter(GOPRO_GET_REQUEST src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public  com.company.demo.GroundControl. GOPRO_COMMAND?  cmd_id() { return src.cmd_id(); }

        }

        public struct GOPRO_GET_RESPONSE_dst_adapter : GOPRO_GET_RESPONSE.DST_
        {
            GOPRO_GET_RESPONSE dst;
            public GOPRO_GET_RESPONSE_dst_adapter(GOPRO_GET_RESPONSE dst) { this.dst = dst; }
            public void cmd_id(com.company.demo.GroundControl. GOPRO_COMMAND src) { dst.cmd_id(src); }
            public void status(com.company.demo.GroundControl. GOPRO_REQUEST_STATUS src) { dst.status(src); }
            public void value(GOPRO_GET_RESPONSE.value_ src)
            {
                var item = dst.value();
                for(int i = 0; i < GOPRO_GET_RESPONSE.value_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct GOPRO_GET_RESPONSE_src_adapter : GOPRO_GET_RESPONSE.SRC_
        {
            GOPRO_GET_RESPONSE src;
            public GOPRO_GET_RESPONSE_src_adapter(GOPRO_GET_RESPONSE src) { this.src = src; }
            public  com.company.demo.GroundControl. GOPRO_COMMAND?  cmd_id() { return src.cmd_id(); }
            public  com.company.demo.GroundControl. GOPRO_REQUEST_STATUS?  status() { return src.status(); }
            public void value(GOPRO_GET_RESPONSE.value_ dst)
            {
                var item = src.value();
                for(int i = 0; i < GOPRO_GET_RESPONSE.value_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct GOPRO_SET_REQUEST_dst_adapter : GOPRO_SET_REQUEST.DST_
        {
            GOPRO_SET_REQUEST dst;
            public GOPRO_SET_REQUEST_dst_adapter(GOPRO_SET_REQUEST dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void cmd_id(com.company.demo.GroundControl. GOPRO_COMMAND src) { dst.cmd_id(src); }
            public void value(GOPRO_SET_REQUEST.value_ src)
            {
                var item = dst.value();
                for(int i = 0; i < GOPRO_SET_REQUEST.value_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct GOPRO_SET_REQUEST_src_adapter : GOPRO_SET_REQUEST.SRC_
        {
            GOPRO_SET_REQUEST src;
            public GOPRO_SET_REQUEST_src_adapter(GOPRO_SET_REQUEST src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public  com.company.demo.GroundControl. GOPRO_COMMAND?  cmd_id() { return src.cmd_id(); }
            public void value(GOPRO_SET_REQUEST.value_ dst)
            {
                var item = src.value();
                for(int i = 0; i < GOPRO_SET_REQUEST.value_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct GOPRO_SET_RESPONSE_dst_adapter : GOPRO_SET_RESPONSE.DST_
        {
            GOPRO_SET_RESPONSE dst;
            public GOPRO_SET_RESPONSE_dst_adapter(GOPRO_SET_RESPONSE dst) { this.dst = dst; }
            public void cmd_id(com.company.demo.GroundControl. GOPRO_COMMAND src) { dst.cmd_id(src); }
            public void status(com.company.demo.GroundControl. GOPRO_REQUEST_STATUS src) { dst.status(src); }

        }

        public struct GOPRO_SET_RESPONSE_src_adapter : GOPRO_SET_RESPONSE.SRC_
        {
            GOPRO_SET_RESPONSE src;
            public GOPRO_SET_RESPONSE_src_adapter(GOPRO_SET_RESPONSE src) { this.src = src; }
            public  com.company.demo.GroundControl. GOPRO_COMMAND?  cmd_id() { return src.cmd_id(); }
            public  com.company.demo.GroundControl. GOPRO_REQUEST_STATUS?  status() { return src.status(); }

        }

        public struct RPM_dst_adapter : RPM.DST_
        {
            RPM dst;
            public RPM_dst_adapter(RPM dst) { this.dst = dst; }
            public void rpm1(float src) { dst.rpm1(src); }
            public void rpm2(float src) { dst.rpm2(src); }

        }

        public struct RPM_src_adapter : RPM.SRC_
        {
            RPM src;
            public RPM_src_adapter(RPM src) { this.src = src; }
            public float rpm1() { return src.rpm1();}
            public float rpm2() { return src.rpm2();}

        }

        public struct DEVICE_OP_READ_dst_adapter : DEVICE_OP_READ.DST_
        {
            DEVICE_OP_READ dst;
            public DEVICE_OP_READ_dst_adapter(DEVICE_OP_READ dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void request_id(int src) { dst.request_id(src); }
            public void bustype(com.company.demo.GroundControl. DEVICE_OP_BUSTYPE src) { dst.bustype(src); }
            public void bus(sbyte src) { dst.bus(src); }
            public void address(sbyte src) { dst.address(src); }
            public void busname(DEVICE_OP_READ.busname_ src)
            {
                var item = dst.busname(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void regstart(sbyte src) { dst.regstart(src); }
            public void count(sbyte src) { dst.count(src); }

        }

        public struct DEVICE_OP_READ_src_adapter : DEVICE_OP_READ.SRC_
        {
            DEVICE_OP_READ src;
            public DEVICE_OP_READ_src_adapter(DEVICE_OP_READ src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int request_id() { return src.request_id();}
            public  com.company.demo.GroundControl. DEVICE_OP_BUSTYPE?  bustype() { return src.bustype(); }
            public sbyte bus() { return src.bus();}
            public sbyte address() { return src.address();}
            public int busname_exist() { return src.busname()?.len() ?? 0 ;}
            public void busname(DEVICE_OP_READ.busname_ dst)
            {
                var item = src.busname();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public sbyte regstart() { return src.regstart();}
            public sbyte count() { return src.count();}

        }

        public struct DEVICE_OP_READ_REPLY_dst_adapter : DEVICE_OP_READ_REPLY.DST_
        {
            DEVICE_OP_READ_REPLY dst;
            public DEVICE_OP_READ_REPLY_dst_adapter(DEVICE_OP_READ_REPLY dst) { this.dst = dst; }
            public void request_id(int src) { dst.request_id(src); }
            public void result(sbyte src) { dst.result(src); }
            public void regstart(sbyte src) { dst.regstart(src); }
            public void count(sbyte src) { dst.count(src); }
            public void daTa(DEVICE_OP_READ_REPLY.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < DEVICE_OP_READ_REPLY.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct DEVICE_OP_READ_REPLY_src_adapter : DEVICE_OP_READ_REPLY.SRC_
        {
            DEVICE_OP_READ_REPLY src;
            public DEVICE_OP_READ_REPLY_src_adapter(DEVICE_OP_READ_REPLY src) { this.src = src; }
            public int request_id() { return src.request_id();}
            public sbyte result() { return src.result();}
            public sbyte regstart() { return src.regstart();}
            public sbyte count() { return src.count();}
            public void daTa(DEVICE_OP_READ_REPLY.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < DEVICE_OP_READ_REPLY.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DEVICE_OP_WRITE_dst_adapter : DEVICE_OP_WRITE.DST_
        {
            DEVICE_OP_WRITE dst;
            public DEVICE_OP_WRITE_dst_adapter(DEVICE_OP_WRITE dst) { this.dst = dst; }
            public void target_system(sbyte src) { dst.target_system(src); }
            public void target_component(sbyte src) { dst.target_component(src); }
            public void request_id(int src) { dst.request_id(src); }
            public void bustype(com.company.demo.GroundControl. DEVICE_OP_BUSTYPE src) { dst.bustype(src); }
            public void bus(sbyte src) { dst.bus(src); }
            public void address(sbyte src) { dst.address(src); }
            public void busname(DEVICE_OP_WRITE.busname_ src)
            {
                var item = dst.busname(src.len());
                for(int i = 0; i < item.len(); i++)
                    item.set(src.get(i), i);
            }
            public void regstart(sbyte src) { dst.regstart(src); }
            public void count(sbyte src) { dst.count(src); }
            public void daTa(DEVICE_OP_WRITE.daTa_ src)
            {
                var item = dst.daTa();
                for(int i = 0; i < DEVICE_OP_WRITE.daTa_.item_len ; i++)
                    item.set(src.get(i), i);
            }

        }

        public struct DEVICE_OP_WRITE_src_adapter : DEVICE_OP_WRITE.SRC_
        {
            DEVICE_OP_WRITE src;
            public DEVICE_OP_WRITE_src_adapter(DEVICE_OP_WRITE src) { this.src = src; }
            public sbyte target_system() { return src.target_system();}
            public sbyte target_component() { return src.target_component();}
            public int request_id() { return src.request_id();}
            public  com.company.demo.GroundControl. DEVICE_OP_BUSTYPE?  bustype() { return src.bustype(); }
            public sbyte bus() { return src.bus();}
            public sbyte address() { return src.address();}
            public int busname_exist() { return src.busname()?.len() ?? 0 ;}
            public void busname(DEVICE_OP_WRITE.busname_ dst)
            {
                var item = src.busname();
                if(item.HasValue)
                    for(int i = 0; i < item.Value.len(); i++)
                        dst.set(item.Value.get(i), i);
            }
            public sbyte regstart() { return src.regstart();}
            public sbyte count() { return src.count();}
            public void daTa(DEVICE_OP_WRITE.daTa_ dst)
            {
                var item = src.daTa();
                for(int i = 0; i < DEVICE_OP_WRITE.daTa_.item_len ; i++)
                    dst.set(item.get(i), i);
            }

        }

        public struct DEVICE_OP_WRITE_REPLY_dst_adapter : DEVICE_OP_WRITE_REPLY.DST_
        {
            DEVICE_OP_WRITE_REPLY dst;
            public DEVICE_OP_WRITE_REPLY_dst_adapter(DEVICE_OP_WRITE_REPLY dst) { this.dst = dst; }
            public void request_id(int src) { dst.request_id(src); }
            public void result(sbyte src) { dst.result(src); }

        }

        public struct DEVICE_OP_WRITE_REPLY_src_adapter : DEVICE_OP_WRITE_REPLY.SRC_
        {
            DEVICE_OP_WRITE_REPLY src;
            public DEVICE_OP_WRITE_REPLY_src_adapter(DEVICE_OP_WRITE_REPLY src) { this.src = src; }
            public int request_id() { return src.request_id();}
            public sbyte result() { return src.result();}

        }

        public struct ADAP_TUNING_dst_adapter : ADAP_TUNING.DST_
        {
            ADAP_TUNING dst;
            public ADAP_TUNING_dst_adapter(ADAP_TUNING dst) { this.dst = dst; }
            public void axis(com.company.demo.GroundControl. PID_TUNING_AXIS src) { dst.axis(src); }
            public void desired(float src) { dst.desired(src); }
            public void achieved(float src) { dst.achieved(src); }
            public void error(float src) { dst.error(src); }
            public void theta(float src) { dst.theta(src); }
            public void omega(float src) { dst.omega(src); }
            public void sigma(float src) { dst.sigma(src); }
            public void theta_dot(float src) { dst.theta_dot(src); }
            public void omega_dot(float src) { dst.omega_dot(src); }
            public void sigma_dot(float src) { dst.sigma_dot(src); }
            public void f(float src) { dst.f(src); }
            public void f_dot(float src) { dst.f_dot(src); }
            public void u(float src) { dst.u(src); }

        }

        public struct ADAP_TUNING_src_adapter : ADAP_TUNING.SRC_
        {
            ADAP_TUNING src;
            public ADAP_TUNING_src_adapter(ADAP_TUNING src) { this.src = src; }
            public  com.company.demo.GroundControl. PID_TUNING_AXIS?  axis() { return src.axis(); }
            public float desired() { return src.desired();}
            public float achieved() { return src.achieved();}
            public float error() { return src.error();}
            public float theta() { return src.theta();}
            public float omega() { return src.omega();}
            public float sigma() { return src.sigma();}
            public float theta_dot() { return src.theta_dot();}
            public float omega_dot() { return src.omega_dot();}
            public float sigma_dot() { return src.sigma_dot();}
            public float f() { return src.f();}
            public float f_dot() { return src.f_dot();}
            public float u() { return src.u();}

        }

        public struct VISION_POSITION_DELTA_dst_adapter : VISION_POSITION_DELTA.DST_
        {
            VISION_POSITION_DELTA dst;
            public VISION_POSITION_DELTA_dst_adapter(VISION_POSITION_DELTA dst) { this.dst = dst; }
            public void time_usec(long src) { dst.time_usec(src); }
            public void time_delta_usec(long src) { dst.time_delta_usec(src); }
            public void angle_delta(VISION_POSITION_DELTA.angle_delta_ src)
            {
                var item = dst.angle_delta();
                for(int i = 0; i < VISION_POSITION_DELTA.angle_delta_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void position_delta(VISION_POSITION_DELTA.position_delta_ src)
            {
                var item = dst.position_delta();
                for(int i = 0; i < VISION_POSITION_DELTA.position_delta_.item_len ; i++)
                    item.set(src.get(i), i);
            }
            public void confidence(float src) { dst.confidence(src); }

        }

        public struct VISION_POSITION_DELTA_src_adapter : VISION_POSITION_DELTA.SRC_
        {
            VISION_POSITION_DELTA src;
            public VISION_POSITION_DELTA_src_adapter(VISION_POSITION_DELTA src) { this.src = src; }
            public long time_usec() { return src.time_usec();}
            public long time_delta_usec() { return src.time_delta_usec();}
            public void angle_delta(VISION_POSITION_DELTA.angle_delta_ dst)
            {
                var item = src.angle_delta();
                for(int i = 0; i < VISION_POSITION_DELTA.angle_delta_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public void position_delta(VISION_POSITION_DELTA.position_delta_ dst)
            {
                var item = src.position_delta();
                for(int i = 0; i < VISION_POSITION_DELTA.position_delta_.item_len ; i++)
                    dst.set(item.get(i), i);
            }
            public float confidence() { return src.confidence();}

        }



        class TestChannel : Stream
        {
            private static  readonly String[] strings = new String[] { "nviwLkyrhzapfsfvtclhvnarCujfvjKdyncspanfVmhprenNsobwcPlmltuqzCbyvjl"};
            public static String str(int index, int len)
            {
                var ret = strings[  index % strings.Length ];
                return len < ret.Length ? ret.Substring(0, len) : ret;
            }
            public override void Flush() { }
            public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }
            public override void SetLength(long value) { throw new NotSupportedException(); }
            public override bool CanRead { get { return true  ; } }
            public override bool CanWrite { get { return true; } }
            public override bool CanSeek => false;
            public override long Length => throw new NotSupportedException();

            public override long Position
            {
                get => throw new NotSupportedException();
                set => throw new NotSupportedException();
            }

            private bool is_advanced = false;

            public TestChannel Adv
            {
                get
                {
                    is_advanced = true;
                    return this;
                }
            }

            public TestChannel Std
            {
                get
                {
                    is_advanced = false;
                    return this;
                }
            }

            public TestChannel()
            {
                receiver = new Receiver(this);
                receiverAdv = new ReceiverAdv(this);
                transmitter = new Transmitter(this);
                transmitterAdv = new TransmitterAdv(this);
            }

            protected internal  Pack.Meta dispatch(int id, Pack pack)
            {
                switch(id)
                {
                    case 76:
                        if(pack == null) return com.company.demo.GroundControl.MOUNT_ORIENTATION.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMOUNT_ORIENTATION(new com.company.demo.GroundControl.MOUNT_ORIENTATION(cur));
                            return null;
                        }
                    case 75:
                        if(pack == null) return com.company.demo.GroundControl.LOGGING_DATA.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onLOGGING_DATA(new com.company.demo.GroundControl.LOGGING_DATA(cur));
                            return null;
                        }
                    case 217:
                        if(pack == null) return com.company.demo.GroundControl.LOGGING_DATA_ACKED.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onLOGGING_DATA_ACKED(new com.company.demo.GroundControl.LOGGING_DATA_ACKED(cur));
                            return null;
                        }
                    case 220:
                        if(pack == null) return com.company.demo.GroundControl.LOGGING_ACK.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onLOGGING_ACK(new com.company.demo.GroundControl.LOGGING_ACK(cur));
                            return null;
                        }
                    case 1:
                        if(pack == null) return com.company.demo.GroundControl.VIDEO_STREAM_INFORMATION.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onVIDEO_STREAM_INFORMATION(new com.company.demo.GroundControl.VIDEO_STREAM_INFORMATION(cur));
                            return null;
                        }
                    case 22:
                        if(pack == null) return com.company.demo.GroundControl.SET_VIDEO_STREAM_SETTINGS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onSET_VIDEO_STREAM_SETTINGS(new com.company.demo.GroundControl.SET_VIDEO_STREAM_SETTINGS(cur));
                            return null;
                        }
                    case 194:
                        if(pack == null) return com.company.demo.GroundControl.WIFI_CONFIG_AP.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onWIFI_CONFIG_AP(new com.company.demo.GroundControl.WIFI_CONFIG_AP(cur));
                            return null;
                        }
                    case 150:
                        if(pack == null) return com.company.demo.GroundControl.PROTOCOL_VERSION.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPROTOCOL_VERSION(new com.company.demo.GroundControl.PROTOCOL_VERSION(cur));
                            return null;
                        }
                    case 68:
                        if(pack == null) return com.company.demo.GroundControl.UAVCAN_NODE_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onUAVCAN_NODE_STATUS(new com.company.demo.GroundControl.UAVCAN_NODE_STATUS(cur));
                            return null;
                        }
                    case 127:
                        if(pack == null) return com.company.demo.GroundControl.UAVCAN_NODE_INFO.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onUAVCAN_NODE_INFO(new com.company.demo.GroundControl.UAVCAN_NODE_INFO(cur));
                            return null;
                        }
                    case 90:
                        if(pack == null) return com.company.demo.GroundControl.PARAM_EXT_REQUEST_READ.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPARAM_EXT_REQUEST_READ(new com.company.demo.GroundControl.PARAM_EXT_REQUEST_READ(cur));
                            return null;
                        }
                    case 80:
                        if(pack == null) return com.company.demo.GroundControl.PARAM_EXT_REQUEST_LIST.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPARAM_EXT_REQUEST_LIST(new com.company.demo.GroundControl.PARAM_EXT_REQUEST_LIST(cur));
                            return null;
                        }
                    case 14:
                        if(pack == null) return com.company.demo.GroundControl.PARAM_EXT_VALUE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPARAM_EXT_VALUE(new com.company.demo.GroundControl.PARAM_EXT_VALUE(cur));
                            return null;
                        }
                    case 109:
                        if(pack == null) return com.company.demo.GroundControl.PARAM_EXT_SET.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPARAM_EXT_SET(new com.company.demo.GroundControl.PARAM_EXT_SET(cur));
                            return null;
                        }
                    case 51:
                        if(pack == null) return com.company.demo.GroundControl.PARAM_EXT_ACK.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPARAM_EXT_ACK(new com.company.demo.GroundControl.PARAM_EXT_ACK(cur));
                            return null;
                        }
                    case 66:
                        if(pack == null) return com.company.demo.GroundControl.OBSTACLE_DISTANCE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onOBSTACLE_DISTANCE(new com.company.demo.GroundControl.OBSTACLE_DISTANCE(cur));
                            return null;
                        }
                    case 84:
                        if(pack == null) return com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_CFG.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onUAVIONIX_ADSB_OUT_CFG(new com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_CFG(cur));
                            return null;
                        }
                    case 143:
                        if(pack == null) return com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_DYNAMIC.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onUAVIONIX_ADSB_OUT_DYNAMIC(new com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_DYNAMIC(cur));
                            return null;
                        }
                    case 26:
                        if(pack == null) return com.company.demo.GroundControl.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onUAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(new com.company.demo.GroundControl.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(cur));
                            return null;
                        }
                    case 128:
                        if(pack == null) return com.company.demo.GroundControl.SENSOR_OFFSETS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onSENSOR_OFFSETS(new com.company.demo.GroundControl.SENSOR_OFFSETS(cur));
                            return null;
                        }
                    case 100:
                        if(pack == null) return com.company.demo.GroundControl.SET_MAG_OFFSETS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onSET_MAG_OFFSETS(new com.company.demo.GroundControl.SET_MAG_OFFSETS(cur));
                            return null;
                        }
                    case 159:
                        if(pack == null) return com.company.demo.GroundControl.MEMINFO.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMEMINFO(new com.company.demo.GroundControl.MEMINFO(cur));
                            return null;
                        }
                    case 198:
                        if(pack == null) return com.company.demo.GroundControl.AP_ADC.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onAP_ADC(new com.company.demo.GroundControl.AP_ADC(cur));
                            return null;
                        }
                    case 114:
                        if(pack == null) return com.company.demo.GroundControl.DIGICAM_CONFIGURE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDIGICAM_CONFIGURE(new com.company.demo.GroundControl.DIGICAM_CONFIGURE(cur));
                            return null;
                        }
                    case 49:
                        if(pack == null) return com.company.demo.GroundControl.DIGICAM_CONTROL.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDIGICAM_CONTROL(new com.company.demo.GroundControl.DIGICAM_CONTROL(cur));
                            return null;
                        }
                    case 40:
                        if(pack == null) return com.company.demo.GroundControl.MOUNT_CONFIGURE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMOUNT_CONFIGURE(new com.company.demo.GroundControl.MOUNT_CONFIGURE(cur));
                            return null;
                        }
                    case 113:
                        if(pack == null) return com.company.demo.GroundControl.MOUNT_CONTROL.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMOUNT_CONTROL(new com.company.demo.GroundControl.MOUNT_CONTROL(cur));
                            return null;
                        }
                    case 44:
                        if(pack == null) return com.company.demo.GroundControl.MOUNT_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMOUNT_STATUS(new com.company.demo.GroundControl.MOUNT_STATUS(cur));
                            return null;
                        }
                    case 20:
                        if(pack == null) return com.company.demo.GroundControl.FENCE_POINT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onFENCE_POINT(new com.company.demo.GroundControl.FENCE_POINT(cur));
                            return null;
                        }
                    case 119:
                        if(pack == null) return com.company.demo.GroundControl.FENCE_FETCH_POINT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onFENCE_FETCH_POINT(new com.company.demo.GroundControl.FENCE_FETCH_POINT(cur));
                            return null;
                        }
                    case 93:
                        if(pack == null) return com.company.demo.GroundControl.FENCE_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onFENCE_STATUS(new com.company.demo.GroundControl.FENCE_STATUS(cur));
                            return null;
                        }
                    case 214:
                        if(pack == null) return com.company.demo.GroundControl.AHRS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onAHRS(new com.company.demo.GroundControl.AHRS(cur));
                            return null;
                        }
                    case 112:
                        if(pack == null) return com.company.demo.GroundControl.SIMSTATE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onSIMSTATE(new com.company.demo.GroundControl.SIMSTATE(cur));
                            return null;
                        }
                    case 155:
                        if(pack == null) return com.company.demo.GroundControl.HWSTATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onHWSTATUS(new com.company.demo.GroundControl.HWSTATUS(cur));
                            return null;
                        }
                    case 32:
                        if(pack == null) return com.company.demo.GroundControl.RADIO.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onRADIO(new com.company.demo.GroundControl.RADIO(cur));
                            return null;
                        }
                    case 186:
                        if(pack == null) return com.company.demo.GroundControl.LIMITS_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onLIMITS_STATUS(new com.company.demo.GroundControl.LIMITS_STATUS(cur));
                            return null;
                        }
                    case 97:
                        if(pack == null) return com.company.demo.GroundControl.WIND.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onWIND(new com.company.demo.GroundControl.WIND(cur));
                            return null;
                        }
                    case 36:
                        if(pack == null) return com.company.demo.GroundControl.DATA16.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDATA16(new com.company.demo.GroundControl.DATA16(cur));
                            return null;
                        }
                    case 164:
                        if(pack == null) return com.company.demo.GroundControl.DATA32.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDATA32(new com.company.demo.GroundControl.DATA32(cur));
                            return null;
                        }
                    case 141:
                        if(pack == null) return com.company.demo.GroundControl.DATA64.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDATA64(new com.company.demo.GroundControl.DATA64(cur));
                            return null;
                        }
                    case 83:
                        if(pack == null) return com.company.demo.GroundControl.DATA96.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDATA96(new com.company.demo.GroundControl.DATA96(cur));
                            return null;
                        }
                    case 153:
                        if(pack == null) return com.company.demo.GroundControl.RANGEFINDER.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onRANGEFINDER(new com.company.demo.GroundControl.RANGEFINDER(cur));
                            return null;
                        }
                    case 69:
                        if(pack == null) return com.company.demo.GroundControl.AIRSPEED_AUTOCAL.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onAIRSPEED_AUTOCAL(new com.company.demo.GroundControl.AIRSPEED_AUTOCAL(cur));
                            return null;
                        }
                    case 197:
                        if(pack == null) return com.company.demo.GroundControl.RALLY_POINT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onRALLY_POINT(new com.company.demo.GroundControl.RALLY_POINT(cur));
                            return null;
                        }
                    case 5:
                        if(pack == null) return com.company.demo.GroundControl.RALLY_FETCH_POINT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onRALLY_FETCH_POINT(new com.company.demo.GroundControl.RALLY_FETCH_POINT(cur));
                            return null;
                        }
                    case 43:
                        if(pack == null) return com.company.demo.GroundControl.COMPASSMOT_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onCOMPASSMOT_STATUS(new com.company.demo.GroundControl.COMPASSMOT_STATUS(cur));
                            return null;
                        }
                    case 17:
                        if(pack == null) return com.company.demo.GroundControl.AHRS2.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onAHRS2(new com.company.demo.GroundControl.AHRS2(cur));
                            return null;
                        }
                    case 211:
                        if(pack == null) return com.company.demo.GroundControl.CAMERA_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onCAMERA_STATUS(new com.company.demo.GroundControl.CAMERA_STATUS(cur));
                            return null;
                        }
                    case 0:
                        if(pack == null) return com.company.demo.GroundControl.CAMERA_FEEDBACK.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onCAMERA_FEEDBACK(new com.company.demo.GroundControl.CAMERA_FEEDBACK(cur));
                            return null;
                        }
                    case 190:
                        if(pack == null) return com.company.demo.GroundControl.BATTERY2.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onBATTERY2(new com.company.demo.GroundControl.BATTERY2(cur));
                            return null;
                        }
                    case 65:
                        if(pack == null) return com.company.demo.GroundControl.AHRS3.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onAHRS3(new com.company.demo.GroundControl.AHRS3(cur));
                            return null;
                        }
                    case 142:
                        if(pack == null) return com.company.demo.GroundControl.AUTOPILOT_VERSION_REQUEST.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onAUTOPILOT_VERSION_REQUEST(new com.company.demo.GroundControl.AUTOPILOT_VERSION_REQUEST(cur));
                            return null;
                        }
                    case 144:
                        if(pack == null) return com.company.demo.GroundControl.REMOTE_LOG_DATA_BLOCK.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onREMOTE_LOG_DATA_BLOCK(new com.company.demo.GroundControl.REMOTE_LOG_DATA_BLOCK(cur));
                            return null;
                        }
                    case 171:
                        if(pack == null) return com.company.demo.GroundControl.REMOTE_LOG_BLOCK_STATUS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onREMOTE_LOG_BLOCK_STATUS(new com.company.demo.GroundControl.REMOTE_LOG_BLOCK_STATUS(cur));
                            return null;
                        }
                    case 177:
                        if(pack == null) return com.company.demo.GroundControl.LED_CONTROL.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onLED_CONTROL(new com.company.demo.GroundControl.LED_CONTROL(cur));
                            return null;
                        }
                    case 57:
                        if(pack == null) return com.company.demo.GroundControl.MAG_CAL_PROGRESS.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMAG_CAL_PROGRESS(new com.company.demo.GroundControl.MAG_CAL_PROGRESS(cur));
                            return null;
                        }
                    case 63:
                        if(pack == null) return com.company.demo.GroundControl.MAG_CAL_REPORT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onMAG_CAL_REPORT(new com.company.demo.GroundControl.MAG_CAL_REPORT(cur));
                            return null;
                        }
                    case 96:
                        if(pack == null) return com.company.demo.GroundControl.EKF_STATUS_REPORT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onEKF_STATUS_REPORT(new com.company.demo.GroundControl.EKF_STATUS_REPORT(cur));
                            return null;
                        }
                    case 64:
                        if(pack == null) return com.company.demo.GroundControl.PID_TUNING.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onPID_TUNING(new com.company.demo.GroundControl.PID_TUNING(cur));
                            return null;
                        }
                    case 11:
                        if(pack == null) return com.company.demo.GroundControl.GIMBAL_REPORT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGIMBAL_REPORT(new com.company.demo.GroundControl.GIMBAL_REPORT(cur));
                            return null;
                        }
                    case 104:
                        if(pack == null) return com.company.demo.GroundControl.GIMBAL_CONTROL.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGIMBAL_CONTROL(new com.company.demo.GroundControl.GIMBAL_CONTROL(cur));
                            return null;
                        }
                    case 117:
                        if(pack == null) return com.company.demo.GroundControl.GIMBAL_TORQUE_CMD_REPORT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGIMBAL_TORQUE_CMD_REPORT(new com.company.demo.GroundControl.GIMBAL_TORQUE_CMD_REPORT(cur));
                            return null;
                        }
                    case 175:
                        if(pack == null) return com.company.demo.GroundControl.GOPRO_HEARTBEAT.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGOPRO_HEARTBEAT(new com.company.demo.GroundControl.GOPRO_HEARTBEAT(cur));
                            return null;
                        }
                    case 138:
                        if(pack == null) return com.company.demo.GroundControl.GOPRO_GET_REQUEST.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGOPRO_GET_REQUEST(new com.company.demo.GroundControl.GOPRO_GET_REQUEST(cur));
                            return null;
                        }
                    case 208:
                        if(pack == null) return com.company.demo.GroundControl.GOPRO_GET_RESPONSE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGOPRO_GET_RESPONSE(new com.company.demo.GroundControl.GOPRO_GET_RESPONSE(cur));
                            return null;
                        }
                    case 118:
                        if(pack == null) return com.company.demo.GroundControl.GOPRO_SET_REQUEST.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGOPRO_SET_REQUEST(new com.company.demo.GroundControl.GOPRO_SET_REQUEST(cur));
                            return null;
                        }
                    case 192:
                        if(pack == null) return com.company.demo.GroundControl.GOPRO_SET_RESPONSE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onGOPRO_SET_RESPONSE(new com.company.demo.GroundControl.GOPRO_SET_RESPONSE(cur));
                            return null;
                        }
                    case 183:
                        if(pack == null) return com.company.demo.GroundControl.RPM.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onRPM(new com.company.demo.GroundControl.RPM(cur));
                            return null;
                        }
                    case 70:
                        if(pack == null) return com.company.demo.GroundControl.DEVICE_OP_READ.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDEVICE_OP_READ(new com.company.demo.GroundControl.DEVICE_OP_READ(cur));
                            return null;
                        }
                    case 165:
                        if(pack == null) return com.company.demo.GroundControl.DEVICE_OP_READ_REPLY.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDEVICE_OP_READ_REPLY(new com.company.demo.GroundControl.DEVICE_OP_READ_REPLY(cur));
                            return null;
                        }
                    case 105:
                        if(pack == null) return com.company.demo.GroundControl.DEVICE_OP_WRITE.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDEVICE_OP_WRITE(new com.company.demo.GroundControl.DEVICE_OP_WRITE(cur));
                            return null;
                        }
                    case 33:
                        if(pack == null) return com.company.demo.GroundControl.DEVICE_OP_WRITE_REPLY.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onDEVICE_OP_WRITE_REPLY(new com.company.demo.GroundControl.DEVICE_OP_WRITE_REPLY(cur));
                            return null;
                        }
                    case 115:
                        if(pack == null) return com.company.demo.GroundControl.ADAP_TUNING.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onADAP_TUNING(new com.company.demo.GroundControl.ADAP_TUNING(cur));
                            return null;
                        }
                    case 12:
                        if(pack == null) return com.company.demo.GroundControl.VISION_POSITION_DELTA.meta_;
                        {
                            var cur = new Pack.Cursor(null);
                            cur.wrap(pack);
                            onVISION_POSITION_DELTA(new com.company.demo.GroundControl.VISION_POSITION_DELTA(cur));
                            return null;
                        }
                }
                return null;
            }

            public override void Write(byte[] src, int offset, int bytes)
            {
                if(is_advanced)
                    receiverAdv.BytesIntoPacks(src, offset, bytes);
                else
                    receiver.BytesIntoPacks(src, offset, bytes);
            }

            class Receiver : Lib.Channel.Receiver
            {
                readonly TestChannel ch;
                public Receiver(TestChannel ch): base(1) { this.ch = ch; }
                protected internal override Pack.Meta dispatch(int id, Pack pack)  { return ch.dispatch(id, pack) ;}
            }
            readonly Receiver receiver;

            class ReceiverAdv : Lib.Channel.Receiver.Advanced
            {
                readonly TestChannel ch;
                public ReceiverAdv(TestChannel ch): base(1) { this.ch = ch; }
                protected internal override Pack.Meta dispatch(int id, Pack pack)  { return ch.dispatch(id, pack); }
            }
            readonly ReceiverAdv receiverAdv;


            Pack sendingPack = null;

            public override int Read(byte[] dst, int offset, int bytes)
            {
                return is_advanced ? transmitterAdv.PacksIntoBytes(dst, offset, bytes) : transmitter.PacksIntoBytes(dst, offset, bytes);
            }

            class Transmitter : Lib.Channel.Transmitter
            {
                readonly TestChannel ch;
                public  Transmitter(TestChannel ch): base(1) { this.ch = ch; }
                protected internal override Pack pullSendingPack()
                {
                    var ret = ch.sendingPack;
                    ch.sendingPack = null;
                    return ret;
                }
            }
            readonly Transmitter transmitter;

            class TransmitterAdv : Lib.Channel.Transmitter.Advanced
            {
                readonly TestChannel ch;
                public  TransmitterAdv(TestChannel ch): base(1) { this.ch = ch; }
                protected internal override Pack pullSendingPack()
                {
                    var ret = ch.sendingPack;
                    ch.sendingPack = null;
                    return ret;
                }
            }
            readonly TransmitterAdv transmitterAdv;


            public bool send(com.company.demo.GroundControl.HEARTBEAT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SYS_STATUS src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SYSTEM_TIME src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.PING src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL_ACK src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.AUTH_KEY src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SET_MODE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.PARAM_REQUEST_READ src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.PARAM_REQUEST_LIST src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.PARAM_VALUE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.PARAM_SET src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.GPS_RAW_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.GPS_STATUS src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SCALED_IMU src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.RAW_IMU src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.RAW_PRESSURE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SCALED_PRESSURE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.ATTITUDE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.ATTITUDE_QUATERNION src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.LOCAL_POSITION_NED src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.GLOBAL_POSITION_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.RC_CHANNELS_SCALED src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.RC_CHANNELS_RAW src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SERVO_OUTPUT_RAW src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_REQUEST_PARTIAL_LIST src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_WRITE_PARTIAL_LIST src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_ITEM src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_REQUEST src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_SET_CURRENT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_CURRENT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_REQUEST_LIST src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_COUNT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_CLEAR_ALL src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_ITEM_REACHED src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_ACK src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SET_GPS_GLOBAL_ORIGIN src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.GPS_GLOBAL_ORIGIN src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.PARAM_MAP_RC src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_REQUEST_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SAFETY_SET_ALLOWED_AREA src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SAFETY_ALLOWED_AREA src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.NAV_CONTROLLER_OUTPUT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.LOCAL_POSITION_NED_COV src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.RC_CHANNELS src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.REQUEST_DATA_STREAM src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.DATA_STREAM src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MANUAL_CONTROL src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.RC_CHANNELS_OVERRIDE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MISSION_ITEM_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.VFR_HUD src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.COMMAND_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.COMMAND_LONG src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.COMMAND_ACK src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.MANUAL_SETPOINT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SET_ATTITUDE_TARGET src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.ATTITUDE_TARGET src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SET_POSITION_TARGET_LOCAL_NED src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.POSITION_TARGET_LOCAL_NED src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.SET_POSITION_TARGET_GLOBAL_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.POSITION_TARGET_GLOBAL_INT src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.HIL_STATE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.HIL_CONTROLS src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.HIL_RC_INPUTS_RAW src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.OPTICAL_FLOW src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.GLOBAL_VISION_POSITION_ESTIMATE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }

            public bool send(com.company.demo.GroundControl.VISION_POSITION_ESTIMATE src)
            {
                if(sendingPack != null) return false;
                sendingPack = src.data_.unwrap();
                return  true;
            }


            public struct NEW
            {
                public static org.unirail.Test.HEARTBEAT  HEARTBEAT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. HEARTBEAT.meta_);
                    return new org.unirail.Test.HEARTBEAT(cur);
                }
                public static org.unirail.Test.SYS_STATUS  SYS_STATUS(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SYS_STATUS.meta_);
                    return new org.unirail.Test.SYS_STATUS(cur);
                }
                public static org.unirail.Test.SYSTEM_TIME  SYSTEM_TIME(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SYSTEM_TIME.meta_);
                    return new org.unirail.Test.SYSTEM_TIME(cur);
                }
                public static org.unirail.Test.PING  PING(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. PING.meta_);
                    return new org.unirail.Test.PING(cur);
                }
                public static org.unirail.Test.CHANGE_OPERATOR_CONTROL  CHANGE_OPERATOR_CONTROL(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. CHANGE_OPERATOR_CONTROL.meta_);
                    return new org.unirail.Test.CHANGE_OPERATOR_CONTROL(cur);
                }
                public static org.unirail.Test.CHANGE_OPERATOR_CONTROL_ACK  CHANGE_OPERATOR_CONTROL_ACK(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. CHANGE_OPERATOR_CONTROL_ACK.meta_);
                    return new org.unirail.Test.CHANGE_OPERATOR_CONTROL_ACK(cur);
                }
                public static org.unirail.Test.AUTH_KEY  AUTH_KEY(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. AUTH_KEY.meta_);
                    return new org.unirail.Test.AUTH_KEY(cur);
                }
                public static org.unirail.Test.SET_MODE  SET_MODE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SET_MODE.meta_);
                    return new org.unirail.Test.SET_MODE(cur);
                }
                public static org.unirail.Test.PARAM_REQUEST_READ  PARAM_REQUEST_READ(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. PARAM_REQUEST_READ.meta_);
                    return new org.unirail.Test.PARAM_REQUEST_READ(cur);
                }
                public static org.unirail.Test.PARAM_REQUEST_LIST  PARAM_REQUEST_LIST(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. PARAM_REQUEST_LIST.meta_);
                    return new org.unirail.Test.PARAM_REQUEST_LIST(cur);
                }
                public static org.unirail.Test.PARAM_VALUE  PARAM_VALUE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. PARAM_VALUE.meta_);
                    return new org.unirail.Test.PARAM_VALUE(cur);
                }
                public static org.unirail.Test.PARAM_SET  PARAM_SET(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. PARAM_SET.meta_);
                    return new org.unirail.Test.PARAM_SET(cur);
                }
                public static org.unirail.Test.GPS_RAW_INT  GPS_RAW_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. GPS_RAW_INT.meta_);
                    return new org.unirail.Test.GPS_RAW_INT(cur);
                }
                public static org.unirail.Test.GPS_STATUS  GPS_STATUS(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. GPS_STATUS.meta_);
                    return new org.unirail.Test.GPS_STATUS(cur);
                }
                public static org.unirail.Test.SCALED_IMU  SCALED_IMU(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SCALED_IMU.meta_);
                    return new org.unirail.Test.SCALED_IMU(cur);
                }
                public static org.unirail.Test.RAW_IMU  RAW_IMU(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. RAW_IMU.meta_);
                    return new org.unirail.Test.RAW_IMU(cur);
                }
                public static org.unirail.Test.RAW_PRESSURE  RAW_PRESSURE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. RAW_PRESSURE.meta_);
                    return new org.unirail.Test.RAW_PRESSURE(cur);
                }
                public static org.unirail.Test.SCALED_PRESSURE  SCALED_PRESSURE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SCALED_PRESSURE.meta_);
                    return new org.unirail.Test.SCALED_PRESSURE(cur);
                }
                public static org.unirail.Test.ATTITUDE  ATTITUDE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. ATTITUDE.meta_);
                    return new org.unirail.Test.ATTITUDE(cur);
                }
                public static org.unirail.Test.ATTITUDE_QUATERNION  ATTITUDE_QUATERNION(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. ATTITUDE_QUATERNION.meta_);
                    return new org.unirail.Test.ATTITUDE_QUATERNION(cur);
                }
                public static org.unirail.Test.LOCAL_POSITION_NED  LOCAL_POSITION_NED(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. LOCAL_POSITION_NED.meta_);
                    return new org.unirail.Test.LOCAL_POSITION_NED(cur);
                }
                public static org.unirail.Test.GLOBAL_POSITION_INT  GLOBAL_POSITION_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. GLOBAL_POSITION_INT.meta_);
                    return new org.unirail.Test.GLOBAL_POSITION_INT(cur);
                }
                public static org.unirail.Test.RC_CHANNELS_SCALED  RC_CHANNELS_SCALED(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. RC_CHANNELS_SCALED.meta_);
                    return new org.unirail.Test.RC_CHANNELS_SCALED(cur);
                }
                public static org.unirail.Test.RC_CHANNELS_RAW  RC_CHANNELS_RAW(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. RC_CHANNELS_RAW.meta_);
                    return new org.unirail.Test.RC_CHANNELS_RAW(cur);
                }
                public static org.unirail.Test.SERVO_OUTPUT_RAW  SERVO_OUTPUT_RAW(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SERVO_OUTPUT_RAW.meta_);
                    return new org.unirail.Test.SERVO_OUTPUT_RAW(cur);
                }
                public static org.unirail.Test.MISSION_REQUEST_PARTIAL_LIST  MISSION_REQUEST_PARTIAL_LIST(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_REQUEST_PARTIAL_LIST.meta_);
                    return new org.unirail.Test.MISSION_REQUEST_PARTIAL_LIST(cur);
                }
                public static org.unirail.Test.MISSION_WRITE_PARTIAL_LIST  MISSION_WRITE_PARTIAL_LIST(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_WRITE_PARTIAL_LIST.meta_);
                    return new org.unirail.Test.MISSION_WRITE_PARTIAL_LIST(cur);
                }
                public static org.unirail.Test.MISSION_ITEM  MISSION_ITEM(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_ITEM.meta_);
                    return new org.unirail.Test.MISSION_ITEM(cur);
                }
                public static org.unirail.Test.MISSION_REQUEST  MISSION_REQUEST(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_REQUEST.meta_);
                    return new org.unirail.Test.MISSION_REQUEST(cur);
                }
                public static org.unirail.Test.MISSION_SET_CURRENT  MISSION_SET_CURRENT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_SET_CURRENT.meta_);
                    return new org.unirail.Test.MISSION_SET_CURRENT(cur);
                }
                public static org.unirail.Test.MISSION_CURRENT  MISSION_CURRENT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_CURRENT.meta_);
                    return new org.unirail.Test.MISSION_CURRENT(cur);
                }
                public static org.unirail.Test.MISSION_REQUEST_LIST  MISSION_REQUEST_LIST(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_REQUEST_LIST.meta_);
                    return new org.unirail.Test.MISSION_REQUEST_LIST(cur);
                }
                public static org.unirail.Test.MISSION_COUNT  MISSION_COUNT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_COUNT.meta_);
                    return new org.unirail.Test.MISSION_COUNT(cur);
                }
                public static org.unirail.Test.MISSION_CLEAR_ALL  MISSION_CLEAR_ALL(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_CLEAR_ALL.meta_);
                    return new org.unirail.Test.MISSION_CLEAR_ALL(cur);
                }
                public static org.unirail.Test.MISSION_ITEM_REACHED  MISSION_ITEM_REACHED(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_ITEM_REACHED.meta_);
                    return new org.unirail.Test.MISSION_ITEM_REACHED(cur);
                }
                public static org.unirail.Test.MISSION_ACK  MISSION_ACK(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_ACK.meta_);
                    return new org.unirail.Test.MISSION_ACK(cur);
                }
                public static org.unirail.Test.SET_GPS_GLOBAL_ORIGIN  SET_GPS_GLOBAL_ORIGIN(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SET_GPS_GLOBAL_ORIGIN.meta_);
                    return new org.unirail.Test.SET_GPS_GLOBAL_ORIGIN(cur);
                }
                public static org.unirail.Test.GPS_GLOBAL_ORIGIN  GPS_GLOBAL_ORIGIN(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. GPS_GLOBAL_ORIGIN.meta_);
                    return new org.unirail.Test.GPS_GLOBAL_ORIGIN(cur);
                }
                public static org.unirail.Test.PARAM_MAP_RC  PARAM_MAP_RC(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. PARAM_MAP_RC.meta_);
                    return new org.unirail.Test.PARAM_MAP_RC(cur);
                }
                public static org.unirail.Test.MISSION_REQUEST_INT  MISSION_REQUEST_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_REQUEST_INT.meta_);
                    return new org.unirail.Test.MISSION_REQUEST_INT(cur);
                }
                public static org.unirail.Test.SAFETY_SET_ALLOWED_AREA  SAFETY_SET_ALLOWED_AREA(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SAFETY_SET_ALLOWED_AREA.meta_);
                    return new org.unirail.Test.SAFETY_SET_ALLOWED_AREA(cur);
                }
                public static org.unirail.Test.SAFETY_ALLOWED_AREA  SAFETY_ALLOWED_AREA(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SAFETY_ALLOWED_AREA.meta_);
                    return new org.unirail.Test.SAFETY_ALLOWED_AREA(cur);
                }
                public static org.unirail.Test.ATTITUDE_QUATERNION_COV  ATTITUDE_QUATERNION_COV(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. ATTITUDE_QUATERNION_COV.meta_);
                    return new org.unirail.Test.ATTITUDE_QUATERNION_COV(cur);
                }
                public static org.unirail.Test.NAV_CONTROLLER_OUTPUT  NAV_CONTROLLER_OUTPUT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. NAV_CONTROLLER_OUTPUT.meta_);
                    return new org.unirail.Test.NAV_CONTROLLER_OUTPUT(cur);
                }
                public static org.unirail.Test.GLOBAL_POSITION_INT_COV  GLOBAL_POSITION_INT_COV(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. GLOBAL_POSITION_INT_COV.meta_);
                    return new org.unirail.Test.GLOBAL_POSITION_INT_COV(cur);
                }
                public static org.unirail.Test.LOCAL_POSITION_NED_COV  LOCAL_POSITION_NED_COV(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. LOCAL_POSITION_NED_COV.meta_);
                    return new org.unirail.Test.LOCAL_POSITION_NED_COV(cur);
                }
                public static org.unirail.Test.RC_CHANNELS  RC_CHANNELS(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. RC_CHANNELS.meta_);
                    return new org.unirail.Test.RC_CHANNELS(cur);
                }
                public static org.unirail.Test.REQUEST_DATA_STREAM  REQUEST_DATA_STREAM(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. REQUEST_DATA_STREAM.meta_);
                    return new org.unirail.Test.REQUEST_DATA_STREAM(cur);
                }
                public static org.unirail.Test.DATA_STREAM  DATA_STREAM(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. DATA_STREAM.meta_);
                    return new org.unirail.Test.DATA_STREAM(cur);
                }
                public static org.unirail.Test.MANUAL_CONTROL  MANUAL_CONTROL(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MANUAL_CONTROL.meta_);
                    return new org.unirail.Test.MANUAL_CONTROL(cur);
                }
                public static org.unirail.Test.RC_CHANNELS_OVERRIDE  RC_CHANNELS_OVERRIDE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. RC_CHANNELS_OVERRIDE.meta_);
                    return new org.unirail.Test.RC_CHANNELS_OVERRIDE(cur);
                }
                public static org.unirail.Test.MISSION_ITEM_INT  MISSION_ITEM_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MISSION_ITEM_INT.meta_);
                    return new org.unirail.Test.MISSION_ITEM_INT(cur);
                }
                public static org.unirail.Test.VFR_HUD  VFR_HUD(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. VFR_HUD.meta_);
                    return new org.unirail.Test.VFR_HUD(cur);
                }
                public static org.unirail.Test.COMMAND_INT  COMMAND_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. COMMAND_INT.meta_);
                    return new org.unirail.Test.COMMAND_INT(cur);
                }
                public static org.unirail.Test.COMMAND_LONG  COMMAND_LONG(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. COMMAND_LONG.meta_);
                    return new org.unirail.Test.COMMAND_LONG(cur);
                }
                public static org.unirail.Test.COMMAND_ACK  COMMAND_ACK(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. COMMAND_ACK.meta_);
                    return new org.unirail.Test.COMMAND_ACK(cur);
                }
                public static org.unirail.Test.MANUAL_SETPOINT  MANUAL_SETPOINT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. MANUAL_SETPOINT.meta_);
                    return new org.unirail.Test.MANUAL_SETPOINT(cur);
                }
                public static org.unirail.Test.SET_ATTITUDE_TARGET  SET_ATTITUDE_TARGET(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SET_ATTITUDE_TARGET.meta_);
                    return new org.unirail.Test.SET_ATTITUDE_TARGET(cur);
                }
                public static org.unirail.Test.ATTITUDE_TARGET  ATTITUDE_TARGET(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. ATTITUDE_TARGET.meta_);
                    return new org.unirail.Test.ATTITUDE_TARGET(cur);
                }
                public static org.unirail.Test.SET_POSITION_TARGET_LOCAL_NED  SET_POSITION_TARGET_LOCAL_NED(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SET_POSITION_TARGET_LOCAL_NED.meta_);
                    return new org.unirail.Test.SET_POSITION_TARGET_LOCAL_NED(cur);
                }
                public static org.unirail.Test.POSITION_TARGET_LOCAL_NED  POSITION_TARGET_LOCAL_NED(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. POSITION_TARGET_LOCAL_NED.meta_);
                    return new org.unirail.Test.POSITION_TARGET_LOCAL_NED(cur);
                }
                public static org.unirail.Test.SET_POSITION_TARGET_GLOBAL_INT  SET_POSITION_TARGET_GLOBAL_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. SET_POSITION_TARGET_GLOBAL_INT.meta_);
                    return new org.unirail.Test.SET_POSITION_TARGET_GLOBAL_INT(cur);
                }
                public static org.unirail.Test.POSITION_TARGET_GLOBAL_INT  POSITION_TARGET_GLOBAL_INT(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. POSITION_TARGET_GLOBAL_INT.meta_);
                    return new org.unirail.Test.POSITION_TARGET_GLOBAL_INT(cur);
                }
                public static org.unirail.Test.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET  LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET.meta_);
                    return new org.unirail.Test.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(cur);
                }
                public static org.unirail.Test.HIL_STATE  HIL_STATE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. HIL_STATE.meta_);
                    return new org.unirail.Test.HIL_STATE(cur);
                }
                public static org.unirail.Test.HIL_CONTROLS  HIL_CONTROLS(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. HIL_CONTROLS.meta_);
                    return new org.unirail.Test.HIL_CONTROLS(cur);
                }
                public static org.unirail.Test.HIL_RC_INPUTS_RAW  HIL_RC_INPUTS_RAW(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. HIL_RC_INPUTS_RAW.meta_);
                    return new org.unirail.Test.HIL_RC_INPUTS_RAW(cur);
                }
                public static org.unirail.Test.HIL_ACTUATOR_CONTROLS  HIL_ACTUATOR_CONTROLS(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. HIL_ACTUATOR_CONTROLS.meta_);
                    return new org.unirail.Test.HIL_ACTUATOR_CONTROLS(cur);
                }
                public static org.unirail.Test.OPTICAL_FLOW  OPTICAL_FLOW(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. OPTICAL_FLOW.meta_);
                    return new org.unirail.Test.OPTICAL_FLOW(cur);
                }
                public static org.unirail.Test.GLOBAL_VISION_POSITION_ESTIMATE  GLOBAL_VISION_POSITION_ESTIMATE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. GLOBAL_VISION_POSITION_ESTIMATE.meta_);
                    return new org.unirail.Test.GLOBAL_VISION_POSITION_ESTIMATE(cur);
                }
                public static org.unirail.Test.VISION_POSITION_ESTIMATE  VISION_POSITION_ESTIMATE(Pack.Cursor cur)
                {
                    cur.wrap(com.company.demo.GroundControl. VISION_POSITION_ESTIMATE.meta_);
                    return new org.unirail.Test.VISION_POSITION_ESTIMATE(cur);
                }

            }

        }



        public static void fill(org.unirail.Test. HEARTBEAT  heartbeat)
        {
            heartbeat.custom_mode(1870904601);
            heartbeat.mavlink_version(-95);
            heartbeat.typE(MAV_TYPE.KITE);
            heartbeat.autopilot(MAV_AUTOPILOT.GENERIC_MISSION_FULL);
            heartbeat.base_mode(MAV_MODE_FLAG.MAV_MODE_FLAG_SAFETY_ARMED);
            heartbeat.system_status(MAV_STATE.CALIBRATING);
        }

        public static void onHEARTBEAT(com.company.demo.GroundControl.HEARTBEAT heartbeat)
        {
            Debug.Assert(heartbeat.custom_mode() == 1870904601) ;
            Debug.Assert(heartbeat.mavlink_version() == -95) ;
            Debug.Assert(heartbeat.typE().Value == MAV_TYPE.KITE) ;
            Debug.Assert(heartbeat.autopilot().Value == MAV_AUTOPILOT.GENERIC_MISSION_FULL) ;
            Debug.Assert(heartbeat.base_mode().Value == MAV_MODE_FLAG.MAV_MODE_FLAG_SAFETY_ARMED) ;
            Debug.Assert(heartbeat.system_status().Value == MAV_STATE.CALIBRATING) ;
            Debug.Print("HEARTBEAT \n");
        }

        public static void fill(org.unirail.Test. SYS_STATUS  sys_status)
        {
            sys_status.load(-10880);
            sys_status.voltage_battery(30217);
            sys_status.drop_rate_comm(28974);
            sys_status.errors_comm(11598);
            sys_status.errors_count1(14392);
            sys_status.errors_count2(11112);
            sys_status.errors_count3(4905);
            sys_status.errors_count4(10414);
            sys_status.current_battery(21466);
            sys_status.battery_remaining(-107);
            sys_status.onboard_control_sensors_present(MAV_SYS_STATUS_SENSOR.MAV_SYS_STATUS_LOGGING);
            sys_status.onboard_control_sensors_enabled(MAV_SYS_STATUS_SENSOR.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE);
            sys_status.onboard_control_sensors_health(MAV_SYS_STATUS_SENSOR.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL);
        }

        public static void onSYS_STATUS(com.company.demo.GroundControl.SYS_STATUS sys_status)
        {
            Debug.Assert(sys_status.load() == -10880) ;
            Debug.Assert(sys_status.voltage_battery() == 30217) ;
            Debug.Assert(sys_status.drop_rate_comm() == 28974) ;
            Debug.Assert(sys_status.errors_comm() == 11598) ;
            Debug.Assert(sys_status.errors_count1() == 14392) ;
            Debug.Assert(sys_status.errors_count2() == 11112) ;
            Debug.Assert(sys_status.errors_count3() == 4905) ;
            Debug.Assert(sys_status.errors_count4() == 10414) ;
            Debug.Assert(sys_status.current_battery() == 21466) ;
            Debug.Assert(sys_status.battery_remaining() == -107) ;
            Debug.Assert(sys_status.onboard_control_sensors_present().Value == MAV_SYS_STATUS_SENSOR.MAV_SYS_STATUS_LOGGING) ;
            Debug.Assert(sys_status.onboard_control_sensors_enabled().Value == MAV_SYS_STATUS_SENSOR.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE) ;
            Debug.Assert(sys_status.onboard_control_sensors_health().Value == MAV_SYS_STATUS_SENSOR.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL) ;
            Debug.Print("SYS_STATUS \n");
        }

        public static void fill(org.unirail.Test. SYSTEM_TIME  system_time)
        {
            system_time.time_boot_ms(922487574);
            system_time.time_unix_usec(-4090193885085728151L);
        }

        public static void onSYSTEM_TIME(com.company.demo.GroundControl.SYSTEM_TIME system_time)
        {
            Debug.Assert(system_time.time_boot_ms() == 922487574) ;
            Debug.Assert(system_time.time_unix_usec() == -4090193885085728151L) ;
            Debug.Print("SYSTEM_TIME \n");
        }

        public static void fill(org.unirail.Test. PING  ping)
        {
            ping.seq(1110826992);
            ping.time_usec(-2144259968114565822L);
            ping.target_system(28);
            ping.target_component(-83);
        }

        public static void onPING(com.company.demo.GroundControl.PING ping)
        {
            Debug.Assert(ping.seq() == 1110826992) ;
            Debug.Assert(ping.time_usec() == -2144259968114565822L) ;
            Debug.Assert(ping.target_system() == 28) ;
            Debug.Assert(ping.target_component() == -83) ;
            Debug.Print("PING \n");
        }

        public static void fill(org.unirail.Test. CHANGE_OPERATOR_CONTROL  change_operator_control)
        {
            change_operator_control.target_system(-19);
            change_operator_control.control_request(92);
            change_operator_control.version(-65);
            change_operator_control.passkey("jzyoAfzgphvDaRWvylhkpiYqwseMdkzkrDcsbaometjcyUxrdacXZv", null) ;
        }

        public static void onCHANGE_OPERATOR_CONTROL(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL change_operator_control)
        {
            Debug.Assert(change_operator_control.target_system() == -19) ;
            Debug.Assert(change_operator_control.control_request() == 92) ;
            Debug.Assert(change_operator_control.version() == -65) ;
            Debug.Assert(change_operator_control.passkey() ?.get() == "jzyoAfzgphvDaRWvylhkpiYqwseMdkzkrDcsbaometjcyUxrdacXZv");
            Debug.Print("CHANGE_OPERATOR_CONTROL \n");
        }

        public static void fill(org.unirail.Test. CHANGE_OPERATOR_CONTROL_ACK  change_operator_control_ack)
        {
            change_operator_control_ack.gcs_system_id(-4);
            change_operator_control_ack.control_request(12);
            change_operator_control_ack.ack(-29);
        }

        public static void onCHANGE_OPERATOR_CONTROL_ACK(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL_ACK change_operator_control_ack)
        {
            Debug.Assert(change_operator_control_ack.gcs_system_id() == -4) ;
            Debug.Assert(change_operator_control_ack.control_request() == 12) ;
            Debug.Assert(change_operator_control_ack.ack() == -29) ;
            Debug.Print("CHANGE_OPERATOR_CONTROL_ACK \n");
        }

        public static void fill(org.unirail.Test. AUTH_KEY  auth_key)
        {
            auth_key.key("jUtkqkahqlabagyesbbijcPfqupskewgxgzjxtvlavjzW", null) ;
        }

        public static void onAUTH_KEY(com.company.demo.GroundControl.AUTH_KEY auth_key)
        {
            Debug.Assert(auth_key.key() ?.get() == "jUtkqkahqlabagyesbbijcPfqupskewgxgzjxtvlavjzW");
            Debug.Print("AUTH_KEY \n");
        }

        public static void fill(org.unirail.Test. SET_MODE  set_mode)
        {
            set_mode.custom_mode(-49136267);
            set_mode.target_system(124);
            set_mode.base_mode(MAV_MODE.MAV_MODE_TEST_ARMED);
        }

        public static void onSET_MODE(com.company.demo.GroundControl.SET_MODE set_mode)
        {
            Debug.Assert(set_mode.custom_mode() == -49136267) ;
            Debug.Assert(set_mode.target_system() == 124) ;
            Debug.Assert(set_mode.base_mode().Value == MAV_MODE.MAV_MODE_TEST_ARMED) ;
            Debug.Print("SET_MODE \n");
        }

        public static void fill(org.unirail.Test. PARAM_REQUEST_READ  param_request_read)
        {
            param_request_read.target_system(118);
            param_request_read.target_component(67);
            param_request_read.param_index(20563);
            param_request_read.param_id("jxoiqyazfklrmtQmlolsvrsdzuaQtIqFoqxtiiqkwwiabaPqifzzcynpshladjdcgzduhotw", null) ;
        }

        public static void onPARAM_REQUEST_READ(com.company.demo.GroundControl.PARAM_REQUEST_READ param_request_read)
        {
            Debug.Assert(param_request_read.target_system() == 118) ;
            Debug.Assert(param_request_read.target_component() == 67) ;
            Debug.Assert(param_request_read.param_index() == 20563) ;
            Debug.Assert(param_request_read.param_id() ?.get() == "jxoiqyazfklrmtQmlolsvrsdzuaQtIqFoqxtiiqkwwiabaPqifzzcynpshladjdcgzduhotw");
            Debug.Print("PARAM_REQUEST_READ \n");
        }

        public static void fill(org.unirail.Test. PARAM_REQUEST_LIST  param_request_list)
        {
            param_request_list.target_system(13);
            param_request_list.target_component(-86);
        }

        public static void onPARAM_REQUEST_LIST(com.company.demo.GroundControl.PARAM_REQUEST_LIST param_request_list)
        {
            Debug.Assert(param_request_list.target_system() == 13) ;
            Debug.Assert(param_request_list.target_component() == -86) ;
            Debug.Print("PARAM_REQUEST_LIST \n");
        }

        public static void fill(org.unirail.Test. PARAM_VALUE  param_value)
        {
            param_value.param_count(29958);
            param_value.param_index(26688);
            param_value.param_value(-5.6722715E37F);
            param_value.param_id("tzythHrjbfufketenfbjmqwydwjHjsawwyjzcvkZupubptwiyqpcecrmskrAvzqxYlygGmaFtrqmua", null) ;
            param_value.param_type(MAV_PARAM_TYPE.MAV_PARAM_TYPE_INT64);
        }

        public static void onPARAM_VALUE(com.company.demo.GroundControl.PARAM_VALUE param_value)
        {
            Debug.Assert(param_value.param_count() == 29958) ;
            Debug.Assert(param_value.param_index() == 26688) ;
            Debug.Assert(param_value.param_value() == -5.6722715E37F) ;
            Debug.Assert(param_value.param_id() ?.get() == "tzythHrjbfufketenfbjmqwydwjHjsawwyjzcvkZupubptwiyqpcecrmskrAvzqxYlygGmaFtrqmua");
            Debug.Assert(param_value.param_type().Value == MAV_PARAM_TYPE.MAV_PARAM_TYPE_INT64) ;
            Debug.Print("PARAM_VALUE \n");
        }

        public static void fill(org.unirail.Test. PARAM_SET  param_set)
        {
            param_set.target_system(-19);
            param_set.target_component(-124);
            param_set.param_value(1.7536652E38F);
            param_set.param_id("xuggzotszujn", null) ;
            param_set.param_type(MAV_PARAM_TYPE.MAV_PARAM_TYPE_REAL64);
        }

        public static void onPARAM_SET(com.company.demo.GroundControl.PARAM_SET param_set)
        {
            Debug.Assert(param_set.target_system() == -19) ;
            Debug.Assert(param_set.target_component() == -124) ;
            Debug.Assert(param_set.param_value() == 1.7536652E38F) ;
            Debug.Assert(param_set.param_id() ?.get() == "xuggzotszujn");
            Debug.Assert(param_set.param_type().Value == MAV_PARAM_TYPE.MAV_PARAM_TYPE_REAL64) ;
            Debug.Print("PARAM_SET \n");
        }

        public static void fill(org.unirail.Test. GPS_RAW_INT  gps_raw_int)
        {
            gps_raw_int.eph(-4032);
            gps_raw_int.epv(-7943);
            gps_raw_int.vel(-646);
            gps_raw_int.cog(-17804);
            gps_raw_int.time_usec(2584139135096314397L);
            gps_raw_int.lat(-1886133352);
            gps_raw_int.lon(1422202829);
            gps_raw_int.alt(-896955669);
            gps_raw_int.satellites_visible(104);
            gps_raw_int.fix_type(GPS_FIX_TYPE.GPS_FIX_TYPE_3D_FIX);
            gps_raw_int.alt_ellipsoid(1576255813);
            gps_raw_int.h_acc(-768835980);
            gps_raw_int.v_acc(1283674370);
            gps_raw_int.vel_acc(1012461842);
            gps_raw_int.hdg_acc(-1221807591);
        }

        public static void onGPS_RAW_INT(com.company.demo.GroundControl.GPS_RAW_INT gps_raw_int)
        {
            Debug.Assert(gps_raw_int.eph() == -4032) ;
            Debug.Assert(gps_raw_int.epv() == -7943) ;
            Debug.Assert(gps_raw_int.vel() == -646) ;
            Debug.Assert(gps_raw_int.cog() == -17804) ;
            Debug.Assert(gps_raw_int.time_usec() == 2584139135096314397L) ;
            Debug.Assert(gps_raw_int.lat() == -1886133352) ;
            Debug.Assert(gps_raw_int.lon() == 1422202829) ;
            Debug.Assert(gps_raw_int.alt() == -896955669) ;
            Debug.Assert(gps_raw_int.satellites_visible() == 104) ;
            Debug.Assert(gps_raw_int.fix_type().Value == GPS_FIX_TYPE.GPS_FIX_TYPE_3D_FIX) ;
            Debug.Assert(gps_raw_int.alt_ellipsoid().Value == 1576255813) ;
            Debug.Assert(gps_raw_int.h_acc().Value == -768835980) ;
            Debug.Assert(gps_raw_int.v_acc().Value == 1283674370) ;
            Debug.Assert(gps_raw_int.vel_acc().Value == 1012461842) ;
            Debug.Assert(gps_raw_int.hdg_acc().Value == -1221807591) ;
            Debug.Print("GPS_RAW_INT \n");
        }

        public static void fill(org.unirail.Test. GPS_STATUS  gps_status)
        {
            gps_status.satellites_visible(53);
            gps_status.satellite_prn(new sbyte [] { -110, 12, -92, 39, -73, 114, -78, -59, 91, 27, -40, -86, 103, -42, -55, 46, -97, 48, -119, 29  }) ;
            gps_status.satellite_used(new sbyte [] { -2, -42, 109, 18, 44, -93, -32, 73, -61, -85, 77, -54, -53, -64, -125, 11, -28, 95, 104, 72  }) ;
            gps_status.satellite_elevation(new sbyte [] { 26, -93, 62, -38, 123, -100, -34, -1, -11, 46, -60, 61, 53, 119, -89, -70, 79, 20, -85, 126  }) ;
            gps_status.satellite_azimuth(new sbyte [] { -5, -40, -75, -97, 104, 53, -42, 74, 63, 101, -110, -106, 65, -101, 84, -4, -94, 72, 19, 5  }) ;
            gps_status.satellite_snr(new sbyte [] { -84, -16, 12, -36, 121, -76, -58, 48, 76, -37, -16, -109, 32, -30, 77, 106, -43, -10, -9, 118  }) ;
        }

        public static void onGPS_STATUS(com.company.demo.GroundControl.GPS_STATUS gps_status)
        {
            Debug.Assert(gps_status.satellites_visible() == 53) ;
            Debug.Assert(gps_status.satellite_prn().same(new sbyte [] { -110, 12, -92, 39, -73, 114, -78, -59, 91, 27, -40, -86, 103, -42, -55, 46, -97, 48, -119, 29  }));
            Debug.Assert(gps_status.satellite_used().same(new sbyte [] { -2, -42, 109, 18, 44, -93, -32, 73, -61, -85, 77, -54, -53, -64, -125, 11, -28, 95, 104, 72  }));
            Debug.Assert(gps_status.satellite_elevation().same(new sbyte [] { 26, -93, 62, -38, 123, -100, -34, -1, -11, 46, -60, 61, 53, 119, -89, -70, 79, 20, -85, 126  }));
            Debug.Assert(gps_status.satellite_azimuth().same(new sbyte [] { -5, -40, -75, -97, 104, 53, -42, 74, 63, 101, -110, -106, 65, -101, 84, -4, -94, 72, 19, 5  }));
            Debug.Assert(gps_status.satellite_snr().same(new sbyte [] { -84, -16, 12, -36, 121, -76, -58, 48, 76, -37, -16, -109, 32, -30, 77, 106, -43, -10, -9, 118  }));
            Debug.Print("GPS_STATUS \n");
        }

        public static void fill(org.unirail.Test. SCALED_IMU  scaled_imu)
        {
            scaled_imu.time_boot_ms(1989906048);
            scaled_imu.xacc(-13761);
            scaled_imu.yacc(-4566);
            scaled_imu.zacc(-18910);
            scaled_imu.xgyro(298);
            scaled_imu.ygyro(9799);
            scaled_imu.zgyro(-5720);
            scaled_imu.xmag(1161);
            scaled_imu.ymag(-11832);
            scaled_imu.zmag(20760);
        }

        public static void onSCALED_IMU(com.company.demo.GroundControl.SCALED_IMU scaled_imu)
        {
            Debug.Assert(scaled_imu.time_boot_ms() == 1989906048) ;
            Debug.Assert(scaled_imu.xacc() == -13761) ;
            Debug.Assert(scaled_imu.yacc() == -4566) ;
            Debug.Assert(scaled_imu.zacc() == -18910) ;
            Debug.Assert(scaled_imu.xgyro() == 298) ;
            Debug.Assert(scaled_imu.ygyro() == 9799) ;
            Debug.Assert(scaled_imu.zgyro() == -5720) ;
            Debug.Assert(scaled_imu.xmag() == 1161) ;
            Debug.Assert(scaled_imu.ymag() == -11832) ;
            Debug.Assert(scaled_imu.zmag() == 20760) ;
            Debug.Print("SCALED_IMU \n");
        }

        public static void fill(org.unirail.Test. RAW_IMU  raw_imu)
        {
            raw_imu.time_usec(-8349661019654852469L);
            raw_imu.xacc(-22294);
            raw_imu.yacc(-9141);
            raw_imu.zacc(-1505);
            raw_imu.xgyro(2205);
            raw_imu.ygyro(-27252);
            raw_imu.zgyro(7287);
            raw_imu.xmag(9810);
            raw_imu.ymag(19678);
            raw_imu.zmag(23141);
        }

        public static void onRAW_IMU(com.company.demo.GroundControl.RAW_IMU raw_imu)
        {
            Debug.Assert(raw_imu.time_usec() == -8349661019654852469L) ;
            Debug.Assert(raw_imu.xacc() == -22294) ;
            Debug.Assert(raw_imu.yacc() == -9141) ;
            Debug.Assert(raw_imu.zacc() == -1505) ;
            Debug.Assert(raw_imu.xgyro() == 2205) ;
            Debug.Assert(raw_imu.ygyro() == -27252) ;
            Debug.Assert(raw_imu.zgyro() == 7287) ;
            Debug.Assert(raw_imu.xmag() == 9810) ;
            Debug.Assert(raw_imu.ymag() == 19678) ;
            Debug.Assert(raw_imu.zmag() == 23141) ;
            Debug.Print("RAW_IMU \n");
        }

        public static void fill(org.unirail.Test. RAW_PRESSURE  raw_pressure)
        {
            raw_pressure.time_usec(-6861361722206495325L);
            raw_pressure.press_abs(16622);
            raw_pressure.press_diff1(-11917);
            raw_pressure.press_diff2(26086);
            raw_pressure.temperature(19842);
        }

        public static void onRAW_PRESSURE(com.company.demo.GroundControl.RAW_PRESSURE raw_pressure)
        {
            Debug.Assert(raw_pressure.time_usec() == -6861361722206495325L) ;
            Debug.Assert(raw_pressure.press_abs() == 16622) ;
            Debug.Assert(raw_pressure.press_diff1() == -11917) ;
            Debug.Assert(raw_pressure.press_diff2() == 26086) ;
            Debug.Assert(raw_pressure.temperature() == 19842) ;
            Debug.Print("RAW_PRESSURE \n");
        }

        public static void fill(org.unirail.Test. SCALED_PRESSURE  scaled_pressure)
        {
            scaled_pressure.time_boot_ms(-414305130);
            scaled_pressure.press_abs(2.0167729E38F);
            scaled_pressure.press_diff(3.1504058E38F);
            scaled_pressure.temperature(-14003);
        }

        public static void onSCALED_PRESSURE(com.company.demo.GroundControl.SCALED_PRESSURE scaled_pressure)
        {
            Debug.Assert(scaled_pressure.time_boot_ms() == -414305130) ;
            Debug.Assert(scaled_pressure.press_abs() == 2.0167729E38F) ;
            Debug.Assert(scaled_pressure.press_diff() == 3.1504058E38F) ;
            Debug.Assert(scaled_pressure.temperature() == -14003) ;
            Debug.Print("SCALED_PRESSURE \n");
        }

        public static void fill(org.unirail.Test. ATTITUDE  attitude)
        {
            attitude.time_boot_ms(2016803433);
            attitude.roll(2.7456712E38F);
            attitude.pitch(-2.6986614E38F);
            attitude.yaw(-1.5377008E38F);
            attitude.rollspeed(-7.739099E37F);
            attitude.pitchspeed(2.8744385E38F);
            attitude.yawspeed(1.3261648E38F);
        }

        public static void onATTITUDE(com.company.demo.GroundControl.ATTITUDE attitude)
        {
            Debug.Assert(attitude.time_boot_ms() == 2016803433) ;
            Debug.Assert(attitude.roll() == 2.7456712E38F) ;
            Debug.Assert(attitude.pitch() == -2.6986614E38F) ;
            Debug.Assert(attitude.yaw() == -1.5377008E38F) ;
            Debug.Assert(attitude.rollspeed() == -7.739099E37F) ;
            Debug.Assert(attitude.pitchspeed() == 2.8744385E38F) ;
            Debug.Assert(attitude.yawspeed() == 1.3261648E38F) ;
            Debug.Print("ATTITUDE \n");
        }

        public static void fill(org.unirail.Test. ATTITUDE_QUATERNION  attitude_quaternion)
        {
            attitude_quaternion.time_boot_ms(-344985597);
            attitude_quaternion.q1(1.8614147E38F);
            attitude_quaternion.q2(1.680555E38F);
            attitude_quaternion.q3(1.0499641E37F);
            attitude_quaternion.q4(-6.1320884E37F);
            attitude_quaternion.rollspeed(9.393424E37F);
            attitude_quaternion.pitchspeed(3.2931881E38F);
            attitude_quaternion.yawspeed(3.1626813E37F);
        }

        public static void onATTITUDE_QUATERNION(com.company.demo.GroundControl.ATTITUDE_QUATERNION attitude_quaternion)
        {
            Debug.Assert(attitude_quaternion.time_boot_ms() == -344985597) ;
            Debug.Assert(attitude_quaternion.q1() == 1.8614147E38F) ;
            Debug.Assert(attitude_quaternion.q2() == 1.680555E38F) ;
            Debug.Assert(attitude_quaternion.q3() == 1.0499641E37F) ;
            Debug.Assert(attitude_quaternion.q4() == -6.1320884E37F) ;
            Debug.Assert(attitude_quaternion.rollspeed() == 9.393424E37F) ;
            Debug.Assert(attitude_quaternion.pitchspeed() == 3.2931881E38F) ;
            Debug.Assert(attitude_quaternion.yawspeed() == 3.1626813E37F) ;
            Debug.Print("ATTITUDE_QUATERNION \n");
        }

        public static void fill(org.unirail.Test. LOCAL_POSITION_NED  local_position_ned)
        {
            local_position_ned.time_boot_ms(2078462220);
            local_position_ned.x(2.4660827E37F);
            local_position_ned.y(-1.4565122E38F);
            local_position_ned.z(1.737102E38F);
            local_position_ned.vx(-2.9652936E37F);
            local_position_ned.vy(6.3607523E37F);
            local_position_ned.vz(1.7685695E38F);
        }

        public static void onLOCAL_POSITION_NED(com.company.demo.GroundControl.LOCAL_POSITION_NED local_position_ned)
        {
            Debug.Assert(local_position_ned.time_boot_ms() == 2078462220) ;
            Debug.Assert(local_position_ned.x() == 2.4660827E37F) ;
            Debug.Assert(local_position_ned.y() == -1.4565122E38F) ;
            Debug.Assert(local_position_ned.z() == 1.737102E38F) ;
            Debug.Assert(local_position_ned.vx() == -2.9652936E37F) ;
            Debug.Assert(local_position_ned.vy() == 6.3607523E37F) ;
            Debug.Assert(local_position_ned.vz() == 1.7685695E38F) ;
            Debug.Print("LOCAL_POSITION_NED \n");
        }

        public static void fill(org.unirail.Test. GLOBAL_POSITION_INT  global_position_int)
        {
            global_position_int.hdg(20429);
            global_position_int.time_boot_ms(100900614);
            global_position_int.lat(488875232);
            global_position_int.lon(-1734413224);
            global_position_int.alt(774701065);
            global_position_int.relative_alt(2091720319);
            global_position_int.vx(16737);
            global_position_int.vy(-3180);
            global_position_int.vz(-19469);
        }

        public static void onGLOBAL_POSITION_INT(com.company.demo.GroundControl.GLOBAL_POSITION_INT global_position_int)
        {
            Debug.Assert(global_position_int.hdg() == 20429) ;
            Debug.Assert(global_position_int.time_boot_ms() == 100900614) ;
            Debug.Assert(global_position_int.lat() == 488875232) ;
            Debug.Assert(global_position_int.lon() == -1734413224) ;
            Debug.Assert(global_position_int.alt() == 774701065) ;
            Debug.Assert(global_position_int.relative_alt() == 2091720319) ;
            Debug.Assert(global_position_int.vx() == 16737) ;
            Debug.Assert(global_position_int.vy() == -3180) ;
            Debug.Assert(global_position_int.vz() == -19469) ;
            Debug.Print("GLOBAL_POSITION_INT \n");
        }

        public static void fill(org.unirail.Test. RC_CHANNELS_SCALED  rc_channels_scaled)
        {
            rc_channels_scaled.time_boot_ms(663236037);
            rc_channels_scaled.port(-26);
            rc_channels_scaled.chan1_scaled(32685);
            rc_channels_scaled.chan2_scaled(9198);
            rc_channels_scaled.chan3_scaled(-29577);
            rc_channels_scaled.chan4_scaled(27892);
            rc_channels_scaled.chan5_scaled(22398);
            rc_channels_scaled.chan6_scaled(31561);
            rc_channels_scaled.chan7_scaled(26048);
            rc_channels_scaled.chan8_scaled(31161);
            rc_channels_scaled.rssi(38);
        }

        public static void onRC_CHANNELS_SCALED(com.company.demo.GroundControl.RC_CHANNELS_SCALED rc_channels_scaled)
        {
            Debug.Assert(rc_channels_scaled.time_boot_ms() == 663236037) ;
            Debug.Assert(rc_channels_scaled.port() == -26) ;
            Debug.Assert(rc_channels_scaled.chan1_scaled() == 32685) ;
            Debug.Assert(rc_channels_scaled.chan2_scaled() == 9198) ;
            Debug.Assert(rc_channels_scaled.chan3_scaled() == -29577) ;
            Debug.Assert(rc_channels_scaled.chan4_scaled() == 27892) ;
            Debug.Assert(rc_channels_scaled.chan5_scaled() == 22398) ;
            Debug.Assert(rc_channels_scaled.chan6_scaled() == 31561) ;
            Debug.Assert(rc_channels_scaled.chan7_scaled() == 26048) ;
            Debug.Assert(rc_channels_scaled.chan8_scaled() == 31161) ;
            Debug.Assert(rc_channels_scaled.rssi() == 38) ;
            Debug.Print("RC_CHANNELS_SCALED \n");
        }

        public static void fill(org.unirail.Test. RC_CHANNELS_RAW  rc_channels_raw)
        {
            rc_channels_raw.chan1_raw(4085);
            rc_channels_raw.chan2_raw(11553);
            rc_channels_raw.chan3_raw(-16376);
            rc_channels_raw.chan4_raw(-10248);
            rc_channels_raw.chan5_raw(26732);
            rc_channels_raw.chan6_raw(3203);
            rc_channels_raw.chan7_raw(-24446);
            rc_channels_raw.chan8_raw(-21589);
            rc_channels_raw.time_boot_ms(656489840);
            rc_channels_raw.port(28);
            rc_channels_raw.rssi(-92);
        }

        public static void onRC_CHANNELS_RAW(com.company.demo.GroundControl.RC_CHANNELS_RAW rc_channels_raw)
        {
            Debug.Assert(rc_channels_raw.chan1_raw() == 4085) ;
            Debug.Assert(rc_channels_raw.chan2_raw() == 11553) ;
            Debug.Assert(rc_channels_raw.chan3_raw() == -16376) ;
            Debug.Assert(rc_channels_raw.chan4_raw() == -10248) ;
            Debug.Assert(rc_channels_raw.chan5_raw() == 26732) ;
            Debug.Assert(rc_channels_raw.chan6_raw() == 3203) ;
            Debug.Assert(rc_channels_raw.chan7_raw() == -24446) ;
            Debug.Assert(rc_channels_raw.chan8_raw() == -21589) ;
            Debug.Assert(rc_channels_raw.time_boot_ms() == 656489840) ;
            Debug.Assert(rc_channels_raw.port() == 28) ;
            Debug.Assert(rc_channels_raw.rssi() == -92) ;
            Debug.Print("RC_CHANNELS_RAW \n");
        }

        public static void fill(org.unirail.Test. SERVO_OUTPUT_RAW  servo_output_raw)
        {
            servo_output_raw.servo1_raw(-19221);
            servo_output_raw.servo2_raw(-29481);
            servo_output_raw.servo3_raw(30722);
            servo_output_raw.servo4_raw(-11670);
            servo_output_raw.servo5_raw(16414);
            servo_output_raw.servo6_raw(25046);
            servo_output_raw.servo7_raw(-32096);
            servo_output_raw.servo8_raw(20304);
            servo_output_raw.time_usec(-285215880);
            servo_output_raw.port(104);
            servo_output_raw.servo9_raw(-28187);
            servo_output_raw.servo10_raw(-28273);
            servo_output_raw.servo11_raw(-13338);
            servo_output_raw.servo12_raw(30171);
            servo_output_raw.servo13_raw(17477);
            servo_output_raw.servo14_raw(307);
            servo_output_raw.servo15_raw(6609);
            servo_output_raw.servo16_raw(-21497);
        }

        public static void onSERVO_OUTPUT_RAW(com.company.demo.GroundControl.SERVO_OUTPUT_RAW servo_output_raw)
        {
            Debug.Assert(servo_output_raw.servo1_raw() == -19221) ;
            Debug.Assert(servo_output_raw.servo2_raw() == -29481) ;
            Debug.Assert(servo_output_raw.servo3_raw() == 30722) ;
            Debug.Assert(servo_output_raw.servo4_raw() == -11670) ;
            Debug.Assert(servo_output_raw.servo5_raw() == 16414) ;
            Debug.Assert(servo_output_raw.servo6_raw() == 25046) ;
            Debug.Assert(servo_output_raw.servo7_raw() == -32096) ;
            Debug.Assert(servo_output_raw.servo8_raw() == 20304) ;
            Debug.Assert(servo_output_raw.time_usec() == -285215880) ;
            Debug.Assert(servo_output_raw.port() == 104) ;
            Debug.Assert(servo_output_raw.servo9_raw().Value == -28187) ;
            Debug.Assert(servo_output_raw.servo10_raw().Value == -28273) ;
            Debug.Assert(servo_output_raw.servo11_raw().Value == -13338) ;
            Debug.Assert(servo_output_raw.servo12_raw().Value == 30171) ;
            Debug.Assert(servo_output_raw.servo13_raw().Value == 17477) ;
            Debug.Assert(servo_output_raw.servo14_raw().Value == 307) ;
            Debug.Assert(servo_output_raw.servo15_raw().Value == 6609) ;
            Debug.Assert(servo_output_raw.servo16_raw().Value == -21497) ;
            Debug.Print("SERVO_OUTPUT_RAW \n");
        }

        public static void fill(org.unirail.Test. MISSION_REQUEST_PARTIAL_LIST  mission_request_partial_list)
        {
            mission_request_partial_list.target_system(24);
            mission_request_partial_list.target_component(92);
            mission_request_partial_list.start_index(-8969);
            mission_request_partial_list.end_index(20039);
            mission_request_partial_list.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE);
        }

        public static void onMISSION_REQUEST_PARTIAL_LIST(com.company.demo.GroundControl.MISSION_REQUEST_PARTIAL_LIST mission_request_partial_list)
        {
            Debug.Assert(mission_request_partial_list.target_system() == 24) ;
            Debug.Assert(mission_request_partial_list.target_component() == 92) ;
            Debug.Assert(mission_request_partial_list.start_index() == -8969) ;
            Debug.Assert(mission_request_partial_list.end_index() == 20039) ;
            Debug.Assert(mission_request_partial_list.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE) ;
            Debug.Print("MISSION_REQUEST_PARTIAL_LIST \n");
        }

        public static void fill(org.unirail.Test. MISSION_WRITE_PARTIAL_LIST  mission_write_partial_list)
        {
            mission_write_partial_list.target_system(102);
            mission_write_partial_list.target_component(-19);
            mission_write_partial_list.start_index(22813);
            mission_write_partial_list.end_index(23453);
            mission_write_partial_list.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE);
        }

        public static void onMISSION_WRITE_PARTIAL_LIST(com.company.demo.GroundControl.MISSION_WRITE_PARTIAL_LIST mission_write_partial_list)
        {
            Debug.Assert(mission_write_partial_list.target_system() == 102) ;
            Debug.Assert(mission_write_partial_list.target_component() == -19) ;
            Debug.Assert(mission_write_partial_list.start_index() == 22813) ;
            Debug.Assert(mission_write_partial_list.end_index() == 23453) ;
            Debug.Assert(mission_write_partial_list.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE) ;
            Debug.Print("MISSION_WRITE_PARTIAL_LIST \n");
        }

        public static void fill(org.unirail.Test. MISSION_ITEM  mission_item)
        {
            mission_item.seq(18940);
            mission_item.target_system(47);
            mission_item.target_component(91);
            mission_item.current(-11);
            mission_item.autocontinue(6);
            mission_item.param1(2.636665E38F);
            mission_item.param2(-5.5949113E37F);
            mission_item.param3(2.1708817E38F);
            mission_item.param4(-1.7513031E38F);
            mission_item.x(1.7064443E38F);
            mission_item.y(-1.9630405E38F);
            mission_item.z(-2.34471E38F);
            mission_item.frame(MAV_FRAME.MAV_FRAME_GLOBAL);
            mission_item.command(MAV_CMD.MAV_CMD_DO_GO_AROUND);
            mission_item.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY);
        }

        public static void onMISSION_ITEM(com.company.demo.GroundControl.MISSION_ITEM mission_item)
        {
            Debug.Assert(mission_item.seq() == 18940) ;
            Debug.Assert(mission_item.target_system() == 47) ;
            Debug.Assert(mission_item.target_component() == 91) ;
            Debug.Assert(mission_item.current() == -11) ;
            Debug.Assert(mission_item.autocontinue() == 6) ;
            Debug.Assert(mission_item.param1() == 2.636665E38F) ;
            Debug.Assert(mission_item.param2() == -5.5949113E37F) ;
            Debug.Assert(mission_item.param3() == 2.1708817E38F) ;
            Debug.Assert(mission_item.param4() == -1.7513031E38F) ;
            Debug.Assert(mission_item.x() == 1.7064443E38F) ;
            Debug.Assert(mission_item.y() == -1.9630405E38F) ;
            Debug.Assert(mission_item.z() == -2.34471E38F) ;
            Debug.Assert(mission_item.frame().Value == MAV_FRAME.MAV_FRAME_GLOBAL) ;
            Debug.Assert(mission_item.command().Value == MAV_CMD.MAV_CMD_DO_GO_AROUND) ;
            Debug.Assert(mission_item.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY) ;
            Debug.Print("MISSION_ITEM \n");
        }

        public static void fill(org.unirail.Test. MISSION_REQUEST  mission_request)
        {
            mission_request.seq(31370);
            mission_request.target_system(64);
            mission_request.target_component(-101);
            mission_request.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY);
        }

        public static void onMISSION_REQUEST(com.company.demo.GroundControl.MISSION_REQUEST mission_request)
        {
            Debug.Assert(mission_request.seq() == 31370) ;
            Debug.Assert(mission_request.target_system() == 64) ;
            Debug.Assert(mission_request.target_component() == -101) ;
            Debug.Assert(mission_request.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY) ;
            Debug.Print("MISSION_REQUEST \n");
        }

        public static void fill(org.unirail.Test. MISSION_SET_CURRENT  mission_set_current)
        {
            mission_set_current.seq(17722);
            mission_set_current.target_system(-58);
            mission_set_current.target_component(5);
        }

        public static void onMISSION_SET_CURRENT(com.company.demo.GroundControl.MISSION_SET_CURRENT mission_set_current)
        {
            Debug.Assert(mission_set_current.seq() == 17722) ;
            Debug.Assert(mission_set_current.target_system() == -58) ;
            Debug.Assert(mission_set_current.target_component() == 5) ;
            Debug.Print("MISSION_SET_CURRENT \n");
        }

        public static void fill(org.unirail.Test. MISSION_CURRENT  mission_current)
        {
            mission_current.seq(29900);
        }

        public static void onMISSION_CURRENT(com.company.demo.GroundControl.MISSION_CURRENT mission_current)
        {
            Debug.Assert(mission_current.seq() == 29900) ;
            Debug.Print("MISSION_CURRENT \n");
        }

        public static void fill(org.unirail.Test. MISSION_REQUEST_LIST  mission_request_list)
        {
            mission_request_list.target_system(22);
            mission_request_list.target_component(61);
            mission_request_list.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE);
        }

        public static void onMISSION_REQUEST_LIST(com.company.demo.GroundControl.MISSION_REQUEST_LIST mission_request_list)
        {
            Debug.Assert(mission_request_list.target_system() == 22) ;
            Debug.Assert(mission_request_list.target_component() == 61) ;
            Debug.Assert(mission_request_list.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE) ;
            Debug.Print("MISSION_REQUEST_LIST \n");
        }

        public static void fill(org.unirail.Test. MISSION_COUNT  mission_count)
        {
            mission_count.count(8844);
            mission_count.target_system(59);
            mission_count.target_component(127);
            mission_count.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE);
        }

        public static void onMISSION_COUNT(com.company.demo.GroundControl.MISSION_COUNT mission_count)
        {
            Debug.Assert(mission_count.count() == 8844) ;
            Debug.Assert(mission_count.target_system() == 59) ;
            Debug.Assert(mission_count.target_component() == 127) ;
            Debug.Assert(mission_count.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE) ;
            Debug.Print("MISSION_COUNT \n");
        }

        public static void fill(org.unirail.Test. MISSION_CLEAR_ALL  mission_clear_all)
        {
            mission_clear_all.target_system(111);
            mission_clear_all.target_component(-81);
            mission_clear_all.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE);
        }

        public static void onMISSION_CLEAR_ALL(com.company.demo.GroundControl.MISSION_CLEAR_ALL mission_clear_all)
        {
            Debug.Assert(mission_clear_all.target_system() == 111) ;
            Debug.Assert(mission_clear_all.target_component() == -81) ;
            Debug.Assert(mission_clear_all.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE) ;
            Debug.Print("MISSION_CLEAR_ALL \n");
        }

        public static void fill(org.unirail.Test. MISSION_ITEM_REACHED  mission_item_reached)
        {
            mission_item_reached.seq(-22850);
        }

        public static void onMISSION_ITEM_REACHED(com.company.demo.GroundControl.MISSION_ITEM_REACHED mission_item_reached)
        {
            Debug.Assert(mission_item_reached.seq() == -22850) ;
            Debug.Print("MISSION_ITEM_REACHED \n");
        }

        public static void fill(org.unirail.Test. MISSION_ACK  mission_ack)
        {
            mission_ack.target_system(121);
            mission_ack.target_component(2);
            mission_ack.typE(MAV_MISSION_RESULT.MAV_MISSION_INVALID_PARAM5_X);
            mission_ack.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY);
        }

        public static void onMISSION_ACK(com.company.demo.GroundControl.MISSION_ACK mission_ack)
        {
            Debug.Assert(mission_ack.target_system() == 121) ;
            Debug.Assert(mission_ack.target_component() == 2) ;
            Debug.Assert(mission_ack.typE().Value == MAV_MISSION_RESULT.MAV_MISSION_INVALID_PARAM5_X) ;
            Debug.Assert(mission_ack.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY) ;
            Debug.Print("MISSION_ACK \n");
        }

        public static void fill(org.unirail.Test. SET_GPS_GLOBAL_ORIGIN  set_gps_global_origin)
        {
            set_gps_global_origin.target_system(38);
            set_gps_global_origin.latitude(-1049182018);
            set_gps_global_origin.longitude(511612328);
            set_gps_global_origin.altitude(-1340061226);
            set_gps_global_origin.time_usec(-1408693491745086869L);
        }

        public static void onSET_GPS_GLOBAL_ORIGIN(com.company.demo.GroundControl.SET_GPS_GLOBAL_ORIGIN set_gps_global_origin)
        {
            Debug.Assert(set_gps_global_origin.target_system() == 38) ;
            Debug.Assert(set_gps_global_origin.latitude() == -1049182018) ;
            Debug.Assert(set_gps_global_origin.longitude() == 511612328) ;
            Debug.Assert(set_gps_global_origin.altitude() == -1340061226) ;
            Debug.Assert(set_gps_global_origin.time_usec().Value == -1408693491745086869L) ;
            Debug.Print("SET_GPS_GLOBAL_ORIGIN \n");
        }

        public static void fill(org.unirail.Test. GPS_GLOBAL_ORIGIN  gps_global_origin)
        {
            gps_global_origin.latitude(532356858);
            gps_global_origin.longitude(-2071822559);
            gps_global_origin.altitude(-1981695160);
            gps_global_origin.time_usec(-2542437411648012287L);
        }

        public static void onGPS_GLOBAL_ORIGIN(com.company.demo.GroundControl.GPS_GLOBAL_ORIGIN gps_global_origin)
        {
            Debug.Assert(gps_global_origin.latitude() == 532356858) ;
            Debug.Assert(gps_global_origin.longitude() == -2071822559) ;
            Debug.Assert(gps_global_origin.altitude() == -1981695160) ;
            Debug.Assert(gps_global_origin.time_usec().Value == -2542437411648012287L) ;
            Debug.Print("GPS_GLOBAL_ORIGIN \n");
        }

        public static void fill(org.unirail.Test. PARAM_MAP_RC  param_map_rc)
        {
            param_map_rc.target_system(99);
            param_map_rc.target_component(82);
            param_map_rc.param_index(-23031);
            param_map_rc.parameter_rc_channel_index(108);
            param_map_rc.param_value0(-2.3509029E38F);
            param_map_rc.scale(2.3841392E37F);
            param_map_rc.param_value_min(-6.0535463E37F);
            param_map_rc.param_value_max(-1.4103464E38F);
            param_map_rc.param_id("kzKpucUJpiUmnbqevaqoinqbwkzniyqitEslezvkluzwYDhqHnbwekxlpbybAxdwWrmofMpocuvmys", null) ;
        }

        public static void onPARAM_MAP_RC(com.company.demo.GroundControl.PARAM_MAP_RC param_map_rc)
        {
            Debug.Assert(param_map_rc.target_system() == 99) ;
            Debug.Assert(param_map_rc.target_component() == 82) ;
            Debug.Assert(param_map_rc.param_index() == -23031) ;
            Debug.Assert(param_map_rc.parameter_rc_channel_index() == 108) ;
            Debug.Assert(param_map_rc.param_value0() == -2.3509029E38F) ;
            Debug.Assert(param_map_rc.scale() == 2.3841392E37F) ;
            Debug.Assert(param_map_rc.param_value_min() == -6.0535463E37F) ;
            Debug.Assert(param_map_rc.param_value_max() == -1.4103464E38F) ;
            Debug.Assert(param_map_rc.param_id() ?.get() == "kzKpucUJpiUmnbqevaqoinqbwkzniyqitEslezvkluzwYDhqHnbwekxlpbybAxdwWrmofMpocuvmys");
            Debug.Print("PARAM_MAP_RC \n");
        }

        public static void fill(org.unirail.Test. MISSION_REQUEST_INT  mission_request_int)
        {
            mission_request_int.seq(21033);
            mission_request_int.target_system(45);
            mission_request_int.target_component(-24);
            mission_request_int.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE);
        }

        public static void onMISSION_REQUEST_INT(com.company.demo.GroundControl.MISSION_REQUEST_INT mission_request_int)
        {
            Debug.Assert(mission_request_int.seq() == 21033) ;
            Debug.Assert(mission_request_int.target_system() == 45) ;
            Debug.Assert(mission_request_int.target_component() == -24) ;
            Debug.Assert(mission_request_int.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_FENCE) ;
            Debug.Print("MISSION_REQUEST_INT \n");
        }

        public static void fill(org.unirail.Test. SAFETY_SET_ALLOWED_AREA  safety_set_allowed_area)
        {
            safety_set_allowed_area.target_system(-75);
            safety_set_allowed_area.target_component(110);
            safety_set_allowed_area.p1x(-1.1197944E38F);
            safety_set_allowed_area.p1y(5.0509056E37F);
            safety_set_allowed_area.p1z(-1.6674239E38F);
            safety_set_allowed_area.p2x(-9.303119E37F);
            safety_set_allowed_area.p2y(-6.9563315E37F);
            safety_set_allowed_area.p2z(2.2051545E38F);
            safety_set_allowed_area.frame(MAV_FRAME.MAV_FRAME_GLOBAL);
        }

        public static void onSAFETY_SET_ALLOWED_AREA(com.company.demo.GroundControl.SAFETY_SET_ALLOWED_AREA safety_set_allowed_area)
        {
            Debug.Assert(safety_set_allowed_area.target_system() == -75) ;
            Debug.Assert(safety_set_allowed_area.target_component() == 110) ;
            Debug.Assert(safety_set_allowed_area.p1x() == -1.1197944E38F) ;
            Debug.Assert(safety_set_allowed_area.p1y() == 5.0509056E37F) ;
            Debug.Assert(safety_set_allowed_area.p1z() == -1.6674239E38F) ;
            Debug.Assert(safety_set_allowed_area.p2x() == -9.303119E37F) ;
            Debug.Assert(safety_set_allowed_area.p2y() == -6.9563315E37F) ;
            Debug.Assert(safety_set_allowed_area.p2z() == 2.2051545E38F) ;
            Debug.Assert(safety_set_allowed_area.frame().Value == MAV_FRAME.MAV_FRAME_GLOBAL) ;
            Debug.Print("SAFETY_SET_ALLOWED_AREA \n");
        }

        public static void fill(org.unirail.Test. SAFETY_ALLOWED_AREA  safety_allowed_area)
        {
            safety_allowed_area.p1x(2.784532E38F);
            safety_allowed_area.p1y(-2.1153359E38F);
            safety_allowed_area.p1z(3.0189464E38F);
            safety_allowed_area.p2x(-2.8442758E35F);
            safety_allowed_area.p2y(-2.4639177E38F);
            safety_allowed_area.p2z(-2.7717203E38F);
            safety_allowed_area.frame(MAV_FRAME.MAV_FRAME_BODY_OFFSET_NED);
        }

        public static void onSAFETY_ALLOWED_AREA(com.company.demo.GroundControl.SAFETY_ALLOWED_AREA safety_allowed_area)
        {
            Debug.Assert(safety_allowed_area.p1x() == 2.784532E38F) ;
            Debug.Assert(safety_allowed_area.p1y() == -2.1153359E38F) ;
            Debug.Assert(safety_allowed_area.p1z() == 3.0189464E38F) ;
            Debug.Assert(safety_allowed_area.p2x() == -2.8442758E35F) ;
            Debug.Assert(safety_allowed_area.p2y() == -2.4639177E38F) ;
            Debug.Assert(safety_allowed_area.p2z() == -2.7717203E38F) ;
            Debug.Assert(safety_allowed_area.frame().Value == MAV_FRAME.MAV_FRAME_BODY_OFFSET_NED) ;
            Debug.Print("SAFETY_ALLOWED_AREA \n");
        }

        public static void fill(org.unirail.Test. ATTITUDE_QUATERNION_COV  attitude_quaternion_cov)
        {
            attitude_quaternion_cov.time_usec(-9022121521125722987L);
            attitude_quaternion_cov.q(new float [] { 2.3070789E38F, -1.3092368E38F, 1.6305726E38F, -1.0560741E38F  }) ;
            attitude_quaternion_cov.rollspeed(1.7597102E38F);
            attitude_quaternion_cov.pitchspeed(2.3867441E38F);
            attitude_quaternion_cov.yawspeed(2.4627242E38F);
            attitude_quaternion_cov.covariance(new float [] { -1.2749846E38F, -3.3745916E37F, 1.9910651E38F, -1.7644812E38F, 1.2973921E38F, -1.4637678E38F, 1.0439408E38F, 1.0861386E38F, -2.5020468E38F  }) ;
        }

        public static void onATTITUDE_QUATERNION_COV(com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV attitude_quaternion_cov)
        {
            Debug.Assert(attitude_quaternion_cov.time_usec() == -9022121521125722987L) ;
            Debug.Assert(attitude_quaternion_cov.q().same(new float [] { 2.3070789E38F, -1.3092368E38F, 1.6305726E38F, -1.0560741E38F  }));
            Debug.Assert(attitude_quaternion_cov.rollspeed() == 1.7597102E38F) ;
            Debug.Assert(attitude_quaternion_cov.pitchspeed() == 2.3867441E38F) ;
            Debug.Assert(attitude_quaternion_cov.yawspeed() == 2.4627242E38F) ;
            Debug.Assert(attitude_quaternion_cov.covariance().same(new float [] { -1.2749846E38F, -3.3745916E37F, 1.9910651E38F, -1.7644812E38F, 1.2973921E38F, -1.4637678E38F, 1.0439408E38F, 1.0861386E38F, -2.5020468E38F  }));
            Debug.Print("ATTITUDE_QUATERNION_COV \n");
        }

        public static void fill(org.unirail.Test. NAV_CONTROLLER_OUTPUT  nav_controller_output)
        {
            nav_controller_output.wp_dist(23838);
            nav_controller_output.nav_roll(2.8870945E38F);
            nav_controller_output.nav_pitch(-5.2797024E37F);
            nav_controller_output.nav_bearing(-23986);
            nav_controller_output.target_bearing(17340);
            nav_controller_output.alt_error(-2.9152374E38F);
            nav_controller_output.aspd_error(2.586006E38F);
            nav_controller_output.xtrack_error(-1.5172389E38F);
        }

        public static void onNAV_CONTROLLER_OUTPUT(com.company.demo.GroundControl.NAV_CONTROLLER_OUTPUT nav_controller_output)
        {
            Debug.Assert(nav_controller_output.wp_dist() == 23838) ;
            Debug.Assert(nav_controller_output.nav_roll() == 2.8870945E38F) ;
            Debug.Assert(nav_controller_output.nav_pitch() == -5.2797024E37F) ;
            Debug.Assert(nav_controller_output.nav_bearing() == -23986) ;
            Debug.Assert(nav_controller_output.target_bearing() == 17340) ;
            Debug.Assert(nav_controller_output.alt_error() == -2.9152374E38F) ;
            Debug.Assert(nav_controller_output.aspd_error() == 2.586006E38F) ;
            Debug.Assert(nav_controller_output.xtrack_error() == -1.5172389E38F) ;
            Debug.Print("NAV_CONTROLLER_OUTPUT \n");
        }

        public static void fill(org.unirail.Test. GLOBAL_POSITION_INT_COV  global_position_int_cov)
        {
            global_position_int_cov.time_usec(3195954962974120518L);
            global_position_int_cov.lat(-699981572);
            global_position_int_cov.lon(-125570014);
            global_position_int_cov.alt(274093179);
            global_position_int_cov.relative_alt(-1269250474);
            global_position_int_cov.vx(1.8629182E38F);
            global_position_int_cov.vy(2.1912069E38F);
            global_position_int_cov.vz(-2.2362873E37F);
            global_position_int_cov.covariance(new float [] { -1.0508976E38F, -2.1358864E38F, 2.9768288E38F, -3.87071E37F, 2.0608932E38F, -1.9155083E38F, -3.162007E38F, 7.5267875E37F, 2.4352606E38F, -2.3967803E38F, 5.069929E37F, -7.327916E37F, -2.5006475E38F, -5.9398847E37F, -1.9119268E38F, 3.3456747E38F, -1.8271478E38F, 1.2757449E38F, 8.974523E37F, -2.1037903E38F, 2.5320063E37F, 1.0875788E38F, -2.6357687E38F, 2.9120816E38F, 1.8074452E38F, -2.7265416E38F, 7.9914007E37F, 2.222026E38F, 1.9770376E38F, 9.314531E37F, -2.5164641E38F, 2.6995058E38F, -3.1693129E38F, -1.0361435E38F, -5.434853E37F, -1.8953103E37F  }) ;
            global_position_int_cov.estimator_type(MAV_ESTIMATOR_TYPE.MAV_ESTIMATOR_TYPE_GPS);
        }

        public static void onGLOBAL_POSITION_INT_COV(com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV global_position_int_cov)
        {
            Debug.Assert(global_position_int_cov.time_usec() == 3195954962974120518L) ;
            Debug.Assert(global_position_int_cov.lat() == -699981572) ;
            Debug.Assert(global_position_int_cov.lon() == -125570014) ;
            Debug.Assert(global_position_int_cov.alt() == 274093179) ;
            Debug.Assert(global_position_int_cov.relative_alt() == -1269250474) ;
            Debug.Assert(global_position_int_cov.vx() == 1.8629182E38F) ;
            Debug.Assert(global_position_int_cov.vy() == 2.1912069E38F) ;
            Debug.Assert(global_position_int_cov.vz() == -2.2362873E37F) ;
            Debug.Assert(global_position_int_cov.covariance().same(new float [] { -1.0508976E38F, -2.1358864E38F, 2.9768288E38F, -3.87071E37F, 2.0608932E38F, -1.9155083E38F, -3.162007E38F, 7.5267875E37F, 2.4352606E38F, -2.3967803E38F, 5.069929E37F, -7.327916E37F, -2.5006475E38F, -5.9398847E37F, -1.9119268E38F, 3.3456747E38F, -1.8271478E38F, 1.2757449E38F, 8.974523E37F, -2.1037903E38F, 2.5320063E37F, 1.0875788E38F, -2.6357687E38F, 2.9120816E38F, 1.8074452E38F, -2.7265416E38F, 7.9914007E37F, 2.222026E38F, 1.9770376E38F, 9.314531E37F, -2.5164641E38F, 2.6995058E38F, -3.1693129E38F, -1.0361435E38F, -5.434853E37F, -1.8953103E37F  }));
            Debug.Assert(global_position_int_cov.estimator_type().Value == MAV_ESTIMATOR_TYPE.MAV_ESTIMATOR_TYPE_GPS) ;
            Debug.Print("GLOBAL_POSITION_INT_COV \n");
        }

        public static void fill(org.unirail.Test. LOCAL_POSITION_NED_COV  local_position_ned_cov)
        {
            local_position_ned_cov.time_usec(-3573397491819261289L);
            local_position_ned_cov.x(-2.2260908E38F);
            local_position_ned_cov.y(1.5074114E38F);
            local_position_ned_cov.z(1.4698354E38F);
            local_position_ned_cov.vx(-1.1559507E38F);
            local_position_ned_cov.vy(2.7453128E38F);
            local_position_ned_cov.vz(-3.12025E38F);
            local_position_ned_cov.ax(1.452518E38F);
            local_position_ned_cov.ay(-1.8234466E38F);
            local_position_ned_cov.az(1.0315959E38F);
            local_position_ned_cov.covariance(new float [] { -2.4827608E38F, 2.7764438E38F, 2.1656792E38F, -3.2782707E37F, 1.2561174E38F, -1.4262674E38F, -1.8645186E37F, 3.0681517E38F, -3.3531557E38F, 1.5221122E38F, -1.0929274E38F, -1.8019416E38F, -2.1764287E38F, 1.5940357E38F, -2.7451682E38F, 2.3023399E38F, -3.0930652E38F, 8.975925E37F, 3.2521837E37F, 7.225341E37F, 4.2453286E37F, 2.8281733E38F, 1.8519513E38F, -2.4917932E38F, -2.1249256E38F, 2.3302657E38F, 3.1017471E38F, 7.587316E36F, -6.4909197E37F, 8.623481E37F, -3.34602E38F, 1.9696684E37F, 6.8344434E37F, -8.876023E37F, -1.7841223E38F, 2.2553737E38F, -2.1523196E38F, -7.183006E37F, -1.8388992E38F, -1.5556773E38F, 6.9658237E37F, 1.8555052E36F, -1.9012266E38F, 1.4108513E38F, 1.4818532E38F  }) ;
            local_position_ned_cov.estimator_type(MAV_ESTIMATOR_TYPE.MAV_ESTIMATOR_TYPE_VIO);
        }

        public static void onLOCAL_POSITION_NED_COV(com.company.demo.GroundControl.LOCAL_POSITION_NED_COV local_position_ned_cov)
        {
            Debug.Assert(local_position_ned_cov.time_usec() == -3573397491819261289L) ;
            Debug.Assert(local_position_ned_cov.x() == -2.2260908E38F) ;
            Debug.Assert(local_position_ned_cov.y() == 1.5074114E38F) ;
            Debug.Assert(local_position_ned_cov.z() == 1.4698354E38F) ;
            Debug.Assert(local_position_ned_cov.vx() == -1.1559507E38F) ;
            Debug.Assert(local_position_ned_cov.vy() == 2.7453128E38F) ;
            Debug.Assert(local_position_ned_cov.vz() == -3.12025E38F) ;
            Debug.Assert(local_position_ned_cov.ax() == 1.452518E38F) ;
            Debug.Assert(local_position_ned_cov.ay() == -1.8234466E38F) ;
            Debug.Assert(local_position_ned_cov.az() == 1.0315959E38F) ;
            Debug.Assert(local_position_ned_cov.covariance().same(new float [] { -2.4827608E38F, 2.7764438E38F, 2.1656792E38F, -3.2782707E37F, 1.2561174E38F, -1.4262674E38F, -1.8645186E37F, 3.0681517E38F, -3.3531557E38F, 1.5221122E38F, -1.0929274E38F, -1.8019416E38F, -2.1764287E38F, 1.5940357E38F, -2.7451682E38F, 2.3023399E38F, -3.0930652E38F, 8.975925E37F, 3.2521837E37F, 7.225341E37F, 4.2453286E37F, 2.8281733E38F, 1.8519513E38F, -2.4917932E38F, -2.1249256E38F, 2.3302657E38F, 3.1017471E38F, 7.587316E36F, -6.4909197E37F, 8.623481E37F, -3.34602E38F, 1.9696684E37F, 6.8344434E37F, -8.876023E37F, -1.7841223E38F, 2.2553737E38F, -2.1523196E38F, -7.183006E37F, -1.8388992E38F, -1.5556773E38F, 6.9658237E37F, 1.8555052E36F, -1.9012266E38F, 1.4108513E38F, 1.4818532E38F  }));
            Debug.Assert(local_position_ned_cov.estimator_type().Value == MAV_ESTIMATOR_TYPE.MAV_ESTIMATOR_TYPE_VIO) ;
            Debug.Print("LOCAL_POSITION_NED_COV \n");
        }

        public static void fill(org.unirail.Test. RC_CHANNELS  rc_channels)
        {
            rc_channels.chan1_raw(-11435);
            rc_channels.chan2_raw(-1406);
            rc_channels.chan3_raw(26176);
            rc_channels.chan4_raw(-14170);
            rc_channels.chan5_raw(3782);
            rc_channels.chan6_raw(-19947);
            rc_channels.chan7_raw(22300);
            rc_channels.chan8_raw(1079);
            rc_channels.chan9_raw(20033);
            rc_channels.chan10_raw(-4605);
            rc_channels.chan11_raw(-16130);
            rc_channels.chan12_raw(-3943);
            rc_channels.chan13_raw(6093);
            rc_channels.chan14_raw(-19012);
            rc_channels.chan15_raw(-21382);
            rc_channels.chan16_raw(8880);
            rc_channels.chan17_raw(11033);
            rc_channels.chan18_raw(6967);
            rc_channels.time_boot_ms(-930351854);
            rc_channels.chancount(54);
            rc_channels.rssi(-6);
        }

        public static void onRC_CHANNELS(com.company.demo.GroundControl.RC_CHANNELS rc_channels)
        {
            Debug.Assert(rc_channels.chan1_raw() == -11435) ;
            Debug.Assert(rc_channels.chan2_raw() == -1406) ;
            Debug.Assert(rc_channels.chan3_raw() == 26176) ;
            Debug.Assert(rc_channels.chan4_raw() == -14170) ;
            Debug.Assert(rc_channels.chan5_raw() == 3782) ;
            Debug.Assert(rc_channels.chan6_raw() == -19947) ;
            Debug.Assert(rc_channels.chan7_raw() == 22300) ;
            Debug.Assert(rc_channels.chan8_raw() == 1079) ;
            Debug.Assert(rc_channels.chan9_raw() == 20033) ;
            Debug.Assert(rc_channels.chan10_raw() == -4605) ;
            Debug.Assert(rc_channels.chan11_raw() == -16130) ;
            Debug.Assert(rc_channels.chan12_raw() == -3943) ;
            Debug.Assert(rc_channels.chan13_raw() == 6093) ;
            Debug.Assert(rc_channels.chan14_raw() == -19012) ;
            Debug.Assert(rc_channels.chan15_raw() == -21382) ;
            Debug.Assert(rc_channels.chan16_raw() == 8880) ;
            Debug.Assert(rc_channels.chan17_raw() == 11033) ;
            Debug.Assert(rc_channels.chan18_raw() == 6967) ;
            Debug.Assert(rc_channels.time_boot_ms() == -930351854) ;
            Debug.Assert(rc_channels.chancount() == 54) ;
            Debug.Assert(rc_channels.rssi() == -6) ;
            Debug.Print("RC_CHANNELS \n");
        }

        public static void fill(org.unirail.Test. REQUEST_DATA_STREAM  request_data_stream)
        {
            request_data_stream.req_message_rate(15220);
            request_data_stream.target_system(22);
            request_data_stream.target_component(-53);
            request_data_stream.req_stream_id(-47);
            request_data_stream.start_stop(-50);
        }

        public static void onREQUEST_DATA_STREAM(com.company.demo.GroundControl.REQUEST_DATA_STREAM request_data_stream)
        {
            Debug.Assert(request_data_stream.req_message_rate() == 15220) ;
            Debug.Assert(request_data_stream.target_system() == 22) ;
            Debug.Assert(request_data_stream.target_component() == -53) ;
            Debug.Assert(request_data_stream.req_stream_id() == -47) ;
            Debug.Assert(request_data_stream.start_stop() == -50) ;
            Debug.Print("REQUEST_DATA_STREAM \n");
        }

        public static void fill(org.unirail.Test. DATA_STREAM  data_stream)
        {
            data_stream.message_rate(7189);
            data_stream.stream_id(55);
            data_stream.on_off(-41);
        }

        public static void onDATA_STREAM(com.company.demo.GroundControl.DATA_STREAM data_stream)
        {
            Debug.Assert(data_stream.message_rate() == 7189) ;
            Debug.Assert(data_stream.stream_id() == 55) ;
            Debug.Assert(data_stream.on_off() == -41) ;
            Debug.Print("DATA_STREAM \n");
        }

        public static void fill(org.unirail.Test. MANUAL_CONTROL  manual_control)
        {
            manual_control.buttons(-10986);
            manual_control.target(-98);
            manual_control.x(28230);
            manual_control.y(26498);
            manual_control.z(-19223);
            manual_control.r(25165);
        }

        public static void onMANUAL_CONTROL(com.company.demo.GroundControl.MANUAL_CONTROL manual_control)
        {
            Debug.Assert(manual_control.buttons() == -10986) ;
            Debug.Assert(manual_control.target() == -98) ;
            Debug.Assert(manual_control.x() == 28230) ;
            Debug.Assert(manual_control.y() == 26498) ;
            Debug.Assert(manual_control.z() == -19223) ;
            Debug.Assert(manual_control.r() == 25165) ;
            Debug.Print("MANUAL_CONTROL \n");
        }

        public static void fill(org.unirail.Test. RC_CHANNELS_OVERRIDE  rc_channels_override)
        {
            rc_channels_override.chan1_raw(9293);
            rc_channels_override.chan2_raw(-13863);
            rc_channels_override.chan3_raw(-17419);
            rc_channels_override.chan4_raw(9561);
            rc_channels_override.chan5_raw(-24117);
            rc_channels_override.chan6_raw(-21638);
            rc_channels_override.chan7_raw(-12076);
            rc_channels_override.chan8_raw(-6534);
            rc_channels_override.target_system(3);
            rc_channels_override.target_component(-108);
        }

        public static void onRC_CHANNELS_OVERRIDE(com.company.demo.GroundControl.RC_CHANNELS_OVERRIDE rc_channels_override)
        {
            Debug.Assert(rc_channels_override.chan1_raw() == 9293) ;
            Debug.Assert(rc_channels_override.chan2_raw() == -13863) ;
            Debug.Assert(rc_channels_override.chan3_raw() == -17419) ;
            Debug.Assert(rc_channels_override.chan4_raw() == 9561) ;
            Debug.Assert(rc_channels_override.chan5_raw() == -24117) ;
            Debug.Assert(rc_channels_override.chan6_raw() == -21638) ;
            Debug.Assert(rc_channels_override.chan7_raw() == -12076) ;
            Debug.Assert(rc_channels_override.chan8_raw() == -6534) ;
            Debug.Assert(rc_channels_override.target_system() == 3) ;
            Debug.Assert(rc_channels_override.target_component() == -108) ;
            Debug.Print("RC_CHANNELS_OVERRIDE \n");
        }

        public static void fill(org.unirail.Test. MISSION_ITEM_INT  mission_item_int)
        {
            mission_item_int.seq(-57);
            mission_item_int.target_system(12);
            mission_item_int.target_component(65);
            mission_item_int.current(-10);
            mission_item_int.autocontinue(82);
            mission_item_int.param1(3.2646577E37F);
            mission_item_int.param2(3.3650465E38F);
            mission_item_int.param3(1.2269395E38F);
            mission_item_int.param4(2.0854866E38F);
            mission_item_int.x(322255629);
            mission_item_int.y(1069823588);
            mission_item_int.z(-2.0091659E37F);
            mission_item_int.frame(MAV_FRAME.MAV_FRAME_LOCAL_NED);
            mission_item_int.command(MAV_CMD.MAV_CMD_NAV_WAYPOINT);
            mission_item_int.mission_type(MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY);
        }

        public static void onMISSION_ITEM_INT(com.company.demo.GroundControl.MISSION_ITEM_INT mission_item_int)
        {
            Debug.Assert(mission_item_int.seq() == -57) ;
            Debug.Assert(mission_item_int.target_system() == 12) ;
            Debug.Assert(mission_item_int.target_component() == 65) ;
            Debug.Assert(mission_item_int.current() == -10) ;
            Debug.Assert(mission_item_int.autocontinue() == 82) ;
            Debug.Assert(mission_item_int.param1() == 3.2646577E37F) ;
            Debug.Assert(mission_item_int.param2() == 3.3650465E38F) ;
            Debug.Assert(mission_item_int.param3() == 1.2269395E38F) ;
            Debug.Assert(mission_item_int.param4() == 2.0854866E38F) ;
            Debug.Assert(mission_item_int.x() == 322255629) ;
            Debug.Assert(mission_item_int.y() == 1069823588) ;
            Debug.Assert(mission_item_int.z() == -2.0091659E37F) ;
            Debug.Assert(mission_item_int.frame().Value == MAV_FRAME.MAV_FRAME_LOCAL_NED) ;
            Debug.Assert(mission_item_int.command().Value == MAV_CMD.MAV_CMD_NAV_WAYPOINT) ;
            Debug.Assert(mission_item_int.mission_type().Value == MAV_MISSION_TYPE.MAV_MISSION_TYPE_RALLY) ;
            Debug.Print("MISSION_ITEM_INT \n");
        }

        public static void fill(org.unirail.Test. VFR_HUD  vfr_hud)
        {
            vfr_hud.throttle(12536);
            vfr_hud.airspeed(3.2110963E38F);
            vfr_hud.groundspeed(-2.1259571E38F);
            vfr_hud.heading(-15078);
            vfr_hud.alt(2.1014414E38F);
            vfr_hud.climb(3.2774273E38F);
        }

        public static void onVFR_HUD(com.company.demo.GroundControl.VFR_HUD vfr_hud)
        {
            Debug.Assert(vfr_hud.throttle() == 12536) ;
            Debug.Assert(vfr_hud.airspeed() == 3.2110963E38F) ;
            Debug.Assert(vfr_hud.groundspeed() == -2.1259571E38F) ;
            Debug.Assert(vfr_hud.heading() == -15078) ;
            Debug.Assert(vfr_hud.alt() == 2.1014414E38F) ;
            Debug.Assert(vfr_hud.climb() == 3.2774273E38F) ;
            Debug.Print("VFR_HUD \n");
        }

        public static void fill(org.unirail.Test. COMMAND_INT  command_int)
        {
            command_int.target_system(85);
            command_int.target_component(-31);
            command_int.current(-75);
            command_int.autocontinue(-115);
            command_int.param1(9.493614E37F);
            command_int.param2(5.0884403E37F);
            command_int.param3(8.875785E37F);
            command_int.param4(2.2029135E38F);
            command_int.x(1957936416);
            command_int.y(70670636);
            command_int.z(1.6387177E38F);
            command_int.frame(MAV_FRAME.MAV_FRAME_GLOBAL_TERRAIN_ALT);
            command_int.command(MAV_CMD.MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS);
        }

        public static void onCOMMAND_INT(com.company.demo.GroundControl.COMMAND_INT command_int)
        {
            Debug.Assert(command_int.target_system() == 85) ;
            Debug.Assert(command_int.target_component() == -31) ;
            Debug.Assert(command_int.current() == -75) ;
            Debug.Assert(command_int.autocontinue() == -115) ;
            Debug.Assert(command_int.param1() == 9.493614E37F) ;
            Debug.Assert(command_int.param2() == 5.0884403E37F) ;
            Debug.Assert(command_int.param3() == 8.875785E37F) ;
            Debug.Assert(command_int.param4() == 2.2029135E38F) ;
            Debug.Assert(command_int.x() == 1957936416) ;
            Debug.Assert(command_int.y() == 70670636) ;
            Debug.Assert(command_int.z() == 1.6387177E38F) ;
            Debug.Assert(command_int.frame().Value == MAV_FRAME.MAV_FRAME_GLOBAL_TERRAIN_ALT) ;
            Debug.Assert(command_int.command().Value == MAV_CMD.MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS) ;
            Debug.Print("COMMAND_INT \n");
        }

        public static void fill(org.unirail.Test. COMMAND_LONG  command_long)
        {
            command_long.target_system(102);
            command_long.target_component(73);
            command_long.confirmation(6);
            command_long.param1(2.7652812E38F);
            command_long.param2(-7.54218E37F);
            command_long.param3(1.3665156E38F);
            command_long.param4(2.6718292E38F);
            command_long.param5(-4.8695403E36F);
            command_long.param6(-1.1585048E38F);
            command_long.param7(8.0922367E37F);
            command_long.command(MAV_CMD.MAV_CMD_USER_2);
        }

        public static void onCOMMAND_LONG(com.company.demo.GroundControl.COMMAND_LONG command_long)
        {
            Debug.Assert(command_long.target_system() == 102) ;
            Debug.Assert(command_long.target_component() == 73) ;
            Debug.Assert(command_long.confirmation() == 6) ;
            Debug.Assert(command_long.param1() == 2.7652812E38F) ;
            Debug.Assert(command_long.param2() == -7.54218E37F) ;
            Debug.Assert(command_long.param3() == 1.3665156E38F) ;
            Debug.Assert(command_long.param4() == 2.6718292E38F) ;
            Debug.Assert(command_long.param5() == -4.8695403E36F) ;
            Debug.Assert(command_long.param6() == -1.1585048E38F) ;
            Debug.Assert(command_long.param7() == 8.0922367E37F) ;
            Debug.Assert(command_long.command().Value == MAV_CMD.MAV_CMD_USER_2) ;
            Debug.Print("COMMAND_LONG \n");
        }

        public static void fill(org.unirail.Test. COMMAND_ACK  command_ack)
        {
            command_ack.command(MAV_CMD.MAV_CMD_DO_SET_REVERSE);
            command_ack.result(MAV_RESULT.MAV_RESULT_UNSUPPORTED);
            command_ack.progress(111);
            command_ack.result_param2(-1990813986);
            command_ack.target_system(94);
            command_ack.target_component(-82);
        }

        public static void onCOMMAND_ACK(com.company.demo.GroundControl.COMMAND_ACK command_ack)
        {
            Debug.Assert(command_ack.command().Value == MAV_CMD.MAV_CMD_DO_SET_REVERSE) ;
            Debug.Assert(command_ack.result().Value == MAV_RESULT.MAV_RESULT_UNSUPPORTED) ;
            Debug.Assert(command_ack.progress().Value == 111) ;
            Debug.Assert(command_ack.result_param2().Value == -1990813986) ;
            Debug.Assert(command_ack.target_system().Value == 94) ;
            Debug.Assert(command_ack.target_component().Value == -82) ;
            Debug.Print("COMMAND_ACK \n");
        }

        public static void fill(org.unirail.Test. MANUAL_SETPOINT  manual_setpoint)
        {
            manual_setpoint.time_boot_ms(-1360197771);
            manual_setpoint.roll(-2.4772868E38F);
            manual_setpoint.pitch(-2.4133483E38F);
            manual_setpoint.yaw(2.9166252E37F);
            manual_setpoint.thrust(-2.5792883E38F);
            manual_setpoint.mode_switch(99);
            manual_setpoint.manual_override_switch(-19);
        }

        public static void onMANUAL_SETPOINT(com.company.demo.GroundControl.MANUAL_SETPOINT manual_setpoint)
        {
            Debug.Assert(manual_setpoint.time_boot_ms() == -1360197771) ;
            Debug.Assert(manual_setpoint.roll() == -2.4772868E38F) ;
            Debug.Assert(manual_setpoint.pitch() == -2.4133483E38F) ;
            Debug.Assert(manual_setpoint.yaw() == 2.9166252E37F) ;
            Debug.Assert(manual_setpoint.thrust() == -2.5792883E38F) ;
            Debug.Assert(manual_setpoint.mode_switch() == 99) ;
            Debug.Assert(manual_setpoint.manual_override_switch() == -19) ;
            Debug.Print("MANUAL_SETPOINT \n");
        }

        public static void fill(org.unirail.Test. SET_ATTITUDE_TARGET  set_attitude_target)
        {
            set_attitude_target.time_boot_ms(-1772706835);
            set_attitude_target.target_system(-103);
            set_attitude_target.target_component(105);
            set_attitude_target.type_mask(105);
            set_attitude_target.q(new float [] { -3.3167567E38F, -2.908566E37F, -1.8570836E38F, 4.986253E37F  }) ;
            set_attitude_target.body_roll_rate(5.2701925E37F);
            set_attitude_target.body_pitch_rate(1.66914E38F);
            set_attitude_target.body_yaw_rate(-2.1771753E38F);
            set_attitude_target.thrust(2.916875E38F);
        }

        public static void onSET_ATTITUDE_TARGET(com.company.demo.GroundControl.SET_ATTITUDE_TARGET set_attitude_target)
        {
            Debug.Assert(set_attitude_target.time_boot_ms() == -1772706835) ;
            Debug.Assert(set_attitude_target.target_system() == -103) ;
            Debug.Assert(set_attitude_target.target_component() == 105) ;
            Debug.Assert(set_attitude_target.type_mask() == 105) ;
            Debug.Assert(set_attitude_target.q().same(new float [] { -3.3167567E38F, -2.908566E37F, -1.8570836E38F, 4.986253E37F  }));
            Debug.Assert(set_attitude_target.body_roll_rate() == 5.2701925E37F) ;
            Debug.Assert(set_attitude_target.body_pitch_rate() == 1.66914E38F) ;
            Debug.Assert(set_attitude_target.body_yaw_rate() == -2.1771753E38F) ;
            Debug.Assert(set_attitude_target.thrust() == 2.916875E38F) ;
            Debug.Print("SET_ATTITUDE_TARGET \n");
        }

        public static void fill(org.unirail.Test. ATTITUDE_TARGET  attitude_target)
        {
            attitude_target.time_boot_ms(-688934437);
            attitude_target.type_mask(-22);
            attitude_target.q(new float [] { -1.4756724E38F, -2.4593764E38F, 8.566641E37F, -1.3035459E38F  }) ;
            attitude_target.body_roll_rate(-2.8021802E38F);
            attitude_target.body_pitch_rate(-1.9976703E38F);
            attitude_target.body_yaw_rate(-2.8925767E38F);
            attitude_target.thrust(1.6471597E38F);
        }

        public static void onATTITUDE_TARGET(com.company.demo.GroundControl.ATTITUDE_TARGET attitude_target)
        {
            Debug.Assert(attitude_target.time_boot_ms() == -688934437) ;
            Debug.Assert(attitude_target.type_mask() == -22) ;
            Debug.Assert(attitude_target.q().same(new float [] { -1.4756724E38F, -2.4593764E38F, 8.566641E37F, -1.3035459E38F  }));
            Debug.Assert(attitude_target.body_roll_rate() == -2.8021802E38F) ;
            Debug.Assert(attitude_target.body_pitch_rate() == -1.9976703E38F) ;
            Debug.Assert(attitude_target.body_yaw_rate() == -2.8925767E38F) ;
            Debug.Assert(attitude_target.thrust() == 1.6471597E38F) ;
            Debug.Print("ATTITUDE_TARGET \n");
        }

        public static void fill(org.unirail.Test. SET_POSITION_TARGET_LOCAL_NED  set_position_target_local_ned)
        {
            set_position_target_local_ned.type_mask(28535);
            set_position_target_local_ned.time_boot_ms(1494022992);
            set_position_target_local_ned.target_system(-1);
            set_position_target_local_ned.target_component(93);
            set_position_target_local_ned.x(1.3088365E38F);
            set_position_target_local_ned.y(5.998892E36F);
            set_position_target_local_ned.z(-7.115824E37F);
            set_position_target_local_ned.vx(3.082305E38F);
            set_position_target_local_ned.vy(-2.457197E38F);
            set_position_target_local_ned.vz(2.9249731E38F);
            set_position_target_local_ned.afx(-1.5439098E38F);
            set_position_target_local_ned.afy(-3.187523E38F);
            set_position_target_local_ned.afz(2.8866035E38F);
            set_position_target_local_ned.yaw(-1.5461226E38F);
            set_position_target_local_ned.yaw_rate(6.7872447E37F);
            set_position_target_local_ned.coordinate_frame(MAV_FRAME.MAV_FRAME_MISSION);
        }

        public static void onSET_POSITION_TARGET_LOCAL_NED(com.company.demo.GroundControl.SET_POSITION_TARGET_LOCAL_NED set_position_target_local_ned)
        {
            Debug.Assert(set_position_target_local_ned.type_mask() == 28535) ;
            Debug.Assert(set_position_target_local_ned.time_boot_ms() == 1494022992) ;
            Debug.Assert(set_position_target_local_ned.target_system() == -1) ;
            Debug.Assert(set_position_target_local_ned.target_component() == 93) ;
            Debug.Assert(set_position_target_local_ned.x() == 1.3088365E38F) ;
            Debug.Assert(set_position_target_local_ned.y() == 5.998892E36F) ;
            Debug.Assert(set_position_target_local_ned.z() == -7.115824E37F) ;
            Debug.Assert(set_position_target_local_ned.vx() == 3.082305E38F) ;
            Debug.Assert(set_position_target_local_ned.vy() == -2.457197E38F) ;
            Debug.Assert(set_position_target_local_ned.vz() == 2.9249731E38F) ;
            Debug.Assert(set_position_target_local_ned.afx() == -1.5439098E38F) ;
            Debug.Assert(set_position_target_local_ned.afy() == -3.187523E38F) ;
            Debug.Assert(set_position_target_local_ned.afz() == 2.8866035E38F) ;
            Debug.Assert(set_position_target_local_ned.yaw() == -1.5461226E38F) ;
            Debug.Assert(set_position_target_local_ned.yaw_rate() == 6.7872447E37F) ;
            Debug.Assert(set_position_target_local_ned.coordinate_frame().Value == MAV_FRAME.MAV_FRAME_MISSION) ;
            Debug.Print("SET_POSITION_TARGET_LOCAL_NED \n");
        }

        public static void fill(org.unirail.Test. POSITION_TARGET_LOCAL_NED  position_target_local_ned)
        {
            position_target_local_ned.type_mask(-19930);
            position_target_local_ned.time_boot_ms(-1310549581);
            position_target_local_ned.x(-3.3687003E38F);
            position_target_local_ned.y(8.0478484E36F);
            position_target_local_ned.z(1.2660681E38F);
            position_target_local_ned.vx(1.2009908E38F);
            position_target_local_ned.vy(-3.2911923E38F);
            position_target_local_ned.vz(-2.8466577E38F);
            position_target_local_ned.afx(3.2928746E38F);
            position_target_local_ned.afy(8.166213E37F);
            position_target_local_ned.afz(-4.667261E37F);
            position_target_local_ned.yaw(-1.5412261E37F);
            position_target_local_ned.yaw_rate(8.555358E37F);
            position_target_local_ned.coordinate_frame(MAV_FRAME.MAV_FRAME_GLOBAL);
        }

        public static void onPOSITION_TARGET_LOCAL_NED(com.company.demo.GroundControl.POSITION_TARGET_LOCAL_NED position_target_local_ned)
        {
            Debug.Assert(position_target_local_ned.type_mask() == -19930) ;
            Debug.Assert(position_target_local_ned.time_boot_ms() == -1310549581) ;
            Debug.Assert(position_target_local_ned.x() == -3.3687003E38F) ;
            Debug.Assert(position_target_local_ned.y() == 8.0478484E36F) ;
            Debug.Assert(position_target_local_ned.z() == 1.2660681E38F) ;
            Debug.Assert(position_target_local_ned.vx() == 1.2009908E38F) ;
            Debug.Assert(position_target_local_ned.vy() == -3.2911923E38F) ;
            Debug.Assert(position_target_local_ned.vz() == -2.8466577E38F) ;
            Debug.Assert(position_target_local_ned.afx() == 3.2928746E38F) ;
            Debug.Assert(position_target_local_ned.afy() == 8.166213E37F) ;
            Debug.Assert(position_target_local_ned.afz() == -4.667261E37F) ;
            Debug.Assert(position_target_local_ned.yaw() == -1.5412261E37F) ;
            Debug.Assert(position_target_local_ned.yaw_rate() == 8.555358E37F) ;
            Debug.Assert(position_target_local_ned.coordinate_frame().Value == MAV_FRAME.MAV_FRAME_GLOBAL) ;
            Debug.Print("POSITION_TARGET_LOCAL_NED \n");
        }

        public static void fill(org.unirail.Test. SET_POSITION_TARGET_GLOBAL_INT  set_position_target_global_int)
        {
            set_position_target_global_int.type_mask(5369);
            set_position_target_global_int.time_boot_ms(1627264520);
            set_position_target_global_int.target_system(58);
            set_position_target_global_int.target_component(119);
            set_position_target_global_int.lat_int(1896853363);
            set_position_target_global_int.lon_int(-1720122739);
            set_position_target_global_int.alt(9.711778E37F);
            set_position_target_global_int.vx(-2.4382734E38F);
            set_position_target_global_int.vy(-1.1003177E38F);
            set_position_target_global_int.vz(-2.895889E38F);
            set_position_target_global_int.afx(-8.0547163E37F);
            set_position_target_global_int.afy(2.8630491E38F);
            set_position_target_global_int.afz(-1.4229228E38F);
            set_position_target_global_int.yaw(-1.6003295E38F);
            set_position_target_global_int.yaw_rate(-3.0373388E37F);
            set_position_target_global_int.coordinate_frame(MAV_FRAME.MAV_FRAME_LOCAL_NED);
        }

        public static void onSET_POSITION_TARGET_GLOBAL_INT(com.company.demo.GroundControl.SET_POSITION_TARGET_GLOBAL_INT set_position_target_global_int)
        {
            Debug.Assert(set_position_target_global_int.type_mask() == 5369) ;
            Debug.Assert(set_position_target_global_int.time_boot_ms() == 1627264520) ;
            Debug.Assert(set_position_target_global_int.target_system() == 58) ;
            Debug.Assert(set_position_target_global_int.target_component() == 119) ;
            Debug.Assert(set_position_target_global_int.lat_int() == 1896853363) ;
            Debug.Assert(set_position_target_global_int.lon_int() == -1720122739) ;
            Debug.Assert(set_position_target_global_int.alt() == 9.711778E37F) ;
            Debug.Assert(set_position_target_global_int.vx() == -2.4382734E38F) ;
            Debug.Assert(set_position_target_global_int.vy() == -1.1003177E38F) ;
            Debug.Assert(set_position_target_global_int.vz() == -2.895889E38F) ;
            Debug.Assert(set_position_target_global_int.afx() == -8.0547163E37F) ;
            Debug.Assert(set_position_target_global_int.afy() == 2.8630491E38F) ;
            Debug.Assert(set_position_target_global_int.afz() == -1.4229228E38F) ;
            Debug.Assert(set_position_target_global_int.yaw() == -1.6003295E38F) ;
            Debug.Assert(set_position_target_global_int.yaw_rate() == -3.0373388E37F) ;
            Debug.Assert(set_position_target_global_int.coordinate_frame().Value == MAV_FRAME.MAV_FRAME_LOCAL_NED) ;
            Debug.Print("SET_POSITION_TARGET_GLOBAL_INT \n");
        }

        public static void fill(org.unirail.Test. POSITION_TARGET_GLOBAL_INT  position_target_global_int)
        {
            position_target_global_int.type_mask(-25969);
            position_target_global_int.time_boot_ms(803126853);
            position_target_global_int.lat_int(166192891);
            position_target_global_int.lon_int(-595359049);
            position_target_global_int.alt(9.392028E37F);
            position_target_global_int.vx(1.5304466E38F);
            position_target_global_int.vy(-2.846252E38F);
            position_target_global_int.vz(-1.1743484E38F);
            position_target_global_int.afx(2.152082E38F);
            position_target_global_int.afy(6.283389E37F);
            position_target_global_int.afz(2.5722209E38F);
            position_target_global_int.yaw(-2.8588346E38F);
            position_target_global_int.yaw_rate(7.1393666E37F);
            position_target_global_int.coordinate_frame(MAV_FRAME.MAV_FRAME_BODY_NED);
        }

        public static void onPOSITION_TARGET_GLOBAL_INT(com.company.demo.GroundControl.POSITION_TARGET_GLOBAL_INT position_target_global_int)
        {
            Debug.Assert(position_target_global_int.type_mask() == -25969) ;
            Debug.Assert(position_target_global_int.time_boot_ms() == 803126853) ;
            Debug.Assert(position_target_global_int.lat_int() == 166192891) ;
            Debug.Assert(position_target_global_int.lon_int() == -595359049) ;
            Debug.Assert(position_target_global_int.alt() == 9.392028E37F) ;
            Debug.Assert(position_target_global_int.vx() == 1.5304466E38F) ;
            Debug.Assert(position_target_global_int.vy() == -2.846252E38F) ;
            Debug.Assert(position_target_global_int.vz() == -1.1743484E38F) ;
            Debug.Assert(position_target_global_int.afx() == 2.152082E38F) ;
            Debug.Assert(position_target_global_int.afy() == 6.283389E37F) ;
            Debug.Assert(position_target_global_int.afz() == 2.5722209E38F) ;
            Debug.Assert(position_target_global_int.yaw() == -2.8588346E38F) ;
            Debug.Assert(position_target_global_int.yaw_rate() == 7.1393666E37F) ;
            Debug.Assert(position_target_global_int.coordinate_frame().Value == MAV_FRAME.MAV_FRAME_BODY_NED) ;
            Debug.Print("POSITION_TARGET_GLOBAL_INT \n");
        }

        public static void fill(org.unirail.Test. LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET  local_position_ned_system_global_offset)
        {
            local_position_ned_system_global_offset.time_boot_ms(414402894);
            local_position_ned_system_global_offset.x(-1.0099655E38F);
            local_position_ned_system_global_offset.y(2.900414E38F);
            local_position_ned_system_global_offset.z(1.2750924E38F);
            local_position_ned_system_global_offset.roll(-2.2847226E36F);
            local_position_ned_system_global_offset.pitch(1.4785994E38F);
            local_position_ned_system_global_offset.yaw(6.3935023E37F);
        }

        public static void onLOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(com.company.demo.GroundControl.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET local_position_ned_system_global_offset)
        {
            Debug.Assert(local_position_ned_system_global_offset.time_boot_ms() == 414402894) ;
            Debug.Assert(local_position_ned_system_global_offset.x() == -1.0099655E38F) ;
            Debug.Assert(local_position_ned_system_global_offset.y() == 2.900414E38F) ;
            Debug.Assert(local_position_ned_system_global_offset.z() == 1.2750924E38F) ;
            Debug.Assert(local_position_ned_system_global_offset.roll() == -2.2847226E36F) ;
            Debug.Assert(local_position_ned_system_global_offset.pitch() == 1.4785994E38F) ;
            Debug.Assert(local_position_ned_system_global_offset.yaw() == 6.3935023E37F) ;
            Debug.Print("LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET \n");
        }

        public static void fill(org.unirail.Test. HIL_STATE  hil_state)
        {
            hil_state.time_usec(8813468630106167168L);
            hil_state.roll(3.2202804E38F);
            hil_state.pitch(1.5683364E38F);
            hil_state.yaw(-2.4479112E38F);
            hil_state.rollspeed(2.7038058E38F);
            hil_state.pitchspeed(-1.5340308E38F);
            hil_state.yawspeed(2.3364567E38F);
            hil_state.lat(1382383992);
            hil_state.lon(1340234310);
            hil_state.alt(-1566936874);
            hil_state.vx(26409);
            hil_state.vy(-29689);
            hil_state.vz(5645);
            hil_state.xacc(-24974);
            hil_state.yacc(21704);
            hil_state.zacc(-10477);
        }

        public static void onHIL_STATE(com.company.demo.GroundControl.HIL_STATE hil_state)
        {
            Debug.Assert(hil_state.time_usec() == 8813468630106167168L) ;
            Debug.Assert(hil_state.roll() == 3.2202804E38F) ;
            Debug.Assert(hil_state.pitch() == 1.5683364E38F) ;
            Debug.Assert(hil_state.yaw() == -2.4479112E38F) ;
            Debug.Assert(hil_state.rollspeed() == 2.7038058E38F) ;
            Debug.Assert(hil_state.pitchspeed() == -1.5340308E38F) ;
            Debug.Assert(hil_state.yawspeed() == 2.3364567E38F) ;
            Debug.Assert(hil_state.lat() == 1382383992) ;
            Debug.Assert(hil_state.lon() == 1340234310) ;
            Debug.Assert(hil_state.alt() == -1566936874) ;
            Debug.Assert(hil_state.vx() == 26409) ;
            Debug.Assert(hil_state.vy() == -29689) ;
            Debug.Assert(hil_state.vz() == 5645) ;
            Debug.Assert(hil_state.xacc() == -24974) ;
            Debug.Assert(hil_state.yacc() == 21704) ;
            Debug.Assert(hil_state.zacc() == -10477) ;
            Debug.Print("HIL_STATE \n");
        }

        public static void fill(org.unirail.Test. HIL_CONTROLS  hil_controls)
        {
            hil_controls.time_usec(-4747481669472709996L);
            hil_controls.roll_ailerons(-2.5556284E38F);
            hil_controls.pitch_elevator(-2.2213603E38F);
            hil_controls.yaw_rudder(-1.0623159E37F);
            hil_controls.throttle(3.0157268E38F);
            hil_controls.aux1(1.9722633E38F);
            hil_controls.aux2(-6.935809E37F);
            hil_controls.aux3(1.8920772E38F);
            hil_controls.aux4(-7.0827974E37F);
            hil_controls.nav_mode(7);
            hil_controls.mode(MAV_MODE.STABILIZE_DISARMED);
        }

        public static void onHIL_CONTROLS(com.company.demo.GroundControl.HIL_CONTROLS hil_controls)
        {
            Debug.Assert(hil_controls.time_usec() == -4747481669472709996L) ;
            Debug.Assert(hil_controls.roll_ailerons() == -2.5556284E38F) ;
            Debug.Assert(hil_controls.pitch_elevator() == -2.2213603E38F) ;
            Debug.Assert(hil_controls.yaw_rudder() == -1.0623159E37F) ;
            Debug.Assert(hil_controls.throttle() == 3.0157268E38F) ;
            Debug.Assert(hil_controls.aux1() == 1.9722633E38F) ;
            Debug.Assert(hil_controls.aux2() == -6.935809E37F) ;
            Debug.Assert(hil_controls.aux3() == 1.8920772E38F) ;
            Debug.Assert(hil_controls.aux4() == -7.0827974E37F) ;
            Debug.Assert(hil_controls.nav_mode() == 7) ;
            Debug.Assert(hil_controls.mode().Value == MAV_MODE.STABILIZE_DISARMED) ;
            Debug.Print("HIL_CONTROLS \n");
        }

        public static void fill(org.unirail.Test. HIL_RC_INPUTS_RAW  hil_rc_inputs_raw)
        {
            hil_rc_inputs_raw.chan1_raw(-24295);
            hil_rc_inputs_raw.chan2_raw(7026);
            hil_rc_inputs_raw.chan3_raw(3862);
            hil_rc_inputs_raw.chan4_raw(31619);
            hil_rc_inputs_raw.chan5_raw(-22818);
            hil_rc_inputs_raw.chan6_raw(19525);
            hil_rc_inputs_raw.chan7_raw(21498);
            hil_rc_inputs_raw.chan8_raw(-16002);
            hil_rc_inputs_raw.chan9_raw(-3521);
            hil_rc_inputs_raw.chan10_raw(-32394);
            hil_rc_inputs_raw.chan11_raw(31132);
            hil_rc_inputs_raw.chan12_raw(-4393);
            hil_rc_inputs_raw.time_usec(1051011381979439836L);
            hil_rc_inputs_raw.rssi(-66);
        }

        public static void onHIL_RC_INPUTS_RAW(com.company.demo.GroundControl.HIL_RC_INPUTS_RAW hil_rc_inputs_raw)
        {
            Debug.Assert(hil_rc_inputs_raw.chan1_raw() == -24295) ;
            Debug.Assert(hil_rc_inputs_raw.chan2_raw() == 7026) ;
            Debug.Assert(hil_rc_inputs_raw.chan3_raw() == 3862) ;
            Debug.Assert(hil_rc_inputs_raw.chan4_raw() == 31619) ;
            Debug.Assert(hil_rc_inputs_raw.chan5_raw() == -22818) ;
            Debug.Assert(hil_rc_inputs_raw.chan6_raw() == 19525) ;
            Debug.Assert(hil_rc_inputs_raw.chan7_raw() == 21498) ;
            Debug.Assert(hil_rc_inputs_raw.chan8_raw() == -16002) ;
            Debug.Assert(hil_rc_inputs_raw.chan9_raw() == -3521) ;
            Debug.Assert(hil_rc_inputs_raw.chan10_raw() == -32394) ;
            Debug.Assert(hil_rc_inputs_raw.chan11_raw() == 31132) ;
            Debug.Assert(hil_rc_inputs_raw.chan12_raw() == -4393) ;
            Debug.Assert(hil_rc_inputs_raw.time_usec() == 1051011381979439836L) ;
            Debug.Assert(hil_rc_inputs_raw.rssi() == -66) ;
            Debug.Print("HIL_RC_INPUTS_RAW \n");
        }

        public static void fill(org.unirail.Test. HIL_ACTUATOR_CONTROLS  hil_actuator_controls)
        {
            hil_actuator_controls.time_usec(-459414880520541399L);
            hil_actuator_controls.flags(-8215680695592799423L);
            hil_actuator_controls.controls(new float [] { 5.7255037E37F, 2.8196857E37F, 1.9330994E38F, -1.2918188E38F, -2.8349063E38F, -2.1429368E38F, 2.1022344E38F, -2.427827E38F, -1.8302956E38F, 3.0298853E38F, 1.9494595E37F, 1.0244986E38F, -4.749038E37F, -2.945267E38F, -6.303566E37F, 2.566042E38F  }) ;
            hil_actuator_controls.mode(MAV_MODE.MAV_MODE_AUTO_ARMED);
        }

        public static void onHIL_ACTUATOR_CONTROLS(com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS hil_actuator_controls)
        {
            Debug.Assert(hil_actuator_controls.time_usec() == -459414880520541399L) ;
            Debug.Assert(hil_actuator_controls.flags() == -8215680695592799423L) ;
            Debug.Assert(hil_actuator_controls.controls().same(new float [] { 5.7255037E37F, 2.8196857E37F, 1.9330994E38F, -1.2918188E38F, -2.8349063E38F, -2.1429368E38F, 2.1022344E38F, -2.427827E38F, -1.8302956E38F, 3.0298853E38F, 1.9494595E37F, 1.0244986E38F, -4.749038E37F, -2.945267E38F, -6.303566E37F, 2.566042E38F  }));
            Debug.Assert(hil_actuator_controls.mode().Value == MAV_MODE.MAV_MODE_AUTO_ARMED) ;
            Debug.Print("HIL_ACTUATOR_CONTROLS \n");
        }

        public static void fill(org.unirail.Test. OPTICAL_FLOW  optical_flow)
        {
            optical_flow.time_usec(-5343374809295878052L);
            optical_flow.sensor_id(89);
            optical_flow.flow_x(-29888);
            optical_flow.flow_y(10609);
            optical_flow.flow_comp_m_x(1.4783336E38F);
            optical_flow.flow_comp_m_y(-1.196102E38F);
            optical_flow.quality(-95);
            optical_flow.ground_distance(-3.604411E36F);
            optical_flow.flow_rate_x(-1.2517191E38F);
            optical_flow.flow_rate_y(1.1183333E37F);
        }

        public static void onOPTICAL_FLOW(com.company.demo.GroundControl.OPTICAL_FLOW optical_flow)
        {
            Debug.Assert(optical_flow.time_usec() == -5343374809295878052L) ;
            Debug.Assert(optical_flow.sensor_id() == 89) ;
            Debug.Assert(optical_flow.flow_x() == -29888) ;
            Debug.Assert(optical_flow.flow_y() == 10609) ;
            Debug.Assert(optical_flow.flow_comp_m_x() == 1.4783336E38F) ;
            Debug.Assert(optical_flow.flow_comp_m_y() == -1.196102E38F) ;
            Debug.Assert(optical_flow.quality() == -95) ;
            Debug.Assert(optical_flow.ground_distance() == -3.604411E36F) ;
            Debug.Assert(optical_flow.flow_rate_x().Value == -1.2517191E38F) ;
            Debug.Assert(optical_flow.flow_rate_y().Value == 1.1183333E37F) ;
            Debug.Print("OPTICAL_FLOW \n");
        }

        public static void fill(org.unirail.Test. GLOBAL_VISION_POSITION_ESTIMATE  global_vision_position_estimate)
        {
            global_vision_position_estimate.usec(-6456496067332533910L);
            global_vision_position_estimate.x(-1.184764E38F);
            global_vision_position_estimate.y(2.7895398E38F);
            global_vision_position_estimate.z(2.143223E38F);
            global_vision_position_estimate.roll(-1.0048294E38F);
            global_vision_position_estimate.pitch(-2.6936202E38F);
            global_vision_position_estimate.yaw(5.400076E37F);
        }

        public static void onGLOBAL_VISION_POSITION_ESTIMATE(com.company.demo.GroundControl.GLOBAL_VISION_POSITION_ESTIMATE global_vision_position_estimate)
        {
            Debug.Assert(global_vision_position_estimate.usec() == -6456496067332533910L) ;
            Debug.Assert(global_vision_position_estimate.x() == -1.184764E38F) ;
            Debug.Assert(global_vision_position_estimate.y() == 2.7895398E38F) ;
            Debug.Assert(global_vision_position_estimate.z() == 2.143223E38F) ;
            Debug.Assert(global_vision_position_estimate.roll() == -1.0048294E38F) ;
            Debug.Assert(global_vision_position_estimate.pitch() == -2.6936202E38F) ;
            Debug.Assert(global_vision_position_estimate.yaw() == 5.400076E37F) ;
            Debug.Print("GLOBAL_VISION_POSITION_ESTIMATE \n");
        }

        public static void fill(org.unirail.Test. VISION_POSITION_ESTIMATE  vision_position_estimate)
        {
            vision_position_estimate.usec(6289624203465395186L);
            vision_position_estimate.x(-2.03978E38F);
            vision_position_estimate.y(-4.6704497E37F);
            vision_position_estimate.z(-2.3095848E38F);
            vision_position_estimate.roll(1.160686E38F);
            vision_position_estimate.pitch(7.7077005E37F);
            vision_position_estimate.yaw(-2.9175139E38F);
        }

        public static void onVISION_POSITION_ESTIMATE(com.company.demo.GroundControl.VISION_POSITION_ESTIMATE vision_position_estimate)
        {
            Debug.Assert(vision_position_estimate.usec() == 6289624203465395186L) ;
            Debug.Assert(vision_position_estimate.x() == -2.03978E38F) ;
            Debug.Assert(vision_position_estimate.y() == -4.6704497E37F) ;
            Debug.Assert(vision_position_estimate.z() == -2.3095848E38F) ;
            Debug.Assert(vision_position_estimate.roll() == 1.160686E38F) ;
            Debug.Assert(vision_position_estimate.pitch() == 7.7077005E37F) ;
            Debug.Assert(vision_position_estimate.yaw() == -2.9175139E38F) ;
            Debug.Print("VISION_POSITION_ESTIMATE \n");
        }
        public static void onSwitchModeCommand() {Debug.Print("SwitchModeCommand \n"); }

        public static void fill(com.company.demo.GroundControl. PING33  ping33)
        {
            ping33.TTTT(-32177675, 0, 0, 0);
            ping33.TTTT(935940967, 0, 0, 1);
            ping33.TTTT(50754295, 0, 0, 2);
            ping33.TTTT(1955748030, 0, 1, 0);
            ping33.TTTT(-2121756779, 0, 1, 1);
            ping33.TTTT(-258787069, 0, 1, 2);
            ping33.TTTT(1933467251, 1, 0, 0);
            ping33.TTTT(2141974534, 1, 0, 1);
            ping33.TTTT(1181598358, 1, 0, 2);
            ping33.TTTT(417806779, 1, 1, 0);
            ping33.TTTT(1437947611, 1, 1, 1);
            ping33.TTTT(-636804589, 1, 1, 2);
            ping33.TTTT(488306455, 2, 0, 0);
            ping33.TTTT(-1014747215, 2, 0, 1);
            ping33.TTTT(-714748415, 2, 0, 2);
            ping33.TTTT(-726525167, 2, 1, 0);
            ping33.TTTT(608029362, 2, 1, 1);
            ping33.TTTT(1856316221, 2, 1, 2);
            ping33.field(-3828597334564789542L);
            ping33.bit_field(42);
            ping33.field6(-1933832188, 0, 0, 0);
            ping33.field6(1243202419, 0, 0, 1);
            ping33.field6(-738160830, 0, 0, 2);
            ping33.field6(343904405, 0, 1, 0);
            ping33.field6(1565600856, 0, 1, 1);
            ping33.field6(714385518, 0, 1, 2);
            ping33.field6(-176213973, 1, 0, 0);
            ping33.field6(-1460713467, 1, 0, 1);
            ping33.field6(-332582464, 1, 0, 2);
            ping33.field6(163521299, 1, 1, 0);
            ping33.field6(1084193205, 1, 1, 1);
            ping33.field6(828083662, 1, 1, 2);
            ping33.field6(-662493674, 2, 0, 0);
            ping33.field6(948424771, 2, 0, 1);
            ping33.field6(-1749515326, 2, 0, 2);
            ping33.field6(967060056, 2, 1, 0);
            ping33.field6(681298308, 2, 1, 1);
            ping33.field6(-262009396, 2, 1, 2);
            ping33.testBOOL2(false);
            ping33.testBOOL3(false);
            ping33.testBOOL(false);
            ping33.seq(2345519812L);
            {
                var init =  ping33.field1().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(1106433005, 0, 0, 0);
                    fld.set(2100375190, 0, 0, 1);
                    fld.set(1515064556, 0, 0, 2);
                    fld.set(295607890, 0, 1, 0);
                    fld.set(-786018946, 0, 1, 1);
                    fld.set(-893841730, 0, 1, 2);
                }
                else Debug.Print("HasNoVanue");
            }
            ping33.field12(2047571901, 0, 0, 0);
            ping33.field12(674900057, 0, 0, 1);
            ping33.field12(1057505852, 0, 0, 2);
            ping33.field12(-225953709, 0, 1, 0);
            ping33.field12(1076741104, 0, 1, 1);
            ping33.field12(959957143, 0, 1, 2);
            ping33.field12(161500202, 1, 0, 0);
            ping33.field12(579812775, 1, 0, 1);
            ping33.field12(808017261, 1, 0, 2);
            ping33.field12(1352485933, 1, 1, 0);
            ping33.field12(-1886190418, 1, 1, 1);
            ping33.field12(-1159602251, 1, 1, 2);
            ping33.field12(-326278232, 2, 0, 0);
            ping33.field12(1763637626, 2, 0, 1);
            ping33.field12(-1120883229, 2, 0, 2);
            ping33.field12(-182223658, 2, 1, 0);
            ping33.field12(988445664, 2, 1, 1);
            ping33.field12(-952567121, 2, 1, 2);
            ping33.field13(-856814945, 0, 0, 0);
            ping33.field13(140749211, 0, 0, 1);
            ping33.field13(950383781, 0, 0, 2);
            ping33.field13(1995576227, 0, 1, 0);
            ping33.field13(-1667443906, 0, 1, 1);
            ping33.field13(-857395900, 0, 1, 2);
            ping33.field13(810100850, 1, 0, 0);
            ping33.field13(2021840440, 1, 0, 1);
            ping33.field13(-1263030952, 1, 0, 2);
            ping33.field13(-1955372006, 1, 1, 0);
            ping33.field13(627100054, 1, 1, 1);
            ping33.field13(2108958887, 1, 1, 2);
            ping33.field13(-1435700430, 2, 0, 0);
            ping33.field13(597147590, 2, 0, 1);
            ping33.field13(892875923, 2, 0, 2);
            ping33.field13(-1391396576, 2, 1, 0);
            ping33.field13(-1779657584, 2, 1, 1);
            ping33.field13(-525916615, 2, 1, 2);
            ping33.WWWWWWWW(712781766);
            ping33.bit_field2(41);
            ping33.Field_Bits(11, 0, 0, 0);
            ping33.Field_Bits(45, 0, 0, 1);
            ping33.Field_Bits(32, 0, 0, 2);
            ping33.Field_Bits(6, 0, 1, 0);
            ping33.Field_Bits(31, 0, 1, 1);
            ping33.Field_Bits(15, 0, 1, 2);
            ping33.Field_Bits(33, 0, 2, 0);
            ping33.Field_Bits(37, 0, 2, 1);
            ping33.Field_Bits(21, 0, 2, 2);
            ping33.Field_Bits(19, 1, 0, 0);
            ping33.Field_Bits(42, 1, 0, 1);
            ping33.Field_Bits(35, 1, 0, 2);
            ping33.Field_Bits(19, 1, 1, 0);
            ping33.Field_Bits(34, 1, 1, 1);
            ping33.Field_Bits(34, 1, 1, 2);
            ping33.Field_Bits(23, 1, 2, 0);
            ping33.Field_Bits(23, 1, 2, 1);
            ping33.Field_Bits(38, 1, 2, 2);
            ping33.Field_Bits(37, 2, 0, 0);
            ping33.Field_Bits(26, 2, 0, 1);
            ping33.Field_Bits(44, 2, 0, 2);
            ping33.Field_Bits(28, 2, 1, 0);
            ping33.Field_Bits(42, 2, 1, 1);
            ping33.Field_Bits(18, 2, 1, 2);
            ping33.Field_Bits(26, 2, 2, 0);
            ping33.Field_Bits(33, 2, 2, 1);
            ping33.Field_Bits(38, 2, 2, 2);
            {
                var init =  ping33.SparseFixAllBits().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(31, 0, 0, 0);
                    fld.set(43, 0, 0, 1);
                    fld.set(38, 0, 0, 2);
                    fld.set(11, 0, 1, 0);
                    fld.set(7, 0, 1, 1);
                    fld.set(14, 0, 1, 2);
                    fld.set(23, 0, 2, 0);
                    fld.set(5, 0, 2, 1);
                    fld.set(22, 0, 2, 2);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.FixAllBits().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(43, 0, 0, 0);
                    fld.set(25, 0, 0, 1);
                    fld.set(23, 0, 0, 2);
                    fld.set(15, 0, 1, 0);
                    fld.set(20, 0, 1, 1);
                    fld.set(35, 0, 1, 2);
                    fld.set(39, 0, 2, 0);
                    fld.set(14, 0, 2, 1);
                    fld.set(33, 0, 2, 2);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.VarAllBits().Initializer().Value.init(1, 1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(17, 0, 0, 0);
                    fld.set(25, 0, 1, 0);
                    fld.set(42, 0, 2, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.SparseVarAllBits().Initializer().Value.init(1, 1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(28, 0, 0, 0);
                    fld.set(27, 0, 1, 0);
                    fld.set(14, 0, 2, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.VarEachBits().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(16, 0, 0, 0);
                    fld.set(10, 0, 0, 1);
                    fld.set(43, 0, 0, 2);
                    fld.set(41, 0, 1, 0);
                    fld.set(-14, 0, 1, 1);
                    fld.set(-8, 0, 1, 2);
                    fld.set(22, 0, 2, 0);
                    fld.set(5, 0, 2, 1);
                    fld.set(18, 0, 2, 2);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.SparsVarEachBits().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(193, 0, 0, 0);
                    fld.set(447, 0, 0, 1);
                    fld.set(175, 0, 0, 2);
                    fld.set(195, 0, 1, 0);
                    fld.set(381, 0, 1, 1);
                    fld.set(154, 0, 1, 2);
                    fld.set(422, 0, 2, 0);
                    fld.set(271, 0, 2, 1);
                    fld.set(188, 0, 2, 2);
                }
                else Debug.Print("HasNoVanue");
            }
            ping33.testBOOLX(false);
            ping33.testBOOL2X(true);
            ping33.testBOOL3X(false);
            ping33.MMMMMM(MAV_MODE.MAV_MODE_TEST_ARMED);
            {
                var init =  ping33.field44().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(-1433433536, 0, 0, 0);
                    fld.set(1865496191, 0, 1, 0);
                    fld.set(1245934260, 1, 0, 0);
                    fld.set(1269270606, 1, 1, 0);
                    fld.set(1475807249, 2, 0, 0);
                    fld.set(1685830457, 2, 1, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.field634().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(-1880531745, 0, 0, 0);
                    fld.set(-1930557118, 0, 1, 0);
                    fld.set(1576268917, 1, 0, 0);
                    fld.set(-830159118, 1, 1, 0);
                    fld.set(355836051, 2, 0, 0);
                    fld.set(-2062692857, 2, 1, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.field33344().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(727293216, 0, 0, 0);
                    fld.set(-608663109, 0, 1, 0);
                    fld.set(277342738, 1, 0, 0);
                    fld.set(-76787592, 1, 1, 0);
                    fld.set(-1163618901, 2, 0, 0);
                    fld.set(825852485, 2, 1, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var init =  ping33.field333634().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(249430273, 0, 0, 0);
                    fld.set(324844611, 0, 1, 0);
                    fld.set(-1359493829, 1, 0, 0);
                    fld.set(109483417, 1, 1, 0);
                    fld.set(-1666342463, 2, 0, 0);
                    fld.set(-787726174, 2, 1, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            ping33.field__(66312711, 0, 0, 0);
            ping33.field__(-1029626480, 0, 0, 1);
            ping33.field__(1242677287, 0, 0, 2);
            ping33.field__(-76834954, 0, 1, 0);
            ping33.field__(1652579218, 0, 1, 1);
            ping33.field__(344998151, 0, 1, 2);
            ping33.field__(178249978, 1, 0, 0);
            ping33.field__(-1209217003, 1, 0, 1);
            ping33.field__(562741149, 1, 0, 2);
            ping33.field__(121145198, 1, 1, 0);
            ping33.field__(1617992346, 1, 1, 1);
            ping33.field__(-1172592997, 1, 1, 2);
            ping33.field__(-1381595697, 2, 0, 0);
            ping33.field__(-439532630, 2, 0, 1);
            ping33.field__(-1657186760, 2, 0, 2);
            ping33.field__(-677736790, 2, 1, 0);
            ping33.field__(530062292, 2, 1, 1);
            ping33.field__(-1561263411, 2, 1, 2);
            {
                var init =  ping33.field63().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(-59307350, 0, 0, 0);
                    fld.set(-1134236211, 0, 1, 0);
                    fld.set(-1123894955, 1, 0, 0);
                    fld.set(-968209650, 1, 1, 0);
                    fld.set(7134879, 2, 0, 0);
                    fld.set(228159259, 2, 1, 0);
                }
                else Debug.Print("HasNoVanue");
            }
            ping33.uid2(-8, 0);
            ping33.uid2(-81, 1);
            ping33.uid2(-115, 2);
            ping33.uid2(81, 3);
            ping33.uid2(-104, 4);
            ping33.uid2(-41, 5);
            ping33.uid2(98, 6);
            ping33.uid2(-78, 7);
            ping33.uid2(-98, 8);
            ping33.uid2(-27, 9);
            ping33.uid2(-24, 10);
            ping33.uid2(48, 11);
            ping33.uid2(42, 12);
            ping33.uid2(50, 13);
            ping33.uid2(-51, 14);
            ping33.uid2(92, 15);
            ping33.uid2(63, 16);
            ping33.uid2(-45, 17);
            ping33.field2(-1562384849, 0, 0, 0);
            ping33.field2(-1146046656, 0, 0, 1);
            ping33.field2(754095374, 0, 0, 2);
            ping33.field2(-1051108103, 0, 1, 0);
            ping33.field2(1625366352, 0, 1, 1);
            ping33.field2(-251935561, 0, 1, 2);
            ping33.field2(-705081655, 1, 0, 0);
            ping33.field2(2146868998, 1, 0, 1);
            ping33.field2(-1768586948, 1, 0, 2);
            ping33.field2(51934115, 1, 1, 0);
            ping33.field2(-892217399, 1, 1, 1);
            ping33.field2(1180585756, 1, 1, 2);
            ping33.field2(587164871, 2, 0, 0);
            ping33.field2(-223135834, 2, 0, 1);
            ping33.field2(-128715993, 2, 0, 2);
            ping33.field2(-609422201, 2, 1, 0);
            ping33.field2(1143683192, 2, 1, 1);
            ping33.field2(232612573, 2, 1, 2);
            ping33.field4(-1352249979, 0, 0, 0);
            ping33.field4(717113585, 0, 0, 1);
            ping33.field4(323603370, 0, 0, 2);
            ping33.field4(168636786, 0, 1, 0);
            ping33.field4(379443059, 0, 1, 1);
            ping33.field4(-1904653023, 0, 1, 2);
            ping33.field4(1561520316, 1, 0, 0);
            ping33.field4(-1684893769, 1, 0, 1);
            ping33.field4(-1564912545, 1, 0, 2);
            ping33.field4(19525434, 1, 1, 0);
            ping33.field4(-1887826895, 1, 1, 1);
            ping33.field4(1838572955, 1, 1, 2);
            ping33.field4(1907461753, 2, 0, 0);
            ping33.field4(-910629657, 2, 0, 1);
            ping33.field4(1321480508, 2, 0, 2);
            ping33.field4(1986797946, 2, 1, 0);
            ping33.field4(-1547490555, 2, 1, 1);
            ping33.field4(-78555494, 2, 1, 2);
            ping33.stringtest1("bpmrfFntmxbJeqeobfgtzaqcnhkebd", null) ;
            {
                var init =  ping33.stringtest2().Initializer().Value.init(1);
                if(init.HasValue)
                {
                    var fld =  init.Value;
                    fld.set(TestChannel.str(1, 255), 0, 0, 0, null) ;
                    fld.set(TestChannel.str(2, 255), 0, 1, 0, null) ;
                    fld.set(TestChannel.str(3, 255), 1, 0, 0, null) ;
                    fld.set(TestChannel.str(4, 255), 1, 1, 0, null) ;
                    fld.set(TestChannel.str(5, 255), 2, 0, 0, null) ;
                    fld.set(TestChannel.str(6, 255), 2, 1, 0, null) ;
                }
                else Debug.Print("HasNoVanue");
            }
            ping33.stringtest3("kcmpms", null) ;
            ping33.stringtest4("leodakwvynbbmstxannogUYzlrllscvfdbkyfqxespfknKrsrwfnym", null) ;
        }

        public static void onPING33(com.company.demo.GroundControl.PING33 ping33)
        {
            Debug.Assert(ping33.TTTT(0, 0, 0) == -32177675) ;
            Debug.Assert(ping33.TTTT(0, 0, 1) == 935940967) ;
            Debug.Assert(ping33.TTTT(0, 0, 2) == 50754295) ;
            Debug.Assert(ping33.TTTT(0, 1, 0) == 1955748030) ;
            Debug.Assert(ping33.TTTT(0, 1, 1) == -2121756779) ;
            Debug.Assert(ping33.TTTT(0, 1, 2) == -258787069) ;
            Debug.Assert(ping33.TTTT(1, 0, 0) == 1933467251) ;
            Debug.Assert(ping33.TTTT(1, 0, 1) == 2141974534) ;
            Debug.Assert(ping33.TTTT(1, 0, 2) == 1181598358) ;
            Debug.Assert(ping33.TTTT(1, 1, 0) == 417806779) ;
            Debug.Assert(ping33.TTTT(1, 1, 1) == 1437947611) ;
            Debug.Assert(ping33.TTTT(1, 1, 2) == -636804589) ;
            Debug.Assert(ping33.TTTT(2, 0, 0) == 488306455) ;
            Debug.Assert(ping33.TTTT(2, 0, 1) == -1014747215) ;
            Debug.Assert(ping33.TTTT(2, 0, 2) == -714748415) ;
            Debug.Assert(ping33.TTTT(2, 1, 0) == -726525167) ;
            Debug.Assert(ping33.TTTT(2, 1, 1) == 608029362) ;
            Debug.Assert(ping33.TTTT(2, 1, 2) == 1856316221) ;
            Debug.Assert(ping33.field() == -3828597334564789542L) ;
            Debug.Assert(ping33.bit_field() == 42) ;
            Debug.Assert(ping33.field6(0, 0, 0) == -1933832188) ;
            Debug.Assert(ping33.field6(0, 0, 1) == 1243202419) ;
            Debug.Assert(ping33.field6(0, 0, 2) == -738160830) ;
            Debug.Assert(ping33.field6(0, 1, 0) == 343904405) ;
            Debug.Assert(ping33.field6(0, 1, 1) == 1565600856) ;
            Debug.Assert(ping33.field6(0, 1, 2) == 714385518) ;
            Debug.Assert(ping33.field6(1, 0, 0) == -176213973) ;
            Debug.Assert(ping33.field6(1, 0, 1) == -1460713467) ;
            Debug.Assert(ping33.field6(1, 0, 2) == -332582464) ;
            Debug.Assert(ping33.field6(1, 1, 0) == 163521299) ;
            Debug.Assert(ping33.field6(1, 1, 1) == 1084193205) ;
            Debug.Assert(ping33.field6(1, 1, 2) == 828083662) ;
            Debug.Assert(ping33.field6(2, 0, 0) == -662493674) ;
            Debug.Assert(ping33.field6(2, 0, 1) == 948424771) ;
            Debug.Assert(ping33.field6(2, 0, 2) == -1749515326) ;
            Debug.Assert(ping33.field6(2, 1, 0) == 967060056) ;
            Debug.Assert(ping33.field6(2, 1, 1) == 681298308) ;
            Debug.Assert(ping33.field6(2, 1, 2) == -262009396) ;
            Debug.Assert(ping33.testBOOL2() == false) ;
            Debug.Assert(ping33.testBOOL3() == false) ;
            Debug.Assert(ping33.testBOOL().Value == false) ;
            Debug.Assert(ping33.seq().Value == 2345519812L) ;
            {
                var field = ping33.field1().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.field1_.d0_max == 7) ;
                    Debug.Assert(PING33.field1_.d1 == 2);
                    Debug.Assert(PING33.field1_.d2 == 3);
                    Debug.Assert(fld.get(0, 0, 0) == 1106433005) ;
                    Debug.Assert(fld.get(0, 0, 1) == 2100375190) ;
                    Debug.Assert(fld.get(0, 0, 2) == 1515064556) ;
                    Debug.Assert(fld.get(0, 1, 0) == 295607890) ;
                    Debug.Assert(fld.get(0, 1, 1) == -786018946) ;
                    Debug.Assert(fld.get(0, 1, 2) == -893841730) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var fld = ping33.field12().Value;
                Debug.Assert(fld.get(0, 0, 0) == 2047571901) ;
                Debug.Assert(fld.get(0, 0, 1) == 674900057) ;
                Debug.Assert(fld.get(0, 0, 2) == 1057505852) ;
                Debug.Assert(fld.get(0, 1, 0) == -225953709) ;
                Debug.Assert(fld.get(0, 1, 1) == 1076741104) ;
                Debug.Assert(fld.get(0, 1, 2) == 959957143) ;
                Debug.Assert(fld.get(1, 0, 0) == 161500202) ;
                Debug.Assert(fld.get(1, 0, 1) == 579812775) ;
                Debug.Assert(fld.get(1, 0, 2) == 808017261) ;
                Debug.Assert(fld.get(1, 1, 0) == 1352485933) ;
                Debug.Assert(fld.get(1, 1, 1) == -1886190418) ;
                Debug.Assert(fld.get(1, 1, 2) == -1159602251) ;
                Debug.Assert(fld.get(2, 0, 0) == -326278232) ;
                Debug.Assert(fld.get(2, 0, 1) == 1763637626) ;
                Debug.Assert(fld.get(2, 0, 2) == -1120883229) ;
                Debug.Assert(fld.get(2, 1, 0) == -182223658) ;
                Debug.Assert(fld.get(2, 1, 1) == 988445664) ;
                Debug.Assert(fld.get(2, 1, 2) == -952567121) ;
            }
            {
                var fld = ping33.field13().Value;
                Debug.Assert(fld.get(0, 0, 0).Value == -856814945);
                Debug.Assert(fld.get(0, 0, 1).Value == 140749211);
                Debug.Assert(fld.get(0, 0, 2).Value == 950383781);
                Debug.Assert(fld.get(0, 1, 0).Value == 1995576227);
                Debug.Assert(fld.get(0, 1, 1).Value == -1667443906);
                Debug.Assert(fld.get(0, 1, 2).Value == -857395900);
                Debug.Assert(fld.get(1, 0, 0).Value == 810100850);
                Debug.Assert(fld.get(1, 0, 1).Value == 2021840440);
                Debug.Assert(fld.get(1, 0, 2).Value == -1263030952);
                Debug.Assert(fld.get(1, 1, 0).Value == -1955372006);
                Debug.Assert(fld.get(1, 1, 1).Value == 627100054);
                Debug.Assert(fld.get(1, 1, 2).Value == 2108958887);
                Debug.Assert(fld.get(2, 0, 0).Value == -1435700430);
                Debug.Assert(fld.get(2, 0, 1).Value == 597147590);
                Debug.Assert(fld.get(2, 0, 2).Value == 892875923);
                Debug.Assert(fld.get(2, 1, 0).Value == -1391396576);
                Debug.Assert(fld.get(2, 1, 1).Value == -1779657584);
                Debug.Assert(fld.get(2, 1, 2).Value == -525916615);
            }
            Debug.Assert(ping33.WWWWWWWW().Value == 712781766) ;
            Debug.Assert(ping33.bit_field2().Value == 41) ;
            {
                var fld = ping33.Field_Bits().Value;
                Debug.Assert(fld.get(0, 0, 0) == 11) ;
                Debug.Assert(fld.get(0, 0, 1) == 45) ;
                Debug.Assert(fld.get(0, 0, 2) == 32) ;
                Debug.Assert(fld.get(0, 1, 0) == 6) ;
                Debug.Assert(fld.get(0, 1, 1) == 31) ;
                Debug.Assert(fld.get(0, 1, 2) == 15) ;
                Debug.Assert(fld.get(0, 2, 0) == 33) ;
                Debug.Assert(fld.get(0, 2, 1) == 37) ;
                Debug.Assert(fld.get(0, 2, 2) == 21) ;
                Debug.Assert(fld.get(1, 0, 0) == 19) ;
                Debug.Assert(fld.get(1, 0, 1) == 42) ;
                Debug.Assert(fld.get(1, 0, 2) == 35) ;
                Debug.Assert(fld.get(1, 1, 0) == 19) ;
                Debug.Assert(fld.get(1, 1, 1) == 34) ;
                Debug.Assert(fld.get(1, 1, 2) == 34) ;
                Debug.Assert(fld.get(1, 2, 0) == 23) ;
                Debug.Assert(fld.get(1, 2, 1) == 23) ;
                Debug.Assert(fld.get(1, 2, 2) == 38) ;
                Debug.Assert(fld.get(2, 0, 0) == 37) ;
                Debug.Assert(fld.get(2, 0, 1) == 26) ;
                Debug.Assert(fld.get(2, 0, 2) == 44) ;
                Debug.Assert(fld.get(2, 1, 0) == 28) ;
                Debug.Assert(fld.get(2, 1, 1) == 42) ;
                Debug.Assert(fld.get(2, 1, 2) == 18) ;
                Debug.Assert(fld.get(2, 2, 0) == 26) ;
                Debug.Assert(fld.get(2, 2, 1) == 33) ;
                Debug.Assert(fld.get(2, 2, 2) == 38) ;
            }
            {
                var field = ping33.SparseFixAllBits().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.SparseFixAllBits_.d0_max == 3) ;
                    Debug.Assert(PING33.SparseFixAllBits_.d1 == 3);
                    Debug.Assert(PING33.SparseFixAllBits_.d2 == 3);
                    Debug.Assert(fld.get(0, 0, 0).Value == 31);
                    Debug.Assert(fld.get(0, 0, 1).Value == 43);
                    Debug.Assert(fld.get(0, 0, 2).Value == 38);
                    Debug.Assert(fld.get(0, 1, 0).Value == 11);
                    Debug.Assert(fld.get(0, 1, 1).Value == 7);
                    Debug.Assert(fld.get(0, 1, 2).Value == 14);
                    Debug.Assert(fld.get(0, 2, 0).Value == 23);
                    Debug.Assert(fld.get(0, 2, 1).Value == 5);
                    Debug.Assert(fld.get(0, 2, 2).Value == 22);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.FixAllBits().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.FixAllBits_.d0_max == 3) ;
                    Debug.Assert(PING33.FixAllBits_.d1 == 3);
                    Debug.Assert(PING33.FixAllBits_.d2 == 3);
                    Debug.Assert(fld.get(0, 0, 0) == 43) ;
                    Debug.Assert(fld.get(0, 0, 1) == 25) ;
                    Debug.Assert(fld.get(0, 0, 2) == 23) ;
                    Debug.Assert(fld.get(0, 1, 0) == 15) ;
                    Debug.Assert(fld.get(0, 1, 1) == 20) ;
                    Debug.Assert(fld.get(0, 1, 2) == 35) ;
                    Debug.Assert(fld.get(0, 2, 0) == 39) ;
                    Debug.Assert(fld.get(0, 2, 1) == 14) ;
                    Debug.Assert(fld.get(0, 2, 2) == 33) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.VarAllBits().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.VarAllBits_.d0_max == 3) ;
                    Debug.Assert(PING33.VarAllBits_.d1 == 3);
                    Debug.Assert(fld.d2() == 1 && PING33.VarAllBits_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0) == 17) ;
                    Debug.Assert(fld.get(0, 1, 0) == 25) ;
                    Debug.Assert(fld.get(0, 2, 0) == 42) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.SparseVarAllBits().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.SparseVarAllBits_.d0_max == 3) ;
                    Debug.Assert(PING33.SparseVarAllBits_.d1 == 3);
                    Debug.Assert(fld.d2() == 1 && PING33.SparseVarAllBits_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0).Value == 28);
                    Debug.Assert(fld.get(0, 1, 0).Value == 27);
                    Debug.Assert(fld.get(0, 2, 0).Value == 14);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.VarEachBits().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.VarEachBits_.d0_max == 3) ;
                    Debug.Assert(PING33.VarEachBits_.d1 == 3);
                    Debug.Assert(PING33.VarEachBits_.d2 == 3);
                    Debug.Assert(fld.get(0, 0, 0) == 16) ;
                    Debug.Assert(fld.get(0, 0, 1) == 10) ;
                    Debug.Assert(fld.get(0, 0, 2) == 43) ;
                    Debug.Assert(fld.get(0, 1, 0) == 41) ;
                    Debug.Assert(fld.get(0, 1, 1) == -14) ;
                    Debug.Assert(fld.get(0, 1, 2) == -8) ;
                    Debug.Assert(fld.get(0, 2, 0) == 22) ;
                    Debug.Assert(fld.get(0, 2, 1) == 5) ;
                    Debug.Assert(fld.get(0, 2, 2) == 18) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.SparsVarEachBits().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(fld.d0() == 1 && PING33.SparsVarEachBits_.d0_max == 3) ;
                    Debug.Assert(PING33.SparsVarEachBits_.d1 == 3);
                    Debug.Assert(PING33.SparsVarEachBits_.d2 == 3);
                    Debug.Assert(fld.get(0, 0, 0).Value == 193);
                    Debug.Assert(fld.get(0, 0, 1).Value == 447);
                    Debug.Assert(fld.get(0, 0, 2).Value == 175);
                    Debug.Assert(fld.get(0, 1, 0).Value == 195);
                    Debug.Assert(fld.get(0, 1, 1).Value == 381);
                    Debug.Assert(fld.get(0, 1, 2).Value == 154);
                    Debug.Assert(fld.get(0, 2, 0).Value == 422);
                    Debug.Assert(fld.get(0, 2, 1).Value == 271);
                    Debug.Assert(fld.get(0, 2, 2).Value == 188);
                }
                else Debug.Print("HasNoVanue");
            }
            Debug.Assert(ping33.testBOOLX().Value == false) ;
            Debug.Assert(ping33.testBOOL2X().Value == true) ;
            Debug.Assert(ping33.testBOOL3X().Value == false) ;
            Debug.Assert(ping33.MMMMMM().Value == MAV_MODE.MAV_MODE_TEST_ARMED) ;
            {
                var field = ping33.field44().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(PING33.field44_.d0 == 3);
                    Debug.Assert(PING33.field44_.d1 == 2);
                    Debug.Assert(fld.d2() == 1 && PING33.field44_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0) == -1433433536) ;
                    Debug.Assert(fld.get(0, 1, 0) == 1865496191) ;
                    Debug.Assert(fld.get(1, 0, 0) == 1245934260) ;
                    Debug.Assert(fld.get(1, 1, 0) == 1269270606) ;
                    Debug.Assert(fld.get(2, 0, 0) == 1475807249) ;
                    Debug.Assert(fld.get(2, 1, 0) == 1685830457) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.field634().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(PING33.field634_.d0 == 3);
                    Debug.Assert(PING33.field634_.d1 == 2);
                    Debug.Assert(fld.d2() == 1 && PING33.field634_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0) == -1880531745) ;
                    Debug.Assert(fld.get(0, 1, 0) == -1930557118) ;
                    Debug.Assert(fld.get(1, 0, 0) == 1576268917) ;
                    Debug.Assert(fld.get(1, 1, 0) == -830159118) ;
                    Debug.Assert(fld.get(2, 0, 0) == 355836051) ;
                    Debug.Assert(fld.get(2, 1, 0) == -2062692857) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.field33344().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(PING33.field33344_.d0 == 3);
                    Debug.Assert(PING33.field33344_.d1 == 2);
                    Debug.Assert(fld.d2() == 1 && PING33.field33344_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0).Value == 727293216);
                    Debug.Assert(fld.get(0, 1, 0).Value == -608663109);
                    Debug.Assert(fld.get(1, 0, 0).Value == 277342738);
                    Debug.Assert(fld.get(1, 1, 0).Value == -76787592);
                    Debug.Assert(fld.get(2, 0, 0).Value == -1163618901);
                    Debug.Assert(fld.get(2, 1, 0).Value == 825852485);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var field = ping33.field333634().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(PING33.field333634_.d0 == 3);
                    Debug.Assert(PING33.field333634_.d1 == 2);
                    Debug.Assert(fld.d2() == 1 && PING33.field333634_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0).Value == 249430273);
                    Debug.Assert(fld.get(0, 1, 0).Value == 324844611);
                    Debug.Assert(fld.get(1, 0, 0).Value == -1359493829);
                    Debug.Assert(fld.get(1, 1, 0).Value == 109483417);
                    Debug.Assert(fld.get(2, 0, 0).Value == -1666342463);
                    Debug.Assert(fld.get(2, 1, 0).Value == -787726174);
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var fld = ping33.field__().Value;
                Debug.Assert(fld.get(0, 0, 0).Value == 66312711);
                Debug.Assert(fld.get(0, 0, 1).Value == -1029626480);
                Debug.Assert(fld.get(0, 0, 2).Value == 1242677287);
                Debug.Assert(fld.get(0, 1, 0).Value == -76834954);
                Debug.Assert(fld.get(0, 1, 1).Value == 1652579218);
                Debug.Assert(fld.get(0, 1, 2).Value == 344998151);
                Debug.Assert(fld.get(1, 0, 0).Value == 178249978);
                Debug.Assert(fld.get(1, 0, 1).Value == -1209217003);
                Debug.Assert(fld.get(1, 0, 2).Value == 562741149);
                Debug.Assert(fld.get(1, 1, 0).Value == 121145198);
                Debug.Assert(fld.get(1, 1, 1).Value == 1617992346);
                Debug.Assert(fld.get(1, 1, 2).Value == -1172592997);
                Debug.Assert(fld.get(2, 0, 0).Value == -1381595697);
                Debug.Assert(fld.get(2, 0, 1).Value == -439532630);
                Debug.Assert(fld.get(2, 0, 2).Value == -1657186760);
                Debug.Assert(fld.get(2, 1, 0).Value == -677736790);
                Debug.Assert(fld.get(2, 1, 1).Value == 530062292);
                Debug.Assert(fld.get(2, 1, 2).Value == -1561263411);
            }
            {
                var field = ping33.field63().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(PING33.field63_.d0 == 3);
                    Debug.Assert(PING33.field63_.d1 == 2);
                    Debug.Assert(fld.d2() == 1 && PING33.field63_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0) == -59307350) ;
                    Debug.Assert(fld.get(0, 1, 0) == -1134236211) ;
                    Debug.Assert(fld.get(1, 0, 0) == -1123894955) ;
                    Debug.Assert(fld.get(1, 1, 0) == -968209650) ;
                    Debug.Assert(fld.get(2, 0, 0) == 7134879) ;
                    Debug.Assert(fld.get(2, 1, 0) == 228159259) ;
                }
                else Debug.Print("HasNoVanue");
            }
            {
                var fld = ping33.uid2().Value;
                Debug.Assert(fld.get(0).Value == -8);
                Debug.Assert(fld.get(1).Value == -81);
                Debug.Assert(fld.get(2).Value == -115);
                Debug.Assert(fld.get(3).Value == 81);
                Debug.Assert(fld.get(4).Value == -104);
                Debug.Assert(fld.get(5).Value == -41);
                Debug.Assert(fld.get(6).Value == 98);
                Debug.Assert(fld.get(7).Value == -78);
                Debug.Assert(fld.get(8).Value == -98);
                Debug.Assert(fld.get(9).Value == -27);
                Debug.Assert(fld.get(10).Value == -24);
                Debug.Assert(fld.get(11).Value == 48);
                Debug.Assert(fld.get(12).Value == 42);
                Debug.Assert(fld.get(13).Value == 50);
                Debug.Assert(fld.get(14).Value == -51);
                Debug.Assert(fld.get(15).Value == 92);
                Debug.Assert(fld.get(16).Value == 63);
                Debug.Assert(fld.get(17).Value == -45);
            }
            {
                var fld = ping33.field2().Value;
                Debug.Assert(fld.get(0, 0, 0).Value == -1562384849);
                Debug.Assert(fld.get(0, 0, 1).Value == -1146046656);
                Debug.Assert(fld.get(0, 0, 2).Value == 754095374);
                Debug.Assert(fld.get(0, 1, 0).Value == -1051108103);
                Debug.Assert(fld.get(0, 1, 1).Value == 1625366352);
                Debug.Assert(fld.get(0, 1, 2).Value == -251935561);
                Debug.Assert(fld.get(1, 0, 0).Value == -705081655);
                Debug.Assert(fld.get(1, 0, 1).Value == 2146868998);
                Debug.Assert(fld.get(1, 0, 2).Value == -1768586948);
                Debug.Assert(fld.get(1, 1, 0).Value == 51934115);
                Debug.Assert(fld.get(1, 1, 1).Value == -892217399);
                Debug.Assert(fld.get(1, 1, 2).Value == 1180585756);
                Debug.Assert(fld.get(2, 0, 0).Value == 587164871);
                Debug.Assert(fld.get(2, 0, 1).Value == -223135834);
                Debug.Assert(fld.get(2, 0, 2).Value == -128715993);
                Debug.Assert(fld.get(2, 1, 0).Value == -609422201);
                Debug.Assert(fld.get(2, 1, 1).Value == 1143683192);
                Debug.Assert(fld.get(2, 1, 2).Value == 232612573);
            }
            {
                var fld = ping33.field4().Value;
                Debug.Assert(fld.get(0, 0, 0).Value == -1352249979);
                Debug.Assert(fld.get(0, 0, 1).Value == 717113585);
                Debug.Assert(fld.get(0, 0, 2).Value == 323603370);
                Debug.Assert(fld.get(0, 1, 0).Value == 168636786);
                Debug.Assert(fld.get(0, 1, 1).Value == 379443059);
                Debug.Assert(fld.get(0, 1, 2).Value == -1904653023);
                Debug.Assert(fld.get(1, 0, 0).Value == 1561520316);
                Debug.Assert(fld.get(1, 0, 1).Value == -1684893769);
                Debug.Assert(fld.get(1, 0, 2).Value == -1564912545);
                Debug.Assert(fld.get(1, 1, 0).Value == 19525434);
                Debug.Assert(fld.get(1, 1, 1).Value == -1887826895);
                Debug.Assert(fld.get(1, 1, 2).Value == 1838572955);
                Debug.Assert(fld.get(2, 0, 0).Value == 1907461753);
                Debug.Assert(fld.get(2, 0, 1).Value == -910629657);
                Debug.Assert(fld.get(2, 0, 2).Value == 1321480508);
                Debug.Assert(fld.get(2, 1, 0).Value == 1986797946);
                Debug.Assert(fld.get(2, 1, 1).Value == -1547490555);
                Debug.Assert(fld.get(2, 1, 2).Value == -78555494);
            }
            Debug.Assert(ping33.stringtest1() ?.get() == "bpmrfFntmxbJeqeobfgtzaqcnhkebd");
            {
                var field = ping33.stringtest2().Field();
                if(field.HasValue)
                {
                    var fld = field.Value ;
                    Debug.Assert(PING33.stringtest2_.d0 == 3);
                    Debug.Assert(PING33.stringtest2_.d1 == 2);
                    Debug.Assert(fld.d2() == 1 && PING33.stringtest2_.d2_max == 3) ;
                    Debug.Assert(fld.get(0, 0, 0) ?.get() == TestChannel.str(1, 255));
                    Debug.Assert(fld.get(0, 1, 0) ?.get() == TestChannel.str(2, 255));
                    Debug.Assert(fld.get(1, 0, 0) ?.get() == TestChannel.str(3, 255));
                    Debug.Assert(fld.get(1, 1, 0) ?.get() == TestChannel.str(4, 255));
                    Debug.Assert(fld.get(2, 0, 0) ?.get() == TestChannel.str(5, 255));
                    Debug.Assert(fld.get(2, 1, 0) ?.get() == TestChannel.str(6, 255));
                }
                else Debug.Print("HasNoVanue");
            }
            Debug.Assert(ping33.stringtest3() ?.get() == "kcmpms");
            Debug.Assert(ping33.stringtest4() ?.get() == "leodakwvynbbmstxannogUYzlrllscvfdbkyfqxespfknKrsrwfnym");
            Debug.Print("PING33 \n");
        }

        public static void fill(com.company.demo.GroundControl. VISION_SPEED_ESTIMATE  vision_speed_estimate)
        {
            vision_speed_estimate.usec(1100200629170179494L);
            vision_speed_estimate.x(3.9847253E37F);
            vision_speed_estimate.y(1.3084209E38F);
            vision_speed_estimate.z(2.281289E38F);
        }

        public static void onVISION_SPEED_ESTIMATE(com.company.demo.GroundControl.VISION_SPEED_ESTIMATE vision_speed_estimate)
        {
            Debug.Assert(vision_speed_estimate.usec() == 1100200629170179494L) ;
            Debug.Assert(vision_speed_estimate.x() == 3.9847253E37F) ;
            Debug.Assert(vision_speed_estimate.y() == 1.3084209E38F) ;
            Debug.Assert(vision_speed_estimate.z() == 2.281289E38F) ;
            Debug.Print("VISION_SPEED_ESTIMATE \n");
        }

        public static void fill(com.company.demo.GroundControl. VICON_POSITION_ESTIMATE  vicon_position_estimate)
        {
            vicon_position_estimate.usec(-8951131428219650166L);
            vicon_position_estimate.x(1.3201652E38F);
            vicon_position_estimate.y(2.3623543E38F);
            vicon_position_estimate.z(2.8088592E37F);
            vicon_position_estimate.roll(-7.8415294E37F);
            vicon_position_estimate.pitch(-2.5666373E38F);
            vicon_position_estimate.yaw(-2.5411823E38F);
        }

        public static void onVICON_POSITION_ESTIMATE(com.company.demo.GroundControl.VICON_POSITION_ESTIMATE vicon_position_estimate)
        {
            Debug.Assert(vicon_position_estimate.usec() == -8951131428219650166L) ;
            Debug.Assert(vicon_position_estimate.x() == 1.3201652E38F) ;
            Debug.Assert(vicon_position_estimate.y() == 2.3623543E38F) ;
            Debug.Assert(vicon_position_estimate.z() == 2.8088592E37F) ;
            Debug.Assert(vicon_position_estimate.roll() == -7.8415294E37F) ;
            Debug.Assert(vicon_position_estimate.pitch() == -2.5666373E38F) ;
            Debug.Assert(vicon_position_estimate.yaw() == -2.5411823E38F) ;
            Debug.Print("VICON_POSITION_ESTIMATE \n");
        }

        public static void fill(com.company.demo.GroundControl. HIGHRES_IMU  highres_imu)
        {
            highres_imu.fields_updated(25287);
            highres_imu.time_usec(2387158154430603300L);
            highres_imu.xacc(9.610691E37F);
            highres_imu.yacc(8.3741E37F);
            highres_imu.zacc(-3.1407924E38F);
            highres_imu.xgyro(1.2037939E38F);
            highres_imu.ygyro(-2.883831E38F);
            highres_imu.zgyro(8.4129153E37F);
            highres_imu.xmag(2.5704762E38F);
            highres_imu.ymag(-1.0868925E37F);
            highres_imu.zmag(3.0825664E38F);
            highres_imu.abs_pressure(-2.1160123E38F);
            highres_imu.diff_pressure(8.667496E37F);
            highres_imu.pressure_alt(9.339249E37F);
            highres_imu.temperature(-1.464359E38F);
        }

        public static void onHIGHRES_IMU(com.company.demo.GroundControl.HIGHRES_IMU highres_imu)
        {
            Debug.Assert(highres_imu.fields_updated() == 25287) ;
            Debug.Assert(highres_imu.time_usec() == 2387158154430603300L) ;
            Debug.Assert(highres_imu.xacc() == 9.610691E37F) ;
            Debug.Assert(highres_imu.yacc() == 8.3741E37F) ;
            Debug.Assert(highres_imu.zacc() == -3.1407924E38F) ;
            Debug.Assert(highres_imu.xgyro() == 1.2037939E38F) ;
            Debug.Assert(highres_imu.ygyro() == -2.883831E38F) ;
            Debug.Assert(highres_imu.zgyro() == 8.4129153E37F) ;
            Debug.Assert(highres_imu.xmag() == 2.5704762E38F) ;
            Debug.Assert(highres_imu.ymag() == -1.0868925E37F) ;
            Debug.Assert(highres_imu.zmag() == 3.0825664E38F) ;
            Debug.Assert(highres_imu.abs_pressure() == -2.1160123E38F) ;
            Debug.Assert(highres_imu.diff_pressure() == 8.667496E37F) ;
            Debug.Assert(highres_imu.pressure_alt() == 9.339249E37F) ;
            Debug.Assert(highres_imu.temperature() == -1.464359E38F) ;
            Debug.Print("HIGHRES_IMU \n");
        }

        public static void fill(com.company.demo.GroundControl. OPTICAL_FLOW_RAD  optical_flow_rad)
        {
            optical_flow_rad.integration_time_us(716775131);
            optical_flow_rad.time_delta_distance_us(689343726);
            optical_flow_rad.time_usec(-2941992474300528542L);
            optical_flow_rad.sensor_id(37);
            optical_flow_rad.integrated_x(1.6417961E38F);
            optical_flow_rad.integrated_y(-1.0305056E38F);
            optical_flow_rad.integrated_xgyro(-2.5568018E38F);
            optical_flow_rad.integrated_ygyro(2.9490794E38F);
            optical_flow_rad.integrated_zgyro(-5.891436E36F);
            optical_flow_rad.temperature(16501);
            optical_flow_rad.quality(47);
            optical_flow_rad.distance(-3.1133816E37F);
        }

        public static void onOPTICAL_FLOW_RAD(com.company.demo.GroundControl.OPTICAL_FLOW_RAD optical_flow_rad)
        {
            Debug.Assert(optical_flow_rad.integration_time_us() == 716775131) ;
            Debug.Assert(optical_flow_rad.time_delta_distance_us() == 689343726) ;
            Debug.Assert(optical_flow_rad.time_usec() == -2941992474300528542L) ;
            Debug.Assert(optical_flow_rad.sensor_id() == 37) ;
            Debug.Assert(optical_flow_rad.integrated_x() == 1.6417961E38F) ;
            Debug.Assert(optical_flow_rad.integrated_y() == -1.0305056E38F) ;
            Debug.Assert(optical_flow_rad.integrated_xgyro() == -2.5568018E38F) ;
            Debug.Assert(optical_flow_rad.integrated_ygyro() == 2.9490794E38F) ;
            Debug.Assert(optical_flow_rad.integrated_zgyro() == -5.891436E36F) ;
            Debug.Assert(optical_flow_rad.temperature() == 16501) ;
            Debug.Assert(optical_flow_rad.quality() == 47) ;
            Debug.Assert(optical_flow_rad.distance() == -3.1133816E37F) ;
            Debug.Print("OPTICAL_FLOW_RAD \n");
        }

        public static void fill(com.company.demo.GroundControl. HIL_SENSOR  hil_sensor)
        {
            hil_sensor.fields_updated(-1646863341);
            hil_sensor.time_usec(4637556504802679383L);
            hil_sensor.xacc(-1.3587473E37F);
            hil_sensor.yacc(1.7207347E38F);
            hil_sensor.zacc(-2.163337E38F);
            hil_sensor.xgyro(2.9577992E38F);
            hil_sensor.ygyro(-1.656114E38F);
            hil_sensor.zgyro(2.1027003E38F);
            hil_sensor.xmag(-1.6574687E38F);
            hil_sensor.ymag(-1.1181872E38F);
            hil_sensor.zmag(1.3643707E38F);
            hil_sensor.abs_pressure(6.0373006E37F);
            hil_sensor.diff_pressure(-2.380377E38F);
            hil_sensor.pressure_alt(-2.1869574E37F);
            hil_sensor.temperature(-9.55396E37F);
        }

        public static void onHIL_SENSOR(com.company.demo.GroundControl.HIL_SENSOR hil_sensor)
        {
            Debug.Assert(hil_sensor.fields_updated() == -1646863341) ;
            Debug.Assert(hil_sensor.time_usec() == 4637556504802679383L) ;
            Debug.Assert(hil_sensor.xacc() == -1.3587473E37F) ;
            Debug.Assert(hil_sensor.yacc() == 1.7207347E38F) ;
            Debug.Assert(hil_sensor.zacc() == -2.163337E38F) ;
            Debug.Assert(hil_sensor.xgyro() == 2.9577992E38F) ;
            Debug.Assert(hil_sensor.ygyro() == -1.656114E38F) ;
            Debug.Assert(hil_sensor.zgyro() == 2.1027003E38F) ;
            Debug.Assert(hil_sensor.xmag() == -1.6574687E38F) ;
            Debug.Assert(hil_sensor.ymag() == -1.1181872E38F) ;
            Debug.Assert(hil_sensor.zmag() == 1.3643707E38F) ;
            Debug.Assert(hil_sensor.abs_pressure() == 6.0373006E37F) ;
            Debug.Assert(hil_sensor.diff_pressure() == -2.380377E38F) ;
            Debug.Assert(hil_sensor.pressure_alt() == -2.1869574E37F) ;
            Debug.Assert(hil_sensor.temperature() == -9.55396E37F) ;
            Debug.Print("HIL_SENSOR \n");
        }

        public static void fill(com.company.demo.GroundControl. SIM_STATE  sim_state)
        {
            sim_state.q1(-1.3286044E38F);
            sim_state.q2(-1.0072518E38F);
            sim_state.q3(1.0119026E38F);
            sim_state.q4(2.365961E38F);
            sim_state.roll(-1.2760996E38F);
            sim_state.pitch(-1.986162E37F);
            sim_state.yaw(-8.869027E37F);
            sim_state.xacc(-1.2226997E38F);
            sim_state.yacc(-1.1785737E38F);
            sim_state.zacc(-2.802451E38F);
            sim_state.xgyro(2.8458092E37F);
            sim_state.ygyro(-1.9983388E38F);
            sim_state.zgyro(-2.8524785E38F);
            sim_state.lat(-2.2777817E38F);
            sim_state.lon(-2.2665065E38F);
            sim_state.alt(2.127538E38F);
            sim_state.std_dev_horz(1.974694E38F);
            sim_state.std_dev_vert(2.8029087E38F);
            sim_state.vn(2.3896567E38F);
            sim_state.ve(1.920667E38F);
            sim_state.vd(-2.8090395E38F);
        }

        public static void onSIM_STATE(com.company.demo.GroundControl.SIM_STATE sim_state)
        {
            Debug.Assert(sim_state.q1() == -1.3286044E38F) ;
            Debug.Assert(sim_state.q2() == -1.0072518E38F) ;
            Debug.Assert(sim_state.q3() == 1.0119026E38F) ;
            Debug.Assert(sim_state.q4() == 2.365961E38F) ;
            Debug.Assert(sim_state.roll() == -1.2760996E38F) ;
            Debug.Assert(sim_state.pitch() == -1.986162E37F) ;
            Debug.Assert(sim_state.yaw() == -8.869027E37F) ;
            Debug.Assert(sim_state.xacc() == -1.2226997E38F) ;
            Debug.Assert(sim_state.yacc() == -1.1785737E38F) ;
            Debug.Assert(sim_state.zacc() == -2.802451E38F) ;
            Debug.Assert(sim_state.xgyro() == 2.8458092E37F) ;
            Debug.Assert(sim_state.ygyro() == -1.9983388E38F) ;
            Debug.Assert(sim_state.zgyro() == -2.8524785E38F) ;
            Debug.Assert(sim_state.lat() == -2.2777817E38F) ;
            Debug.Assert(sim_state.lon() == -2.2665065E38F) ;
            Debug.Assert(sim_state.alt() == 2.127538E38F) ;
            Debug.Assert(sim_state.std_dev_horz() == 1.974694E38F) ;
            Debug.Assert(sim_state.std_dev_vert() == 2.8029087E38F) ;
            Debug.Assert(sim_state.vn() == 2.3896567E38F) ;
            Debug.Assert(sim_state.ve() == 1.920667E38F) ;
            Debug.Assert(sim_state.vd() == -2.8090395E38F) ;
            Debug.Print("SIM_STATE \n");
        }

        public static void fill(com.company.demo.GroundControl. RADIO_STATUS  radio_status)
        {
            radio_status.rxerrors(1509);
            radio_status.fixeD(-26563);
            radio_status.rssi(85);
            radio_status.remrssi(-10);
            radio_status.txbuf(-87);
            radio_status.noise(-41);
            radio_status.remnoise(39);
        }

        public static void onRADIO_STATUS(com.company.demo.GroundControl.RADIO_STATUS radio_status)
        {
            Debug.Assert(radio_status.rxerrors() == 1509) ;
            Debug.Assert(radio_status.fixeD() == -26563) ;
            Debug.Assert(radio_status.rssi() == 85) ;
            Debug.Assert(radio_status.remrssi() == -10) ;
            Debug.Assert(radio_status.txbuf() == -87) ;
            Debug.Assert(radio_status.noise() == -41) ;
            Debug.Assert(radio_status.remnoise() == 39) ;
            Debug.Print("RADIO_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. FILE_TRANSFER_PROTOCOL  file_transfer_protocol)
        {
            file_transfer_protocol.target_network(-125);
            file_transfer_protocol.target_system(-112);
            file_transfer_protocol.target_component(-97);
            {
                var dst = file_transfer_protocol.payload() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onFILE_TRANSFER_PROTOCOL(com.company.demo.GroundControl.FILE_TRANSFER_PROTOCOL file_transfer_protocol)
        {
            Debug.Assert(file_transfer_protocol.target_network() == -125) ;
            Debug.Assert(file_transfer_protocol.target_system() == -112) ;
            Debug.Assert(file_transfer_protocol.target_component() == -97) ;
            {
                var item = file_transfer_protocol.payload();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("FILE_TRANSFER_PROTOCOL \n");
        }

        public static void fill(com.company.demo.GroundControl. TIMESYNC  timesync)
        {
            timesync.tc1(-8586898775222907969L);
            timesync.ts1(-4499719128168349833L);
        }

        public static void onTIMESYNC(com.company.demo.GroundControl.TIMESYNC timesync)
        {
            Debug.Assert(timesync.tc1() == -8586898775222907969L) ;
            Debug.Assert(timesync.ts1() == -4499719128168349833L) ;
            Debug.Print("TIMESYNC \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_TRIGGER  camera_trigger)
        {
            camera_trigger.seq(1794371746);
            camera_trigger.time_usec(-1610021233799536301L);
        }

        public static void onCAMERA_TRIGGER(com.company.demo.GroundControl.CAMERA_TRIGGER camera_trigger)
        {
            Debug.Assert(camera_trigger.seq() == 1794371746) ;
            Debug.Assert(camera_trigger.time_usec() == -1610021233799536301L) ;
            Debug.Print("CAMERA_TRIGGER \n");
        }

        public static void fill(com.company.demo.GroundControl. HIL_GPS  hil_gps)
        {
            hil_gps.eph(-28954);
            hil_gps.epv(-12962);
            hil_gps.vel(-14252);
            hil_gps.cog(-20402);
            hil_gps.time_usec(8673274736816146026L);
            hil_gps.fix_type(-91);
            hil_gps.lat(-1567054052);
            hil_gps.lon(-1996584475);
            hil_gps.alt(290547853);
            hil_gps.vn(12152);
            hil_gps.ve(-20293);
            hil_gps.vd(19073);
            hil_gps.satellites_visible(73);
        }

        public static void onHIL_GPS(com.company.demo.GroundControl.HIL_GPS hil_gps)
        {
            Debug.Assert(hil_gps.eph() == -28954) ;
            Debug.Assert(hil_gps.epv() == -12962) ;
            Debug.Assert(hil_gps.vel() == -14252) ;
            Debug.Assert(hil_gps.cog() == -20402) ;
            Debug.Assert(hil_gps.time_usec() == 8673274736816146026L) ;
            Debug.Assert(hil_gps.fix_type() == -91) ;
            Debug.Assert(hil_gps.lat() == -1567054052) ;
            Debug.Assert(hil_gps.lon() == -1996584475) ;
            Debug.Assert(hil_gps.alt() == 290547853) ;
            Debug.Assert(hil_gps.vn() == 12152) ;
            Debug.Assert(hil_gps.ve() == -20293) ;
            Debug.Assert(hil_gps.vd() == 19073) ;
            Debug.Assert(hil_gps.satellites_visible() == 73) ;
            Debug.Print("HIL_GPS \n");
        }

        public static void fill(com.company.demo.GroundControl. HIL_OPTICAL_FLOW  hil_optical_flow)
        {
            hil_optical_flow.integration_time_us(-790617762);
            hil_optical_flow.time_delta_distance_us(493832250);
            hil_optical_flow.time_usec(489039027948984403L);
            hil_optical_flow.sensor_id(-99);
            hil_optical_flow.integrated_x(-6.1932977E37F);
            hil_optical_flow.integrated_y(2.44306E38F);
            hil_optical_flow.integrated_xgyro(-2.3551115E38F);
            hil_optical_flow.integrated_ygyro(-1.5355177E38F);
            hil_optical_flow.integrated_zgyro(2.6217888E38F);
            hil_optical_flow.temperature(22609);
            hil_optical_flow.quality(-13);
            hil_optical_flow.distance(8.1785607E37F);
        }

        public static void onHIL_OPTICAL_FLOW(com.company.demo.GroundControl.HIL_OPTICAL_FLOW hil_optical_flow)
        {
            Debug.Assert(hil_optical_flow.integration_time_us() == -790617762) ;
            Debug.Assert(hil_optical_flow.time_delta_distance_us() == 493832250) ;
            Debug.Assert(hil_optical_flow.time_usec() == 489039027948984403L) ;
            Debug.Assert(hil_optical_flow.sensor_id() == -99) ;
            Debug.Assert(hil_optical_flow.integrated_x() == -6.1932977E37F) ;
            Debug.Assert(hil_optical_flow.integrated_y() == 2.44306E38F) ;
            Debug.Assert(hil_optical_flow.integrated_xgyro() == -2.3551115E38F) ;
            Debug.Assert(hil_optical_flow.integrated_ygyro() == -1.5355177E38F) ;
            Debug.Assert(hil_optical_flow.integrated_zgyro() == 2.6217888E38F) ;
            Debug.Assert(hil_optical_flow.temperature() == 22609) ;
            Debug.Assert(hil_optical_flow.quality() == -13) ;
            Debug.Assert(hil_optical_flow.distance() == 8.1785607E37F) ;
            Debug.Print("HIL_OPTICAL_FLOW \n");
        }

        public static void fill(com.company.demo.GroundControl. HIL_STATE_QUATERNION  hil_state_quaternion)
        {
            hil_state_quaternion.ind_airspeed(6810);
            hil_state_quaternion.true_airspeed(18749);
            hil_state_quaternion.time_usec(-7319906135278426472L);
            hil_state_quaternion.attitude_quaternion(new float [] { 1.9717603E38F, -2.0029277E38F, -2.8165393E38F, 2.3656303E38F  }) ;
            hil_state_quaternion.rollspeed(-2.9967201E38F);
            hil_state_quaternion.pitchspeed(8.931339E37F);
            hil_state_quaternion.yawspeed(-1.4065124E38F);
            hil_state_quaternion.lat(-1890559769);
            hil_state_quaternion.lon(-868274505);
            hil_state_quaternion.alt(789629167);
            hil_state_quaternion.vx(1630);
            hil_state_quaternion.vy(29193);
            hil_state_quaternion.vz(2740);
            hil_state_quaternion.xacc(-3051);
            hil_state_quaternion.yacc(22765);
            hil_state_quaternion.zacc(23630);
        }

        public static void onHIL_STATE_QUATERNION(com.company.demo.GroundControl.HIL_STATE_QUATERNION hil_state_quaternion)
        {
            Debug.Assert(hil_state_quaternion.ind_airspeed() == 6810) ;
            Debug.Assert(hil_state_quaternion.true_airspeed() == 18749) ;
            Debug.Assert(hil_state_quaternion.time_usec() == -7319906135278426472L) ;
            Debug.Assert(hil_state_quaternion.attitude_quaternion().same(new float [] { 1.9717603E38F, -2.0029277E38F, -2.8165393E38F, 2.3656303E38F  }));
            Debug.Assert(hil_state_quaternion.rollspeed() == -2.9967201E38F) ;
            Debug.Assert(hil_state_quaternion.pitchspeed() == 8.931339E37F) ;
            Debug.Assert(hil_state_quaternion.yawspeed() == -1.4065124E38F) ;
            Debug.Assert(hil_state_quaternion.lat() == -1890559769) ;
            Debug.Assert(hil_state_quaternion.lon() == -868274505) ;
            Debug.Assert(hil_state_quaternion.alt() == 789629167) ;
            Debug.Assert(hil_state_quaternion.vx() == 1630) ;
            Debug.Assert(hil_state_quaternion.vy() == 29193) ;
            Debug.Assert(hil_state_quaternion.vz() == 2740) ;
            Debug.Assert(hil_state_quaternion.xacc() == -3051) ;
            Debug.Assert(hil_state_quaternion.yacc() == 22765) ;
            Debug.Assert(hil_state_quaternion.zacc() == 23630) ;
            Debug.Print("HIL_STATE_QUATERNION \n");
        }

        public static void fill(com.company.demo.GroundControl. SCALED_IMU2  scaled_imu2)
        {
            scaled_imu2.time_boot_ms(-511981215);
            scaled_imu2.xacc(16688);
            scaled_imu2.yacc(-3792);
            scaled_imu2.zacc(-3298);
            scaled_imu2.xgyro(-3990);
            scaled_imu2.ygyro(15339);
            scaled_imu2.zgyro(-12014);
            scaled_imu2.xmag(-6009);
            scaled_imu2.ymag(-14237);
            scaled_imu2.zmag(31266);
        }

        public static void onSCALED_IMU2(com.company.demo.GroundControl.SCALED_IMU2 scaled_imu2)
        {
            Debug.Assert(scaled_imu2.time_boot_ms() == -511981215) ;
            Debug.Assert(scaled_imu2.xacc() == 16688) ;
            Debug.Assert(scaled_imu2.yacc() == -3792) ;
            Debug.Assert(scaled_imu2.zacc() == -3298) ;
            Debug.Assert(scaled_imu2.xgyro() == -3990) ;
            Debug.Assert(scaled_imu2.ygyro() == 15339) ;
            Debug.Assert(scaled_imu2.zgyro() == -12014) ;
            Debug.Assert(scaled_imu2.xmag() == -6009) ;
            Debug.Assert(scaled_imu2.ymag() == -14237) ;
            Debug.Assert(scaled_imu2.zmag() == 31266) ;
            Debug.Print("SCALED_IMU2 \n");
        }

        public static void fill(com.company.demo.GroundControl. LOG_REQUEST_LIST  log_request_list)
        {
            log_request_list.start(-15350);
            log_request_list.end(-11132);
            log_request_list.target_system(124);
            log_request_list.target_component(-84);
        }

        public static void onLOG_REQUEST_LIST(com.company.demo.GroundControl.LOG_REQUEST_LIST log_request_list)
        {
            Debug.Assert(log_request_list.start() == -15350) ;
            Debug.Assert(log_request_list.end() == -11132) ;
            Debug.Assert(log_request_list.target_system() == 124) ;
            Debug.Assert(log_request_list.target_component() == -84) ;
            Debug.Print("LOG_REQUEST_LIST \n");
        }

        public static void fill(com.company.demo.GroundControl. LOG_ENTRY  log_entry)
        {
            log_entry.id(4541);
            log_entry.num_logs(926);
            log_entry.last_log_num(13203);
            log_entry.time_utc(1545628104);
            log_entry.size(-1170498020);
        }

        public static void onLOG_ENTRY(com.company.demo.GroundControl.LOG_ENTRY log_entry)
        {
            Debug.Assert(log_entry.id() == 4541) ;
            Debug.Assert(log_entry.num_logs() == 926) ;
            Debug.Assert(log_entry.last_log_num() == 13203) ;
            Debug.Assert(log_entry.time_utc() == 1545628104) ;
            Debug.Assert(log_entry.size() == -1170498020) ;
            Debug.Print("LOG_ENTRY \n");
        }

        public static void fill(com.company.demo.GroundControl. LOG_REQUEST_DATA  log_request_data)
        {
            log_request_data.id(-20070);
            log_request_data.ofs(1349191479);
            log_request_data.count(1696558425);
            log_request_data.target_system(3);
            log_request_data.target_component(76);
        }

        public static void onLOG_REQUEST_DATA(com.company.demo.GroundControl.LOG_REQUEST_DATA log_request_data)
        {
            Debug.Assert(log_request_data.id() == -20070) ;
            Debug.Assert(log_request_data.ofs() == 1349191479) ;
            Debug.Assert(log_request_data.count() == 1696558425) ;
            Debug.Assert(log_request_data.target_system() == 3) ;
            Debug.Assert(log_request_data.target_component() == 76) ;
            Debug.Print("LOG_REQUEST_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. LOG_DATA  log_data)
        {
            log_data.id(-27199);
            log_data.ofs(-984201251);
            log_data.count(106);
            log_data.daTa(new sbyte [] { 85, -115, -15, -126, -69, -120, 113, -11, 118, 86, 109, -76, 9, 45, -69, 126, 4, 82, 11, 11, 7, 37, 98, 33, -64, 96, 53, 98, -25, -99, 9, 19, 32, 26, -39, -44, -10, 113, 43, -76, -71, 78, -2, 50, -17, 54, -116, 62, 41, -63, 98, 103, -86, 75, 103, 120, -22, 118, -22, 75, 76, -87, -32, 123, 25, -43, -83, 26, -84, -53, -82, -37, -47, -128, -63, 78, -111, -64, 5, 15, -126, 70, 45, -21, 86, 105, 85, -67, -3, -69  }) ;
        }

        public static void onLOG_DATA(com.company.demo.GroundControl.LOG_DATA log_data)
        {
            Debug.Assert(log_data.id() == -27199) ;
            Debug.Assert(log_data.ofs() == -984201251) ;
            Debug.Assert(log_data.count() == 106) ;
            Debug.Assert(log_data.daTa().same(new sbyte [] { 85, -115, -15, -126, -69, -120, 113, -11, 118, 86, 109, -76, 9, 45, -69, 126, 4, 82, 11, 11, 7, 37, 98, 33, -64, 96, 53, 98, -25, -99, 9, 19, 32, 26, -39, -44, -10, 113, 43, -76, -71, 78, -2, 50, -17, 54, -116, 62, 41, -63, 98, 103, -86, 75, 103, 120, -22, 118, -22, 75, 76, -87, -32, 123, 25, -43, -83, 26, -84, -53, -82, -37, -47, -128, -63, 78, -111, -64, 5, 15, -126, 70, 45, -21, 86, 105, 85, -67, -3, -69  }));
            Debug.Print("LOG_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. LOG_ERASE  log_erase)
        {
            log_erase.target_system(-5);
            log_erase.target_component(29);
        }

        public static void onLOG_ERASE(com.company.demo.GroundControl.LOG_ERASE log_erase)
        {
            Debug.Assert(log_erase.target_system() == -5) ;
            Debug.Assert(log_erase.target_component() == 29) ;
            Debug.Print("LOG_ERASE \n");
        }

        public static void fill(com.company.demo.GroundControl. LOG_REQUEST_END  log_request_end)
        {
            log_request_end.target_system(-97);
            log_request_end.target_component(-14);
        }

        public static void onLOG_REQUEST_END(com.company.demo.GroundControl.LOG_REQUEST_END log_request_end)
        {
            Debug.Assert(log_request_end.target_system() == -97) ;
            Debug.Assert(log_request_end.target_component() == -14) ;
            Debug.Print("LOG_REQUEST_END \n");
        }

        public static void fill(com.company.demo.GroundControl. GPS_INJECT_DATA  gps_inject_data)
        {
            gps_inject_data.target_system(90);
            gps_inject_data.target_component(-74);
            gps_inject_data.len(-68);
            {
                var dst = gps_inject_data.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  2 + -128), i) ;
            }
        }

        public static void onGPS_INJECT_DATA(com.company.demo.GroundControl.GPS_INJECT_DATA gps_inject_data)
        {
            Debug.Assert(gps_inject_data.target_system() == 90) ;
            Debug.Assert(gps_inject_data.target_component() == -74) ;
            Debug.Assert(gps_inject_data.len() == -68) ;
            {
                var item = gps_inject_data.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  2 + -128));
            }
            Debug.Print("GPS_INJECT_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. GPS2_RAW  gps2_raw)
        {
            gps2_raw.eph(18599);
            gps2_raw.epv(27796);
            gps2_raw.vel(29162);
            gps2_raw.cog(18922);
            gps2_raw.dgps_age(1227256010);
            gps2_raw.time_usec(-7715287596148790053L);
            gps2_raw.lat(37442601);
            gps2_raw.lon(-918950235);
            gps2_raw.alt(-928566171);
            gps2_raw.satellites_visible(-99);
            gps2_raw.dgps_numch(23);
            gps2_raw.fix_type(GPS_FIX_TYPE.GPS_FIX_TYPE_RTK_FLOAT);
        }

        public static void onGPS2_RAW(com.company.demo.GroundControl.GPS2_RAW gps2_raw)
        {
            Debug.Assert(gps2_raw.eph() == 18599) ;
            Debug.Assert(gps2_raw.epv() == 27796) ;
            Debug.Assert(gps2_raw.vel() == 29162) ;
            Debug.Assert(gps2_raw.cog() == 18922) ;
            Debug.Assert(gps2_raw.dgps_age() == 1227256010) ;
            Debug.Assert(gps2_raw.time_usec() == -7715287596148790053L) ;
            Debug.Assert(gps2_raw.lat() == 37442601) ;
            Debug.Assert(gps2_raw.lon() == -918950235) ;
            Debug.Assert(gps2_raw.alt() == -928566171) ;
            Debug.Assert(gps2_raw.satellites_visible() == -99) ;
            Debug.Assert(gps2_raw.dgps_numch() == 23) ;
            Debug.Assert(gps2_raw.fix_type().Value == GPS_FIX_TYPE.GPS_FIX_TYPE_RTK_FLOAT) ;
            Debug.Print("GPS2_RAW \n");
        }

        public static void fill(com.company.demo.GroundControl. POWER_STATUS  power_status)
        {
            power_status.Vcc(19107);
            power_status.Vservo(-2127);
            power_status.flags(MAV_POWER_STATUS.MAV_POWER_STATUS_PERIPH_OVERCURRENT);
        }

        public static void onPOWER_STATUS(com.company.demo.GroundControl.POWER_STATUS power_status)
        {
            Debug.Assert(power_status.Vcc() == 19107) ;
            Debug.Assert(power_status.Vservo() == -2127) ;
            Debug.Assert(power_status.flags().Value == MAV_POWER_STATUS.MAV_POWER_STATUS_PERIPH_OVERCURRENT) ;
            Debug.Print("POWER_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. SERIAL_CONTROL  serial_control)
        {
            serial_control.timeout(13294);
            serial_control.baudrate(1709429476);
            serial_control.count(37);
            serial_control.daTa(new sbyte [] { 60, -59, 61, 19, -32, 10, 54, 65, 56, -91, 52, -1, 2, 26, 99, -8, -58, -114, 127, 52, 79, -22, -93, -47, -26, -51, 39, -67, -79, 115, 68, -20, -115, 3, -29, 11, 16, 126, 70, -52, -19, -101, 79, 60, -27, 83, 52, -23, -56, -32, 99, -45, -33, -24, -87, -22, -59, -42, -112, 35, -22, -6, 7, -42, -53, -20, -23, 58, 11, -51  }) ;
            serial_control.device(SERIAL_CONTROL_DEV.SERIAL_CONTROL_DEV_GPS1);
            serial_control.flags(SERIAL_CONTROL_FLAG.SERIAL_CONTROL_FLAG_EXCLUSIVE);
        }

        public static void onSERIAL_CONTROL(com.company.demo.GroundControl.SERIAL_CONTROL serial_control)
        {
            Debug.Assert(serial_control.timeout() == 13294) ;
            Debug.Assert(serial_control.baudrate() == 1709429476) ;
            Debug.Assert(serial_control.count() == 37) ;
            Debug.Assert(serial_control.daTa().same(new sbyte [] { 60, -59, 61, 19, -32, 10, 54, 65, 56, -91, 52, -1, 2, 26, 99, -8, -58, -114, 127, 52, 79, -22, -93, -47, -26, -51, 39, -67, -79, 115, 68, -20, -115, 3, -29, 11, 16, 126, 70, -52, -19, -101, 79, 60, -27, 83, 52, -23, -56, -32, 99, -45, -33, -24, -87, -22, -59, -42, -112, 35, -22, -6, 7, -42, -53, -20, -23, 58, 11, -51  }));
            Debug.Assert(serial_control.device().Value == SERIAL_CONTROL_DEV.SERIAL_CONTROL_DEV_GPS1) ;
            Debug.Assert(serial_control.flags().Value == SERIAL_CONTROL_FLAG.SERIAL_CONTROL_FLAG_EXCLUSIVE) ;
            Debug.Print("SERIAL_CONTROL \n");
        }

        public static void fill(com.company.demo.GroundControl. GPS_RTK  gps_rtk)
        {
            gps_rtk.wn(6626);
            gps_rtk.time_last_baseline_ms(-202715913);
            gps_rtk.tow(-1101217171);
            gps_rtk.accuracy(796844810);
            gps_rtk.rtk_receiver_id(71);
            gps_rtk.rtk_health(48);
            gps_rtk.rtk_rate(79);
            gps_rtk.nsats(4);
            gps_rtk.baseline_coords_type(-90);
            gps_rtk.baseline_a_mm(-189387637);
            gps_rtk.baseline_b_mm(1268552058);
            gps_rtk.baseline_c_mm(-2131821896);
            gps_rtk.iar_num_hypotheses(-1602972772);
        }

        public static void onGPS_RTK(com.company.demo.GroundControl.GPS_RTK gps_rtk)
        {
            Debug.Assert(gps_rtk.wn() == 6626) ;
            Debug.Assert(gps_rtk.time_last_baseline_ms() == -202715913) ;
            Debug.Assert(gps_rtk.tow() == -1101217171) ;
            Debug.Assert(gps_rtk.accuracy() == 796844810) ;
            Debug.Assert(gps_rtk.rtk_receiver_id() == 71) ;
            Debug.Assert(gps_rtk.rtk_health() == 48) ;
            Debug.Assert(gps_rtk.rtk_rate() == 79) ;
            Debug.Assert(gps_rtk.nsats() == 4) ;
            Debug.Assert(gps_rtk.baseline_coords_type() == -90) ;
            Debug.Assert(gps_rtk.baseline_a_mm() == -189387637) ;
            Debug.Assert(gps_rtk.baseline_b_mm() == 1268552058) ;
            Debug.Assert(gps_rtk.baseline_c_mm() == -2131821896) ;
            Debug.Assert(gps_rtk.iar_num_hypotheses() == -1602972772) ;
            Debug.Print("GPS_RTK \n");
        }

        public static void fill(com.company.demo.GroundControl. GPS2_RTK  gps2_rtk)
        {
            gps2_rtk.wn(4914);
            gps2_rtk.time_last_baseline_ms(35670722);
            gps2_rtk.tow(-1796800452);
            gps2_rtk.accuracy(-1018683804);
            gps2_rtk.rtk_receiver_id(-75);
            gps2_rtk.rtk_health(-71);
            gps2_rtk.rtk_rate(-126);
            gps2_rtk.nsats(82);
            gps2_rtk.baseline_coords_type(-80);
            gps2_rtk.baseline_a_mm(-1334773731);
            gps2_rtk.baseline_b_mm(110671572);
            gps2_rtk.baseline_c_mm(346810505);
            gps2_rtk.iar_num_hypotheses(2111546508);
        }

        public static void onGPS2_RTK(com.company.demo.GroundControl.GPS2_RTK gps2_rtk)
        {
            Debug.Assert(gps2_rtk.wn() == 4914) ;
            Debug.Assert(gps2_rtk.time_last_baseline_ms() == 35670722) ;
            Debug.Assert(gps2_rtk.tow() == -1796800452) ;
            Debug.Assert(gps2_rtk.accuracy() == -1018683804) ;
            Debug.Assert(gps2_rtk.rtk_receiver_id() == -75) ;
            Debug.Assert(gps2_rtk.rtk_health() == -71) ;
            Debug.Assert(gps2_rtk.rtk_rate() == -126) ;
            Debug.Assert(gps2_rtk.nsats() == 82) ;
            Debug.Assert(gps2_rtk.baseline_coords_type() == -80) ;
            Debug.Assert(gps2_rtk.baseline_a_mm() == -1334773731) ;
            Debug.Assert(gps2_rtk.baseline_b_mm() == 110671572) ;
            Debug.Assert(gps2_rtk.baseline_c_mm() == 346810505) ;
            Debug.Assert(gps2_rtk.iar_num_hypotheses() == 2111546508) ;
            Debug.Print("GPS2_RTK \n");
        }

        public static void fill(com.company.demo.GroundControl. SCALED_IMU3  scaled_imu3)
        {
            scaled_imu3.time_boot_ms(-2109978682);
            scaled_imu3.xacc(29124);
            scaled_imu3.yacc(25534);
            scaled_imu3.zacc(6585);
            scaled_imu3.xgyro(9137);
            scaled_imu3.ygyro(-20014);
            scaled_imu3.zgyro(-28749);
            scaled_imu3.xmag(3948);
            scaled_imu3.ymag(-29430);
            scaled_imu3.zmag(-6730);
        }

        public static void onSCALED_IMU3(com.company.demo.GroundControl.SCALED_IMU3 scaled_imu3)
        {
            Debug.Assert(scaled_imu3.time_boot_ms() == -2109978682) ;
            Debug.Assert(scaled_imu3.xacc() == 29124) ;
            Debug.Assert(scaled_imu3.yacc() == 25534) ;
            Debug.Assert(scaled_imu3.zacc() == 6585) ;
            Debug.Assert(scaled_imu3.xgyro() == 9137) ;
            Debug.Assert(scaled_imu3.ygyro() == -20014) ;
            Debug.Assert(scaled_imu3.zgyro() == -28749) ;
            Debug.Assert(scaled_imu3.xmag() == 3948) ;
            Debug.Assert(scaled_imu3.ymag() == -29430) ;
            Debug.Assert(scaled_imu3.zmag() == -6730) ;
            Debug.Print("SCALED_IMU3 \n");
        }

        public static void fill(com.company.demo.GroundControl. DATA_TRANSMISSION_HANDSHAKE  data_transmission_handshake)
        {
            data_transmission_handshake.width(467);
            data_transmission_handshake.height(2533);
            data_transmission_handshake.packets(375);
            data_transmission_handshake.size(946661096);
            data_transmission_handshake.typE(-68);
            data_transmission_handshake.payload(29);
            data_transmission_handshake.jpg_quality(-74);
        }

        public static void onDATA_TRANSMISSION_HANDSHAKE(com.company.demo.GroundControl.DATA_TRANSMISSION_HANDSHAKE data_transmission_handshake)
        {
            Debug.Assert(data_transmission_handshake.width() == 467) ;
            Debug.Assert(data_transmission_handshake.height() == 2533) ;
            Debug.Assert(data_transmission_handshake.packets() == 375) ;
            Debug.Assert(data_transmission_handshake.size() == 946661096) ;
            Debug.Assert(data_transmission_handshake.typE() == -68) ;
            Debug.Assert(data_transmission_handshake.payload() == 29) ;
            Debug.Assert(data_transmission_handshake.jpg_quality() == -74) ;
            Debug.Print("DATA_TRANSMISSION_HANDSHAKE \n");
        }

        public static void fill(com.company.demo.GroundControl. ENCAPSULATED_DATA  encapsulated_data)
        {
            encapsulated_data.seqnr(-15312);
            {
                var dst = encapsulated_data.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onENCAPSULATED_DATA(com.company.demo.GroundControl.ENCAPSULATED_DATA encapsulated_data)
        {
            Debug.Assert(encapsulated_data.seqnr() == -15312) ;
            {
                var item = encapsulated_data.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("ENCAPSULATED_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. DISTANCE_SENSOR  distance_sensor)
        {
            distance_sensor.min_distance(29489);
            distance_sensor.max_distance(25367);
            distance_sensor.current_distance(30553);
            distance_sensor.time_boot_ms(-1360387130);
            distance_sensor.id(113);
            distance_sensor.covariance(-58);
            distance_sensor.typE(MAV_DISTANCE_SENSOR.MAV_DISTANCE_SENSOR_LASER);
            distance_sensor.orientation(MAV_SENSOR_ORIENTATION.ROLL_90_PITCH_90);
        }

        public static void onDISTANCE_SENSOR(com.company.demo.GroundControl.DISTANCE_SENSOR distance_sensor)
        {
            Debug.Assert(distance_sensor.min_distance() == 29489) ;
            Debug.Assert(distance_sensor.max_distance() == 25367) ;
            Debug.Assert(distance_sensor.current_distance() == 30553) ;
            Debug.Assert(distance_sensor.time_boot_ms() == -1360387130) ;
            Debug.Assert(distance_sensor.id() == 113) ;
            Debug.Assert(distance_sensor.covariance() == -58) ;
            Debug.Assert(distance_sensor.typE().Value == MAV_DISTANCE_SENSOR.MAV_DISTANCE_SENSOR_LASER) ;
            Debug.Assert(distance_sensor.orientation().Value == MAV_SENSOR_ORIENTATION.ROLL_90_PITCH_90) ;
            Debug.Print("DISTANCE_SENSOR \n");
        }

        public static void fill(com.company.demo.GroundControl. TERRAIN_REQUEST  terrain_request)
        {
            terrain_request.grid_spacing(-15745);
            terrain_request.mask(6719563682239830802L);
            terrain_request.lat(1260952439);
            terrain_request.lon(9842565);
        }

        public static void onTERRAIN_REQUEST(com.company.demo.GroundControl.TERRAIN_REQUEST terrain_request)
        {
            Debug.Assert(terrain_request.grid_spacing() == -15745) ;
            Debug.Assert(terrain_request.mask() == 6719563682239830802L) ;
            Debug.Assert(terrain_request.lat() == 1260952439) ;
            Debug.Assert(terrain_request.lon() == 9842565) ;
            Debug.Print("TERRAIN_REQUEST \n");
        }

        public static void fill(com.company.demo.GroundControl. TERRAIN_DATA  terrain_data)
        {
            terrain_data.grid_spacing(-12032);
            terrain_data.lat(-1272476394);
            terrain_data.lon(2058793020);
            terrain_data.gridbit(-42);
            terrain_data.daTa(new short [] { 31213, 22277, -4049, 10299, 27935, 25220, -19746, -31551, 32435, 28124, 20100, 4411, -20157, -4246, 20940, 16313  }) ;
        }

        public static void onTERRAIN_DATA(com.company.demo.GroundControl.TERRAIN_DATA terrain_data)
        {
            Debug.Assert(terrain_data.grid_spacing() == -12032) ;
            Debug.Assert(terrain_data.lat() == -1272476394) ;
            Debug.Assert(terrain_data.lon() == 2058793020) ;
            Debug.Assert(terrain_data.gridbit() == -42) ;
            Debug.Assert(terrain_data.daTa().same(new short [] { 31213, 22277, -4049, 10299, 27935, 25220, -19746, -31551, 32435, 28124, 20100, 4411, -20157, -4246, 20940, 16313  }));
            Debug.Print("TERRAIN_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. TERRAIN_CHECK  terrain_check)
        {
            terrain_check.lat(462587440);
            terrain_check.lon(1173131478);
        }

        public static void onTERRAIN_CHECK(com.company.demo.GroundControl.TERRAIN_CHECK terrain_check)
        {
            Debug.Assert(terrain_check.lat() == 462587440) ;
            Debug.Assert(terrain_check.lon() == 1173131478) ;
            Debug.Print("TERRAIN_CHECK \n");
        }

        public static void fill(com.company.demo.GroundControl. TERRAIN_REPORT  terrain_report)
        {
            terrain_report.spacing(-29684);
            terrain_report.pending(-399);
            terrain_report.loaded(31779);
            terrain_report.lat(259924847);
            terrain_report.lon(-9320138);
            terrain_report.terrain_height(1.147057E38F);
            terrain_report.current_height(2.44133E38F);
        }

        public static void onTERRAIN_REPORT(com.company.demo.GroundControl.TERRAIN_REPORT terrain_report)
        {
            Debug.Assert(terrain_report.spacing() == -29684) ;
            Debug.Assert(terrain_report.pending() == -399) ;
            Debug.Assert(terrain_report.loaded() == 31779) ;
            Debug.Assert(terrain_report.lat() == 259924847) ;
            Debug.Assert(terrain_report.lon() == -9320138) ;
            Debug.Assert(terrain_report.terrain_height() == 1.147057E38F) ;
            Debug.Assert(terrain_report.current_height() == 2.44133E38F) ;
            Debug.Print("TERRAIN_REPORT \n");
        }

        public static void fill(com.company.demo.GroundControl. SCALED_PRESSURE2  scaled_pressure2)
        {
            scaled_pressure2.time_boot_ms(1407917249);
            scaled_pressure2.press_abs(3.1179635E38F);
            scaled_pressure2.press_diff(9.77918E37F);
            scaled_pressure2.temperature(-32545);
        }

        public static void onSCALED_PRESSURE2(com.company.demo.GroundControl.SCALED_PRESSURE2 scaled_pressure2)
        {
            Debug.Assert(scaled_pressure2.time_boot_ms() == 1407917249) ;
            Debug.Assert(scaled_pressure2.press_abs() == 3.1179635E38F) ;
            Debug.Assert(scaled_pressure2.press_diff() == 9.77918E37F) ;
            Debug.Assert(scaled_pressure2.temperature() == -32545) ;
            Debug.Print("SCALED_PRESSURE2 \n");
        }

        public static void fill(com.company.demo.GroundControl. ATT_POS_MOCAP  att_pos_mocap)
        {
            att_pos_mocap.time_usec(-7710229417610964219L);
            att_pos_mocap.q(new float [] { 2.5025406E38F, -1.6174008E38F, -2.9990362E38F, 1.4636149E37F  }) ;
            att_pos_mocap.x(-1.2445644E37F);
            att_pos_mocap.y(1.070056E38F);
            att_pos_mocap.z(-7.491966E37F);
        }

        public static void onATT_POS_MOCAP(com.company.demo.GroundControl.ATT_POS_MOCAP att_pos_mocap)
        {
            Debug.Assert(att_pos_mocap.time_usec() == -7710229417610964219L) ;
            Debug.Assert(att_pos_mocap.q().same(new float [] { 2.5025406E38F, -1.6174008E38F, -2.9990362E38F, 1.4636149E37F  }));
            Debug.Assert(att_pos_mocap.x() == -1.2445644E37F) ;
            Debug.Assert(att_pos_mocap.y() == 1.070056E38F) ;
            Debug.Assert(att_pos_mocap.z() == -7.491966E37F) ;
            Debug.Print("ATT_POS_MOCAP \n");
        }

        public static void fill(com.company.demo.GroundControl. SET_ACTUATOR_CONTROL_TARGET  set_actuator_control_target)
        {
            set_actuator_control_target.time_usec(9178477707683449457L);
            set_actuator_control_target.group_mlx(-95);
            set_actuator_control_target.target_system(-97);
            set_actuator_control_target.target_component(-30);
            set_actuator_control_target.controls(new float [] { 1.5795159E38F, -2.5113454E38F, 2.5955976E38F, 1.0116292E38F, -2.435989E38F, -3.2196025E38F, 1.1511566E38F, -1.0969074E38F  }) ;
        }

        public static void onSET_ACTUATOR_CONTROL_TARGET(com.company.demo.GroundControl.SET_ACTUATOR_CONTROL_TARGET set_actuator_control_target)
        {
            Debug.Assert(set_actuator_control_target.time_usec() == 9178477707683449457L) ;
            Debug.Assert(set_actuator_control_target.group_mlx() == -95) ;
            Debug.Assert(set_actuator_control_target.target_system() == -97) ;
            Debug.Assert(set_actuator_control_target.target_component() == -30) ;
            Debug.Assert(set_actuator_control_target.controls().same(new float [] { 1.5795159E38F, -2.5113454E38F, 2.5955976E38F, 1.0116292E38F, -2.435989E38F, -3.2196025E38F, 1.1511566E38F, -1.0969074E38F  }));
            Debug.Print("SET_ACTUATOR_CONTROL_TARGET \n");
        }

        public static void fill(com.company.demo.GroundControl. ACTUATOR_CONTROL_TARGET  actuator_control_target)
        {
            actuator_control_target.time_usec(-4960355128124284907L);
            actuator_control_target.group_mlx(3);
            actuator_control_target.controls(new float [] { -2.2225872E38F, 1.6443254E38F, -1.4458384E38F, -1.2126998E38F, -3.9696935E36F, -3.2037315E38F, -2.0627115E38F, -2.063392E38F  }) ;
        }

        public static void onACTUATOR_CONTROL_TARGET(com.company.demo.GroundControl.ACTUATOR_CONTROL_TARGET actuator_control_target)
        {
            Debug.Assert(actuator_control_target.time_usec() == -4960355128124284907L) ;
            Debug.Assert(actuator_control_target.group_mlx() == 3) ;
            Debug.Assert(actuator_control_target.controls().same(new float [] { -2.2225872E38F, 1.6443254E38F, -1.4458384E38F, -1.2126998E38F, -3.9696935E36F, -3.2037315E38F, -2.0627115E38F, -2.063392E38F  }));
            Debug.Print("ACTUATOR_CONTROL_TARGET \n");
        }

        public static void fill(com.company.demo.GroundControl. ALTITUDE  altitude)
        {
            altitude.time_usec(4923070751035489893L);
            altitude.altitude_monotonic(1.1518197E38F);
            altitude.altitude_amsl(-3.3556089E38F);
            altitude.altitude_local(3.2704665E38F);
            altitude.altitude_relative(3.0544844E38F);
            altitude.altitude_terrain(6.066182E37F);
            altitude.bottom_clearance(-3.157254E38F);
        }

        public static void onALTITUDE(com.company.demo.GroundControl.ALTITUDE altitude)
        {
            Debug.Assert(altitude.time_usec() == 4923070751035489893L) ;
            Debug.Assert(altitude.altitude_monotonic() == 1.1518197E38F) ;
            Debug.Assert(altitude.altitude_amsl() == -3.3556089E38F) ;
            Debug.Assert(altitude.altitude_local() == 3.2704665E38F) ;
            Debug.Assert(altitude.altitude_relative() == 3.0544844E38F) ;
            Debug.Assert(altitude.altitude_terrain() == 6.066182E37F) ;
            Debug.Assert(altitude.bottom_clearance() == -3.157254E38F) ;
            Debug.Print("ALTITUDE \n");
        }

        public static void fill(com.company.demo.GroundControl. RESOURCE_REQUEST  resource_request)
        {
            resource_request.request_id(45);
            resource_request.uri_type(-50);
            {
                var dst = resource_request.uri() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  2 + -128), i) ;
            }
            resource_request.transfer_type(-26);
            {
                var dst = resource_request.storage() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  2 + -128), i) ;
            }
        }

        public static void onRESOURCE_REQUEST(com.company.demo.GroundControl.RESOURCE_REQUEST resource_request)
        {
            Debug.Assert(resource_request.request_id() == 45) ;
            Debug.Assert(resource_request.uri_type() == -50) ;
            {
                var item = resource_request.uri();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  2 + -128));
            }
            Debug.Assert(resource_request.transfer_type() == -26) ;
            {
                var item = resource_request.storage();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  2 + -128));
            }
            Debug.Print("RESOURCE_REQUEST \n");
        }

        public static void fill(com.company.demo.GroundControl. SCALED_PRESSURE3  scaled_pressure3)
        {
            scaled_pressure3.time_boot_ms(1732064603);
            scaled_pressure3.press_abs(-1.3938091E38F);
            scaled_pressure3.press_diff(2.7882078E38F);
            scaled_pressure3.temperature(-8417);
        }

        public static void onSCALED_PRESSURE3(com.company.demo.GroundControl.SCALED_PRESSURE3 scaled_pressure3)
        {
            Debug.Assert(scaled_pressure3.time_boot_ms() == 1732064603) ;
            Debug.Assert(scaled_pressure3.press_abs() == -1.3938091E38F) ;
            Debug.Assert(scaled_pressure3.press_diff() == 2.7882078E38F) ;
            Debug.Assert(scaled_pressure3.temperature() == -8417) ;
            Debug.Print("SCALED_PRESSURE3 \n");
        }

        public static void fill(com.company.demo.GroundControl. FOLLOW_TARGET  follow_target)
        {
            follow_target.timestamp(-3054530324610157801L);
            follow_target.custom_state(4765372304638357519L);
            follow_target.est_capabilities(-89);
            follow_target.lat(-932693362);
            follow_target.lon(-861140398);
            follow_target.alt(-2.716144E38F);
            follow_target.vel(new float [] { 3.3703635E37F, 2.4423735E38F, 6.983178E37F  }) ;
            follow_target.acc(new float [] { -9.908658E37F, 2.8794347E38F, 2.1614714E38F  }) ;
            follow_target.attitude_q(new float [] { 6.3017487E37F, -2.0292539E38F, -1.1652677E38F, -1.04046853E37F  }) ;
            follow_target.rates(new float [] { -3.2386258E38F, 1.9108942E38F, 9.054006E37F  }) ;
            follow_target.position_cov(new float [] { -6.0267203E37F, -2.9656923E38F, 1.2638657E38F  }) ;
        }

        public static void onFOLLOW_TARGET(com.company.demo.GroundControl.FOLLOW_TARGET follow_target)
        {
            Debug.Assert(follow_target.timestamp() == -3054530324610157801L) ;
            Debug.Assert(follow_target.custom_state() == 4765372304638357519L) ;
            Debug.Assert(follow_target.est_capabilities() == -89) ;
            Debug.Assert(follow_target.lat() == -932693362) ;
            Debug.Assert(follow_target.lon() == -861140398) ;
            Debug.Assert(follow_target.alt() == -2.716144E38F) ;
            Debug.Assert(follow_target.vel().same(new float [] { 3.3703635E37F, 2.4423735E38F, 6.983178E37F  }));
            Debug.Assert(follow_target.acc().same(new float [] { -9.908658E37F, 2.8794347E38F, 2.1614714E38F  }));
            Debug.Assert(follow_target.attitude_q().same(new float [] { 6.3017487E37F, -2.0292539E38F, -1.1652677E38F, -1.04046853E37F  }));
            Debug.Assert(follow_target.rates().same(new float [] { -3.2386258E38F, 1.9108942E38F, 9.054006E37F  }));
            Debug.Assert(follow_target.position_cov().same(new float [] { -6.0267203E37F, -2.9656923E38F, 1.2638657E38F  }));
            Debug.Print("FOLLOW_TARGET \n");
        }

        public static void fill(com.company.demo.GroundControl. CONTROL_SYSTEM_STATE  control_system_state)
        {
            control_system_state.time_usec(-3107587940944564005L);
            control_system_state.x_acc(-2.5354444E37F);
            control_system_state.y_acc(-3.385727E38F);
            control_system_state.z_acc(-2.0373798E38F);
            control_system_state.x_vel(-1.1178166E37F);
            control_system_state.y_vel(2.4165944E36F);
            control_system_state.z_vel(-7.817761E37F);
            control_system_state.x_pos(2.3736356E38F);
            control_system_state.y_pos(-8.636828E37F);
            control_system_state.z_pos(-2.9766276E38F);
            control_system_state.airspeed(1.3539934E38F);
            control_system_state.vel_variance(new float [] { 4.027421E37F, -1.0005965E38F, 2.4314188E38F  }) ;
            control_system_state.pos_variance(new float [] { -2.8246815E38F, 6.4079865E37F, -1.1408701E38F  }) ;
            control_system_state.q(new float [] { -1.6515556E38F, 1.1856081E37F, 1.1483825E38F, -2.8403237E38F  }) ;
            control_system_state.roll_rate(-9.598887E37F);
            control_system_state.pitch_rate(1.9514739E38F);
            control_system_state.yaw_rate(-1.3599666E37F);
        }

        public static void onCONTROL_SYSTEM_STATE(com.company.demo.GroundControl.CONTROL_SYSTEM_STATE control_system_state)
        {
            Debug.Assert(control_system_state.time_usec() == -3107587940944564005L) ;
            Debug.Assert(control_system_state.x_acc() == -2.5354444E37F) ;
            Debug.Assert(control_system_state.y_acc() == -3.385727E38F) ;
            Debug.Assert(control_system_state.z_acc() == -2.0373798E38F) ;
            Debug.Assert(control_system_state.x_vel() == -1.1178166E37F) ;
            Debug.Assert(control_system_state.y_vel() == 2.4165944E36F) ;
            Debug.Assert(control_system_state.z_vel() == -7.817761E37F) ;
            Debug.Assert(control_system_state.x_pos() == 2.3736356E38F) ;
            Debug.Assert(control_system_state.y_pos() == -8.636828E37F) ;
            Debug.Assert(control_system_state.z_pos() == -2.9766276E38F) ;
            Debug.Assert(control_system_state.airspeed() == 1.3539934E38F) ;
            Debug.Assert(control_system_state.vel_variance().same(new float [] { 4.027421E37F, -1.0005965E38F, 2.4314188E38F  }));
            Debug.Assert(control_system_state.pos_variance().same(new float [] { -2.8246815E38F, 6.4079865E37F, -1.1408701E38F  }));
            Debug.Assert(control_system_state.q().same(new float [] { -1.6515556E38F, 1.1856081E37F, 1.1483825E38F, -2.8403237E38F  }));
            Debug.Assert(control_system_state.roll_rate() == -9.598887E37F) ;
            Debug.Assert(control_system_state.pitch_rate() == 1.9514739E38F) ;
            Debug.Assert(control_system_state.yaw_rate() == -1.3599666E37F) ;
            Debug.Print("CONTROL_SYSTEM_STATE \n");
        }

        public static void fill(com.company.demo.GroundControl. BATTERY_STATUS  battery_status)
        {
            battery_status.voltages(new short [] { -21599, -32412, 8513, 1739, 28510, 20486, 14693, 16447, 22352, -26288  }) ;
            battery_status.id(122);
            battery_status.temperature(-15746);
            battery_status.current_battery(29365);
            battery_status.current_consumed(444339741);
            battery_status.energy_consumed(1449873017);
            battery_status.battery_remaining(71);
            battery_status.battery_function(MAV_BATTERY_FUNCTION.MAV_BATTERY_FUNCTION_AVIONICS);
            battery_status.typE(MAV_BATTERY_TYPE.LIFE);
        }

        public static void onBATTERY_STATUS(com.company.demo.GroundControl.BATTERY_STATUS battery_status)
        {
            Debug.Assert(battery_status.voltages().same(new short [] { -21599, -32412, 8513, 1739, 28510, 20486, 14693, 16447, 22352, -26288  }));
            Debug.Assert(battery_status.id() == 122) ;
            Debug.Assert(battery_status.temperature() == -15746) ;
            Debug.Assert(battery_status.current_battery() == 29365) ;
            Debug.Assert(battery_status.current_consumed() == 444339741) ;
            Debug.Assert(battery_status.energy_consumed() == 1449873017) ;
            Debug.Assert(battery_status.battery_remaining() == 71) ;
            Debug.Assert(battery_status.battery_function().Value == MAV_BATTERY_FUNCTION.MAV_BATTERY_FUNCTION_AVIONICS) ;
            Debug.Assert(battery_status.typE().Value == MAV_BATTERY_TYPE.LIFE) ;
            Debug.Print("BATTERY_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. AUTOPILOT_VERSION  autopilot_version)
        {
            autopilot_version.vendor_id(-19785);
            autopilot_version.product_id(27967);
            autopilot_version.flight_sw_version(426137282);
            autopilot_version.middleware_sw_version(-7636687);
            autopilot_version.os_sw_version(856303785);
            autopilot_version.board_version(1238485342);
            autopilot_version.uid(156413855855287606L);
            autopilot_version.flight_custom_version(new sbyte [] { -27, 0, -101, -28, -119, 70, 48, -45  }) ;
            autopilot_version.middleware_custom_version(new sbyte [] { -89, -98, -89, 3, -41, -10, -64, 73  }) ;
            autopilot_version.os_custom_version(new sbyte [] { -11, 77, -52, -93, 69, 115, 110, 12  }) ;
            autopilot_version.capabilities(MAV_PROTOCOL_CAPABILITY.MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT);
            autopilot_version.uid2(-44, 0);
            autopilot_version.uid2(27, 1);
            autopilot_version.uid2(4, 2);
            autopilot_version.uid2(11, 3);
            autopilot_version.uid2(93, 4);
            autopilot_version.uid2(36, 5);
            autopilot_version.uid2(35, 6);
            autopilot_version.uid2(-22, 7);
            autopilot_version.uid2(124, 8);
            autopilot_version.uid2(-59, 9);
            autopilot_version.uid2(-12, 10);
            autopilot_version.uid2(44, 11);
            autopilot_version.uid2(56, 12);
            autopilot_version.uid2(24, 13);
            autopilot_version.uid2(61, 14);
            autopilot_version.uid2(88, 15);
            autopilot_version.uid2(-113, 16);
            autopilot_version.uid2(79, 17);
        }

        public static void onAUTOPILOT_VERSION(com.company.demo.GroundControl.AUTOPILOT_VERSION autopilot_version)
        {
            Debug.Assert(autopilot_version.vendor_id() == -19785) ;
            Debug.Assert(autopilot_version.product_id() == 27967) ;
            Debug.Assert(autopilot_version.flight_sw_version() == 426137282) ;
            Debug.Assert(autopilot_version.middleware_sw_version() == -7636687) ;
            Debug.Assert(autopilot_version.os_sw_version() == 856303785) ;
            Debug.Assert(autopilot_version.board_version() == 1238485342) ;
            Debug.Assert(autopilot_version.uid() == 156413855855287606L) ;
            Debug.Assert(autopilot_version.flight_custom_version().same(new sbyte [] { -27, 0, -101, -28, -119, 70, 48, -45  }));
            Debug.Assert(autopilot_version.middleware_custom_version().same(new sbyte [] { -89, -98, -89, 3, -41, -10, -64, 73  }));
            Debug.Assert(autopilot_version.os_custom_version().same(new sbyte [] { -11, 77, -52, -93, 69, 115, 110, 12  }));
            Debug.Assert(autopilot_version.capabilities().Value == MAV_PROTOCOL_CAPABILITY.MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT) ;
            {
                var fld = autopilot_version.uid2().Value;
                Debug.Assert(fld.get(0).Value == -44);
                Debug.Assert(fld.get(1).Value == 27);
                Debug.Assert(fld.get(2).Value == 4);
                Debug.Assert(fld.get(3).Value == 11);
                Debug.Assert(fld.get(4).Value == 93);
                Debug.Assert(fld.get(5).Value == 36);
                Debug.Assert(fld.get(6).Value == 35);
                Debug.Assert(fld.get(7).Value == -22);
                Debug.Assert(fld.get(8).Value == 124);
                Debug.Assert(fld.get(9).Value == -59);
                Debug.Assert(fld.get(10).Value == -12);
                Debug.Assert(fld.get(11).Value == 44);
                Debug.Assert(fld.get(12).Value == 56);
                Debug.Assert(fld.get(13).Value == 24);
                Debug.Assert(fld.get(14).Value == 61);
                Debug.Assert(fld.get(15).Value == 88);
                Debug.Assert(fld.get(16).Value == -113);
                Debug.Assert(fld.get(17).Value == 79);
            }
            Debug.Print("AUTOPILOT_VERSION \n");
        }

        public static void fill(com.company.demo.GroundControl. LANDING_TARGET  landing_target)
        {
            landing_target.time_usec(7659435416150627979L);
            landing_target.target_num(37);
            landing_target.angle_x(-1.2227654E38F);
            landing_target.angle_y(3.8116068E37F);
            landing_target.distance(-1.035563E38F);
            landing_target.size_x(-2.4079656E38F);
            landing_target.size_y(7.390601E37F);
            landing_target.frame(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT_INT);
            landing_target.x(-1.808424E38F);
            landing_target.y(1.3821037E38F);
            landing_target.z(1.787034E38F);
            landing_target.q(3.3657752E38F, 0);
            landing_target.q(-2.0507891E38F, 1);
            landing_target.q(3.227811E38F, 2);
            landing_target.q(1.3845569E38F, 3);
            landing_target.typE(LANDING_TARGET_TYPE.LANDING_TARGET_TYPE_VISION_FIDUCIAL);
            landing_target.position_valid(-97);
        }

        public static void onLANDING_TARGET(com.company.demo.GroundControl.LANDING_TARGET landing_target)
        {
            Debug.Assert(landing_target.time_usec() == 7659435416150627979L) ;
            Debug.Assert(landing_target.target_num() == 37) ;
            Debug.Assert(landing_target.angle_x() == -1.2227654E38F) ;
            Debug.Assert(landing_target.angle_y() == 3.8116068E37F) ;
            Debug.Assert(landing_target.distance() == -1.035563E38F) ;
            Debug.Assert(landing_target.size_x() == -2.4079656E38F) ;
            Debug.Assert(landing_target.size_y() == 7.390601E37F) ;
            Debug.Assert(landing_target.frame().Value == MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT_INT) ;
            Debug.Assert(landing_target.x().Value == -1.808424E38F) ;
            Debug.Assert(landing_target.y().Value == 1.3821037E38F) ;
            Debug.Assert(landing_target.z().Value == 1.787034E38F) ;
            {
                var fld = landing_target.q().Value;
                Debug.Assert(fld.get(0).Value == 3.3657752E38F);
                Debug.Assert(fld.get(1).Value == -2.0507891E38F);
                Debug.Assert(fld.get(2).Value == 3.227811E38F);
                Debug.Assert(fld.get(3).Value == 1.3845569E38F);
            }
            Debug.Assert(landing_target.typE().Value == LANDING_TARGET_TYPE.LANDING_TARGET_TYPE_VISION_FIDUCIAL) ;
            Debug.Assert(landing_target.position_valid().Value == -97) ;
            Debug.Print("LANDING_TARGET \n");
        }

        public static void fill(com.company.demo.GroundControl. ESTIMATOR_STATUS  estimator_status)
        {
            estimator_status.time_usec(-8022637805876070494L);
            estimator_status.vel_ratio(-2.1723337E38F);
            estimator_status.pos_horiz_ratio(-1.2457806E38F);
            estimator_status.pos_vert_ratio(1.4634539E38F);
            estimator_status.mag_ratio(-2.923868E38F);
            estimator_status.hagl_ratio(2.0025604E38F);
            estimator_status.tas_ratio(-1.4689159E38F);
            estimator_status.pos_horiz_accuracy(-1.0606473E38F);
            estimator_status.pos_vert_accuracy(2.6123855E38F);
            estimator_status.flags(ESTIMATOR_STATUS_FLAGS.ESTIMATOR_GPS_GLITCH);
        }

        public static void onESTIMATOR_STATUS(com.company.demo.GroundControl.ESTIMATOR_STATUS estimator_status)
        {
            Debug.Assert(estimator_status.time_usec() == -8022637805876070494L) ;
            Debug.Assert(estimator_status.vel_ratio() == -2.1723337E38F) ;
            Debug.Assert(estimator_status.pos_horiz_ratio() == -1.2457806E38F) ;
            Debug.Assert(estimator_status.pos_vert_ratio() == 1.4634539E38F) ;
            Debug.Assert(estimator_status.mag_ratio() == -2.923868E38F) ;
            Debug.Assert(estimator_status.hagl_ratio() == 2.0025604E38F) ;
            Debug.Assert(estimator_status.tas_ratio() == -1.4689159E38F) ;
            Debug.Assert(estimator_status.pos_horiz_accuracy() == -1.0606473E38F) ;
            Debug.Assert(estimator_status.pos_vert_accuracy() == 2.6123855E38F) ;
            Debug.Assert(estimator_status.flags().Value == ESTIMATOR_STATUS_FLAGS.ESTIMATOR_GPS_GLITCH) ;
            Debug.Print("ESTIMATOR_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. WIND_COV  wind_cov)
        {
            wind_cov.time_usec(1067288886353390298L);
            wind_cov.wind_x(1.7454326E38F);
            wind_cov.wind_y(-3.1226204E38F);
            wind_cov.wind_z(3.1813418E38F);
            wind_cov.var_horiz(2.915928E38F);
            wind_cov.var_vert(-3.5851578E37F);
            wind_cov.wind_alt(5.7928727E37F);
            wind_cov.horiz_accuracy(1.9692137E38F);
            wind_cov.vert_accuracy(-1.3593036E38F);
        }

        public static void onWIND_COV(com.company.demo.GroundControl.WIND_COV wind_cov)
        {
            Debug.Assert(wind_cov.time_usec() == 1067288886353390298L) ;
            Debug.Assert(wind_cov.wind_x() == 1.7454326E38F) ;
            Debug.Assert(wind_cov.wind_y() == -3.1226204E38F) ;
            Debug.Assert(wind_cov.wind_z() == 3.1813418E38F) ;
            Debug.Assert(wind_cov.var_horiz() == 2.915928E38F) ;
            Debug.Assert(wind_cov.var_vert() == -3.5851578E37F) ;
            Debug.Assert(wind_cov.wind_alt() == 5.7928727E37F) ;
            Debug.Assert(wind_cov.horiz_accuracy() == 1.9692137E38F) ;
            Debug.Assert(wind_cov.vert_accuracy() == -1.3593036E38F) ;
            Debug.Print("WIND_COV \n");
        }

        public static void fill(com.company.demo.GroundControl. GPS_INPUT  gps_input)
        {
            gps_input.time_week(1391);
            gps_input.time_week_ms(904795173);
            gps_input.time_usec(-5488787048003168265L);
            gps_input.gps_id(41);
            gps_input.fix_type(49);
            gps_input.lat(2137124035);
            gps_input.lon(1705299732);
            gps_input.alt(1.652481E38F);
            gps_input.hdop(-1.2725872E38F);
            gps_input.vdop(-3.0601394E38F);
            gps_input.vn(-4.868035E37F);
            gps_input.ve(3.1839655E38F);
            gps_input.vd(-1.2453478E38F);
            gps_input.speed_accuracy(-2.5157865E38F);
            gps_input.horiz_accuracy(-3.5138864E37F);
            gps_input.vert_accuracy(-2.6061053E38F);
            gps_input.satellites_visible(39);
            gps_input.ignore_flags(GPS_INPUT_IGNORE_FLAGS.GPS_INPUT_IGNORE_FLAG_VDOP);
        }

        public static void onGPS_INPUT(com.company.demo.GroundControl.GPS_INPUT gps_input)
        {
            Debug.Assert(gps_input.time_week() == 1391) ;
            Debug.Assert(gps_input.time_week_ms() == 904795173) ;
            Debug.Assert(gps_input.time_usec() == -5488787048003168265L) ;
            Debug.Assert(gps_input.gps_id() == 41) ;
            Debug.Assert(gps_input.fix_type() == 49) ;
            Debug.Assert(gps_input.lat() == 2137124035) ;
            Debug.Assert(gps_input.lon() == 1705299732) ;
            Debug.Assert(gps_input.alt() == 1.652481E38F) ;
            Debug.Assert(gps_input.hdop() == -1.2725872E38F) ;
            Debug.Assert(gps_input.vdop() == -3.0601394E38F) ;
            Debug.Assert(gps_input.vn() == -4.868035E37F) ;
            Debug.Assert(gps_input.ve() == 3.1839655E38F) ;
            Debug.Assert(gps_input.vd() == -1.2453478E38F) ;
            Debug.Assert(gps_input.speed_accuracy() == -2.5157865E38F) ;
            Debug.Assert(gps_input.horiz_accuracy() == -3.5138864E37F) ;
            Debug.Assert(gps_input.vert_accuracy() == -2.6061053E38F) ;
            Debug.Assert(gps_input.satellites_visible() == 39) ;
            Debug.Assert(gps_input.ignore_flags().Value == GPS_INPUT_IGNORE_FLAGS.GPS_INPUT_IGNORE_FLAG_VDOP) ;
            Debug.Print("GPS_INPUT \n");
        }

        public static void fill(com.company.demo.GroundControl. GPS_RTCM_DATA  gps_rtcm_data)
        {
            gps_rtcm_data.flags(78);
            gps_rtcm_data.len(-72);
            {
                var dst = gps_rtcm_data.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onGPS_RTCM_DATA(com.company.demo.GroundControl.GPS_RTCM_DATA gps_rtcm_data)
        {
            Debug.Assert(gps_rtcm_data.flags() == 78) ;
            Debug.Assert(gps_rtcm_data.len() == -72) ;
            {
                var item = gps_rtcm_data.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("GPS_RTCM_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. HIGH_LATENCY  high_latency)
        {
            high_latency.heading(20990);
            high_latency.wp_distance(21940);
            high_latency.custom_mode(-616206477);
            high_latency.roll(10384);
            high_latency.pitch(-2362);
            high_latency.throttle(109);
            high_latency.heading_sp(29487);
            high_latency.latitude(1873706469);
            high_latency.longitude(-624248037);
            high_latency.altitude_amsl(790);
            high_latency.altitude_sp(717);
            high_latency.airspeed(15);
            high_latency.airspeed_sp(78);
            high_latency.groundspeed(-90);
            high_latency.climb_rate(-10);
            high_latency.gps_nsat(105);
            high_latency.battery_remaining(113);
            high_latency.temperature(102);
            high_latency.temperature_air(-56);
            high_latency.failsafe(18);
            high_latency.wp_num(-6);
            high_latency.base_mode(MAV_MODE_FLAG.MAV_MODE_FLAG_GUIDED_ENABLED);
            high_latency.landed_state(MAV_LANDED_STATE.MAV_LANDED_STATE_UNDEFINED);
            high_latency.gps_fix_type(GPS_FIX_TYPE.GPS_FIX_TYPE_NO_GPS);
        }

        public static void onHIGH_LATENCY(com.company.demo.GroundControl.HIGH_LATENCY high_latency)
        {
            Debug.Assert(high_latency.heading() == 20990) ;
            Debug.Assert(high_latency.wp_distance() == 21940) ;
            Debug.Assert(high_latency.custom_mode() == -616206477) ;
            Debug.Assert(high_latency.roll() == 10384) ;
            Debug.Assert(high_latency.pitch() == -2362) ;
            Debug.Assert(high_latency.throttle() == 109) ;
            Debug.Assert(high_latency.heading_sp() == 29487) ;
            Debug.Assert(high_latency.latitude() == 1873706469) ;
            Debug.Assert(high_latency.longitude() == -624248037) ;
            Debug.Assert(high_latency.altitude_amsl() == 790) ;
            Debug.Assert(high_latency.altitude_sp() == 717) ;
            Debug.Assert(high_latency.airspeed() == 15) ;
            Debug.Assert(high_latency.airspeed_sp() == 78) ;
            Debug.Assert(high_latency.groundspeed() == -90) ;
            Debug.Assert(high_latency.climb_rate() == -10) ;
            Debug.Assert(high_latency.gps_nsat() == 105) ;
            Debug.Assert(high_latency.battery_remaining() == 113) ;
            Debug.Assert(high_latency.temperature() == 102) ;
            Debug.Assert(high_latency.temperature_air() == -56) ;
            Debug.Assert(high_latency.failsafe() == 18) ;
            Debug.Assert(high_latency.wp_num() == -6) ;
            Debug.Assert(high_latency.base_mode().Value == MAV_MODE_FLAG.MAV_MODE_FLAG_GUIDED_ENABLED) ;
            Debug.Assert(high_latency.landed_state().Value == MAV_LANDED_STATE.MAV_LANDED_STATE_UNDEFINED) ;
            Debug.Assert(high_latency.gps_fix_type().Value == GPS_FIX_TYPE.GPS_FIX_TYPE_NO_GPS) ;
            Debug.Print("HIGH_LATENCY \n");
        }

        public static void fill(com.company.demo.GroundControl. VIBRATION  vibration)
        {
            vibration.clipping_0(-1609110360);
            vibration.clipping_1(-1346252798);
            vibration.clipping_2(1021978489);
            vibration.time_usec(8165431267414969450L);
            vibration.vibration_x(5.3417513E37F);
            vibration.vibration_y(2.9368104E38F);
            vibration.vibration_z(1.4018247E38F);
        }

        public static void onVIBRATION(com.company.demo.GroundControl.VIBRATION vibration)
        {
            Debug.Assert(vibration.clipping_0() == -1609110360) ;
            Debug.Assert(vibration.clipping_1() == -1346252798) ;
            Debug.Assert(vibration.clipping_2() == 1021978489) ;
            Debug.Assert(vibration.time_usec() == 8165431267414969450L) ;
            Debug.Assert(vibration.vibration_x() == 5.3417513E37F) ;
            Debug.Assert(vibration.vibration_y() == 2.9368104E38F) ;
            Debug.Assert(vibration.vibration_z() == 1.4018247E38F) ;
            Debug.Print("VIBRATION \n");
        }

        public static void fill(com.company.demo.GroundControl. HOME_POSITION  home_position)
        {
            home_position.latitude(2098594333);
            home_position.longitude(1379787526);
            home_position.altitude(-1426646117);
            home_position.x(-9.829808E37F);
            home_position.y(-2.1286377E38F);
            home_position.z(-7.6019935E36F);
            home_position.q(new float [] { 1.0586601E38F, -1.6869949E38F, -8.812327E37F, -1.5674022E38F  }) ;
            home_position.approach_x(3.583535E37F);
            home_position.approach_y(2.114135E38F);
            home_position.approach_z(-9.319795E37F);
            home_position.time_usec(8539146187992951197L);
        }

        public static void onHOME_POSITION(com.company.demo.GroundControl.HOME_POSITION home_position)
        {
            Debug.Assert(home_position.latitude() == 2098594333) ;
            Debug.Assert(home_position.longitude() == 1379787526) ;
            Debug.Assert(home_position.altitude() == -1426646117) ;
            Debug.Assert(home_position.x() == -9.829808E37F) ;
            Debug.Assert(home_position.y() == -2.1286377E38F) ;
            Debug.Assert(home_position.z() == -7.6019935E36F) ;
            Debug.Assert(home_position.q().same(new float [] { 1.0586601E38F, -1.6869949E38F, -8.812327E37F, -1.5674022E38F  }));
            Debug.Assert(home_position.approach_x() == 3.583535E37F) ;
            Debug.Assert(home_position.approach_y() == 2.114135E38F) ;
            Debug.Assert(home_position.approach_z() == -9.319795E37F) ;
            Debug.Assert(home_position.time_usec().Value == 8539146187992951197L) ;
            Debug.Print("HOME_POSITION \n");
        }

        public static void fill(com.company.demo.GroundControl. SET_HOME_POSITION  set_home_position)
        {
            set_home_position.target_system(-76);
            set_home_position.latitude(-1044851290);
            set_home_position.longitude(1589863070);
            set_home_position.altitude(-420439280);
            set_home_position.x(-1.079919E38F);
            set_home_position.y(-1.3728102E38F);
            set_home_position.z(3.167704E38F);
            set_home_position.q(new float [] { 1.4245822E38F, -1.8030798E38F, -2.383082E38F, 1.2008705E38F  }) ;
            set_home_position.approach_x(-2.177579E38F);
            set_home_position.approach_y(-2.2645694E38F);
            set_home_position.approach_z(-4.530292E37F);
            set_home_position.time_usec(7638248167232710760L);
        }

        public static void onSET_HOME_POSITION(com.company.demo.GroundControl.SET_HOME_POSITION set_home_position)
        {
            Debug.Assert(set_home_position.target_system() == -76) ;
            Debug.Assert(set_home_position.latitude() == -1044851290) ;
            Debug.Assert(set_home_position.longitude() == 1589863070) ;
            Debug.Assert(set_home_position.altitude() == -420439280) ;
            Debug.Assert(set_home_position.x() == -1.079919E38F) ;
            Debug.Assert(set_home_position.y() == -1.3728102E38F) ;
            Debug.Assert(set_home_position.z() == 3.167704E38F) ;
            Debug.Assert(set_home_position.q().same(new float [] { 1.4245822E38F, -1.8030798E38F, -2.383082E38F, 1.2008705E38F  }));
            Debug.Assert(set_home_position.approach_x() == -2.177579E38F) ;
            Debug.Assert(set_home_position.approach_y() == -2.2645694E38F) ;
            Debug.Assert(set_home_position.approach_z() == -4.530292E37F) ;
            Debug.Assert(set_home_position.time_usec().Value == 7638248167232710760L) ;
            Debug.Print("SET_HOME_POSITION \n");
        }

        public static void fill(com.company.demo.GroundControl. MESSAGE_INTERVAL  message_interval)
        {
            message_interval.message_id(-6611);
            message_interval.interval_us(2130200251);
        }

        public static void onMESSAGE_INTERVAL(com.company.demo.GroundControl.MESSAGE_INTERVAL message_interval)
        {
            Debug.Assert(message_interval.message_id() == -6611) ;
            Debug.Assert(message_interval.interval_us() == 2130200251) ;
            Debug.Print("MESSAGE_INTERVAL \n");
        }

        public static void fill(com.company.demo.GroundControl. EXTENDED_SYS_STATE  extended_sys_state)
        {
            extended_sys_state.vtol_state(MAV_VTOL_STATE.MAV_VTOL_STATE_MC);
            extended_sys_state.landed_state(MAV_LANDED_STATE.MAV_LANDED_STATE_UNDEFINED);
        }

        public static void onEXTENDED_SYS_STATE(com.company.demo.GroundControl.EXTENDED_SYS_STATE extended_sys_state)
        {
            Debug.Assert(extended_sys_state.vtol_state().Value == MAV_VTOL_STATE.MAV_VTOL_STATE_MC) ;
            Debug.Assert(extended_sys_state.landed_state().Value == MAV_LANDED_STATE.MAV_LANDED_STATE_UNDEFINED) ;
            Debug.Print("EXTENDED_SYS_STATE \n");
        }

        public static void fill(com.company.demo.GroundControl. ADSB_VEHICLE  adsb_vehicle)
        {
            adsb_vehicle.heading(5995);
            adsb_vehicle.hor_velocity(-14898);
            adsb_vehicle.squawk(9466);
            adsb_vehicle.ICAO_address(-947022909);
            adsb_vehicle.lat(46096915);
            adsb_vehicle.lon(-82622524);
            adsb_vehicle.altitude(-1333282989);
            adsb_vehicle.ver_velocity(9698);
            adsb_vehicle.tslc(7);
            adsb_vehicle.altitude_type(ADSB_ALTITUDE_TYPE.ADSB_ALTITUDE_TYPE_GEOMETRIC);
            adsb_vehicle.callsign("hZ", null) ;
            adsb_vehicle.emitter_type(ADSB_EMITTER_TYPE.ADSB_EMITTER_TYPE_EMERGENCY_SURFACE);
            adsb_vehicle.flags(ADSB_FLAGS.ADSB_FLAGS_VALID_SQUAWK);
        }

        public static void onADSB_VEHICLE(com.company.demo.GroundControl.ADSB_VEHICLE adsb_vehicle)
        {
            Debug.Assert(adsb_vehicle.heading() == 5995) ;
            Debug.Assert(adsb_vehicle.hor_velocity() == -14898) ;
            Debug.Assert(adsb_vehicle.squawk() == 9466) ;
            Debug.Assert(adsb_vehicle.ICAO_address() == -947022909) ;
            Debug.Assert(adsb_vehicle.lat() == 46096915) ;
            Debug.Assert(adsb_vehicle.lon() == -82622524) ;
            Debug.Assert(adsb_vehicle.altitude() == -1333282989) ;
            Debug.Assert(adsb_vehicle.ver_velocity() == 9698) ;
            Debug.Assert(adsb_vehicle.tslc() == 7) ;
            Debug.Assert(adsb_vehicle.altitude_type().Value == ADSB_ALTITUDE_TYPE.ADSB_ALTITUDE_TYPE_GEOMETRIC) ;
            Debug.Assert(adsb_vehicle.callsign() ?.get() == "hZ");
            Debug.Assert(adsb_vehicle.emitter_type().Value == ADSB_EMITTER_TYPE.ADSB_EMITTER_TYPE_EMERGENCY_SURFACE) ;
            Debug.Assert(adsb_vehicle.flags().Value == ADSB_FLAGS.ADSB_FLAGS_VALID_SQUAWK) ;
            Debug.Print("ADSB_VEHICLE \n");
        }

        public static void fill(com.company.demo.GroundControl. COLLISION  collision)
        {
            collision.id(-300366336);
            collision.time_to_minimum_delta(-1.3865048E38F);
            collision.altitude_minimum_delta(2.0479506E37F);
            collision.horizontal_minimum_delta(-2.8481878E38F);
            collision.sRc(MAV_COLLISION_SRC.MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT);
            collision.action(MAV_COLLISION_ACTION.MAV_COLLISION_ACTION_NONE);
            collision.threat_level(MAV_COLLISION_THREAT_LEVEL.MAV_COLLISION_THREAT_LEVEL_HIGH);
        }

        public static void onCOLLISION(com.company.demo.GroundControl.COLLISION collision)
        {
            Debug.Assert(collision.id() == -300366336) ;
            Debug.Assert(collision.time_to_minimum_delta() == -1.3865048E38F) ;
            Debug.Assert(collision.altitude_minimum_delta() == 2.0479506E37F) ;
            Debug.Assert(collision.horizontal_minimum_delta() == -2.8481878E38F) ;
            Debug.Assert(collision.sRc().Value == MAV_COLLISION_SRC.MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT) ;
            Debug.Assert(collision.action().Value == MAV_COLLISION_ACTION.MAV_COLLISION_ACTION_NONE) ;
            Debug.Assert(collision.threat_level().Value == MAV_COLLISION_THREAT_LEVEL.MAV_COLLISION_THREAT_LEVEL_HIGH) ;
            Debug.Print("COLLISION \n");
        }

        public static void fill(com.company.demo.GroundControl. V2_EXTENSION  v2_extension)
        {
            v2_extension.message_type(-19003);
            v2_extension.target_network(-108);
            v2_extension.target_system(60);
            v2_extension.target_component(107);
            {
                var dst = v2_extension.payload() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onV2_EXTENSION(com.company.demo.GroundControl.V2_EXTENSION v2_extension)
        {
            Debug.Assert(v2_extension.message_type() == -19003) ;
            Debug.Assert(v2_extension.target_network() == -108) ;
            Debug.Assert(v2_extension.target_system() == 60) ;
            Debug.Assert(v2_extension.target_component() == 107) ;
            {
                var item = v2_extension.payload();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("V2_EXTENSION \n");
        }

        public static void fill(com.company.demo.GroundControl. MEMORY_VECT  memory_vect)
        {
            memory_vect.address(12510);
            memory_vect.ver(122);
            memory_vect.typE(-45);
            memory_vect.value(new sbyte [] { 65, -19, -17, -56, 81, -105, 37, 87, -20, -90, 123, 100, -109, -118, 45, -10, -106, -88, -54, 27, -106, -11, -103, 53, -90, -23, 123, 20, 80, 77, -41, 89  }) ;
        }

        public static void onMEMORY_VECT(com.company.demo.GroundControl.MEMORY_VECT memory_vect)
        {
            Debug.Assert(memory_vect.address() == 12510) ;
            Debug.Assert(memory_vect.ver() == 122) ;
            Debug.Assert(memory_vect.typE() == -45) ;
            Debug.Assert(memory_vect.value().same(new sbyte [] { 65, -19, -17, -56, 81, -105, 37, 87, -20, -90, 123, 100, -109, -118, 45, -10, -106, -88, -54, 27, -106, -11, -103, 53, -90, -23, 123, 20, 80, 77, -41, 89  }));
            Debug.Print("MEMORY_VECT \n");
        }

        public static void fill(com.company.demo.GroundControl. DEBUG_VECT  debug_vect)
        {
            debug_vect.time_usec(780606283080650935L);
            debug_vect.x(-6.720293E37F);
            debug_vect.y(1.2249607E38F);
            debug_vect.z(-5.1303087E37F);
            debug_vect.name("gMekxwwvbcrmumouahnxlGvwmPeoykzEnLbdwwi", null) ;
        }

        public static void onDEBUG_VECT(com.company.demo.GroundControl.DEBUG_VECT debug_vect)
        {
            Debug.Assert(debug_vect.time_usec() == 780606283080650935L) ;
            Debug.Assert(debug_vect.x() == -6.720293E37F) ;
            Debug.Assert(debug_vect.y() == 1.2249607E38F) ;
            Debug.Assert(debug_vect.z() == -5.1303087E37F) ;
            Debug.Assert(debug_vect.name() ?.get() == "gMekxwwvbcrmumouahnxlGvwmPeoykzEnLbdwwi");
            Debug.Print("DEBUG_VECT \n");
        }

        public static void fill(com.company.demo.GroundControl. NAMED_VALUE_FLOAT  named_value_float)
        {
            named_value_float.time_boot_ms(-950155476);
            named_value_float.value(-2.55714E38F);
            named_value_float.name("yywrwgzWijfyiuZmbWyjkZykhbOvMxesZ", null) ;
        }

        public static void onNAMED_VALUE_FLOAT(com.company.demo.GroundControl.NAMED_VALUE_FLOAT named_value_float)
        {
            Debug.Assert(named_value_float.time_boot_ms() == -950155476) ;
            Debug.Assert(named_value_float.value() == -2.55714E38F) ;
            Debug.Assert(named_value_float.name() ?.get() == "yywrwgzWijfyiuZmbWyjkZykhbOvMxesZ");
            Debug.Print("NAMED_VALUE_FLOAT \n");
        }

        public static void fill(com.company.demo.GroundControl. NAMED_VALUE_INT  named_value_int)
        {
            named_value_int.time_boot_ms(-1862751536);
            named_value_int.value(1199606065);
            named_value_int.name("evhtieyilchjixjkeuCnaVeryynsszlegMEibMoqywJzuYKbh", null) ;
        }

        public static void onNAMED_VALUE_INT(com.company.demo.GroundControl.NAMED_VALUE_INT named_value_int)
        {
            Debug.Assert(named_value_int.time_boot_ms() == -1862751536) ;
            Debug.Assert(named_value_int.value() == 1199606065) ;
            Debug.Assert(named_value_int.name() ?.get() == "evhtieyilchjixjkeuCnaVeryynsszlegMEibMoqywJzuYKbh");
            Debug.Print("NAMED_VALUE_INT \n");
        }

        public static void fill(com.company.demo.GroundControl. STATUSTEXT  statustext)
        {
            statustext.severity(MAV_SEVERITY.MAV_SEVERITY_DEBUG);
            statustext.text("ykejssmbhzi", null) ;
        }

        public static void onSTATUSTEXT(com.company.demo.GroundControl.STATUSTEXT statustext)
        {
            Debug.Assert(statustext.severity().Value == MAV_SEVERITY.MAV_SEVERITY_DEBUG) ;
            Debug.Assert(statustext.text() ?.get() == "ykejssmbhzi");
            Debug.Print("STATUSTEXT \n");
        }

        public static void fill(com.company.demo.GroundControl. DEBUG  debug)
        {
            debug.time_boot_ms(-271537377);
            debug.ind(-72);
            debug.value(-1.2270723E38F);
        }

        public static void onDEBUG(com.company.demo.GroundControl.DEBUG debug)
        {
            Debug.Assert(debug.time_boot_ms() == -271537377) ;
            Debug.Assert(debug.ind() == -72) ;
            Debug.Assert(debug.value() == -1.2270723E38F) ;
            Debug.Print("DEBUG \n");
        }

        public static void fill(com.company.demo.GroundControl. SETUP_SIGNING  setup_signing)
        {
            setup_signing.initial_timestamp(2953695588412115490L);
            setup_signing.target_system(77);
            setup_signing.target_component(92);
            setup_signing.secret_key(new sbyte [] { -38, -93, -14, 77, -69, 79, -102, -69, -69, 69, -6, 67, 10, 114, 6, -125, 3, -119, -32, -56, -82, -69, 107, 17, -34, -126, -76, 63, 38, -30, -62, -122  }) ;
        }

        public static void onSETUP_SIGNING(com.company.demo.GroundControl.SETUP_SIGNING setup_signing)
        {
            Debug.Assert(setup_signing.initial_timestamp() == 2953695588412115490L) ;
            Debug.Assert(setup_signing.target_system() == 77) ;
            Debug.Assert(setup_signing.target_component() == 92) ;
            Debug.Assert(setup_signing.secret_key().same(new sbyte [] { -38, -93, -14, 77, -69, 79, -102, -69, -69, 69, -6, 67, 10, 114, 6, -125, 3, -119, -32, -56, -82, -69, 107, 17, -34, -126, -76, 63, 38, -30, -62, -122  }));
            Debug.Print("SETUP_SIGNING \n");
        }

        public static void fill(com.company.demo.GroundControl. BUTTON_CHANGE  button_change)
        {
            button_change.time_boot_ms(-6740200);
            button_change.last_change_ms(925086101);
            button_change.state(74);
        }

        public static void onBUTTON_CHANGE(com.company.demo.GroundControl.BUTTON_CHANGE button_change)
        {
            Debug.Assert(button_change.time_boot_ms() == -6740200) ;
            Debug.Assert(button_change.last_change_ms() == 925086101) ;
            Debug.Assert(button_change.state() == 74) ;
            Debug.Print("BUTTON_CHANGE \n");
        }

        public static void fill(com.company.demo.GroundControl. PLAY_TUNE  play_tune)
        {
            play_tune.target_system(94);
            play_tune.target_component(-84);
            play_tune.tune("xlhrwdRcobnjkioxfwlvclahdnnzvYhzgdcbKYgegacqcc", null) ;
        }

        public static void onPLAY_TUNE(com.company.demo.GroundControl.PLAY_TUNE play_tune)
        {
            Debug.Assert(play_tune.target_system() == 94) ;
            Debug.Assert(play_tune.target_component() == -84) ;
            Debug.Assert(play_tune.tune() ?.get() == "xlhrwdRcobnjkioxfwlvclahdnnzvYhzgdcbKYgegacqcc");
            Debug.Print("PLAY_TUNE \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_INFORMATION  camera_information)
        {
            camera_information.resolution_h(18907);
            camera_information.resolution_v(-22743);
            camera_information.cam_definition_version(7018);
            camera_information.time_boot_ms(-287050078);
            camera_information.firmware_version(1159901384);
            camera_information.vendor_name(new sbyte [] { -127, 112, -15, -25, 125, 81, 102, -18, 98, -89, 36, 122, 8, 109, 33, 51, -35, 96, 47, 106, 99, 64, -81, 52, -73, -96, 79, 42, 73, 12, -16, 2  }) ;
            camera_information.model_name(new sbyte [] { 109, -53, -59, -66, -57, 31, -71, 81, 46, -56, -1, -65, -8, -49, -6, 60, -4, 49, 102, 8, -97, -41, 18, -128, 94, 100, -20, 118, -62, -34, 0, -118  }) ;
            camera_information.focal_length(2.0478242E38F);
            camera_information.sensor_size_h(-3.2127132E38F);
            camera_information.sensor_size_v(-3.9422876E37F);
            camera_information.lens_id(99);
            camera_information.flags(CAMERA_CAP_FLAGS.CAMERA_CAP_FLAGS_HAS_MODES);
            camera_information.cam_definition_uri("ljpXnlibwqpimSovfuagxiuEtyrvjoaydLemBdmcv", null) ;
        }

        public static void onCAMERA_INFORMATION(com.company.demo.GroundControl.CAMERA_INFORMATION camera_information)
        {
            Debug.Assert(camera_information.resolution_h() == 18907) ;
            Debug.Assert(camera_information.resolution_v() == -22743) ;
            Debug.Assert(camera_information.cam_definition_version() == 7018) ;
            Debug.Assert(camera_information.time_boot_ms() == -287050078) ;
            Debug.Assert(camera_information.firmware_version() == 1159901384) ;
            Debug.Assert(camera_information.vendor_name().same(new sbyte [] { -127, 112, -15, -25, 125, 81, 102, -18, 98, -89, 36, 122, 8, 109, 33, 51, -35, 96, 47, 106, 99, 64, -81, 52, -73, -96, 79, 42, 73, 12, -16, 2  }));
            Debug.Assert(camera_information.model_name().same(new sbyte [] { 109, -53, -59, -66, -57, 31, -71, 81, 46, -56, -1, -65, -8, -49, -6, 60, -4, 49, 102, 8, -97, -41, 18, -128, 94, 100, -20, 118, -62, -34, 0, -118  }));
            Debug.Assert(camera_information.focal_length() == 2.0478242E38F) ;
            Debug.Assert(camera_information.sensor_size_h() == -3.2127132E38F) ;
            Debug.Assert(camera_information.sensor_size_v() == -3.9422876E37F) ;
            Debug.Assert(camera_information.lens_id() == 99) ;
            Debug.Assert(camera_information.flags().Value == CAMERA_CAP_FLAGS.CAMERA_CAP_FLAGS_HAS_MODES) ;
            Debug.Assert(camera_information.cam_definition_uri() ?.get() == "ljpXnlibwqpimSovfuagxiuEtyrvjoaydLemBdmcv");
            Debug.Print("CAMERA_INFORMATION \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_SETTINGS  camera_settings)
        {
            camera_settings.time_boot_ms(-1445616903);
            camera_settings.mode_id(CAMERA_MODE.CAMERA_MODE_IMAGE);
        }

        public static void onCAMERA_SETTINGS(com.company.demo.GroundControl.CAMERA_SETTINGS camera_settings)
        {
            Debug.Assert(camera_settings.time_boot_ms() == -1445616903) ;
            Debug.Assert(camera_settings.mode_id().Value == CAMERA_MODE.CAMERA_MODE_IMAGE) ;
            Debug.Print("CAMERA_SETTINGS \n");
        }

        public static void fill(com.company.demo.GroundControl. STORAGE_INFORMATION  storage_information)
        {
            storage_information.time_boot_ms(1497909879);
            storage_information.storage_id(-80);
            storage_information.storage_count(45);
            storage_information.status(-19);
            storage_information.total_capacity(-4.502263E37F);
            storage_information.used_capacity(-1.5647546E38F);
            storage_information.available_capacity(2.6184566E38F);
            storage_information.read_speed(-2.1083538E38F);
            storage_information.write_speed(-2.3899433E38F);
        }

        public static void onSTORAGE_INFORMATION(com.company.demo.GroundControl.STORAGE_INFORMATION storage_information)
        {
            Debug.Assert(storage_information.time_boot_ms() == 1497909879) ;
            Debug.Assert(storage_information.storage_id() == -80) ;
            Debug.Assert(storage_information.storage_count() == 45) ;
            Debug.Assert(storage_information.status() == -19) ;
            Debug.Assert(storage_information.total_capacity() == -4.502263E37F) ;
            Debug.Assert(storage_information.used_capacity() == -1.5647546E38F) ;
            Debug.Assert(storage_information.available_capacity() == 2.6184566E38F) ;
            Debug.Assert(storage_information.read_speed() == -2.1083538E38F) ;
            Debug.Assert(storage_information.write_speed() == -2.3899433E38F) ;
            Debug.Print("STORAGE_INFORMATION \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_CAPTURE_STATUS  camera_capture_status)
        {
            camera_capture_status.time_boot_ms(-1304510190);
            camera_capture_status.recording_time_ms(-434393285);
            camera_capture_status.image_status(4);
            camera_capture_status.video_status(37);
            camera_capture_status.image_interval(1.0003303E38F);
            camera_capture_status.available_capacity(-1.101931E38F);
        }

        public static void onCAMERA_CAPTURE_STATUS(com.company.demo.GroundControl.CAMERA_CAPTURE_STATUS camera_capture_status)
        {
            Debug.Assert(camera_capture_status.time_boot_ms() == -1304510190) ;
            Debug.Assert(camera_capture_status.recording_time_ms() == -434393285) ;
            Debug.Assert(camera_capture_status.image_status() == 4) ;
            Debug.Assert(camera_capture_status.video_status() == 37) ;
            Debug.Assert(camera_capture_status.image_interval() == 1.0003303E38F) ;
            Debug.Assert(camera_capture_status.available_capacity() == -1.101931E38F) ;
            Debug.Print("CAMERA_CAPTURE_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_IMAGE_CAPTURED  camera_image_captured)
        {
            camera_image_captured.time_boot_ms(-1552615578);
            camera_image_captured.time_utc(965608421855004413L);
            camera_image_captured.camera_id(107);
            camera_image_captured.lat(566574388);
            camera_image_captured.lon(70034251);
            camera_image_captured.alt(1376608502);
            camera_image_captured.relative_alt(1804761459);
            camera_image_captured.q(new float [] { -2.4459937E38F, 3.2170212E38F, -1.005145E38F, 3.0178475E38F  }) ;
            camera_image_captured.image_index(159697453);
            camera_image_captured.capture_result(-112);
            camera_image_captured.file_url("goahg", null) ;
        }

        public static void onCAMERA_IMAGE_CAPTURED(com.company.demo.GroundControl.CAMERA_IMAGE_CAPTURED camera_image_captured)
        {
            Debug.Assert(camera_image_captured.time_boot_ms() == -1552615578) ;
            Debug.Assert(camera_image_captured.time_utc() == 965608421855004413L) ;
            Debug.Assert(camera_image_captured.camera_id() == 107) ;
            Debug.Assert(camera_image_captured.lat() == 566574388) ;
            Debug.Assert(camera_image_captured.lon() == 70034251) ;
            Debug.Assert(camera_image_captured.alt() == 1376608502) ;
            Debug.Assert(camera_image_captured.relative_alt() == 1804761459) ;
            Debug.Assert(camera_image_captured.q().same(new float [] { -2.4459937E38F, 3.2170212E38F, -1.005145E38F, 3.0178475E38F  }));
            Debug.Assert(camera_image_captured.image_index() == 159697453) ;
            Debug.Assert(camera_image_captured.capture_result() == -112) ;
            Debug.Assert(camera_image_captured.file_url() ?.get() == "goahg");
            Debug.Print("CAMERA_IMAGE_CAPTURED \n");
        }

        public static void fill(com.company.demo.GroundControl. FLIGHT_INFORMATION  flight_information)
        {
            flight_information.time_boot_ms(-2032583160);
            flight_information.arming_time_utc(-6132538049010196669L);
            flight_information.takeoff_time_utc(2376469092708908720L);
            flight_information.flight_uuid(-9174313474606225751L);
        }

        public static void onFLIGHT_INFORMATION(com.company.demo.GroundControl.FLIGHT_INFORMATION flight_information)
        {
            Debug.Assert(flight_information.time_boot_ms() == -2032583160) ;
            Debug.Assert(flight_information.arming_time_utc() == -6132538049010196669L) ;
            Debug.Assert(flight_information.takeoff_time_utc() == 2376469092708908720L) ;
            Debug.Assert(flight_information.flight_uuid() == -9174313474606225751L) ;
            Debug.Print("FLIGHT_INFORMATION \n");
        }

        public static void fill(com.company.demo.GroundControl. MOUNT_ORIENTATION  mount_orientation)
        {
            mount_orientation.time_boot_ms(-665700505);
            mount_orientation.roll(3.231145E38F);
            mount_orientation.pitch(3.1205282E38F);
            mount_orientation.yaw(-1.5025274E38F);
        }

        public static void onMOUNT_ORIENTATION(com.company.demo.GroundControl.MOUNT_ORIENTATION mount_orientation)
        {
            Debug.Assert(mount_orientation.time_boot_ms() == -665700505) ;
            Debug.Assert(mount_orientation.roll() == 3.231145E38F) ;
            Debug.Assert(mount_orientation.pitch() == 3.1205282E38F) ;
            Debug.Assert(mount_orientation.yaw() == -1.5025274E38F) ;
            Debug.Print("MOUNT_ORIENTATION \n");
        }

        public static void fill(com.company.demo.GroundControl. LOGGING_DATA  logging_data)
        {
            logging_data.sequence(-29065);
            logging_data.target_system(-34);
            logging_data.target_component(-90);
            logging_data.length(-75);
            logging_data.first_message_offset(-10);
            {
                var dst = logging_data.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onLOGGING_DATA(com.company.demo.GroundControl.LOGGING_DATA logging_data)
        {
            Debug.Assert(logging_data.sequence() == -29065) ;
            Debug.Assert(logging_data.target_system() == -34) ;
            Debug.Assert(logging_data.target_component() == -90) ;
            Debug.Assert(logging_data.length() == -75) ;
            Debug.Assert(logging_data.first_message_offset() == -10) ;
            {
                var item = logging_data.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("LOGGING_DATA \n");
        }

        public static void fill(com.company.demo.GroundControl. LOGGING_DATA_ACKED  logging_data_acked)
        {
            logging_data_acked.sequence(-13092);
            logging_data_acked.target_system(38);
            logging_data_acked.target_component(106);
            logging_data_acked.length(-33);
            logging_data_acked.first_message_offset(86);
            {
                var dst = logging_data_acked.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onLOGGING_DATA_ACKED(com.company.demo.GroundControl.LOGGING_DATA_ACKED logging_data_acked)
        {
            Debug.Assert(logging_data_acked.sequence() == -13092) ;
            Debug.Assert(logging_data_acked.target_system() == 38) ;
            Debug.Assert(logging_data_acked.target_component() == 106) ;
            Debug.Assert(logging_data_acked.length() == -33) ;
            Debug.Assert(logging_data_acked.first_message_offset() == 86) ;
            {
                var item = logging_data_acked.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("LOGGING_DATA_ACKED \n");
        }

        public static void fill(com.company.demo.GroundControl. LOGGING_ACK  logging_ack)
        {
            logging_ack.sequence(32505);
            logging_ack.target_system(-18);
            logging_ack.target_component(81);
        }

        public static void onLOGGING_ACK(com.company.demo.GroundControl.LOGGING_ACK logging_ack)
        {
            Debug.Assert(logging_ack.sequence() == 32505) ;
            Debug.Assert(logging_ack.target_system() == -18) ;
            Debug.Assert(logging_ack.target_component() == 81) ;
            Debug.Print("LOGGING_ACK \n");
        }

        public static void fill(com.company.demo.GroundControl. VIDEO_STREAM_INFORMATION  video_stream_information)
        {
            video_stream_information.resolution_h(-32424);
            video_stream_information.resolution_v(-15482);
            video_stream_information.rotation(11009);
            video_stream_information.bitrate(-1647945345);
            video_stream_information.camera_id(-5);
            video_stream_information.status(70);
            video_stream_information.framerate(5.2742277E37F);
            video_stream_information.uri("ntdwrwvaKeesPiyma", null) ;
        }

        public static void onVIDEO_STREAM_INFORMATION(com.company.demo.GroundControl.VIDEO_STREAM_INFORMATION video_stream_information)
        {
            Debug.Assert(video_stream_information.resolution_h() == -32424) ;
            Debug.Assert(video_stream_information.resolution_v() == -15482) ;
            Debug.Assert(video_stream_information.rotation() == 11009) ;
            Debug.Assert(video_stream_information.bitrate() == -1647945345) ;
            Debug.Assert(video_stream_information.camera_id() == -5) ;
            Debug.Assert(video_stream_information.status() == 70) ;
            Debug.Assert(video_stream_information.framerate() == 5.2742277E37F) ;
            Debug.Assert(video_stream_information.uri() ?.get() == "ntdwrwvaKeesPiyma");
            Debug.Print("VIDEO_STREAM_INFORMATION \n");
        }

        public static void fill(com.company.demo.GroundControl. SET_VIDEO_STREAM_SETTINGS  set_video_stream_settings)
        {
            set_video_stream_settings.resolution_h(198);
            set_video_stream_settings.resolution_v(-22605);
            set_video_stream_settings.rotation(-27892);
            set_video_stream_settings.bitrate(1978906620);
            set_video_stream_settings.target_system(107);
            set_video_stream_settings.target_component(15);
            set_video_stream_settings.camera_id(-95);
            set_video_stream_settings.framerate(2.316683E38F);
            set_video_stream_settings.uri("fxPblmvpgomrmulhfwsLtaivwenzQUbjlvbbzoMllrCwruEbyuofuvDmilavhqzbilxagpZeyailomcii", null) ;
        }

        public static void onSET_VIDEO_STREAM_SETTINGS(com.company.demo.GroundControl.SET_VIDEO_STREAM_SETTINGS set_video_stream_settings)
        {
            Debug.Assert(set_video_stream_settings.resolution_h() == 198) ;
            Debug.Assert(set_video_stream_settings.resolution_v() == -22605) ;
            Debug.Assert(set_video_stream_settings.rotation() == -27892) ;
            Debug.Assert(set_video_stream_settings.bitrate() == 1978906620) ;
            Debug.Assert(set_video_stream_settings.target_system() == 107) ;
            Debug.Assert(set_video_stream_settings.target_component() == 15) ;
            Debug.Assert(set_video_stream_settings.camera_id() == -95) ;
            Debug.Assert(set_video_stream_settings.framerate() == 2.316683E38F) ;
            Debug.Assert(set_video_stream_settings.uri() ?.get() == "fxPblmvpgomrmulhfwsLtaivwenzQUbjlvbbzoMllrCwruEbyuofuvDmilavhqzbilxagpZeyailomcii");
            Debug.Print("SET_VIDEO_STREAM_SETTINGS \n");
        }

        public static void fill(com.company.demo.GroundControl. WIFI_CONFIG_AP  wifi_config_ap)
        {
            wifi_config_ap.ssid("nbnntmewz", null) ;
            wifi_config_ap.password("apmxrujovhaceqPflxgnurrFJdr", null) ;
        }

        public static void onWIFI_CONFIG_AP(com.company.demo.GroundControl.WIFI_CONFIG_AP wifi_config_ap)
        {
            Debug.Assert(wifi_config_ap.ssid() ?.get() == "nbnntmewz");
            Debug.Assert(wifi_config_ap.password() ?.get() == "apmxrujovhaceqPflxgnurrFJdr");
            Debug.Print("WIFI_CONFIG_AP \n");
        }

        public static void fill(com.company.demo.GroundControl. PROTOCOL_VERSION  protocol_version)
        {
            protocol_version.version(-3012);
            protocol_version.min_version(3738);
            protocol_version.max_version(14596);
            protocol_version.spec_version_hash(new sbyte [] { -40, 4, 106, -46, 74, 46, 127, -27  }) ;
            protocol_version.library_version_hash(new sbyte [] { 79, 52, 102, 2, -57, -115, 53, 23  }) ;
        }

        public static void onPROTOCOL_VERSION(com.company.demo.GroundControl.PROTOCOL_VERSION protocol_version)
        {
            Debug.Assert(protocol_version.version() == -3012) ;
            Debug.Assert(protocol_version.min_version() == 3738) ;
            Debug.Assert(protocol_version.max_version() == 14596) ;
            Debug.Assert(protocol_version.spec_version_hash().same(new sbyte [] { -40, 4, 106, -46, 74, 46, 127, -27  }));
            Debug.Assert(protocol_version.library_version_hash().same(new sbyte [] { 79, 52, 102, 2, -57, -115, 53, 23  }));
            Debug.Print("PROTOCOL_VERSION \n");
        }

        public static void fill(com.company.demo.GroundControl. UAVCAN_NODE_STATUS  uavcan_node_status)
        {
            uavcan_node_status.vendor_specific_status_code(-8112);
            uavcan_node_status.uptime_sec(-1442138067);
            uavcan_node_status.time_usec(8358892394776596801L);
            uavcan_node_status.sub_mode(-107);
            uavcan_node_status.health(UAVCAN_NODE_HEALTH.UAVCAN_NODE_HEALTH_WARNING);
            uavcan_node_status.mode(UAVCAN_NODE_MODE.UAVCAN_NODE_MODE_OFFLINE);
        }

        public static void onUAVCAN_NODE_STATUS(com.company.demo.GroundControl.UAVCAN_NODE_STATUS uavcan_node_status)
        {
            Debug.Assert(uavcan_node_status.vendor_specific_status_code() == -8112) ;
            Debug.Assert(uavcan_node_status.uptime_sec() == -1442138067) ;
            Debug.Assert(uavcan_node_status.time_usec() == 8358892394776596801L) ;
            Debug.Assert(uavcan_node_status.sub_mode() == -107) ;
            Debug.Assert(uavcan_node_status.health().Value == UAVCAN_NODE_HEALTH.UAVCAN_NODE_HEALTH_WARNING) ;
            Debug.Assert(uavcan_node_status.mode().Value == UAVCAN_NODE_MODE.UAVCAN_NODE_MODE_OFFLINE) ;
            Debug.Print("UAVCAN_NODE_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. UAVCAN_NODE_INFO  uavcan_node_info)
        {
            uavcan_node_info.uptime_sec(1535442697);
            uavcan_node_info.sw_vcs_commit(630158973);
            uavcan_node_info.time_usec(2185788302737033272L);
            uavcan_node_info.hw_version_major(-63);
            uavcan_node_info.hw_version_minor(-83);
            uavcan_node_info.hw_unique_id(new sbyte [] { -89, 19, 66, -125, -23, -63, -3, 5, 70, 111, -92, -20, 90, 46, -49, 83  }) ;
            uavcan_node_info.sw_version_major(119);
            uavcan_node_info.sw_version_minor(-11);
            uavcan_node_info.name("gfa", null) ;
        }

        public static void onUAVCAN_NODE_INFO(com.company.demo.GroundControl.UAVCAN_NODE_INFO uavcan_node_info)
        {
            Debug.Assert(uavcan_node_info.uptime_sec() == 1535442697) ;
            Debug.Assert(uavcan_node_info.sw_vcs_commit() == 630158973) ;
            Debug.Assert(uavcan_node_info.time_usec() == 2185788302737033272L) ;
            Debug.Assert(uavcan_node_info.hw_version_major() == -63) ;
            Debug.Assert(uavcan_node_info.hw_version_minor() == -83) ;
            Debug.Assert(uavcan_node_info.hw_unique_id().same(new sbyte [] { -89, 19, 66, -125, -23, -63, -3, 5, 70, 111, -92, -20, 90, 46, -49, 83  }));
            Debug.Assert(uavcan_node_info.sw_version_major() == 119) ;
            Debug.Assert(uavcan_node_info.sw_version_minor() == -11) ;
            Debug.Assert(uavcan_node_info.name() ?.get() == "gfa");
            Debug.Print("UAVCAN_NODE_INFO \n");
        }

        public static void fill(com.company.demo.GroundControl. PARAM_EXT_REQUEST_READ  param_ext_request_read)
        {
            param_ext_request_read.target_system(-72);
            param_ext_request_read.target_component(-79);
            param_ext_request_read.param_index(-5497);
            param_ext_request_read.param_id("ge", null) ;
        }

        public static void onPARAM_EXT_REQUEST_READ(com.company.demo.GroundControl.PARAM_EXT_REQUEST_READ param_ext_request_read)
        {
            Debug.Assert(param_ext_request_read.target_system() == -72) ;
            Debug.Assert(param_ext_request_read.target_component() == -79) ;
            Debug.Assert(param_ext_request_read.param_index() == -5497) ;
            Debug.Assert(param_ext_request_read.param_id() ?.get() == "ge");
            Debug.Print("PARAM_EXT_REQUEST_READ \n");
        }

        public static void fill(com.company.demo.GroundControl. PARAM_EXT_REQUEST_LIST  param_ext_request_list)
        {
            param_ext_request_list.target_system(127);
            param_ext_request_list.target_component(-111);
        }

        public static void onPARAM_EXT_REQUEST_LIST(com.company.demo.GroundControl.PARAM_EXT_REQUEST_LIST param_ext_request_list)
        {
            Debug.Assert(param_ext_request_list.target_system() == 127) ;
            Debug.Assert(param_ext_request_list.target_component() == -111) ;
            Debug.Print("PARAM_EXT_REQUEST_LIST \n");
        }

        public static void fill(com.company.demo.GroundControl. PARAM_EXT_VALUE  param_ext_value)
        {
            param_ext_value.param_count(-11546);
            param_ext_value.param_index(-2651);
            param_ext_value.param_id("isytsxbwtyikkWUhrxmw", null) ;
            param_ext_value.param_value("fuxxlkwgbAzrVlhwbbvfIpbjcpwNowpxCMvccbwgkfumcGtwqfvaCktygpu", null) ;
            param_ext_value.param_type(MAV_PARAM_EXT_TYPE.MAV_PARAM_EXT_TYPE_UINT32);
        }

        public static void onPARAM_EXT_VALUE(com.company.demo.GroundControl.PARAM_EXT_VALUE param_ext_value)
        {
            Debug.Assert(param_ext_value.param_count() == -11546) ;
            Debug.Assert(param_ext_value.param_index() == -2651) ;
            Debug.Assert(param_ext_value.param_id() ?.get() == "isytsxbwtyikkWUhrxmw");
            Debug.Assert(param_ext_value.param_value() ?.get() == "fuxxlkwgbAzrVlhwbbvfIpbjcpwNowpxCMvccbwgkfumcGtwqfvaCktygpu");
            Debug.Assert(param_ext_value.param_type().Value == MAV_PARAM_EXT_TYPE.MAV_PARAM_EXT_TYPE_UINT32) ;
            Debug.Print("PARAM_EXT_VALUE \n");
        }

        public static void fill(com.company.demo.GroundControl. PARAM_EXT_SET  param_ext_set)
        {
            param_ext_set.target_system(-104);
            param_ext_set.target_component(-82);
            param_ext_set.param_id("ztnkqptbcDquFt", null) ;
            param_ext_set.param_value("NjhppnnthpijlgGjgfe", null) ;
            param_ext_set.param_type(MAV_PARAM_EXT_TYPE.MAV_PARAM_EXT_TYPE_INT64);
        }

        public static void onPARAM_EXT_SET(com.company.demo.GroundControl.PARAM_EXT_SET param_ext_set)
        {
            Debug.Assert(param_ext_set.target_system() == -104) ;
            Debug.Assert(param_ext_set.target_component() == -82) ;
            Debug.Assert(param_ext_set.param_id() ?.get() == "ztnkqptbcDquFt");
            Debug.Assert(param_ext_set.param_value() ?.get() == "NjhppnnthpijlgGjgfe");
            Debug.Assert(param_ext_set.param_type().Value == MAV_PARAM_EXT_TYPE.MAV_PARAM_EXT_TYPE_INT64) ;
            Debug.Print("PARAM_EXT_SET \n");
        }

        public static void fill(com.company.demo.GroundControl. PARAM_EXT_ACK  param_ext_ack)
        {
            param_ext_ack.param_id("qsilnycpgGonpalnaodetiaeNzRekojkkpbgoe", null) ;
            param_ext_ack.param_value("tcc", null) ;
            param_ext_ack.param_type(MAV_PARAM_EXT_TYPE.MAV_PARAM_EXT_TYPE_UINT64);
            param_ext_ack.param_result(PARAM_ACK.PARAM_ACK_FAILED);
        }

        public static void onPARAM_EXT_ACK(com.company.demo.GroundControl.PARAM_EXT_ACK param_ext_ack)
        {
            Debug.Assert(param_ext_ack.param_id() ?.get() == "qsilnycpgGonpalnaodetiaeNzRekojkkpbgoe");
            Debug.Assert(param_ext_ack.param_value() ?.get() == "tcc");
            Debug.Assert(param_ext_ack.param_type().Value == MAV_PARAM_EXT_TYPE.MAV_PARAM_EXT_TYPE_UINT64) ;
            Debug.Assert(param_ext_ack.param_result().Value == PARAM_ACK.PARAM_ACK_FAILED) ;
            Debug.Print("PARAM_EXT_ACK \n");
        }

        public static void fill(com.company.demo.GroundControl. OBSTACLE_DISTANCE  obstacle_distance)
        {
            obstacle_distance.distances(new short [] { 14482, 2262, -26088, -24916, -1664, 29390, 20920, -19825, 10493, 10184, -14730, 15654, 27502, 13568, -4084, -17047, 23634, 23671, 20237, -22912, 31592, 204, -32196, -32464, 25925, 3852, 2588, -12941, -32583, -21159, -31615, 17069, -27275, 7986, 26947, -27535, 12389, -27779, -14560, 18136, -17495, 1766, 1309, -4064, 11904, -20779, 9064, -11587, -21348, -29937, -30581, -5974, 23615, -25001, -2691, -32353, -17195, 14795, 27396, 19967, -11461, -3368, -11297, 21293, 4864, -28422, 29060, 29293, -14033, 5455, -24050, -9501  }) ;
            obstacle_distance.min_distance(-4435);
            obstacle_distance.max_distance(-11947);
            obstacle_distance.time_usec(819681940453794440L);
            obstacle_distance.increment(-101);
            obstacle_distance.sensor_type(MAV_DISTANCE_SENSOR.MAV_DISTANCE_SENSOR_RADAR);
        }

        public static void onOBSTACLE_DISTANCE(com.company.demo.GroundControl.OBSTACLE_DISTANCE obstacle_distance)
        {
            Debug.Assert(obstacle_distance.distances().same(new short [] { 14482, 2262, -26088, -24916, -1664, 29390, 20920, -19825, 10493, 10184, -14730, 15654, 27502, 13568, -4084, -17047, 23634, 23671, 20237, -22912, 31592, 204, -32196, -32464, 25925, 3852, 2588, -12941, -32583, -21159, -31615, 17069, -27275, 7986, 26947, -27535, 12389, -27779, -14560, 18136, -17495, 1766, 1309, -4064, 11904, -20779, 9064, -11587, -21348, -29937, -30581, -5974, 23615, -25001, -2691, -32353, -17195, 14795, 27396, 19967, -11461, -3368, -11297, 21293, 4864, -28422, 29060, 29293, -14033, 5455, -24050, -9501  }));
            Debug.Assert(obstacle_distance.min_distance() == -4435) ;
            Debug.Assert(obstacle_distance.max_distance() == -11947) ;
            Debug.Assert(obstacle_distance.time_usec() == 819681940453794440L) ;
            Debug.Assert(obstacle_distance.increment() == -101) ;
            Debug.Assert(obstacle_distance.sensor_type().Value == MAV_DISTANCE_SENSOR.MAV_DISTANCE_SENSOR_RADAR) ;
            Debug.Print("OBSTACLE_DISTANCE \n");
        }

        public static void fill(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_CFG  uavionix_adsb_out_cfg)
        {
            uavionix_adsb_out_cfg.stallSpeed(-3476);
            uavionix_adsb_out_cfg.ICAO(1910139396);
            uavionix_adsb_out_cfg.callsign("pl", null) ;
            uavionix_adsb_out_cfg.emitterType(ADSB_EMITTER_TYPE.ADSB_EMITTER_TYPE_SERVICE_SURFACE);
            uavionix_adsb_out_cfg.aircraftSize(UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M);
            uavionix_adsb_out_cfg.gpsOffsetLat(UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT.RIGHT_4M);
            uavionix_adsb_out_cfg.gpsOffsetLon(UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR);
            uavionix_adsb_out_cfg.rfSelect(UAVIONIX_ADSB_OUT_RF_SELECT.UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED);
        }

        public static void onUAVIONIX_ADSB_OUT_CFG(com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_CFG uavionix_adsb_out_cfg)
        {
            Debug.Assert(uavionix_adsb_out_cfg.stallSpeed() == -3476) ;
            Debug.Assert(uavionix_adsb_out_cfg.ICAO() == 1910139396) ;
            Debug.Assert(uavionix_adsb_out_cfg.callsign() ?.get() == "pl");
            Debug.Assert(uavionix_adsb_out_cfg.emitterType().Value == ADSB_EMITTER_TYPE.ADSB_EMITTER_TYPE_SERVICE_SURFACE) ;
            Debug.Assert(uavionix_adsb_out_cfg.aircraftSize().Value == UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M) ;
            Debug.Assert(uavionix_adsb_out_cfg.gpsOffsetLat().Value == UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT.RIGHT_4M) ;
            Debug.Assert(uavionix_adsb_out_cfg.gpsOffsetLon().Value == UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR) ;
            Debug.Assert(uavionix_adsb_out_cfg.rfSelect().Value == UAVIONIX_ADSB_OUT_RF_SELECT.UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED) ;
            Debug.Print("UAVIONIX_ADSB_OUT_CFG \n");
        }

        public static void fill(com.company.demo.GroundControl. UAVIONIX_ADSB_OUT_DYNAMIC  uavionix_adsb_out_dynamic)
        {
            uavionix_adsb_out_dynamic.accuracyVert(13426);
            uavionix_adsb_out_dynamic.accuracyVel(-612);
            uavionix_adsb_out_dynamic.squawk(-5335);
            uavionix_adsb_out_dynamic.utcTime(-1867482915);
            uavionix_adsb_out_dynamic.accuracyHor(67061488);
            uavionix_adsb_out_dynamic.gpsLat(-1633005057);
            uavionix_adsb_out_dynamic.gpsLon(-1206789853);
            uavionix_adsb_out_dynamic.gpsAlt(778825630);
            uavionix_adsb_out_dynamic.numSats(88);
            uavionix_adsb_out_dynamic.baroAltMSL(-1806698106);
            uavionix_adsb_out_dynamic.velVert(23604);
            uavionix_adsb_out_dynamic.velNS(-10388);
            uavionix_adsb_out_dynamic.VelEW(-32473);
            uavionix_adsb_out_dynamic.gpsFix(UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D);
            uavionix_adsb_out_dynamic.emergencyStatus(UAVIONIX_ADSB_EMERGENCY_STATUS.UAVIONIX_ADSB_OUT_RESERVED);
            uavionix_adsb_out_dynamic.state(UAVIONIX_ADSB_OUT_DYNAMIC_STATE.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND);
        }

        public static void onUAVIONIX_ADSB_OUT_DYNAMIC(com.company.demo.GroundControl.UAVIONIX_ADSB_OUT_DYNAMIC uavionix_adsb_out_dynamic)
        {
            Debug.Assert(uavionix_adsb_out_dynamic.accuracyVert() == 13426) ;
            Debug.Assert(uavionix_adsb_out_dynamic.accuracyVel() == -612) ;
            Debug.Assert(uavionix_adsb_out_dynamic.squawk() == -5335) ;
            Debug.Assert(uavionix_adsb_out_dynamic.utcTime() == -1867482915) ;
            Debug.Assert(uavionix_adsb_out_dynamic.accuracyHor() == 67061488) ;
            Debug.Assert(uavionix_adsb_out_dynamic.gpsLat() == -1633005057) ;
            Debug.Assert(uavionix_adsb_out_dynamic.gpsLon() == -1206789853) ;
            Debug.Assert(uavionix_adsb_out_dynamic.gpsAlt() == 778825630) ;
            Debug.Assert(uavionix_adsb_out_dynamic.numSats() == 88) ;
            Debug.Assert(uavionix_adsb_out_dynamic.baroAltMSL() == -1806698106) ;
            Debug.Assert(uavionix_adsb_out_dynamic.velVert() == 23604) ;
            Debug.Assert(uavionix_adsb_out_dynamic.velNS() == -10388) ;
            Debug.Assert(uavionix_adsb_out_dynamic.VelEW() == -32473) ;
            Debug.Assert(uavionix_adsb_out_dynamic.gpsFix().Value == UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D) ;
            Debug.Assert(uavionix_adsb_out_dynamic.emergencyStatus().Value == UAVIONIX_ADSB_EMERGENCY_STATUS.UAVIONIX_ADSB_OUT_RESERVED) ;
            Debug.Assert(uavionix_adsb_out_dynamic.state().Value == UAVIONIX_ADSB_OUT_DYNAMIC_STATE.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND) ;
            Debug.Print("UAVIONIX_ADSB_OUT_DYNAMIC \n");
        }

        public static void fill(com.company.demo.GroundControl. UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT  uavionix_adsb_transceiver_health_report)
        {
            uavionix_adsb_transceiver_health_report.rfHealth(UAVIONIX_ADSB_RF_HEALTH.UAVIONIX_ADSB_RF_HEALTH_OK);
        }

        public static void onUAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(com.company.demo.GroundControl.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT uavionix_adsb_transceiver_health_report)
        {
            Debug.Assert(uavionix_adsb_transceiver_health_report.rfHealth().Value == UAVIONIX_ADSB_RF_HEALTH.UAVIONIX_ADSB_RF_HEALTH_OK) ;
            Debug.Print("UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT \n");
        }

        public static void fill(com.company.demo.GroundControl. SENSOR_OFFSETS  sensor_offsets)
        {
            sensor_offsets.mag_ofs_x(-23255);
            sensor_offsets.mag_ofs_y(13493);
            sensor_offsets.mag_ofs_z(23759);
            sensor_offsets.mag_declination(-8.942407E37F);
            sensor_offsets.raw_press(-1629179211);
            sensor_offsets.raw_temp(-842375758);
            sensor_offsets.gyro_cal_x(-9.408289E37F);
            sensor_offsets.gyro_cal_y(2.5470956E38F);
            sensor_offsets.gyro_cal_z(2.3488884E38F);
            sensor_offsets.accel_cal_x(2.0948307E38F);
            sensor_offsets.accel_cal_y(-2.8900983E37F);
            sensor_offsets.accel_cal_z(1.5062395E38F);
        }

        public static void onSENSOR_OFFSETS(com.company.demo.GroundControl.SENSOR_OFFSETS sensor_offsets)
        {
            Debug.Assert(sensor_offsets.mag_ofs_x() == -23255) ;
            Debug.Assert(sensor_offsets.mag_ofs_y() == 13493) ;
            Debug.Assert(sensor_offsets.mag_ofs_z() == 23759) ;
            Debug.Assert(sensor_offsets.mag_declination() == -8.942407E37F) ;
            Debug.Assert(sensor_offsets.raw_press() == -1629179211) ;
            Debug.Assert(sensor_offsets.raw_temp() == -842375758) ;
            Debug.Assert(sensor_offsets.gyro_cal_x() == -9.408289E37F) ;
            Debug.Assert(sensor_offsets.gyro_cal_y() == 2.5470956E38F) ;
            Debug.Assert(sensor_offsets.gyro_cal_z() == 2.3488884E38F) ;
            Debug.Assert(sensor_offsets.accel_cal_x() == 2.0948307E38F) ;
            Debug.Assert(sensor_offsets.accel_cal_y() == -2.8900983E37F) ;
            Debug.Assert(sensor_offsets.accel_cal_z() == 1.5062395E38F) ;
            Debug.Print("SENSOR_OFFSETS \n");
        }

        public static void fill(com.company.demo.GroundControl. SET_MAG_OFFSETS  set_mag_offsets)
        {
            set_mag_offsets.target_system(55);
            set_mag_offsets.target_component(-32);
            set_mag_offsets.mag_ofs_x(-20895);
            set_mag_offsets.mag_ofs_y(17959);
            set_mag_offsets.mag_ofs_z(14368);
        }

        public static void onSET_MAG_OFFSETS(com.company.demo.GroundControl.SET_MAG_OFFSETS set_mag_offsets)
        {
            Debug.Assert(set_mag_offsets.target_system() == 55) ;
            Debug.Assert(set_mag_offsets.target_component() == -32) ;
            Debug.Assert(set_mag_offsets.mag_ofs_x() == -20895) ;
            Debug.Assert(set_mag_offsets.mag_ofs_y() == 17959) ;
            Debug.Assert(set_mag_offsets.mag_ofs_z() == 14368) ;
            Debug.Print("SET_MAG_OFFSETS \n");
        }

        public static void fill(com.company.demo.GroundControl. MEMINFO  meminfo)
        {
            meminfo.brkval(27296);
            meminfo.freemem(-28544);
            meminfo.freemem32(-1853773957);
        }

        public static void onMEMINFO(com.company.demo.GroundControl.MEMINFO meminfo)
        {
            Debug.Assert(meminfo.brkval() == 27296) ;
            Debug.Assert(meminfo.freemem() == -28544) ;
            Debug.Assert(meminfo.freemem32().Value == -1853773957) ;
            Debug.Print("MEMINFO \n");
        }

        public static void fill(com.company.demo.GroundControl. AP_ADC  ap_adc)
        {
            ap_adc.adc1(-15576);
            ap_adc.adc2(-18593);
            ap_adc.adc3(8073);
            ap_adc.adc4(-15860);
            ap_adc.adc5(-4984);
            ap_adc.adc6(30513);
        }

        public static void onAP_ADC(com.company.demo.GroundControl.AP_ADC ap_adc)
        {
            Debug.Assert(ap_adc.adc1() == -15576) ;
            Debug.Assert(ap_adc.adc2() == -18593) ;
            Debug.Assert(ap_adc.adc3() == 8073) ;
            Debug.Assert(ap_adc.adc4() == -15860) ;
            Debug.Assert(ap_adc.adc5() == -4984) ;
            Debug.Assert(ap_adc.adc6() == 30513) ;
            Debug.Print("AP_ADC \n");
        }

        public static void fill(com.company.demo.GroundControl. DIGICAM_CONFIGURE  digicam_configure)
        {
            digicam_configure.shutter_speed(-422);
            digicam_configure.target_system(98);
            digicam_configure.target_component(-25);
            digicam_configure.mode(-63);
            digicam_configure.aperture(-100);
            digicam_configure.iso(-94);
            digicam_configure.exposure_type(-27);
            digicam_configure.command_id(124);
            digicam_configure.engine_cut_off(-114);
            digicam_configure.extra_param(3);
            digicam_configure.extra_value(-1.7427762E38F);
        }

        public static void onDIGICAM_CONFIGURE(com.company.demo.GroundControl.DIGICAM_CONFIGURE digicam_configure)
        {
            Debug.Assert(digicam_configure.shutter_speed() == -422) ;
            Debug.Assert(digicam_configure.target_system() == 98) ;
            Debug.Assert(digicam_configure.target_component() == -25) ;
            Debug.Assert(digicam_configure.mode() == -63) ;
            Debug.Assert(digicam_configure.aperture() == -100) ;
            Debug.Assert(digicam_configure.iso() == -94) ;
            Debug.Assert(digicam_configure.exposure_type() == -27) ;
            Debug.Assert(digicam_configure.command_id() == 124) ;
            Debug.Assert(digicam_configure.engine_cut_off() == -114) ;
            Debug.Assert(digicam_configure.extra_param() == 3) ;
            Debug.Assert(digicam_configure.extra_value() == -1.7427762E38F) ;
            Debug.Print("DIGICAM_CONFIGURE \n");
        }

        public static void fill(com.company.demo.GroundControl. DIGICAM_CONTROL  digicam_control)
        {
            digicam_control.target_system(11);
            digicam_control.target_component(37);
            digicam_control.session(122);
            digicam_control.zoom_pos(-70);
            digicam_control.zoom_step(5);
            digicam_control.focus_lock(-84);
            digicam_control.shot(-60);
            digicam_control.command_id(-90);
            digicam_control.extra_param(11);
            digicam_control.extra_value(5.5820386E37F);
        }

        public static void onDIGICAM_CONTROL(com.company.demo.GroundControl.DIGICAM_CONTROL digicam_control)
        {
            Debug.Assert(digicam_control.target_system() == 11) ;
            Debug.Assert(digicam_control.target_component() == 37) ;
            Debug.Assert(digicam_control.session() == 122) ;
            Debug.Assert(digicam_control.zoom_pos() == -70) ;
            Debug.Assert(digicam_control.zoom_step() == 5) ;
            Debug.Assert(digicam_control.focus_lock() == -84) ;
            Debug.Assert(digicam_control.shot() == -60) ;
            Debug.Assert(digicam_control.command_id() == -90) ;
            Debug.Assert(digicam_control.extra_param() == 11) ;
            Debug.Assert(digicam_control.extra_value() == 5.5820386E37F) ;
            Debug.Print("DIGICAM_CONTROL \n");
        }

        public static void fill(com.company.demo.GroundControl. MOUNT_CONFIGURE  mount_configure)
        {
            mount_configure.target_system(-53);
            mount_configure.target_component(-99);
            mount_configure.stab_roll(123);
            mount_configure.stab_pitch(62);
            mount_configure.stab_yaw(-39);
            mount_configure.mount_mode(MAV_MOUNT_MODE.MAV_MOUNT_MODE_MAVLINK_TARGETING);
        }

        public static void onMOUNT_CONFIGURE(com.company.demo.GroundControl.MOUNT_CONFIGURE mount_configure)
        {
            Debug.Assert(mount_configure.target_system() == -53) ;
            Debug.Assert(mount_configure.target_component() == -99) ;
            Debug.Assert(mount_configure.stab_roll() == 123) ;
            Debug.Assert(mount_configure.stab_pitch() == 62) ;
            Debug.Assert(mount_configure.stab_yaw() == -39) ;
            Debug.Assert(mount_configure.mount_mode().Value == MAV_MOUNT_MODE.MAV_MOUNT_MODE_MAVLINK_TARGETING) ;
            Debug.Print("MOUNT_CONFIGURE \n");
        }

        public static void fill(com.company.demo.GroundControl. MOUNT_CONTROL  mount_control)
        {
            mount_control.target_system(68);
            mount_control.target_component(-96);
            mount_control.input_a(1595927075);
            mount_control.input_b(-938022357);
            mount_control.input_c(-1649358469);
            mount_control.save_position(22);
        }

        public static void onMOUNT_CONTROL(com.company.demo.GroundControl.MOUNT_CONTROL mount_control)
        {
            Debug.Assert(mount_control.target_system() == 68) ;
            Debug.Assert(mount_control.target_component() == -96) ;
            Debug.Assert(mount_control.input_a() == 1595927075) ;
            Debug.Assert(mount_control.input_b() == -938022357) ;
            Debug.Assert(mount_control.input_c() == -1649358469) ;
            Debug.Assert(mount_control.save_position() == 22) ;
            Debug.Print("MOUNT_CONTROL \n");
        }

        public static void fill(com.company.demo.GroundControl. MOUNT_STATUS  mount_status)
        {
            mount_status.target_system(-65);
            mount_status.target_component(-103);
            mount_status.pointing_a(1275996805);
            mount_status.pointing_b(810875199);
            mount_status.pointing_c(1405696303);
        }

        public static void onMOUNT_STATUS(com.company.demo.GroundControl.MOUNT_STATUS mount_status)
        {
            Debug.Assert(mount_status.target_system() == -65) ;
            Debug.Assert(mount_status.target_component() == -103) ;
            Debug.Assert(mount_status.pointing_a() == 1275996805) ;
            Debug.Assert(mount_status.pointing_b() == 810875199) ;
            Debug.Assert(mount_status.pointing_c() == 1405696303) ;
            Debug.Print("MOUNT_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. FENCE_POINT  fence_point)
        {
            fence_point.target_system(102);
            fence_point.target_component(89);
            fence_point.idx(-92);
            fence_point.count(13);
            fence_point.lat(-4.3953716E37F);
            fence_point.lng(2.7886893E38F);
        }

        public static void onFENCE_POINT(com.company.demo.GroundControl.FENCE_POINT fence_point)
        {
            Debug.Assert(fence_point.target_system() == 102) ;
            Debug.Assert(fence_point.target_component() == 89) ;
            Debug.Assert(fence_point.idx() == -92) ;
            Debug.Assert(fence_point.count() == 13) ;
            Debug.Assert(fence_point.lat() == -4.3953716E37F) ;
            Debug.Assert(fence_point.lng() == 2.7886893E38F) ;
            Debug.Print("FENCE_POINT \n");
        }

        public static void fill(com.company.demo.GroundControl. FENCE_FETCH_POINT  fence_fetch_point)
        {
            fence_fetch_point.target_system(-81);
            fence_fetch_point.target_component(-9);
            fence_fetch_point.idx(50);
        }

        public static void onFENCE_FETCH_POINT(com.company.demo.GroundControl.FENCE_FETCH_POINT fence_fetch_point)
        {
            Debug.Assert(fence_fetch_point.target_system() == -81) ;
            Debug.Assert(fence_fetch_point.target_component() == -9) ;
            Debug.Assert(fence_fetch_point.idx() == 50) ;
            Debug.Print("FENCE_FETCH_POINT \n");
        }

        public static void fill(com.company.demo.GroundControl. FENCE_STATUS  fence_status)
        {
            fence_status.breach_count(10382);
            fence_status.breach_time(-1624101474);
            fence_status.breach_status(-124);
            fence_status.breach_type(FENCE_BREACH.FENCE_BREACH_MINALT);
        }

        public static void onFENCE_STATUS(com.company.demo.GroundControl.FENCE_STATUS fence_status)
        {
            Debug.Assert(fence_status.breach_count() == 10382) ;
            Debug.Assert(fence_status.breach_time() == -1624101474) ;
            Debug.Assert(fence_status.breach_status() == -124) ;
            Debug.Assert(fence_status.breach_type().Value == FENCE_BREACH.FENCE_BREACH_MINALT) ;
            Debug.Print("FENCE_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. AHRS  ahrs)
        {
            ahrs.omegaIx(2.1933787E38F);
            ahrs.omegaIy(5.245292E37F);
            ahrs.omegaIz(-1.894102E38F);
            ahrs.accel_weight(-2.6282313E38F);
            ahrs.renorm_val(-1.5330647E37F);
            ahrs.error_rp(-7.0657607E37F);
            ahrs.error_yaw(-3.2263083E38F);
        }

        public static void onAHRS(com.company.demo.GroundControl.AHRS ahrs)
        {
            Debug.Assert(ahrs.omegaIx() == 2.1933787E38F) ;
            Debug.Assert(ahrs.omegaIy() == 5.245292E37F) ;
            Debug.Assert(ahrs.omegaIz() == -1.894102E38F) ;
            Debug.Assert(ahrs.accel_weight() == -2.6282313E38F) ;
            Debug.Assert(ahrs.renorm_val() == -1.5330647E37F) ;
            Debug.Assert(ahrs.error_rp() == -7.0657607E37F) ;
            Debug.Assert(ahrs.error_yaw() == -3.2263083E38F) ;
            Debug.Print("AHRS \n");
        }

        public static void fill(com.company.demo.GroundControl. SIMSTATE  simstate)
        {
            simstate.roll(-3.2376443E38F);
            simstate.pitch(2.6908683E38F);
            simstate.yaw(-1.6903542E38F);
            simstate.xacc(-2.090482E38F);
            simstate.yacc(2.8583566E38F);
            simstate.zacc(2.6090235E38F);
            simstate.xgyro(-1.953307E38F);
            simstate.ygyro(9.808177E37F);
            simstate.zgyro(-8.931954E37F);
            simstate.lat(308157405);
            simstate.lng(1723079489);
        }

        public static void onSIMSTATE(com.company.demo.GroundControl.SIMSTATE simstate)
        {
            Debug.Assert(simstate.roll() == -3.2376443E38F) ;
            Debug.Assert(simstate.pitch() == 2.6908683E38F) ;
            Debug.Assert(simstate.yaw() == -1.6903542E38F) ;
            Debug.Assert(simstate.xacc() == -2.090482E38F) ;
            Debug.Assert(simstate.yacc() == 2.8583566E38F) ;
            Debug.Assert(simstate.zacc() == 2.6090235E38F) ;
            Debug.Assert(simstate.xgyro() == -1.953307E38F) ;
            Debug.Assert(simstate.ygyro() == 9.808177E37F) ;
            Debug.Assert(simstate.zgyro() == -8.931954E37F) ;
            Debug.Assert(simstate.lat() == 308157405) ;
            Debug.Assert(simstate.lng() == 1723079489) ;
            Debug.Print("SIMSTATE \n");
        }

        public static void fill(com.company.demo.GroundControl. HWSTATUS  hwstatus)
        {
            hwstatus.Vcc(26860);
            hwstatus.I2Cerr(47);
        }

        public static void onHWSTATUS(com.company.demo.GroundControl.HWSTATUS hwstatus)
        {
            Debug.Assert(hwstatus.Vcc() == 26860) ;
            Debug.Assert(hwstatus.I2Cerr() == 47) ;
            Debug.Print("HWSTATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. RADIO  radio)
        {
            radio.rxerrors(8226);
            radio.fixeD(-12975);
            radio.rssi(-48);
            radio.remrssi(-104);
            radio.txbuf(12);
            radio.noise(-101);
            radio.remnoise(4);
        }

        public static void onRADIO(com.company.demo.GroundControl.RADIO radio)
        {
            Debug.Assert(radio.rxerrors() == 8226) ;
            Debug.Assert(radio.fixeD() == -12975) ;
            Debug.Assert(radio.rssi() == -48) ;
            Debug.Assert(radio.remrssi() == -104) ;
            Debug.Assert(radio.txbuf() == 12) ;
            Debug.Assert(radio.noise() == -101) ;
            Debug.Assert(radio.remnoise() == 4) ;
            Debug.Print("RADIO \n");
        }

        public static void fill(com.company.demo.GroundControl. LIMITS_STATUS  limits_status)
        {
            limits_status.breach_count(-8507);
            limits_status.last_trigger(1853620417);
            limits_status.last_action(673542905);
            limits_status.last_recovery(-2082127999);
            limits_status.last_clear(1199977532);
            limits_status.limits_state(LIMITS_STATE.LIMITS_RECOVERED);
            limits_status.mods_enabled(LIMIT_MODULE.LIMIT_GPSLOCK);
            limits_status.mods_required(LIMIT_MODULE.LIMIT_GPSLOCK);
            limits_status.mods_triggered(LIMIT_MODULE.LIMIT_GPSLOCK);
        }

        public static void onLIMITS_STATUS(com.company.demo.GroundControl.LIMITS_STATUS limits_status)
        {
            Debug.Assert(limits_status.breach_count() == -8507) ;
            Debug.Assert(limits_status.last_trigger() == 1853620417) ;
            Debug.Assert(limits_status.last_action() == 673542905) ;
            Debug.Assert(limits_status.last_recovery() == -2082127999) ;
            Debug.Assert(limits_status.last_clear() == 1199977532) ;
            Debug.Assert(limits_status.limits_state().Value == LIMITS_STATE.LIMITS_RECOVERED) ;
            Debug.Assert(limits_status.mods_enabled().Value == LIMIT_MODULE.LIMIT_GPSLOCK) ;
            Debug.Assert(limits_status.mods_required().Value == LIMIT_MODULE.LIMIT_GPSLOCK) ;
            Debug.Assert(limits_status.mods_triggered().Value == LIMIT_MODULE.LIMIT_GPSLOCK) ;
            Debug.Print("LIMITS_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. WIND  wind)
        {
            wind.direction(-7.006875E36F);
            wind.speed(1.6467397E38F);
            wind.speed_z(-3.1073163E38F);
        }

        public static void onWIND(com.company.demo.GroundControl.WIND wind)
        {
            Debug.Assert(wind.direction() == -7.006875E36F) ;
            Debug.Assert(wind.speed() == 1.6467397E38F) ;
            Debug.Assert(wind.speed_z() == -3.1073163E38F) ;
            Debug.Print("WIND \n");
        }

        public static void fill(com.company.demo.GroundControl. DATA16  data16)
        {
            data16.typE(-101);
            data16.len(-75);
            data16.daTa(new sbyte [] { 68, -81, 91, 38, 69, -5, 113, 50, -25, 46, -107, 66, -98, -27, 111, -8  }) ;
        }

        public static void onDATA16(com.company.demo.GroundControl.DATA16 data16)
        {
            Debug.Assert(data16.typE() == -101) ;
            Debug.Assert(data16.len() == -75) ;
            Debug.Assert(data16.daTa().same(new sbyte [] { 68, -81, 91, 38, 69, -5, 113, 50, -25, 46, -107, 66, -98, -27, 111, -8  }));
            Debug.Print("DATA16 \n");
        }

        public static void fill(com.company.demo.GroundControl. DATA32  data32)
        {
            data32.typE(10);
            data32.len(119);
            data32.daTa(new sbyte [] { 90, 72, -34, 88, 27, 115, 49, -10, 73, 26, 5, -2, -31, 125, -69, 114, -2, 4, 105, 88, 33, -94, -27, -89, -80, 83, 82, 92, -76, 37, -115, 83  }) ;
        }

        public static void onDATA32(com.company.demo.GroundControl.DATA32 data32)
        {
            Debug.Assert(data32.typE() == 10) ;
            Debug.Assert(data32.len() == 119) ;
            Debug.Assert(data32.daTa().same(new sbyte [] { 90, 72, -34, 88, 27, 115, 49, -10, 73, 26, 5, -2, -31, 125, -69, 114, -2, 4, 105, 88, 33, -94, -27, -89, -80, 83, 82, 92, -76, 37, -115, 83  }));
            Debug.Print("DATA32 \n");
        }

        public static void fill(com.company.demo.GroundControl. DATA64  data64)
        {
            data64.typE(32);
            data64.len(39);
            data64.daTa(new sbyte [] { -110, -67, 43, -70, -21, 16, -48, 38, 31, -61, -90, -80, 27, 0, 116, 112, -89, 102, -73, 11, 86, -125, 54, 118, -53, -103, 46, -25, -47, -6, 122, 53, 32, 77, 70, 46, 55, 111, -52, 72, 65, -36, 39, -83, -5, -72, 13, 64, -39, -23, 83, -37, -7, -93, -38, 117, -125, 74, -27, 8, 28, -97, -20, 72  }) ;
        }

        public static void onDATA64(com.company.demo.GroundControl.DATA64 data64)
        {
            Debug.Assert(data64.typE() == 32) ;
            Debug.Assert(data64.len() == 39) ;
            Debug.Assert(data64.daTa().same(new sbyte [] { -110, -67, 43, -70, -21, 16, -48, 38, 31, -61, -90, -80, 27, 0, 116, 112, -89, 102, -73, 11, 86, -125, 54, 118, -53, -103, 46, -25, -47, -6, 122, 53, 32, 77, 70, 46, 55, 111, -52, 72, 65, -36, 39, -83, -5, -72, 13, 64, -39, -23, 83, -37, -7, -93, -38, 117, -125, 74, -27, 8, 28, -97, -20, 72  }));
            Debug.Print("DATA64 \n");
        }

        public static void fill(com.company.demo.GroundControl. DATA96  data96)
        {
            data96.typE(-34);
            data96.len(-33);
            data96.daTa(new sbyte [] { 83, 77, 64, 34, -121, 13, -43, 32, 8, -14, 121, 8, -102, 126, 33, -106, 70, -114, 42, 62, -106, 78, 10, 45, 6, -29, 74, -112, 33, -17, 44, -7, 39, -19, -83, -68, -126, -110, -70, 38, 34, -106, -100, 122, 113, 83, -112, -42, -78, -76, -11, 3, 60, 76, -65, -67, -106, 19, 73, -36, 116, 48, 42, -1, -28, 11, 6, -97, 33, 20, 76, -37, -110, 17, -98, 52, -22, -76, 64, -14, -17, -12, 108, -56, -115, -95, -2, 88, -86, -92, -23, -19, -78, 56, 104, -27  }) ;
        }

        public static void onDATA96(com.company.demo.GroundControl.DATA96 data96)
        {
            Debug.Assert(data96.typE() == -34) ;
            Debug.Assert(data96.len() == -33) ;
            Debug.Assert(data96.daTa().same(new sbyte [] { 83, 77, 64, 34, -121, 13, -43, 32, 8, -14, 121, 8, -102, 126, 33, -106, 70, -114, 42, 62, -106, 78, 10, 45, 6, -29, 74, -112, 33, -17, 44, -7, 39, -19, -83, -68, -126, -110, -70, 38, 34, -106, -100, 122, 113, 83, -112, -42, -78, -76, -11, 3, 60, 76, -65, -67, -106, 19, 73, -36, 116, 48, 42, -1, -28, 11, 6, -97, 33, 20, 76, -37, -110, 17, -98, 52, -22, -76, 64, -14, -17, -12, 108, -56, -115, -95, -2, 88, -86, -92, -23, -19, -78, 56, 104, -27  }));
            Debug.Print("DATA96 \n");
        }

        public static void fill(com.company.demo.GroundControl. RANGEFINDER  rangefinder)
        {
            rangefinder.distance(-1.4669963E38F);
            rangefinder.voltage(-2.2938525E38F);
        }

        public static void onRANGEFINDER(com.company.demo.GroundControl.RANGEFINDER rangefinder)
        {
            Debug.Assert(rangefinder.distance() == -1.4669963E38F) ;
            Debug.Assert(rangefinder.voltage() == -2.2938525E38F) ;
            Debug.Print("RANGEFINDER \n");
        }

        public static void fill(com.company.demo.GroundControl. AIRSPEED_AUTOCAL  airspeed_autocal)
        {
            airspeed_autocal.vx(3.3478742E38F);
            airspeed_autocal.vy(-7.3164883E37F);
            airspeed_autocal.vz(2.5529205E38F);
            airspeed_autocal.diff_pressure(1.462798E38F);
            airspeed_autocal.EAS2TAS(9.639624E36F);
            airspeed_autocal.ratio(1.464565E38F);
            airspeed_autocal.state_x(-2.1582585E38F);
            airspeed_autocal.state_y(2.9321243E38F);
            airspeed_autocal.state_z(3.3455005E38F);
            airspeed_autocal.Pax(-6.990938E37F);
            airspeed_autocal.Pby(-2.044359E38F);
            airspeed_autocal.Pcz(-1.261733E38F);
        }

        public static void onAIRSPEED_AUTOCAL(com.company.demo.GroundControl.AIRSPEED_AUTOCAL airspeed_autocal)
        {
            Debug.Assert(airspeed_autocal.vx() == 3.3478742E38F) ;
            Debug.Assert(airspeed_autocal.vy() == -7.3164883E37F) ;
            Debug.Assert(airspeed_autocal.vz() == 2.5529205E38F) ;
            Debug.Assert(airspeed_autocal.diff_pressure() == 1.462798E38F) ;
            Debug.Assert(airspeed_autocal.EAS2TAS() == 9.639624E36F) ;
            Debug.Assert(airspeed_autocal.ratio() == 1.464565E38F) ;
            Debug.Assert(airspeed_autocal.state_x() == -2.1582585E38F) ;
            Debug.Assert(airspeed_autocal.state_y() == 2.9321243E38F) ;
            Debug.Assert(airspeed_autocal.state_z() == 3.3455005E38F) ;
            Debug.Assert(airspeed_autocal.Pax() == -6.990938E37F) ;
            Debug.Assert(airspeed_autocal.Pby() == -2.044359E38F) ;
            Debug.Assert(airspeed_autocal.Pcz() == -1.261733E38F) ;
            Debug.Print("AIRSPEED_AUTOCAL \n");
        }

        public static void fill(com.company.demo.GroundControl. RALLY_POINT  rally_point)
        {
            rally_point.land_dir(20270);
            rally_point.target_system(63);
            rally_point.target_component(25);
            rally_point.idx(-118);
            rally_point.count(-46);
            rally_point.lat(-1295106682);
            rally_point.lng(1633709863);
            rally_point.alt(-31058);
            rally_point.break_alt(32624);
            rally_point.flags(RALLY_FLAGS.LAND_IMMEDIATELY);
        }

        public static void onRALLY_POINT(com.company.demo.GroundControl.RALLY_POINT rally_point)
        {
            Debug.Assert(rally_point.land_dir() == 20270) ;
            Debug.Assert(rally_point.target_system() == 63) ;
            Debug.Assert(rally_point.target_component() == 25) ;
            Debug.Assert(rally_point.idx() == -118) ;
            Debug.Assert(rally_point.count() == -46) ;
            Debug.Assert(rally_point.lat() == -1295106682) ;
            Debug.Assert(rally_point.lng() == 1633709863) ;
            Debug.Assert(rally_point.alt() == -31058) ;
            Debug.Assert(rally_point.break_alt() == 32624) ;
            Debug.Assert(rally_point.flags().Value == RALLY_FLAGS.LAND_IMMEDIATELY) ;
            Debug.Print("RALLY_POINT \n");
        }

        public static void fill(com.company.demo.GroundControl. RALLY_FETCH_POINT  rally_fetch_point)
        {
            rally_fetch_point.target_system(127);
            rally_fetch_point.target_component(60);
            rally_fetch_point.idx(74);
        }

        public static void onRALLY_FETCH_POINT(com.company.demo.GroundControl.RALLY_FETCH_POINT rally_fetch_point)
        {
            Debug.Assert(rally_fetch_point.target_system() == 127) ;
            Debug.Assert(rally_fetch_point.target_component() == 60) ;
            Debug.Assert(rally_fetch_point.idx() == 74) ;
            Debug.Print("RALLY_FETCH_POINT \n");
        }

        public static void fill(com.company.demo.GroundControl. COMPASSMOT_STATUS  compassmot_status)
        {
            compassmot_status.throttle(8529);
            compassmot_status.interference(29288);
            compassmot_status.current(1.8127262E38F);
            compassmot_status.CompensationX(-1.5558176E38F);
            compassmot_status.CompensationY(1.3583838E38F);
            compassmot_status.CompensationZ(3.0176435E38F);
        }

        public static void onCOMPASSMOT_STATUS(com.company.demo.GroundControl.COMPASSMOT_STATUS compassmot_status)
        {
            Debug.Assert(compassmot_status.throttle() == 8529) ;
            Debug.Assert(compassmot_status.interference() == 29288) ;
            Debug.Assert(compassmot_status.current() == 1.8127262E38F) ;
            Debug.Assert(compassmot_status.CompensationX() == -1.5558176E38F) ;
            Debug.Assert(compassmot_status.CompensationY() == 1.3583838E38F) ;
            Debug.Assert(compassmot_status.CompensationZ() == 3.0176435E38F) ;
            Debug.Print("COMPASSMOT_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. AHRS2  ahrs2)
        {
            ahrs2.roll(8.93411E37F);
            ahrs2.pitch(-1.3397321E37F);
            ahrs2.yaw(1.0479134E38F);
            ahrs2.altitude(-6.772492E37F);
            ahrs2.lat(-858928170);
            ahrs2.lng(1415568707);
        }

        public static void onAHRS2(com.company.demo.GroundControl.AHRS2 ahrs2)
        {
            Debug.Assert(ahrs2.roll() == 8.93411E37F) ;
            Debug.Assert(ahrs2.pitch() == -1.3397321E37F) ;
            Debug.Assert(ahrs2.yaw() == 1.0479134E38F) ;
            Debug.Assert(ahrs2.altitude() == -6.772492E37F) ;
            Debug.Assert(ahrs2.lat() == -858928170) ;
            Debug.Assert(ahrs2.lng() == 1415568707) ;
            Debug.Print("AHRS2 \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_STATUS  camera_status)
        {
            camera_status.img_idx(9575);
            camera_status.time_usec(823851348100991916L);
            camera_status.target_system(-5);
            camera_status.cam_idx(-66);
            camera_status.p1(-1.760345E38F);
            camera_status.p2(1.9225236E37F);
            camera_status.p3(-2.15825E38F);
            camera_status.p4(-1.8970844E38F);
            camera_status.event_id(CAMERA_STATUS_TYPES.CAMERA_STATUS_TYPE_ERROR);
        }

        public static void onCAMERA_STATUS(com.company.demo.GroundControl.CAMERA_STATUS camera_status)
        {
            Debug.Assert(camera_status.img_idx() == 9575) ;
            Debug.Assert(camera_status.time_usec() == 823851348100991916L) ;
            Debug.Assert(camera_status.target_system() == -5) ;
            Debug.Assert(camera_status.cam_idx() == -66) ;
            Debug.Assert(camera_status.p1() == -1.760345E38F) ;
            Debug.Assert(camera_status.p2() == 1.9225236E37F) ;
            Debug.Assert(camera_status.p3() == -2.15825E38F) ;
            Debug.Assert(camera_status.p4() == -1.8970844E38F) ;
            Debug.Assert(camera_status.event_id().Value == CAMERA_STATUS_TYPES.CAMERA_STATUS_TYPE_ERROR) ;
            Debug.Print("CAMERA_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. CAMERA_FEEDBACK  camera_feedback)
        {
            camera_feedback.img_idx(-7458);
            camera_feedback.time_usec(1847782746690332308L);
            camera_feedback.target_system(-24);
            camera_feedback.cam_idx(-82);
            camera_feedback.lat(1888943703);
            camera_feedback.lng(926734362);
            camera_feedback.alt_msl(-1.0055078E38F);
            camera_feedback.alt_rel(2.1064986E38F);
            camera_feedback.roll(-2.8256569E38F);
            camera_feedback.pitch(-3.179806E38F);
            camera_feedback.yaw(1.0552547E37F);
            camera_feedback.foc_len(-3.3136494E38F);
            camera_feedback.flags(CAMERA_FEEDBACK_FLAGS.CAMERA_FEEDBACK_VIDEO);
        }

        public static void onCAMERA_FEEDBACK(com.company.demo.GroundControl.CAMERA_FEEDBACK camera_feedback)
        {
            Debug.Assert(camera_feedback.img_idx() == -7458) ;
            Debug.Assert(camera_feedback.time_usec() == 1847782746690332308L) ;
            Debug.Assert(camera_feedback.target_system() == -24) ;
            Debug.Assert(camera_feedback.cam_idx() == -82) ;
            Debug.Assert(camera_feedback.lat() == 1888943703) ;
            Debug.Assert(camera_feedback.lng() == 926734362) ;
            Debug.Assert(camera_feedback.alt_msl() == -1.0055078E38F) ;
            Debug.Assert(camera_feedback.alt_rel() == 2.1064986E38F) ;
            Debug.Assert(camera_feedback.roll() == -2.8256569E38F) ;
            Debug.Assert(camera_feedback.pitch() == -3.179806E38F) ;
            Debug.Assert(camera_feedback.yaw() == 1.0552547E37F) ;
            Debug.Assert(camera_feedback.foc_len() == -3.3136494E38F) ;
            Debug.Assert(camera_feedback.flags().Value == CAMERA_FEEDBACK_FLAGS.CAMERA_FEEDBACK_VIDEO) ;
            Debug.Print("CAMERA_FEEDBACK \n");
        }

        public static void fill(com.company.demo.GroundControl. BATTERY2  battery2)
        {
            battery2.voltage(-25208);
            battery2.current_battery(-9021);
        }

        public static void onBATTERY2(com.company.demo.GroundControl.BATTERY2 battery2)
        {
            Debug.Assert(battery2.voltage() == -25208) ;
            Debug.Assert(battery2.current_battery() == -9021) ;
            Debug.Print("BATTERY2 \n");
        }

        public static void fill(com.company.demo.GroundControl. AHRS3  ahrs3)
        {
            ahrs3.roll(-1.7226389E37F);
            ahrs3.pitch(-3.0801198E38F);
            ahrs3.yaw(-6.6132946E37F);
            ahrs3.altitude(1.3056595E38F);
            ahrs3.lat(-772126653);
            ahrs3.lng(-1115545762);
            ahrs3.v1(2.6391382E38F);
            ahrs3.v2(6.7675695E36F);
            ahrs3.v3(2.1964937E38F);
            ahrs3.v4(-1.0138021E38F);
        }

        public static void onAHRS3(com.company.demo.GroundControl.AHRS3 ahrs3)
        {
            Debug.Assert(ahrs3.roll() == -1.7226389E37F) ;
            Debug.Assert(ahrs3.pitch() == -3.0801198E38F) ;
            Debug.Assert(ahrs3.yaw() == -6.6132946E37F) ;
            Debug.Assert(ahrs3.altitude() == 1.3056595E38F) ;
            Debug.Assert(ahrs3.lat() == -772126653) ;
            Debug.Assert(ahrs3.lng() == -1115545762) ;
            Debug.Assert(ahrs3.v1() == 2.6391382E38F) ;
            Debug.Assert(ahrs3.v2() == 6.7675695E36F) ;
            Debug.Assert(ahrs3.v3() == 2.1964937E38F) ;
            Debug.Assert(ahrs3.v4() == -1.0138021E38F) ;
            Debug.Print("AHRS3 \n");
        }

        public static void fill(com.company.demo.GroundControl. AUTOPILOT_VERSION_REQUEST  autopilot_version_request)
        {
            autopilot_version_request.target_system(60);
            autopilot_version_request.target_component(52);
        }

        public static void onAUTOPILOT_VERSION_REQUEST(com.company.demo.GroundControl.AUTOPILOT_VERSION_REQUEST autopilot_version_request)
        {
            Debug.Assert(autopilot_version_request.target_system() == 60) ;
            Debug.Assert(autopilot_version_request.target_component() == 52) ;
            Debug.Print("AUTOPILOT_VERSION_REQUEST \n");
        }

        public static void fill(com.company.demo.GroundControl. REMOTE_LOG_DATA_BLOCK  remote_log_data_block)
        {
            remote_log_data_block.target_system(-60);
            remote_log_data_block.target_component(-66);
            {
                var dst = remote_log_data_block.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
            remote_log_data_block.seqno(MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS.MAV_REMOTE_LOG_DATA_BLOCK_STOP);
        }

        public static void onREMOTE_LOG_DATA_BLOCK(com.company.demo.GroundControl.REMOTE_LOG_DATA_BLOCK remote_log_data_block)
        {
            Debug.Assert(remote_log_data_block.target_system() == -60) ;
            Debug.Assert(remote_log_data_block.target_component() == -66) ;
            {
                var item = remote_log_data_block.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Assert(remote_log_data_block.seqno().Value == MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS.MAV_REMOTE_LOG_DATA_BLOCK_STOP) ;
            Debug.Print("REMOTE_LOG_DATA_BLOCK \n");
        }

        public static void fill(com.company.demo.GroundControl. REMOTE_LOG_BLOCK_STATUS  remote_log_block_status)
        {
            remote_log_block_status.seqno(-1019039915);
            remote_log_block_status.target_system(-73);
            remote_log_block_status.target_component(-85);
            remote_log_block_status.status(MAV_REMOTE_LOG_DATA_BLOCK_STATUSES.MAV_REMOTE_LOG_DATA_BLOCK_ACK);
        }

        public static void onREMOTE_LOG_BLOCK_STATUS(com.company.demo.GroundControl.REMOTE_LOG_BLOCK_STATUS remote_log_block_status)
        {
            Debug.Assert(remote_log_block_status.seqno() == -1019039915) ;
            Debug.Assert(remote_log_block_status.target_system() == -73) ;
            Debug.Assert(remote_log_block_status.target_component() == -85) ;
            Debug.Assert(remote_log_block_status.status().Value == MAV_REMOTE_LOG_DATA_BLOCK_STATUSES.MAV_REMOTE_LOG_DATA_BLOCK_ACK) ;
            Debug.Print("REMOTE_LOG_BLOCK_STATUS \n");
        }

        public static void fill(com.company.demo.GroundControl. LED_CONTROL  led_control)
        {
            led_control.target_system(-57);
            led_control.target_component(91);
            led_control.instance(-119);
            led_control.pattern(-101);
            led_control.custom_len(-71);
            led_control.custom_bytes(new sbyte [] { 13, 111, 122, -7, -127, -79, -106, 5, -78, 86, -92, -6, 24, 122, 13, 21, 101, 53, 63, 62, -96, -50, 68, -98  }) ;
        }

        public static void onLED_CONTROL(com.company.demo.GroundControl.LED_CONTROL led_control)
        {
            Debug.Assert(led_control.target_system() == -57) ;
            Debug.Assert(led_control.target_component() == 91) ;
            Debug.Assert(led_control.instance() == -119) ;
            Debug.Assert(led_control.pattern() == -101) ;
            Debug.Assert(led_control.custom_len() == -71) ;
            Debug.Assert(led_control.custom_bytes().same(new sbyte [] { 13, 111, 122, -7, -127, -79, -106, 5, -78, 86, -92, -6, 24, 122, 13, 21, 101, 53, 63, 62, -96, -50, 68, -98  }));
            Debug.Print("LED_CONTROL \n");
        }

        public static void fill(com.company.demo.GroundControl. MAG_CAL_PROGRESS  mag_cal_progress)
        {
            mag_cal_progress.compass_id(-6);
            mag_cal_progress.cal_mask(51);
            mag_cal_progress.attempt(101);
            mag_cal_progress.completion_pct(-86);
            mag_cal_progress.completion_mask(new sbyte [] { 84, -77, -118, 105, 91, -127, -99, 100, 67, -26  }) ;
            mag_cal_progress.direction_x(1.5887024E38F);
            mag_cal_progress.direction_y(3.0333447E38F);
            mag_cal_progress.direction_z(1.5818825E38F);
            mag_cal_progress.cal_status(MAG_CAL_STATUS.MAG_CAL_WAITING_TO_START);
        }

        public static void onMAG_CAL_PROGRESS(com.company.demo.GroundControl.MAG_CAL_PROGRESS mag_cal_progress)
        {
            Debug.Assert(mag_cal_progress.compass_id() == -6) ;
            Debug.Assert(mag_cal_progress.cal_mask() == 51) ;
            Debug.Assert(mag_cal_progress.attempt() == 101) ;
            Debug.Assert(mag_cal_progress.completion_pct() == -86) ;
            Debug.Assert(mag_cal_progress.completion_mask().same(new sbyte [] { 84, -77, -118, 105, 91, -127, -99, 100, 67, -26  }));
            Debug.Assert(mag_cal_progress.direction_x() == 1.5887024E38F) ;
            Debug.Assert(mag_cal_progress.direction_y() == 3.0333447E38F) ;
            Debug.Assert(mag_cal_progress.direction_z() == 1.5818825E38F) ;
            Debug.Assert(mag_cal_progress.cal_status().Value == MAG_CAL_STATUS.MAG_CAL_WAITING_TO_START) ;
            Debug.Print("MAG_CAL_PROGRESS \n");
        }

        public static void fill(com.company.demo.GroundControl. MAG_CAL_REPORT  mag_cal_report)
        {
            mag_cal_report.compass_id(83);
            mag_cal_report.cal_mask(-81);
            mag_cal_report.autosaved(-73);
            mag_cal_report.fitness(8.607977E37F);
            mag_cal_report.ofs_x(2.5423739E38F);
            mag_cal_report.ofs_y(3.275014E38F);
            mag_cal_report.ofs_z(-9.352383E37F);
            mag_cal_report.diag_x(-3.1574102E38F);
            mag_cal_report.diag_y(-3.2262618E38F);
            mag_cal_report.diag_z(-1.3603706E38F);
            mag_cal_report.offdiag_x(-2.9694352E38F);
            mag_cal_report.offdiag_y(-2.0918561E38F);
            mag_cal_report.offdiag_z(-1.1239388E38F);
            mag_cal_report.cal_status(MAG_CAL_STATUS.MAG_CAL_RUNNING_STEP_ONE);
        }

        public static void onMAG_CAL_REPORT(com.company.demo.GroundControl.MAG_CAL_REPORT mag_cal_report)
        {
            Debug.Assert(mag_cal_report.compass_id() == 83) ;
            Debug.Assert(mag_cal_report.cal_mask() == -81) ;
            Debug.Assert(mag_cal_report.autosaved() == -73) ;
            Debug.Assert(mag_cal_report.fitness() == 8.607977E37F) ;
            Debug.Assert(mag_cal_report.ofs_x() == 2.5423739E38F) ;
            Debug.Assert(mag_cal_report.ofs_y() == 3.275014E38F) ;
            Debug.Assert(mag_cal_report.ofs_z() == -9.352383E37F) ;
            Debug.Assert(mag_cal_report.diag_x() == -3.1574102E38F) ;
            Debug.Assert(mag_cal_report.diag_y() == -3.2262618E38F) ;
            Debug.Assert(mag_cal_report.diag_z() == -1.3603706E38F) ;
            Debug.Assert(mag_cal_report.offdiag_x() == -2.9694352E38F) ;
            Debug.Assert(mag_cal_report.offdiag_y() == -2.0918561E38F) ;
            Debug.Assert(mag_cal_report.offdiag_z() == -1.1239388E38F) ;
            Debug.Assert(mag_cal_report.cal_status().Value == MAG_CAL_STATUS.MAG_CAL_RUNNING_STEP_ONE) ;
            Debug.Print("MAG_CAL_REPORT \n");
        }

        public static void fill(com.company.demo.GroundControl. EKF_STATUS_REPORT  ekf_status_report)
        {
            ekf_status_report.velocity_variance(5.2592004E37F);
            ekf_status_report.pos_horiz_variance(-2.9774774E38F);
            ekf_status_report.pos_vert_variance(2.7322154E38F);
            ekf_status_report.compass_variance(3.1518522E38F);
            ekf_status_report.terrain_alt_variance(1.3751589E38F);
            ekf_status_report.flags(EKF_STATUS_FLAGS.EKF_POS_HORIZ_REL);
        }

        public static void onEKF_STATUS_REPORT(com.company.demo.GroundControl.EKF_STATUS_REPORT ekf_status_report)
        {
            Debug.Assert(ekf_status_report.velocity_variance() == 5.2592004E37F) ;
            Debug.Assert(ekf_status_report.pos_horiz_variance() == -2.9774774E38F) ;
            Debug.Assert(ekf_status_report.pos_vert_variance() == 2.7322154E38F) ;
            Debug.Assert(ekf_status_report.compass_variance() == 3.1518522E38F) ;
            Debug.Assert(ekf_status_report.terrain_alt_variance() == 1.3751589E38F) ;
            Debug.Assert(ekf_status_report.flags().Value == EKF_STATUS_FLAGS.EKF_POS_HORIZ_REL) ;
            Debug.Print("EKF_STATUS_REPORT \n");
        }

        public static void fill(com.company.demo.GroundControl. PID_TUNING  pid_tuning)
        {
            pid_tuning.desired(-2.6485202E38F);
            pid_tuning.achieved(-9.850482E37F);
            pid_tuning.FF(-2.1369516E37F);
            pid_tuning.P(-1.3644537E38F);
            pid_tuning.I(-3.2110902E38F);
            pid_tuning.D(7.8205534E37F);
            pid_tuning.axis(PID_TUNING_AXIS.PID_TUNING_LANDING);
        }

        public static void onPID_TUNING(com.company.demo.GroundControl.PID_TUNING pid_tuning)
        {
            Debug.Assert(pid_tuning.desired() == -2.6485202E38F) ;
            Debug.Assert(pid_tuning.achieved() == -9.850482E37F) ;
            Debug.Assert(pid_tuning.FF() == -2.1369516E37F) ;
            Debug.Assert(pid_tuning.P() == -1.3644537E38F) ;
            Debug.Assert(pid_tuning.I() == -3.2110902E38F) ;
            Debug.Assert(pid_tuning.D() == 7.8205534E37F) ;
            Debug.Assert(pid_tuning.axis().Value == PID_TUNING_AXIS.PID_TUNING_LANDING) ;
            Debug.Print("PID_TUNING \n");
        }

        public static void fill(com.company.demo.GroundControl. GIMBAL_REPORT  gimbal_report)
        {
            gimbal_report.target_system(64);
            gimbal_report.target_component(-79);
            gimbal_report.delta_time(2.2400518E38F);
            gimbal_report.delta_angle_x(-2.4143138E38F);
            gimbal_report.delta_angle_y(5.2136497E37F);
            gimbal_report.delta_angle_z(-2.7933797E38F);
            gimbal_report.delta_velocity_x(-2.7194446E38F);
            gimbal_report.delta_velocity_y(-5.4619626E37F);
            gimbal_report.delta_velocity_z(1.9526837E38F);
            gimbal_report.joint_roll(8.370199E37F);
            gimbal_report.joint_el(5.65237E37F);
            gimbal_report.joint_az(-9.358816E37F);
        }

        public static void onGIMBAL_REPORT(com.company.demo.GroundControl.GIMBAL_REPORT gimbal_report)
        {
            Debug.Assert(gimbal_report.target_system() == 64) ;
            Debug.Assert(gimbal_report.target_component() == -79) ;
            Debug.Assert(gimbal_report.delta_time() == 2.2400518E38F) ;
            Debug.Assert(gimbal_report.delta_angle_x() == -2.4143138E38F) ;
            Debug.Assert(gimbal_report.delta_angle_y() == 5.2136497E37F) ;
            Debug.Assert(gimbal_report.delta_angle_z() == -2.7933797E38F) ;
            Debug.Assert(gimbal_report.delta_velocity_x() == -2.7194446E38F) ;
            Debug.Assert(gimbal_report.delta_velocity_y() == -5.4619626E37F) ;
            Debug.Assert(gimbal_report.delta_velocity_z() == 1.9526837E38F) ;
            Debug.Assert(gimbal_report.joint_roll() == 8.370199E37F) ;
            Debug.Assert(gimbal_report.joint_el() == 5.65237E37F) ;
            Debug.Assert(gimbal_report.joint_az() == -9.358816E37F) ;
            Debug.Print("GIMBAL_REPORT \n");
        }

        public static void fill(com.company.demo.GroundControl. GIMBAL_CONTROL  gimbal_control)
        {
            gimbal_control.target_system(54);
            gimbal_control.target_component(-81);
            gimbal_control.demanded_rate_x(-1.4198334E38F);
            gimbal_control.demanded_rate_y(1.7111835E38F);
            gimbal_control.demanded_rate_z(2.5767197E38F);
        }

        public static void onGIMBAL_CONTROL(com.company.demo.GroundControl.GIMBAL_CONTROL gimbal_control)
        {
            Debug.Assert(gimbal_control.target_system() == 54) ;
            Debug.Assert(gimbal_control.target_component() == -81) ;
            Debug.Assert(gimbal_control.demanded_rate_x() == -1.4198334E38F) ;
            Debug.Assert(gimbal_control.demanded_rate_y() == 1.7111835E38F) ;
            Debug.Assert(gimbal_control.demanded_rate_z() == 2.5767197E38F) ;
            Debug.Print("GIMBAL_CONTROL \n");
        }

        public static void fill(com.company.demo.GroundControl. GIMBAL_TORQUE_CMD_REPORT  gimbal_torque_cmd_report)
        {
            gimbal_torque_cmd_report.target_system(-55);
            gimbal_torque_cmd_report.target_component(78);
            gimbal_torque_cmd_report.rl_torque_cmd(-30320);
            gimbal_torque_cmd_report.el_torque_cmd(8083);
            gimbal_torque_cmd_report.az_torque_cmd(23855);
        }

        public static void onGIMBAL_TORQUE_CMD_REPORT(com.company.demo.GroundControl.GIMBAL_TORQUE_CMD_REPORT gimbal_torque_cmd_report)
        {
            Debug.Assert(gimbal_torque_cmd_report.target_system() == -55) ;
            Debug.Assert(gimbal_torque_cmd_report.target_component() == 78) ;
            Debug.Assert(gimbal_torque_cmd_report.rl_torque_cmd() == -30320) ;
            Debug.Assert(gimbal_torque_cmd_report.el_torque_cmd() == 8083) ;
            Debug.Assert(gimbal_torque_cmd_report.az_torque_cmd() == 23855) ;
            Debug.Print("GIMBAL_TORQUE_CMD_REPORT \n");
        }

        public static void fill(com.company.demo.GroundControl. GOPRO_HEARTBEAT  gopro_heartbeat)
        {
            gopro_heartbeat.status(GOPRO_HEARTBEAT_STATUS.GOPRO_HEARTBEAT_STATUS_DISCONNECTED);
            gopro_heartbeat.capture_mode(GOPRO_CAPTURE_MODE.GOPRO_CAPTURE_MODE_BURST);
            gopro_heartbeat.flags(GOPRO_HEARTBEAT_FLAGS.GOPRO_FLAG_RECORDING);
        }

        public static void onGOPRO_HEARTBEAT(com.company.demo.GroundControl.GOPRO_HEARTBEAT gopro_heartbeat)
        {
            Debug.Assert(gopro_heartbeat.status().Value == GOPRO_HEARTBEAT_STATUS.GOPRO_HEARTBEAT_STATUS_DISCONNECTED) ;
            Debug.Assert(gopro_heartbeat.capture_mode().Value == GOPRO_CAPTURE_MODE.GOPRO_CAPTURE_MODE_BURST) ;
            Debug.Assert(gopro_heartbeat.flags().Value == GOPRO_HEARTBEAT_FLAGS.GOPRO_FLAG_RECORDING) ;
            Debug.Print("GOPRO_HEARTBEAT \n");
        }

        public static void fill(com.company.demo.GroundControl. GOPRO_GET_REQUEST  gopro_get_request)
        {
            gopro_get_request.target_system(51);
            gopro_get_request.target_component(75);
            gopro_get_request.cmd_id(GOPRO_COMMAND.GOPRO_COMMAND_POWER);
        }

        public static void onGOPRO_GET_REQUEST(com.company.demo.GroundControl.GOPRO_GET_REQUEST gopro_get_request)
        {
            Debug.Assert(gopro_get_request.target_system() == 51) ;
            Debug.Assert(gopro_get_request.target_component() == 75) ;
            Debug.Assert(gopro_get_request.cmd_id().Value == GOPRO_COMMAND.GOPRO_COMMAND_POWER) ;
            Debug.Print("GOPRO_GET_REQUEST \n");
        }

        public static void fill(com.company.demo.GroundControl. GOPRO_GET_RESPONSE  gopro_get_response)
        {
            gopro_get_response.value(new sbyte [] { -5, 53, 127, 118  }) ;
            gopro_get_response.cmd_id(GOPRO_COMMAND.GOPRO_COMMAND_CHARGING);
            gopro_get_response.status(GOPRO_REQUEST_STATUS.GOPRO_REQUEST_SUCCESS);
        }

        public static void onGOPRO_GET_RESPONSE(com.company.demo.GroundControl.GOPRO_GET_RESPONSE gopro_get_response)
        {
            Debug.Assert(gopro_get_response.value().same(new sbyte [] { -5, 53, 127, 118  }));
            Debug.Assert(gopro_get_response.cmd_id().Value == GOPRO_COMMAND.GOPRO_COMMAND_CHARGING) ;
            Debug.Assert(gopro_get_response.status().Value == GOPRO_REQUEST_STATUS.GOPRO_REQUEST_SUCCESS) ;
            Debug.Print("GOPRO_GET_RESPONSE \n");
        }

        public static void fill(com.company.demo.GroundControl. GOPRO_SET_REQUEST  gopro_set_request)
        {
            gopro_set_request.target_system(-27);
            gopro_set_request.target_component(49);
            gopro_set_request.value(new sbyte [] { -70, -81, 72, 30  }) ;
            gopro_set_request.cmd_id(GOPRO_COMMAND.GOPRO_COMMAND_PROTUNE_WHITE_BALANCE);
        }

        public static void onGOPRO_SET_REQUEST(com.company.demo.GroundControl.GOPRO_SET_REQUEST gopro_set_request)
        {
            Debug.Assert(gopro_set_request.target_system() == -27) ;
            Debug.Assert(gopro_set_request.target_component() == 49) ;
            Debug.Assert(gopro_set_request.value().same(new sbyte [] { -70, -81, 72, 30  }));
            Debug.Assert(gopro_set_request.cmd_id().Value == GOPRO_COMMAND.GOPRO_COMMAND_PROTUNE_WHITE_BALANCE) ;
            Debug.Print("GOPRO_SET_REQUEST \n");
        }

        public static void fill(com.company.demo.GroundControl. GOPRO_SET_RESPONSE  gopro_set_response)
        {
            gopro_set_response.cmd_id(GOPRO_COMMAND.GOPRO_COMMAND_PROTUNE_EXPOSURE);
            gopro_set_response.status(GOPRO_REQUEST_STATUS.GOPRO_REQUEST_FAILED);
        }

        public static void onGOPRO_SET_RESPONSE(com.company.demo.GroundControl.GOPRO_SET_RESPONSE gopro_set_response)
        {
            Debug.Assert(gopro_set_response.cmd_id().Value == GOPRO_COMMAND.GOPRO_COMMAND_PROTUNE_EXPOSURE) ;
            Debug.Assert(gopro_set_response.status().Value == GOPRO_REQUEST_STATUS.GOPRO_REQUEST_FAILED) ;
            Debug.Print("GOPRO_SET_RESPONSE \n");
        }

        public static void fill(com.company.demo.GroundControl. RPM  rpm)
        {
            rpm.rpm1(-3.1787531E38F);
            rpm.rpm2(-8.0088086E36F);
        }

        public static void onRPM(com.company.demo.GroundControl.RPM rpm)
        {
            Debug.Assert(rpm.rpm1() == -3.1787531E38F) ;
            Debug.Assert(rpm.rpm2() == -8.0088086E36F) ;
            Debug.Print("RPM \n");
        }

        public static void fill(com.company.demo.GroundControl. DEVICE_OP_READ  device_op_read)
        {
            device_op_read.request_id(478689656);
            device_op_read.target_system(-59);
            device_op_read.target_component(1);
            device_op_read.bus(-55);
            device_op_read.address(-19);
            device_op_read.regstart(18);
            device_op_read.count(67);
            device_op_read.bustype(DEVICE_OP_BUSTYPE.DEVICE_OP_BUSTYPE_I2C);
            device_op_read.busname("eaa", null) ;
        }

        public static void onDEVICE_OP_READ(com.company.demo.GroundControl.DEVICE_OP_READ device_op_read)
        {
            Debug.Assert(device_op_read.request_id() == 478689656) ;
            Debug.Assert(device_op_read.target_system() == -59) ;
            Debug.Assert(device_op_read.target_component() == 1) ;
            Debug.Assert(device_op_read.bus() == -55) ;
            Debug.Assert(device_op_read.address() == -19) ;
            Debug.Assert(device_op_read.regstart() == 18) ;
            Debug.Assert(device_op_read.count() == 67) ;
            Debug.Assert(device_op_read.bustype().Value == DEVICE_OP_BUSTYPE.DEVICE_OP_BUSTYPE_I2C) ;
            Debug.Assert(device_op_read.busname() ?.get() == "eaa");
            Debug.Print("DEVICE_OP_READ \n");
        }

        public static void fill(com.company.demo.GroundControl. DEVICE_OP_READ_REPLY  device_op_read_reply)
        {
            device_op_read_reply.request_id(-257324816);
            device_op_read_reply.result(-56);
            device_op_read_reply.regstart(-8);
            device_op_read_reply.count(-15);
            {
                var dst = device_op_read_reply.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
        }

        public static void onDEVICE_OP_READ_REPLY(com.company.demo.GroundControl.DEVICE_OP_READ_REPLY device_op_read_reply)
        {
            Debug.Assert(device_op_read_reply.request_id() == -257324816) ;
            Debug.Assert(device_op_read_reply.result() == -56) ;
            Debug.Assert(device_op_read_reply.regstart() == -8) ;
            Debug.Assert(device_op_read_reply.count() == -15) ;
            {
                var item = device_op_read_reply.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Print("DEVICE_OP_READ_REPLY \n");
        }

        public static void fill(com.company.demo.GroundControl. DEVICE_OP_WRITE  device_op_write)
        {
            device_op_write.request_id(-1837224596);
            device_op_write.target_system(83);
            device_op_write.target_component(-85);
            device_op_write.bus(-120);
            device_op_write.address(-82);
            device_op_write.regstart(-34);
            device_op_write.count(-52);
            {
                var dst = device_op_write.daTa() ;
                for(int i = dst.len() - 1; -1 < i; i--)
                    dst.set((sbyte)(i  *  1 + -128), i) ;
            }
            device_op_write.bustype(DEVICE_OP_BUSTYPE.DEVICE_OP_BUSTYPE_I2C);
            device_op_write.busname("burmfmoeuhfgclszgoQnvjbabvLnyqeitmmfpaiwgpNnvkptyofqwppdkyHdqsbqBzdzircJ", null) ;
        }

        public static void onDEVICE_OP_WRITE(com.company.demo.GroundControl.DEVICE_OP_WRITE device_op_write)
        {
            Debug.Assert(device_op_write.request_id() == -1837224596) ;
            Debug.Assert(device_op_write.target_system() == 83) ;
            Debug.Assert(device_op_write.target_component() == -85) ;
            Debug.Assert(device_op_write.bus() == -120) ;
            Debug.Assert(device_op_write.address() == -82) ;
            Debug.Assert(device_op_write.regstart() == -34) ;
            Debug.Assert(device_op_write.count() == -52) ;
            {
                var item = device_op_write.daTa();
                for(int i = item.len() - 1; -1 < i; i--)
                    Debug.Assert(item.get(i) == (sbyte)(i  *  1 + -128));
            }
            Debug.Assert(device_op_write.bustype().Value == DEVICE_OP_BUSTYPE.DEVICE_OP_BUSTYPE_I2C) ;
            Debug.Assert(device_op_write.busname() ?.get() == "burmfmoeuhfgclszgoQnvjbabvLnyqeitmmfpaiwgpNnvkptyofqwppdkyHdqsbqBzdzircJ");
            Debug.Print("DEVICE_OP_WRITE \n");
        }

        public static void fill(com.company.demo.GroundControl. DEVICE_OP_WRITE_REPLY  device_op_write_reply)
        {
            device_op_write_reply.request_id(1529334873);
            device_op_write_reply.result(-113);
        }

        public static void onDEVICE_OP_WRITE_REPLY(com.company.demo.GroundControl.DEVICE_OP_WRITE_REPLY device_op_write_reply)
        {
            Debug.Assert(device_op_write_reply.request_id() == 1529334873) ;
            Debug.Assert(device_op_write_reply.result() == -113) ;
            Debug.Print("DEVICE_OP_WRITE_REPLY \n");
        }

        public static void fill(com.company.demo.GroundControl. ADAP_TUNING  adap_tuning)
        {
            adap_tuning.desired(-6.6653297E37F);
            adap_tuning.achieved(2.4075624E38F);
            adap_tuning.error(-1.7850034E38F);
            adap_tuning.theta(-1.526937E38F);
            adap_tuning.omega(-3.0550542E38F);
            adap_tuning.sigma(5.2315687E37F);
            adap_tuning.theta_dot(1.953513E38F);
            adap_tuning.omega_dot(6.650616E36F);
            adap_tuning.sigma_dot(-4.3000493E37F);
            adap_tuning.f(5.988848E37F);
            adap_tuning.f_dot(9.291189E37F);
            adap_tuning.u(1.6500721E38F);
            adap_tuning.axis(PID_TUNING_AXIS.PID_TUNING_STEER);
        }

        public static void onADAP_TUNING(com.company.demo.GroundControl.ADAP_TUNING adap_tuning)
        {
            Debug.Assert(adap_tuning.desired() == -6.6653297E37F) ;
            Debug.Assert(adap_tuning.achieved() == 2.4075624E38F) ;
            Debug.Assert(adap_tuning.error() == -1.7850034E38F) ;
            Debug.Assert(adap_tuning.theta() == -1.526937E38F) ;
            Debug.Assert(adap_tuning.omega() == -3.0550542E38F) ;
            Debug.Assert(adap_tuning.sigma() == 5.2315687E37F) ;
            Debug.Assert(adap_tuning.theta_dot() == 1.953513E38F) ;
            Debug.Assert(adap_tuning.omega_dot() == 6.650616E36F) ;
            Debug.Assert(adap_tuning.sigma_dot() == -4.3000493E37F) ;
            Debug.Assert(adap_tuning.f() == 5.988848E37F) ;
            Debug.Assert(adap_tuning.f_dot() == 9.291189E37F) ;
            Debug.Assert(adap_tuning.u() == 1.6500721E38F) ;
            Debug.Assert(adap_tuning.axis().Value == PID_TUNING_AXIS.PID_TUNING_STEER) ;
            Debug.Print("ADAP_TUNING \n");
        }

        public static void fill(com.company.demo.GroundControl. VISION_POSITION_DELTA  vision_position_delta)
        {
            vision_position_delta.time_usec(-8563754640786308375L);
            vision_position_delta.time_delta_usec(-8870876042460232975L);
            vision_position_delta.angle_delta(new float [] { 8.572359E37F, -7.649178E37F, 1.5197648E38F  }) ;
            vision_position_delta.position_delta(new float [] { -1.4714465E38F, 1.5064879E38F, 1.991928E38F  }) ;
            vision_position_delta.confidence(-1.9692887E38F);
        }

        public static void onVISION_POSITION_DELTA(com.company.demo.GroundControl.VISION_POSITION_DELTA vision_position_delta)
        {
            Debug.Assert(vision_position_delta.time_usec() == -8563754640786308375L) ;
            Debug.Assert(vision_position_delta.time_delta_usec() == -8870876042460232975L) ;
            Debug.Assert(vision_position_delta.angle_delta().same(new float [] { 8.572359E37F, -7.649178E37F, 1.5197648E38F  }));
            Debug.Assert(vision_position_delta.position_delta().same(new float [] { -1.4714465E38F, 1.5064879E38F, 1.991928E38F  }));
            Debug.Assert(vision_position_delta.confidence() == -1.9692887E38F) ;
            Debug.Print("VISION_POSITION_DELTA \n");
        }


        public class CommunicationChannel_test: CommunicationChannel
        {
            protected override void onRESOURCE_REQUEST(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRESOURCE_REQUEST(new com.company.demo.GroundControl.RESOURCE_REQUEST(data));
            }
            protected override void onATTITUDE_TARGET(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onATTITUDE_TARGET(new com.company.demo.GroundControl.ATTITUDE_TARGET(data));
            }
            protected override void onMISSION_COUNT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_COUNT(new com.company.demo.GroundControl.MISSION_COUNT(cur));
            }
            protected override void onADSB_VEHICLE(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onADSB_VEHICLE(new com.company.demo.GroundControl.ADSB_VEHICLE(cur));
            }
            protected override void onMESSAGE_INTERVAL(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMESSAGE_INTERVAL(new com.company.demo.GroundControl.MESSAGE_INTERVAL(data));
            }
            protected override void onESTIMATOR_STATUS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onESTIMATOR_STATUS(new com.company.demo.GroundControl.ESTIMATOR_STATUS(cur));
            }
            protected override void onTIMESYNC(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onTIMESYNC(new com.company.demo.GroundControl.TIMESYNC(data));
            }
            protected override void onGLOBAL_POSITION_INT_COV(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onGLOBAL_POSITION_INT_COV(new com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV(cur));
            }
            protected override void onBUTTON_CHANGE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onBUTTON_CHANGE(new com.company.demo.GroundControl.BUTTON_CHANGE(data));
            }
            protected override void onSAFETY_SET_ALLOWED_AREA(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSAFETY_SET_ALLOWED_AREA(new com.company.demo.GroundControl.SAFETY_SET_ALLOWED_AREA(cur));
            }
            protected override void onSTORAGE_INFORMATION(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSTORAGE_INFORMATION(new com.company.demo.GroundControl.STORAGE_INFORMATION(data));
            }
            protected override void onCOLLISION(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCOLLISION(new com.company.demo.GroundControl.COLLISION(cur));
            }
            protected override void onALTITUDE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onALTITUDE(new com.company.demo.GroundControl.ALTITUDE(data));
            }
            protected override void onHIL_STATE_QUATERNION(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIL_STATE_QUATERNION(new com.company.demo.GroundControl.HIL_STATE_QUATERNION(data));
            }
            protected override void onCAMERA_INFORMATION(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCAMERA_INFORMATION(new com.company.demo.GroundControl.CAMERA_INFORMATION(cur));
            }
            protected override void onGPS_STATUS(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGPS_STATUS(new com.company.demo.GroundControl.GPS_STATUS(data));
            }
            protected override void onPARAM_SET(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPARAM_SET(new com.company.demo.GroundControl.PARAM_SET(cur));
            }
            protected override void onTERRAIN_DATA(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onTERRAIN_DATA(new com.company.demo.GroundControl.TERRAIN_DATA(data));
            }
            protected override void onRC_CHANNELS_OVERRIDE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRC_CHANNELS_OVERRIDE(new com.company.demo.GroundControl.RC_CHANNELS_OVERRIDE(data));
            }
            protected override void onSCALED_IMU(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSCALED_IMU(new com.company.demo.GroundControl.SCALED_IMU(data));
            }
            protected override void onDEBUG(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onDEBUG(new com.company.demo.GroundControl.DEBUG(data));
            }
            protected override void onCAMERA_IMAGE_CAPTURED(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCAMERA_IMAGE_CAPTURED(new com.company.demo.GroundControl.CAMERA_IMAGE_CAPTURED(cur));
            }
            protected override void onLOG_ENTRY(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOG_ENTRY(new com.company.demo.GroundControl.LOG_ENTRY(data));
            }
            protected override void onACTUATOR_CONTROL_TARGET(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onACTUATOR_CONTROL_TARGET(new com.company.demo.GroundControl.ACTUATOR_CONTROL_TARGET(data));
            }
            protected override void onHIGH_LATENCY(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onHIGH_LATENCY(new com.company.demo.GroundControl.HIGH_LATENCY(cur));
            }
            protected override void onPARAM_REQUEST_READ(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPARAM_REQUEST_READ(new com.company.demo.GroundControl.PARAM_REQUEST_READ(cur));
            }
            protected override void onSET_ATTITUDE_TARGET(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSET_ATTITUDE_TARGET(new com.company.demo.GroundControl.SET_ATTITUDE_TARGET(data));
            }
            protected override void onFOLLOW_TARGET(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onFOLLOW_TARGET(new com.company.demo.GroundControl.FOLLOW_TARGET(data));
            }
            protected override void onHIL_STATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIL_STATE(new com.company.demo.GroundControl.HIL_STATE(data));
            }
            protected override void onHOME_POSITION(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onHOME_POSITION(new com.company.demo.GroundControl.HOME_POSITION(cur));
            }
            protected override void onGPS2_RAW(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onGPS2_RAW(new com.company.demo.GroundControl.GPS2_RAW(cur));
            }
            protected override void onMEMORY_VECT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMEMORY_VECT(new com.company.demo.GroundControl.MEMORY_VECT(data));
            }
            protected override void onREQUEST_DATA_STREAM(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onREQUEST_DATA_STREAM(new com.company.demo.GroundControl.REQUEST_DATA_STREAM(data));
            }
            protected override void onHIL_CONTROLS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onHIL_CONTROLS(new com.company.demo.GroundControl.HIL_CONTROLS(cur));
            }
            protected override void onHIL_SENSOR(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIL_SENSOR(new com.company.demo.GroundControl.HIL_SENSOR(data));
            }
            protected override void onSETUP_SIGNING(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSETUP_SIGNING(new com.company.demo.GroundControl.SETUP_SIGNING(data));
            }
            protected override void onGPS_RTK(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGPS_RTK(new com.company.demo.GroundControl.GPS_RTK(data));
            }
            protected override void onPARAM_REQUEST_LIST(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onPARAM_REQUEST_LIST(new com.company.demo.GroundControl.PARAM_REQUEST_LIST(data));
            }
            protected override void onLANDING_TARGET(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onLANDING_TARGET(new com.company.demo.GroundControl.LANDING_TARGET(cur));
            }
            protected override void onSET_ACTUATOR_CONTROL_TARGET(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSET_ACTUATOR_CONTROL_TARGET(new com.company.demo.GroundControl.SET_ACTUATOR_CONTROL_TARGET(data));
            }
            protected override void onCONTROL_SYSTEM_STATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onCONTROL_SYSTEM_STATE(new com.company.demo.GroundControl.CONTROL_SYSTEM_STATE(data));
            }
            protected override void onSET_POSITION_TARGET_GLOBAL_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSET_POSITION_TARGET_GLOBAL_INT(new com.company.demo.GroundControl.SET_POSITION_TARGET_GLOBAL_INT(cur));
            }
            protected override void onVIBRATION(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onVIBRATION(new com.company.demo.GroundControl.VIBRATION(data));
            }
            protected override void onPING33(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPING33(new com.company.demo.GroundControl.PING33(cur));
            }
            protected override void onVFR_HUD(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onVFR_HUD(new com.company.demo.GroundControl.VFR_HUD(data));
            }
            protected override void onMISSION_SET_CURRENT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMISSION_SET_CURRENT(new com.company.demo.GroundControl.MISSION_SET_CURRENT(data));
            }
            protected override void onHIL_GPS(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIL_GPS(new com.company.demo.GroundControl.HIL_GPS(data));
            }
            protected override void onNAV_CONTROLLER_OUTPUT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onNAV_CONTROLLER_OUTPUT(new com.company.demo.GroundControl.NAV_CONTROLLER_OUTPUT(data));
            }
            protected override void onAUTH_KEY(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onAUTH_KEY(new com.company.demo.GroundControl.AUTH_KEY(cur));
            }
            protected override void onLOCAL_POSITION_NED_COV(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onLOCAL_POSITION_NED_COV(new com.company.demo.GroundControl.LOCAL_POSITION_NED_COV(cur));
            }
            protected override void onATT_POS_MOCAP(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onATT_POS_MOCAP(new com.company.demo.GroundControl.ATT_POS_MOCAP(data));
            }
            protected override void onSTATUSTEXT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSTATUSTEXT(new com.company.demo.GroundControl.STATUSTEXT(cur));
            }
            protected override void onPING(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onPING(new com.company.demo.GroundControl.PING(data));
            }
            protected override void onCAMERA_CAPTURE_STATUS(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onCAMERA_CAPTURE_STATUS(new com.company.demo.GroundControl.CAMERA_CAPTURE_STATUS(data));
            }
            protected override void onGLOBAL_POSITION_INT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGLOBAL_POSITION_INT(new com.company.demo.GroundControl.GLOBAL_POSITION_INT(data));
            }
            protected override void onENCAPSULATED_DATA(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onENCAPSULATED_DATA(new com.company.demo.GroundControl.ENCAPSULATED_DATA(data));
            }
            protected override void onGPS_INPUT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onGPS_INPUT(new com.company.demo.GroundControl.GPS_INPUT(cur));
            }
            protected override void onCOMMAND_LONG(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCOMMAND_LONG(new com.company.demo.GroundControl.COMMAND_LONG(cur));
            }
            protected override void onLOG_REQUEST_DATA(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOG_REQUEST_DATA(new com.company.demo.GroundControl.LOG_REQUEST_DATA(data));
            }
            protected override void onGPS_RAW_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onGPS_RAW_INT(new com.company.demo.GroundControl.GPS_RAW_INT(cur));
            }
            protected override void onRC_CHANNELS_SCALED(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRC_CHANNELS_SCALED(new com.company.demo.GroundControl.RC_CHANNELS_SCALED(data));
            }
            protected override void onCAMERA_SETTINGS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCAMERA_SETTINGS(new com.company.demo.GroundControl.CAMERA_SETTINGS(cur));
            }
            protected override void onRAW_PRESSURE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRAW_PRESSURE(new com.company.demo.GroundControl.RAW_PRESSURE(data));
            }
            protected override void onNAMED_VALUE_FLOAT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onNAMED_VALUE_FLOAT(new com.company.demo.GroundControl.NAMED_VALUE_FLOAT(cur));
            }
            protected override void onATTITUDE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onATTITUDE(new com.company.demo.GroundControl.ATTITUDE(data));
            }
            protected override void onTERRAIN_REQUEST(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onTERRAIN_REQUEST(new com.company.demo.GroundControl.TERRAIN_REQUEST(data));
            }
            protected override void onMISSION_WRITE_PARTIAL_LIST(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_WRITE_PARTIAL_LIST(new com.company.demo.GroundControl.MISSION_WRITE_PARTIAL_LIST(cur));
            }
            protected override void onLOG_ERASE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOG_ERASE(new com.company.demo.GroundControl.LOG_ERASE(data));
            }
            protected override void onMANUAL_SETPOINT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMANUAL_SETPOINT(new com.company.demo.GroundControl.MANUAL_SETPOINT(data));
            }
            protected override void onSAFETY_ALLOWED_AREA(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSAFETY_ALLOWED_AREA(new com.company.demo.GroundControl.SAFETY_ALLOWED_AREA(cur));
            }
            protected override void onOPTICAL_FLOW_RAD(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onOPTICAL_FLOW_RAD(new com.company.demo.GroundControl.OPTICAL_FLOW_RAD(data));
            }
            protected override void onLOG_DATA(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOG_DATA(new com.company.demo.GroundControl.LOG_DATA(data));
            }
            protected override void onMISSION_CLEAR_ALL(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_CLEAR_ALL(new com.company.demo.GroundControl.MISSION_CLEAR_ALL(cur));
            }
            protected override void onVICON_POSITION_ESTIMATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onVICON_POSITION_ESTIMATE(new com.company.demo.GroundControl.VICON_POSITION_ESTIMATE(data));
            }
            protected override void onGPS2_RTK(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGPS2_RTK(new com.company.demo.GroundControl.GPS2_RTK(data));
            }
            protected override void onLOG_REQUEST_LIST(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOG_REQUEST_LIST(new com.company.demo.GroundControl.LOG_REQUEST_LIST(data));
            }
            protected override void onSCALED_PRESSURE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSCALED_PRESSURE(new com.company.demo.GroundControl.SCALED_PRESSURE(data));
            }
            protected override void onMISSION_REQUEST_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_REQUEST_INT(new com.company.demo.GroundControl.MISSION_REQUEST_INT(cur));
            }
            protected override void onV2_EXTENSION(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onV2_EXTENSION(new com.company.demo.GroundControl.V2_EXTENSION(data));
            }
            protected override void onHEARTBEAT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onHEARTBEAT(new com.company.demo.GroundControl.HEARTBEAT(cur));
            }
            protected override void onPARAM_MAP_RC(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPARAM_MAP_RC(new com.company.demo.GroundControl.PARAM_MAP_RC(cur));
            }
            protected override void onPOWER_STATUS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPOWER_STATUS(new com.company.demo.GroundControl.POWER_STATUS(cur));
            }
            protected override void onTERRAIN_CHECK(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onTERRAIN_CHECK(new com.company.demo.GroundControl.TERRAIN_CHECK(data));
            }
            protected override void onLOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(new com.company.demo.GroundControl.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(data));
            }
            protected override void onCOMMAND_ACK(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCOMMAND_ACK(new com.company.demo.GroundControl.COMMAND_ACK(cur));
            }
            protected override void onDATA_STREAM(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onDATA_STREAM(new com.company.demo.GroundControl.DATA_STREAM(data));
            }
            protected override void onMISSION_REQUEST(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_REQUEST(new com.company.demo.GroundControl.MISSION_REQUEST(cur));
            }
            protected override void onTERRAIN_REPORT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onTERRAIN_REPORT(new com.company.demo.GroundControl.TERRAIN_REPORT(data));
            }
            protected override void onSET_HOME_POSITION(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSET_HOME_POSITION(new com.company.demo.GroundControl.SET_HOME_POSITION(cur));
            }
            protected override void onSwitchModeCommand()
            {
                org.unirail.Test. onSwitchModeCommand();
            }
            protected override void onHIL_RC_INPUTS_RAW(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIL_RC_INPUTS_RAW(new com.company.demo.GroundControl.HIL_RC_INPUTS_RAW(data));
            }
            protected override void onSCALED_IMU3(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSCALED_IMU3(new com.company.demo.GroundControl.SCALED_IMU3(data));
            }
            protected override void onSET_MODE(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSET_MODE(new com.company.demo.GroundControl.SET_MODE(cur));
            }
            protected override void onPOSITION_TARGET_GLOBAL_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPOSITION_TARGET_GLOBAL_INT(new com.company.demo.GroundControl.POSITION_TARGET_GLOBAL_INT(cur));
            }
            protected override void onFLIGHT_INFORMATION(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onFLIGHT_INFORMATION(new com.company.demo.GroundControl.FLIGHT_INFORMATION(data));
            }
            protected override void onSIM_STATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSIM_STATE(new com.company.demo.GroundControl.SIM_STATE(data));
            }
            protected override void onMISSION_ITEM_REACHED(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMISSION_ITEM_REACHED(new com.company.demo.GroundControl.MISSION_ITEM_REACHED(data));
            }
            protected override void onRC_CHANNELS_RAW(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRC_CHANNELS_RAW(new com.company.demo.GroundControl.RC_CHANNELS_RAW(data));
            }
            protected override void onSERVO_OUTPUT_RAW(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSERVO_OUTPUT_RAW(new com.company.demo.GroundControl.SERVO_OUTPUT_RAW(cur));
            }
            protected override void onVISION_SPEED_ESTIMATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onVISION_SPEED_ESTIMATE(new com.company.demo.GroundControl.VISION_SPEED_ESTIMATE(data));
            }
            protected override void onDEBUG_VECT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onDEBUG_VECT(new com.company.demo.GroundControl.DEBUG_VECT(cur));
            }
            protected override void onLOG_REQUEST_END(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOG_REQUEST_END(new com.company.demo.GroundControl.LOG_REQUEST_END(data));
            }
            protected override void onMISSION_ACK(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_ACK(new com.company.demo.GroundControl.MISSION_ACK(cur));
            }
            protected override void onCHANGE_OPERATOR_CONTROL_ACK(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onCHANGE_OPERATOR_CONTROL_ACK(new com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL_ACK(data));
            }
            protected override void onMISSION_CURRENT(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMISSION_CURRENT(new com.company.demo.GroundControl.MISSION_CURRENT(data));
            }
            protected override void onSYSTEM_TIME(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSYSTEM_TIME(new com.company.demo.GroundControl.SYSTEM_TIME(data));
            }
            protected override void onCAMERA_TRIGGER(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onCAMERA_TRIGGER(new com.company.demo.GroundControl.CAMERA_TRIGGER(data));
            }
            protected override void onVISION_POSITION_ESTIMATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onVISION_POSITION_ESTIMATE(new com.company.demo.GroundControl.VISION_POSITION_ESTIMATE(data));
            }
            protected override void onMANUAL_CONTROL(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onMANUAL_CONTROL(new com.company.demo.GroundControl.MANUAL_CONTROL(data));
            }
            protected override void onRC_CHANNELS(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRC_CHANNELS(new com.company.demo.GroundControl.RC_CHANNELS(data));
            }
            protected override void onPARAM_VALUE(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPARAM_VALUE(new com.company.demo.GroundControl.PARAM_VALUE(cur));
            }
            protected override void onBATTERY_STATUS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onBATTERY_STATUS(new com.company.demo.GroundControl.BATTERY_STATUS(cur));
            }
            protected override void onSET_POSITION_TARGET_LOCAL_NED(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSET_POSITION_TARGET_LOCAL_NED(new com.company.demo.GroundControl.SET_POSITION_TARGET_LOCAL_NED(cur));
            }
            protected override void onSERIAL_CONTROL(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSERIAL_CONTROL(new com.company.demo.GroundControl.SERIAL_CONTROL(cur));
            }
            protected override void onSET_GPS_GLOBAL_ORIGIN(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSET_GPS_GLOBAL_ORIGIN(new com.company.demo.GroundControl.SET_GPS_GLOBAL_ORIGIN(cur));
            }
            protected override void onAUTOPILOT_VERSION(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onAUTOPILOT_VERSION(new com.company.demo.GroundControl.AUTOPILOT_VERSION(cur));
            }
            protected override void onMISSION_REQUEST_LIST(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_REQUEST_LIST(new com.company.demo.GroundControl.MISSION_REQUEST_LIST(cur));
            }
            protected override void onPLAY_TUNE(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPLAY_TUNE(new com.company.demo.GroundControl.PLAY_TUNE(cur));
            }
            protected override void onSCALED_PRESSURE3(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSCALED_PRESSURE3(new com.company.demo.GroundControl.SCALED_PRESSURE3(data));
            }
            protected override void onMISSION_REQUEST_PARTIAL_LIST(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_REQUEST_PARTIAL_LIST(new com.company.demo.GroundControl.MISSION_REQUEST_PARTIAL_LIST(cur));
            }
            protected override void onLOCAL_POSITION_NED(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onLOCAL_POSITION_NED(new com.company.demo.GroundControl.LOCAL_POSITION_NED(data));
            }
            protected override void onDATA_TRANSMISSION_HANDSHAKE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onDATA_TRANSMISSION_HANDSHAKE(new com.company.demo.GroundControl.DATA_TRANSMISSION_HANDSHAKE(data));
            }
            protected override void onGPS_GLOBAL_ORIGIN(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onGPS_GLOBAL_ORIGIN(new com.company.demo.GroundControl.GPS_GLOBAL_ORIGIN(cur));
            }
            protected override void onSCALED_IMU2(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSCALED_IMU2(new com.company.demo.GroundControl.SCALED_IMU2(data));
            }
            protected override void onATTITUDE_QUATERNION(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onATTITUDE_QUATERNION(new com.company.demo.GroundControl.ATTITUDE_QUATERNION(data));
            }
            protected override void onHIL_ACTUATOR_CONTROLS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onHIL_ACTUATOR_CONTROLS(new com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS(cur));
            }
            protected override void onPOSITION_TARGET_LOCAL_NED(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onPOSITION_TARGET_LOCAL_NED(new com.company.demo.GroundControl.POSITION_TARGET_LOCAL_NED(cur));
            }
            protected override void onDISTANCE_SENSOR(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onDISTANCE_SENSOR(new com.company.demo.GroundControl.DISTANCE_SENSOR(cur));
            }
            protected override void onHIL_OPTICAL_FLOW(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIL_OPTICAL_FLOW(new com.company.demo.GroundControl.HIL_OPTICAL_FLOW(data));
            }
            protected override void onSCALED_PRESSURE2(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onSCALED_PRESSURE2(new com.company.demo.GroundControl.SCALED_PRESSURE2(data));
            }
            protected override void onWIND_COV(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onWIND_COV(new com.company.demo.GroundControl.WIND_COV(data));
            }
            protected override void onCHANGE_OPERATOR_CONTROL(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCHANGE_OPERATOR_CONTROL(new com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL(cur));
            }
            protected override void onSYS_STATUS(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onSYS_STATUS(new com.company.demo.GroundControl.SYS_STATUS(cur));
            }
            protected override void onMISSION_ITEM(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_ITEM(new com.company.demo.GroundControl.MISSION_ITEM(cur));
            }
            protected override void onRAW_IMU(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRAW_IMU(new com.company.demo.GroundControl.RAW_IMU(data));
            }
            protected override void onCOMMAND_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onCOMMAND_INT(new com.company.demo.GroundControl.COMMAND_INT(cur));
            }
            protected override void onOPTICAL_FLOW(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onOPTICAL_FLOW(new com.company.demo.GroundControl.OPTICAL_FLOW(cur));
            }
            protected override void onMISSION_ITEM_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onMISSION_ITEM_INT(new com.company.demo.GroundControl.MISSION_ITEM_INT(cur));
            }
            protected override void onHIGHRES_IMU(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onHIGHRES_IMU(new com.company.demo.GroundControl.HIGHRES_IMU(data));
            }
            protected override void onEXTENDED_SYS_STATE(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onEXTENDED_SYS_STATE(new com.company.demo.GroundControl.EXTENDED_SYS_STATE(cur));
            }
            protected override void onGPS_INJECT_DATA(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGPS_INJECT_DATA(new com.company.demo.GroundControl.GPS_INJECT_DATA(data));
            }
            protected override void onATTITUDE_QUATERNION_COV(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onATTITUDE_QUATERNION_COV(new com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV(data));
            }
            protected override void onNAMED_VALUE_INT(Pack pack)
            {
                var cur = new Pack.Cursor(null);
                cur.wrap(pack);
                org.unirail.Test. onNAMED_VALUE_INT(new com.company.demo.GroundControl.NAMED_VALUE_INT(cur));
            }
            protected override void onRADIO_STATUS(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onRADIO_STATUS(new com.company.demo.GroundControl.RADIO_STATUS(data));
            }
            protected override void onGPS_RTCM_DATA(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGPS_RTCM_DATA(new com.company.demo.GroundControl.GPS_RTCM_DATA(data));
            }
            protected override void onGLOBAL_VISION_POSITION_ESTIMATE(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onGLOBAL_VISION_POSITION_ESTIMATE(new com.company.demo.GroundControl.GLOBAL_VISION_POSITION_ESTIMATE(data));
            }
            protected override void onFILE_TRANSFER_PROTOCOL(Pack pack)
            {
                var data = new Pack.Cursor(null);
                data.wrap(pack);
                org.unirail.Test. onFILE_TRANSFER_PROTOCOL(new com.company.demo.GroundControl.FILE_TRANSFER_PROTOCOL(data));
            }
            Pack sendingPack = null;
            protected internal override Pack pullSendingPack()
            {
                var pack = sendingPack;
                sendingPack = null;
                return pack;
            }
            protected internal override bool pushSendingPack(Pack pack)
            {
                if(sendingPack != null) return false;
                sendingPack = pack;
                return true;
            }

        }

        public static void Main(string[] args)
        {
            var cur = new Pack.Cursor(null);
            var cur_dst = new Pack.Cursor(null);
            var TestChannel_instance = new TestChannel();
            var CommunicationChannel_instance = new CommunicationChannel_test();
            Debug.Print("-------------------- HEARTBEAT -------------------------");
            fill(TestChannel.NEW.HEARTBEAT(cur));
            var heartbeat = new  com.company.demo.GroundControl.HEARTBEAT(cur);
            onHEARTBEAT(heartbeat);
            {
                cur_dst.wrap(com.company.demo.GroundControl.HEARTBEAT.meta_);
                var dst = new org.unirail.Test. HEARTBEAT(cur_dst);
                heartbeat.push_(new HEARTBEAT_dst_adapter(dst));
                Debug.Assert(heartbeat.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(heartbeat)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SYS_STATUS -------------------------");
            fill(TestChannel.NEW.SYS_STATUS(cur));
            var sys_status = new  com.company.demo.GroundControl.SYS_STATUS(cur);
            onSYS_STATUS(sys_status);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SYS_STATUS.meta_);
                var dst = new org.unirail.Test. SYS_STATUS(cur_dst);
                sys_status.push_(new SYS_STATUS_dst_adapter(dst));
                Debug.Assert(sys_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(sys_status)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SYSTEM_TIME -------------------------");
            fill(TestChannel.NEW.SYSTEM_TIME(cur));
            var system_time = new  com.company.demo.GroundControl.SYSTEM_TIME(cur);
            onSYSTEM_TIME(system_time);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SYSTEM_TIME.meta_);
                var dst = new org.unirail.Test. SYSTEM_TIME(cur_dst);
                system_time.push_(new SYSTEM_TIME_dst_adapter(dst));
                Debug.Assert(system_time.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(system_time)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PING -------------------------");
            fill(TestChannel.NEW.PING(cur));
            var ping = new  com.company.demo.GroundControl.PING(cur);
            onPING(ping);
            {
                cur_dst.wrap(com.company.demo.GroundControl.PING.meta_);
                var dst = new org.unirail.Test. PING(cur_dst);
                ping.push_(new PING_dst_adapter(dst));
                Debug.Assert(ping.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(ping)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CHANGE_OPERATOR_CONTROL -------------------------");
            fill(TestChannel.NEW.CHANGE_OPERATOR_CONTROL(cur));
            var change_operator_control = new  com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL(cur);
            onCHANGE_OPERATOR_CONTROL(change_operator_control);
            {
                cur_dst.wrap(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL.meta_);
                var dst = new org.unirail.Test. CHANGE_OPERATOR_CONTROL(cur_dst);
                change_operator_control.push_(new CHANGE_OPERATOR_CONTROL_dst_adapter(dst));
                Debug.Assert(change_operator_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(change_operator_control)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CHANGE_OPERATOR_CONTROL_ACK -------------------------");
            fill(TestChannel.NEW.CHANGE_OPERATOR_CONTROL_ACK(cur));
            var change_operator_control_ack = new  com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL_ACK(cur);
            onCHANGE_OPERATOR_CONTROL_ACK(change_operator_control_ack);
            {
                cur_dst.wrap(com.company.demo.GroundControl.CHANGE_OPERATOR_CONTROL_ACK.meta_);
                var dst = new org.unirail.Test. CHANGE_OPERATOR_CONTROL_ACK(cur_dst);
                change_operator_control_ack.push_(new CHANGE_OPERATOR_CONTROL_ACK_dst_adapter(dst));
                Debug.Assert(change_operator_control_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(change_operator_control_ack)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AUTH_KEY -------------------------");
            fill(TestChannel.NEW.AUTH_KEY(cur));
            var auth_key = new  com.company.demo.GroundControl.AUTH_KEY(cur);
            onAUTH_KEY(auth_key);
            {
                cur_dst.wrap(com.company.demo.GroundControl.AUTH_KEY.meta_);
                var dst = new org.unirail.Test. AUTH_KEY(cur_dst);
                auth_key.push_(new AUTH_KEY_dst_adapter(dst));
                Debug.Assert(auth_key.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(auth_key)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_MODE -------------------------");
            fill(TestChannel.NEW.SET_MODE(cur));
            var set_mode = new  com.company.demo.GroundControl.SET_MODE(cur);
            onSET_MODE(set_mode);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SET_MODE.meta_);
                var dst = new org.unirail.Test. SET_MODE(cur_dst);
                set_mode.push_(new SET_MODE_dst_adapter(dst));
                Debug.Assert(set_mode.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(set_mode)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_REQUEST_READ -------------------------");
            fill(TestChannel.NEW.PARAM_REQUEST_READ(cur));
            var param_request_read = new  com.company.demo.GroundControl.PARAM_REQUEST_READ(cur);
            onPARAM_REQUEST_READ(param_request_read);
            {
                cur_dst.wrap(com.company.demo.GroundControl.PARAM_REQUEST_READ.meta_);
                var dst = new org.unirail.Test. PARAM_REQUEST_READ(cur_dst);
                param_request_read.push_(new PARAM_REQUEST_READ_dst_adapter(dst));
                Debug.Assert(param_request_read.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(param_request_read)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_REQUEST_LIST -------------------------");
            fill(TestChannel.NEW.PARAM_REQUEST_LIST(cur));
            var param_request_list = new  com.company.demo.GroundControl.PARAM_REQUEST_LIST(cur);
            onPARAM_REQUEST_LIST(param_request_list);
            {
                cur_dst.wrap(com.company.demo.GroundControl.PARAM_REQUEST_LIST.meta_);
                var dst = new org.unirail.Test. PARAM_REQUEST_LIST(cur_dst);
                param_request_list.push_(new PARAM_REQUEST_LIST_dst_adapter(dst));
                Debug.Assert(param_request_list.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(param_request_list)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_VALUE -------------------------");
            fill(TestChannel.NEW.PARAM_VALUE(cur));
            var param_value = new  com.company.demo.GroundControl.PARAM_VALUE(cur);
            onPARAM_VALUE(param_value);
            {
                cur_dst.wrap(com.company.demo.GroundControl.PARAM_VALUE.meta_);
                var dst = new org.unirail.Test. PARAM_VALUE(cur_dst);
                param_value.push_(new PARAM_VALUE_dst_adapter(dst));
                Debug.Assert(param_value.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(param_value)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_SET -------------------------");
            fill(TestChannel.NEW.PARAM_SET(cur));
            var param_set = new  com.company.demo.GroundControl.PARAM_SET(cur);
            onPARAM_SET(param_set);
            {
                cur_dst.wrap(com.company.demo.GroundControl.PARAM_SET.meta_);
                var dst = new org.unirail.Test. PARAM_SET(cur_dst);
                param_set.push_(new PARAM_SET_dst_adapter(dst));
                Debug.Assert(param_set.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(param_set)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_RAW_INT -------------------------");
            fill(TestChannel.NEW.GPS_RAW_INT(cur));
            var gps_raw_int = new  com.company.demo.GroundControl.GPS_RAW_INT(cur);
            onGPS_RAW_INT(gps_raw_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.GPS_RAW_INT.meta_);
                var dst = new org.unirail.Test. GPS_RAW_INT(cur_dst);
                gps_raw_int.push_(new GPS_RAW_INT_dst_adapter(dst));
                Debug.Assert(gps_raw_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(gps_raw_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_STATUS -------------------------");
            fill(TestChannel.NEW.GPS_STATUS(cur));
            var gps_status = new  com.company.demo.GroundControl.GPS_STATUS(cur);
            onGPS_STATUS(gps_status);
            {
                cur_dst.wrap(com.company.demo.GroundControl.GPS_STATUS.meta_);
                var dst = new org.unirail.Test. GPS_STATUS(cur_dst);
                gps_status.push_(new GPS_STATUS_dst_adapter(dst));
                Debug.Assert(gps_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(gps_status)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SCALED_IMU -------------------------");
            fill(TestChannel.NEW.SCALED_IMU(cur));
            var scaled_imu = new  com.company.demo.GroundControl.SCALED_IMU(cur);
            onSCALED_IMU(scaled_imu);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SCALED_IMU.meta_);
                var dst = new org.unirail.Test. SCALED_IMU(cur_dst);
                scaled_imu.push_(new SCALED_IMU_dst_adapter(dst));
                Debug.Assert(scaled_imu.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(scaled_imu)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RAW_IMU -------------------------");
            fill(TestChannel.NEW.RAW_IMU(cur));
            var raw_imu = new  com.company.demo.GroundControl.RAW_IMU(cur);
            onRAW_IMU(raw_imu);
            {
                cur_dst.wrap(com.company.demo.GroundControl.RAW_IMU.meta_);
                var dst = new org.unirail.Test. RAW_IMU(cur_dst);
                raw_imu.push_(new RAW_IMU_dst_adapter(dst));
                Debug.Assert(raw_imu.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(raw_imu)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RAW_PRESSURE -------------------------");
            fill(TestChannel.NEW.RAW_PRESSURE(cur));
            var raw_pressure = new  com.company.demo.GroundControl.RAW_PRESSURE(cur);
            onRAW_PRESSURE(raw_pressure);
            {
                cur_dst.wrap(com.company.demo.GroundControl.RAW_PRESSURE.meta_);
                var dst = new org.unirail.Test. RAW_PRESSURE(cur_dst);
                raw_pressure.push_(new RAW_PRESSURE_dst_adapter(dst));
                Debug.Assert(raw_pressure.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(raw_pressure)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SCALED_PRESSURE -------------------------");
            fill(TestChannel.NEW.SCALED_PRESSURE(cur));
            var scaled_pressure = new  com.company.demo.GroundControl.SCALED_PRESSURE(cur);
            onSCALED_PRESSURE(scaled_pressure);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SCALED_PRESSURE.meta_);
                var dst = new org.unirail.Test. SCALED_PRESSURE(cur_dst);
                scaled_pressure.push_(new SCALED_PRESSURE_dst_adapter(dst));
                Debug.Assert(scaled_pressure.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(scaled_pressure)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ATTITUDE -------------------------");
            fill(TestChannel.NEW.ATTITUDE(cur));
            var attitude = new  com.company.demo.GroundControl.ATTITUDE(cur);
            onATTITUDE(attitude);
            {
                cur_dst.wrap(com.company.demo.GroundControl.ATTITUDE.meta_);
                var dst = new org.unirail.Test. ATTITUDE(cur_dst);
                attitude.push_(new ATTITUDE_dst_adapter(dst));
                Debug.Assert(attitude.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(attitude)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ATTITUDE_QUATERNION -------------------------");
            fill(TestChannel.NEW.ATTITUDE_QUATERNION(cur));
            var attitude_quaternion = new  com.company.demo.GroundControl.ATTITUDE_QUATERNION(cur);
            onATTITUDE_QUATERNION(attitude_quaternion);
            {
                cur_dst.wrap(com.company.demo.GroundControl.ATTITUDE_QUATERNION.meta_);
                var dst = new org.unirail.Test. ATTITUDE_QUATERNION(cur_dst);
                attitude_quaternion.push_(new ATTITUDE_QUATERNION_dst_adapter(dst));
                Debug.Assert(attitude_quaternion.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(attitude_quaternion)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOCAL_POSITION_NED -------------------------");
            fill(TestChannel.NEW.LOCAL_POSITION_NED(cur));
            var local_position_ned = new  com.company.demo.GroundControl.LOCAL_POSITION_NED(cur);
            onLOCAL_POSITION_NED(local_position_ned);
            {
                cur_dst.wrap(com.company.demo.GroundControl.LOCAL_POSITION_NED.meta_);
                var dst = new org.unirail.Test. LOCAL_POSITION_NED(cur_dst);
                local_position_ned.push_(new LOCAL_POSITION_NED_dst_adapter(dst));
                Debug.Assert(local_position_ned.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(local_position_ned)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GLOBAL_POSITION_INT -------------------------");
            fill(TestChannel.NEW.GLOBAL_POSITION_INT(cur));
            var global_position_int = new  com.company.demo.GroundControl.GLOBAL_POSITION_INT(cur);
            onGLOBAL_POSITION_INT(global_position_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.GLOBAL_POSITION_INT.meta_);
                var dst = new org.unirail.Test. GLOBAL_POSITION_INT(cur_dst);
                global_position_int.push_(new GLOBAL_POSITION_INT_dst_adapter(dst));
                Debug.Assert(global_position_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(global_position_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RC_CHANNELS_SCALED -------------------------");
            fill(TestChannel.NEW.RC_CHANNELS_SCALED(cur));
            var rc_channels_scaled = new  com.company.demo.GroundControl.RC_CHANNELS_SCALED(cur);
            onRC_CHANNELS_SCALED(rc_channels_scaled);
            {
                cur_dst.wrap(com.company.demo.GroundControl.RC_CHANNELS_SCALED.meta_);
                var dst = new org.unirail.Test. RC_CHANNELS_SCALED(cur_dst);
                rc_channels_scaled.push_(new RC_CHANNELS_SCALED_dst_adapter(dst));
                Debug.Assert(rc_channels_scaled.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(rc_channels_scaled)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RC_CHANNELS_RAW -------------------------");
            fill(TestChannel.NEW.RC_CHANNELS_RAW(cur));
            var rc_channels_raw = new  com.company.demo.GroundControl.RC_CHANNELS_RAW(cur);
            onRC_CHANNELS_RAW(rc_channels_raw);
            {
                cur_dst.wrap(com.company.demo.GroundControl.RC_CHANNELS_RAW.meta_);
                var dst = new org.unirail.Test. RC_CHANNELS_RAW(cur_dst);
                rc_channels_raw.push_(new RC_CHANNELS_RAW_dst_adapter(dst));
                Debug.Assert(rc_channels_raw.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(rc_channels_raw)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SERVO_OUTPUT_RAW -------------------------");
            fill(TestChannel.NEW.SERVO_OUTPUT_RAW(cur));
            var servo_output_raw = new  com.company.demo.GroundControl.SERVO_OUTPUT_RAW(cur);
            onSERVO_OUTPUT_RAW(servo_output_raw);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SERVO_OUTPUT_RAW.meta_);
                var dst = new org.unirail.Test. SERVO_OUTPUT_RAW(cur_dst);
                servo_output_raw.push_(new SERVO_OUTPUT_RAW_dst_adapter(dst));
                Debug.Assert(servo_output_raw.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(servo_output_raw)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_REQUEST_PARTIAL_LIST -------------------------");
            fill(TestChannel.NEW.MISSION_REQUEST_PARTIAL_LIST(cur));
            var mission_request_partial_list = new  com.company.demo.GroundControl.MISSION_REQUEST_PARTIAL_LIST(cur);
            onMISSION_REQUEST_PARTIAL_LIST(mission_request_partial_list);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_REQUEST_PARTIAL_LIST.meta_);
                var dst = new org.unirail.Test. MISSION_REQUEST_PARTIAL_LIST(cur_dst);
                mission_request_partial_list.push_(new MISSION_REQUEST_PARTIAL_LIST_dst_adapter(dst));
                Debug.Assert(mission_request_partial_list.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_request_partial_list)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_WRITE_PARTIAL_LIST -------------------------");
            fill(TestChannel.NEW.MISSION_WRITE_PARTIAL_LIST(cur));
            var mission_write_partial_list = new  com.company.demo.GroundControl.MISSION_WRITE_PARTIAL_LIST(cur);
            onMISSION_WRITE_PARTIAL_LIST(mission_write_partial_list);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_WRITE_PARTIAL_LIST.meta_);
                var dst = new org.unirail.Test. MISSION_WRITE_PARTIAL_LIST(cur_dst);
                mission_write_partial_list.push_(new MISSION_WRITE_PARTIAL_LIST_dst_adapter(dst));
                Debug.Assert(mission_write_partial_list.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_write_partial_list)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_ITEM -------------------------");
            fill(TestChannel.NEW.MISSION_ITEM(cur));
            var mission_item = new  com.company.demo.GroundControl.MISSION_ITEM(cur);
            onMISSION_ITEM(mission_item);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_ITEM.meta_);
                var dst = new org.unirail.Test. MISSION_ITEM(cur_dst);
                mission_item.push_(new MISSION_ITEM_dst_adapter(dst));
                Debug.Assert(mission_item.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_item)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_REQUEST -------------------------");
            fill(TestChannel.NEW.MISSION_REQUEST(cur));
            var mission_request = new  com.company.demo.GroundControl.MISSION_REQUEST(cur);
            onMISSION_REQUEST(mission_request);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_REQUEST.meta_);
                var dst = new org.unirail.Test. MISSION_REQUEST(cur_dst);
                mission_request.push_(new MISSION_REQUEST_dst_adapter(dst));
                Debug.Assert(mission_request.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_request)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_SET_CURRENT -------------------------");
            fill(TestChannel.NEW.MISSION_SET_CURRENT(cur));
            var mission_set_current = new  com.company.demo.GroundControl.MISSION_SET_CURRENT(cur);
            onMISSION_SET_CURRENT(mission_set_current);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_SET_CURRENT.meta_);
                var dst = new org.unirail.Test. MISSION_SET_CURRENT(cur_dst);
                mission_set_current.push_(new MISSION_SET_CURRENT_dst_adapter(dst));
                Debug.Assert(mission_set_current.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_set_current)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_CURRENT -------------------------");
            fill(TestChannel.NEW.MISSION_CURRENT(cur));
            var mission_current = new  com.company.demo.GroundControl.MISSION_CURRENT(cur);
            onMISSION_CURRENT(mission_current);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_CURRENT.meta_);
                var dst = new org.unirail.Test. MISSION_CURRENT(cur_dst);
                mission_current.push_(new MISSION_CURRENT_dst_adapter(dst));
                Debug.Assert(mission_current.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_current)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_REQUEST_LIST -------------------------");
            fill(TestChannel.NEW.MISSION_REQUEST_LIST(cur));
            var mission_request_list = new  com.company.demo.GroundControl.MISSION_REQUEST_LIST(cur);
            onMISSION_REQUEST_LIST(mission_request_list);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_REQUEST_LIST.meta_);
                var dst = new org.unirail.Test. MISSION_REQUEST_LIST(cur_dst);
                mission_request_list.push_(new MISSION_REQUEST_LIST_dst_adapter(dst));
                Debug.Assert(mission_request_list.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_request_list)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_COUNT -------------------------");
            fill(TestChannel.NEW.MISSION_COUNT(cur));
            var mission_count = new  com.company.demo.GroundControl.MISSION_COUNT(cur);
            onMISSION_COUNT(mission_count);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_COUNT.meta_);
                var dst = new org.unirail.Test. MISSION_COUNT(cur_dst);
                mission_count.push_(new MISSION_COUNT_dst_adapter(dst));
                Debug.Assert(mission_count.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_count)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_CLEAR_ALL -------------------------");
            fill(TestChannel.NEW.MISSION_CLEAR_ALL(cur));
            var mission_clear_all = new  com.company.demo.GroundControl.MISSION_CLEAR_ALL(cur);
            onMISSION_CLEAR_ALL(mission_clear_all);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_CLEAR_ALL.meta_);
                var dst = new org.unirail.Test. MISSION_CLEAR_ALL(cur_dst);
                mission_clear_all.push_(new MISSION_CLEAR_ALL_dst_adapter(dst));
                Debug.Assert(mission_clear_all.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_clear_all)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_ITEM_REACHED -------------------------");
            fill(TestChannel.NEW.MISSION_ITEM_REACHED(cur));
            var mission_item_reached = new  com.company.demo.GroundControl.MISSION_ITEM_REACHED(cur);
            onMISSION_ITEM_REACHED(mission_item_reached);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_ITEM_REACHED.meta_);
                var dst = new org.unirail.Test. MISSION_ITEM_REACHED(cur_dst);
                mission_item_reached.push_(new MISSION_ITEM_REACHED_dst_adapter(dst));
                Debug.Assert(mission_item_reached.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_item_reached)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_ACK -------------------------");
            fill(TestChannel.NEW.MISSION_ACK(cur));
            var mission_ack = new  com.company.demo.GroundControl.MISSION_ACK(cur);
            onMISSION_ACK(mission_ack);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_ACK.meta_);
                var dst = new org.unirail.Test. MISSION_ACK(cur_dst);
                mission_ack.push_(new MISSION_ACK_dst_adapter(dst));
                Debug.Assert(mission_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_ack)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_GPS_GLOBAL_ORIGIN -------------------------");
            fill(TestChannel.NEW.SET_GPS_GLOBAL_ORIGIN(cur));
            var set_gps_global_origin = new  com.company.demo.GroundControl.SET_GPS_GLOBAL_ORIGIN(cur);
            onSET_GPS_GLOBAL_ORIGIN(set_gps_global_origin);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SET_GPS_GLOBAL_ORIGIN.meta_);
                var dst = new org.unirail.Test. SET_GPS_GLOBAL_ORIGIN(cur_dst);
                set_gps_global_origin.push_(new SET_GPS_GLOBAL_ORIGIN_dst_adapter(dst));
                Debug.Assert(set_gps_global_origin.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(set_gps_global_origin)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_GLOBAL_ORIGIN -------------------------");
            fill(TestChannel.NEW.GPS_GLOBAL_ORIGIN(cur));
            var gps_global_origin = new  com.company.demo.GroundControl.GPS_GLOBAL_ORIGIN(cur);
            onGPS_GLOBAL_ORIGIN(gps_global_origin);
            {
                cur_dst.wrap(com.company.demo.GroundControl.GPS_GLOBAL_ORIGIN.meta_);
                var dst = new org.unirail.Test. GPS_GLOBAL_ORIGIN(cur_dst);
                gps_global_origin.push_(new GPS_GLOBAL_ORIGIN_dst_adapter(dst));
                Debug.Assert(gps_global_origin.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(gps_global_origin)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_MAP_RC -------------------------");
            fill(TestChannel.NEW.PARAM_MAP_RC(cur));
            var param_map_rc = new  com.company.demo.GroundControl.PARAM_MAP_RC(cur);
            onPARAM_MAP_RC(param_map_rc);
            {
                cur_dst.wrap(com.company.demo.GroundControl.PARAM_MAP_RC.meta_);
                var dst = new org.unirail.Test. PARAM_MAP_RC(cur_dst);
                param_map_rc.push_(new PARAM_MAP_RC_dst_adapter(dst));
                Debug.Assert(param_map_rc.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(param_map_rc)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_REQUEST_INT -------------------------");
            fill(TestChannel.NEW.MISSION_REQUEST_INT(cur));
            var mission_request_int = new  com.company.demo.GroundControl.MISSION_REQUEST_INT(cur);
            onMISSION_REQUEST_INT(mission_request_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_REQUEST_INT.meta_);
                var dst = new org.unirail.Test. MISSION_REQUEST_INT(cur_dst);
                mission_request_int.push_(new MISSION_REQUEST_INT_dst_adapter(dst));
                Debug.Assert(mission_request_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_request_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SAFETY_SET_ALLOWED_AREA -------------------------");
            fill(TestChannel.NEW.SAFETY_SET_ALLOWED_AREA(cur));
            var safety_set_allowed_area = new  com.company.demo.GroundControl.SAFETY_SET_ALLOWED_AREA(cur);
            onSAFETY_SET_ALLOWED_AREA(safety_set_allowed_area);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SAFETY_SET_ALLOWED_AREA.meta_);
                var dst = new org.unirail.Test. SAFETY_SET_ALLOWED_AREA(cur_dst);
                safety_set_allowed_area.push_(new SAFETY_SET_ALLOWED_AREA_dst_adapter(dst));
                Debug.Assert(safety_set_allowed_area.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(safety_set_allowed_area)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SAFETY_ALLOWED_AREA -------------------------");
            fill(TestChannel.NEW.SAFETY_ALLOWED_AREA(cur));
            var safety_allowed_area = new  com.company.demo.GroundControl.SAFETY_ALLOWED_AREA(cur);
            onSAFETY_ALLOWED_AREA(safety_allowed_area);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SAFETY_ALLOWED_AREA.meta_);
                var dst = new org.unirail.Test. SAFETY_ALLOWED_AREA(cur_dst);
                safety_allowed_area.push_(new SAFETY_ALLOWED_AREA_dst_adapter(dst));
                Debug.Assert(safety_allowed_area.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(safety_allowed_area)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ATTITUDE_QUATERNION_COV -------------------------");
            fill(TestChannel.NEW.ATTITUDE_QUATERNION_COV(cur));
            var attitude_quaternion_cov = new  com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV(cur);
            onATTITUDE_QUATERNION_COV(attitude_quaternion_cov);
            {
                cur_dst.wrap(com.company.demo.GroundControl.ATTITUDE_QUATERNION_COV.meta_);
                var dst = new org.unirail.Test. ATTITUDE_QUATERNION_COV(cur_dst);
                attitude_quaternion_cov.push_(new ATTITUDE_QUATERNION_COV_dst_adapter(dst));
                Debug.Assert(attitude_quaternion_cov.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(attitude_quaternion_cov)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- NAV_CONTROLLER_OUTPUT -------------------------");
            fill(TestChannel.NEW.NAV_CONTROLLER_OUTPUT(cur));
            var nav_controller_output = new  com.company.demo.GroundControl.NAV_CONTROLLER_OUTPUT(cur);
            onNAV_CONTROLLER_OUTPUT(nav_controller_output);
            {
                cur_dst.wrap(com.company.demo.GroundControl.NAV_CONTROLLER_OUTPUT.meta_);
                var dst = new org.unirail.Test. NAV_CONTROLLER_OUTPUT(cur_dst);
                nav_controller_output.push_(new NAV_CONTROLLER_OUTPUT_dst_adapter(dst));
                Debug.Assert(nav_controller_output.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(nav_controller_output)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GLOBAL_POSITION_INT_COV -------------------------");
            fill(TestChannel.NEW.GLOBAL_POSITION_INT_COV(cur));
            var global_position_int_cov = new  com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV(cur);
            onGLOBAL_POSITION_INT_COV(global_position_int_cov);
            {
                cur_dst.wrap(com.company.demo.GroundControl.GLOBAL_POSITION_INT_COV.meta_);
                var dst = new org.unirail.Test. GLOBAL_POSITION_INT_COV(cur_dst);
                global_position_int_cov.push_(new GLOBAL_POSITION_INT_COV_dst_adapter(dst));
                Debug.Assert(global_position_int_cov.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(global_position_int_cov)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOCAL_POSITION_NED_COV -------------------------");
            fill(TestChannel.NEW.LOCAL_POSITION_NED_COV(cur));
            var local_position_ned_cov = new  com.company.demo.GroundControl.LOCAL_POSITION_NED_COV(cur);
            onLOCAL_POSITION_NED_COV(local_position_ned_cov);
            {
                cur_dst.wrap(com.company.demo.GroundControl.LOCAL_POSITION_NED_COV.meta_);
                var dst = new org.unirail.Test. LOCAL_POSITION_NED_COV(cur_dst);
                local_position_ned_cov.push_(new LOCAL_POSITION_NED_COV_dst_adapter(dst));
                Debug.Assert(local_position_ned_cov.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(local_position_ned_cov)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RC_CHANNELS -------------------------");
            fill(TestChannel.NEW.RC_CHANNELS(cur));
            var rc_channels = new  com.company.demo.GroundControl.RC_CHANNELS(cur);
            onRC_CHANNELS(rc_channels);
            {
                cur_dst.wrap(com.company.demo.GroundControl.RC_CHANNELS.meta_);
                var dst = new org.unirail.Test. RC_CHANNELS(cur_dst);
                rc_channels.push_(new RC_CHANNELS_dst_adapter(dst));
                Debug.Assert(rc_channels.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(rc_channels)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- REQUEST_DATA_STREAM -------------------------");
            fill(TestChannel.NEW.REQUEST_DATA_STREAM(cur));
            var request_data_stream = new  com.company.demo.GroundControl.REQUEST_DATA_STREAM(cur);
            onREQUEST_DATA_STREAM(request_data_stream);
            {
                cur_dst.wrap(com.company.demo.GroundControl.REQUEST_DATA_STREAM.meta_);
                var dst = new org.unirail.Test. REQUEST_DATA_STREAM(cur_dst);
                request_data_stream.push_(new REQUEST_DATA_STREAM_dst_adapter(dst));
                Debug.Assert(request_data_stream.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(request_data_stream)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DATA_STREAM -------------------------");
            fill(TestChannel.NEW.DATA_STREAM(cur));
            var data_stream = new  com.company.demo.GroundControl.DATA_STREAM(cur);
            onDATA_STREAM(data_stream);
            {
                cur_dst.wrap(com.company.demo.GroundControl.DATA_STREAM.meta_);
                var dst = new org.unirail.Test. DATA_STREAM(cur_dst);
                data_stream.push_(new DATA_STREAM_dst_adapter(dst));
                Debug.Assert(data_stream.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(data_stream)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MANUAL_CONTROL -------------------------");
            fill(TestChannel.NEW.MANUAL_CONTROL(cur));
            var manual_control = new  com.company.demo.GroundControl.MANUAL_CONTROL(cur);
            onMANUAL_CONTROL(manual_control);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MANUAL_CONTROL.meta_);
                var dst = new org.unirail.Test. MANUAL_CONTROL(cur_dst);
                manual_control.push_(new MANUAL_CONTROL_dst_adapter(dst));
                Debug.Assert(manual_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(manual_control)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RC_CHANNELS_OVERRIDE -------------------------");
            fill(TestChannel.NEW.RC_CHANNELS_OVERRIDE(cur));
            var rc_channels_override = new  com.company.demo.GroundControl.RC_CHANNELS_OVERRIDE(cur);
            onRC_CHANNELS_OVERRIDE(rc_channels_override);
            {
                cur_dst.wrap(com.company.demo.GroundControl.RC_CHANNELS_OVERRIDE.meta_);
                var dst = new org.unirail.Test. RC_CHANNELS_OVERRIDE(cur_dst);
                rc_channels_override.push_(new RC_CHANNELS_OVERRIDE_dst_adapter(dst));
                Debug.Assert(rc_channels_override.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(rc_channels_override)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MISSION_ITEM_INT -------------------------");
            fill(TestChannel.NEW.MISSION_ITEM_INT(cur));
            var mission_item_int = new  com.company.demo.GroundControl.MISSION_ITEM_INT(cur);
            onMISSION_ITEM_INT(mission_item_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MISSION_ITEM_INT.meta_);
                var dst = new org.unirail.Test. MISSION_ITEM_INT(cur_dst);
                mission_item_int.push_(new MISSION_ITEM_INT_dst_adapter(dst));
                Debug.Assert(mission_item_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(mission_item_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VFR_HUD -------------------------");
            fill(TestChannel.NEW.VFR_HUD(cur));
            var vfr_hud = new  com.company.demo.GroundControl.VFR_HUD(cur);
            onVFR_HUD(vfr_hud);
            {
                cur_dst.wrap(com.company.demo.GroundControl.VFR_HUD.meta_);
                var dst = new org.unirail.Test. VFR_HUD(cur_dst);
                vfr_hud.push_(new VFR_HUD_dst_adapter(dst));
                Debug.Assert(vfr_hud.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(vfr_hud)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- COMMAND_INT -------------------------");
            fill(TestChannel.NEW.COMMAND_INT(cur));
            var command_int = new  com.company.demo.GroundControl.COMMAND_INT(cur);
            onCOMMAND_INT(command_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.COMMAND_INT.meta_);
                var dst = new org.unirail.Test. COMMAND_INT(cur_dst);
                command_int.push_(new COMMAND_INT_dst_adapter(dst));
                Debug.Assert(command_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(command_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- COMMAND_LONG -------------------------");
            fill(TestChannel.NEW.COMMAND_LONG(cur));
            var command_long = new  com.company.demo.GroundControl.COMMAND_LONG(cur);
            onCOMMAND_LONG(command_long);
            {
                cur_dst.wrap(com.company.demo.GroundControl.COMMAND_LONG.meta_);
                var dst = new org.unirail.Test. COMMAND_LONG(cur_dst);
                command_long.push_(new COMMAND_LONG_dst_adapter(dst));
                Debug.Assert(command_long.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(command_long)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- COMMAND_ACK -------------------------");
            fill(TestChannel.NEW.COMMAND_ACK(cur));
            var command_ack = new  com.company.demo.GroundControl.COMMAND_ACK(cur);
            onCOMMAND_ACK(command_ack);
            {
                cur_dst.wrap(com.company.demo.GroundControl.COMMAND_ACK.meta_);
                var dst = new org.unirail.Test. COMMAND_ACK(cur_dst);
                command_ack.push_(new COMMAND_ACK_dst_adapter(dst));
                Debug.Assert(command_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(command_ack)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MANUAL_SETPOINT -------------------------");
            fill(TestChannel.NEW.MANUAL_SETPOINT(cur));
            var manual_setpoint = new  com.company.demo.GroundControl.MANUAL_SETPOINT(cur);
            onMANUAL_SETPOINT(manual_setpoint);
            {
                cur_dst.wrap(com.company.demo.GroundControl.MANUAL_SETPOINT.meta_);
                var dst = new org.unirail.Test. MANUAL_SETPOINT(cur_dst);
                manual_setpoint.push_(new MANUAL_SETPOINT_dst_adapter(dst));
                Debug.Assert(manual_setpoint.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(manual_setpoint)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_ATTITUDE_TARGET -------------------------");
            fill(TestChannel.NEW.SET_ATTITUDE_TARGET(cur));
            var set_attitude_target = new  com.company.demo.GroundControl.SET_ATTITUDE_TARGET(cur);
            onSET_ATTITUDE_TARGET(set_attitude_target);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SET_ATTITUDE_TARGET.meta_);
                var dst = new org.unirail.Test. SET_ATTITUDE_TARGET(cur_dst);
                set_attitude_target.push_(new SET_ATTITUDE_TARGET_dst_adapter(dst));
                Debug.Assert(set_attitude_target.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(set_attitude_target)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ATTITUDE_TARGET -------------------------");
            fill(TestChannel.NEW.ATTITUDE_TARGET(cur));
            var attitude_target = new  com.company.demo.GroundControl.ATTITUDE_TARGET(cur);
            onATTITUDE_TARGET(attitude_target);
            {
                cur_dst.wrap(com.company.demo.GroundControl.ATTITUDE_TARGET.meta_);
                var dst = new org.unirail.Test. ATTITUDE_TARGET(cur_dst);
                attitude_target.push_(new ATTITUDE_TARGET_dst_adapter(dst));
                Debug.Assert(attitude_target.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(attitude_target)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_POSITION_TARGET_LOCAL_NED -------------------------");
            fill(TestChannel.NEW.SET_POSITION_TARGET_LOCAL_NED(cur));
            var set_position_target_local_ned = new  com.company.demo.GroundControl.SET_POSITION_TARGET_LOCAL_NED(cur);
            onSET_POSITION_TARGET_LOCAL_NED(set_position_target_local_ned);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SET_POSITION_TARGET_LOCAL_NED.meta_);
                var dst = new org.unirail.Test. SET_POSITION_TARGET_LOCAL_NED(cur_dst);
                set_position_target_local_ned.push_(new SET_POSITION_TARGET_LOCAL_NED_dst_adapter(dst));
                Debug.Assert(set_position_target_local_ned.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(set_position_target_local_ned)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- POSITION_TARGET_LOCAL_NED -------------------------");
            fill(TestChannel.NEW.POSITION_TARGET_LOCAL_NED(cur));
            var position_target_local_ned = new  com.company.demo.GroundControl.POSITION_TARGET_LOCAL_NED(cur);
            onPOSITION_TARGET_LOCAL_NED(position_target_local_ned);
            {
                cur_dst.wrap(com.company.demo.GroundControl.POSITION_TARGET_LOCAL_NED.meta_);
                var dst = new org.unirail.Test. POSITION_TARGET_LOCAL_NED(cur_dst);
                position_target_local_ned.push_(new POSITION_TARGET_LOCAL_NED_dst_adapter(dst));
                Debug.Assert(position_target_local_ned.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(position_target_local_ned)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_POSITION_TARGET_GLOBAL_INT -------------------------");
            fill(TestChannel.NEW.SET_POSITION_TARGET_GLOBAL_INT(cur));
            var set_position_target_global_int = new  com.company.demo.GroundControl.SET_POSITION_TARGET_GLOBAL_INT(cur);
            onSET_POSITION_TARGET_GLOBAL_INT(set_position_target_global_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.SET_POSITION_TARGET_GLOBAL_INT.meta_);
                var dst = new org.unirail.Test. SET_POSITION_TARGET_GLOBAL_INT(cur_dst);
                set_position_target_global_int.push_(new SET_POSITION_TARGET_GLOBAL_INT_dst_adapter(dst));
                Debug.Assert(set_position_target_global_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(set_position_target_global_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- POSITION_TARGET_GLOBAL_INT -------------------------");
            fill(TestChannel.NEW.POSITION_TARGET_GLOBAL_INT(cur));
            var position_target_global_int = new  com.company.demo.GroundControl.POSITION_TARGET_GLOBAL_INT(cur);
            onPOSITION_TARGET_GLOBAL_INT(position_target_global_int);
            {
                cur_dst.wrap(com.company.demo.GroundControl.POSITION_TARGET_GLOBAL_INT.meta_);
                var dst = new org.unirail.Test. POSITION_TARGET_GLOBAL_INT(cur_dst);
                position_target_global_int.push_(new POSITION_TARGET_GLOBAL_INT_dst_adapter(dst));
                Debug.Assert(position_target_global_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(position_target_global_int)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET -------------------------");
            fill(TestChannel.NEW.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(cur));
            var local_position_ned_system_global_offset = new  com.company.demo.GroundControl.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(cur);
            onLOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(local_position_ned_system_global_offset);
            {
                cur_dst.wrap(com.company.demo.GroundControl.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET.meta_);
                var dst = new org.unirail.Test. LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(cur_dst);
                local_position_ned_system_global_offset.push_(new LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_dst_adapter(dst));
                Debug.Assert(local_position_ned_system_global_offset.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(local_position_ned_system_global_offset)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_STATE -------------------------");
            fill(TestChannel.NEW.HIL_STATE(cur));
            var hil_state = new  com.company.demo.GroundControl.HIL_STATE(cur);
            onHIL_STATE(hil_state);
            {
                cur_dst.wrap(com.company.demo.GroundControl.HIL_STATE.meta_);
                var dst = new org.unirail.Test. HIL_STATE(cur_dst);
                hil_state.push_(new HIL_STATE_dst_adapter(dst));
                Debug.Assert(hil_state.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(hil_state)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_CONTROLS -------------------------");
            fill(TestChannel.NEW.HIL_CONTROLS(cur));
            var hil_controls = new  com.company.demo.GroundControl.HIL_CONTROLS(cur);
            onHIL_CONTROLS(hil_controls);
            {
                cur_dst.wrap(com.company.demo.GroundControl.HIL_CONTROLS.meta_);
                var dst = new org.unirail.Test. HIL_CONTROLS(cur_dst);
                hil_controls.push_(new HIL_CONTROLS_dst_adapter(dst));
                Debug.Assert(hil_controls.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(hil_controls)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_RC_INPUTS_RAW -------------------------");
            fill(TestChannel.NEW.HIL_RC_INPUTS_RAW(cur));
            var hil_rc_inputs_raw = new  com.company.demo.GroundControl.HIL_RC_INPUTS_RAW(cur);
            onHIL_RC_INPUTS_RAW(hil_rc_inputs_raw);
            {
                cur_dst.wrap(com.company.demo.GroundControl.HIL_RC_INPUTS_RAW.meta_);
                var dst = new org.unirail.Test. HIL_RC_INPUTS_RAW(cur_dst);
                hil_rc_inputs_raw.push_(new HIL_RC_INPUTS_RAW_dst_adapter(dst));
                Debug.Assert(hil_rc_inputs_raw.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(hil_rc_inputs_raw)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_ACTUATOR_CONTROLS -------------------------");
            fill(TestChannel.NEW.HIL_ACTUATOR_CONTROLS(cur));
            var hil_actuator_controls = new  com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS(cur);
            onHIL_ACTUATOR_CONTROLS(hil_actuator_controls);
            {
                cur_dst.wrap(com.company.demo.GroundControl.HIL_ACTUATOR_CONTROLS.meta_);
                var dst = new org.unirail.Test. HIL_ACTUATOR_CONTROLS(cur_dst);
                hil_actuator_controls.push_(new HIL_ACTUATOR_CONTROLS_dst_adapter(dst));
                Debug.Assert(hil_actuator_controls.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(hil_actuator_controls)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- OPTICAL_FLOW -------------------------");
            fill(TestChannel.NEW.OPTICAL_FLOW(cur));
            var optical_flow = new  com.company.demo.GroundControl.OPTICAL_FLOW(cur);
            onOPTICAL_FLOW(optical_flow);
            {
                cur_dst.wrap(com.company.demo.GroundControl.OPTICAL_FLOW.meta_);
                var dst = new org.unirail.Test. OPTICAL_FLOW(cur_dst);
                optical_flow.push_(new OPTICAL_FLOW_dst_adapter(dst));
                Debug.Assert(optical_flow.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(optical_flow)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GLOBAL_VISION_POSITION_ESTIMATE -------------------------");
            fill(TestChannel.NEW.GLOBAL_VISION_POSITION_ESTIMATE(cur));
            var global_vision_position_estimate = new  com.company.demo.GroundControl.GLOBAL_VISION_POSITION_ESTIMATE(cur);
            onGLOBAL_VISION_POSITION_ESTIMATE(global_vision_position_estimate);
            {
                cur_dst.wrap(com.company.demo.GroundControl.GLOBAL_VISION_POSITION_ESTIMATE.meta_);
                var dst = new org.unirail.Test. GLOBAL_VISION_POSITION_ESTIMATE(cur_dst);
                global_vision_position_estimate.push_(new GLOBAL_VISION_POSITION_ESTIMATE_dst_adapter(dst));
                Debug.Assert(global_vision_position_estimate.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(global_vision_position_estimate)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VISION_POSITION_ESTIMATE -------------------------");
            fill(TestChannel.NEW.VISION_POSITION_ESTIMATE(cur));
            var vision_position_estimate = new  com.company.demo.GroundControl.VISION_POSITION_ESTIMATE(cur);
            onVISION_POSITION_ESTIMATE(vision_position_estimate);
            {
                cur_dst.wrap(com.company.demo.GroundControl.VISION_POSITION_ESTIMATE.meta_);
                var dst = new org.unirail.Test. VISION_POSITION_ESTIMATE(cur_dst);
                vision_position_estimate.push_(new VISION_POSITION_ESTIMATE_dst_adapter(dst));
                Debug.Assert(vision_position_estimate.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(TestChannel_instance.send(vision_position_estimate)) TestChannel_instance.Std.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SwitchModeCommand -------------------------");
            if(CommunicationChannel_instance.sendSwitchModeCommand()) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PING33 -------------------------");
            var ping33 = CommunicationChannel.NEW.PING33(cur);
            fill(ping33);
            onPING33(ping33);
            {
                var dst = CommunicationChannel.NEW.PING33(cur_dst);
                ping33.push_(new PING33_dst_adapter(dst));
                Debug.Assert(ping33.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PING33(cur_dst);
                dst.pull_(new PING33_src_adapter(ping33));
                Debug.Assert(ping33.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(ping33)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VISION_SPEED_ESTIMATE -------------------------");
            var vision_speed_estimate = CommunicationChannel.NEW.VISION_SPEED_ESTIMATE(cur);
            fill(vision_speed_estimate);
            onVISION_SPEED_ESTIMATE(vision_speed_estimate);
            {
                var dst = CommunicationChannel.NEW.VISION_SPEED_ESTIMATE(cur_dst);
                vision_speed_estimate.push_(new VISION_SPEED_ESTIMATE_dst_adapter(dst));
                Debug.Assert(vision_speed_estimate.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.VISION_SPEED_ESTIMATE(cur_dst);
                dst.pull_(new VISION_SPEED_ESTIMATE_src_adapter(vision_speed_estimate));
                Debug.Assert(vision_speed_estimate.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(vision_speed_estimate)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VICON_POSITION_ESTIMATE -------------------------");
            var vicon_position_estimate = CommunicationChannel.NEW.VICON_POSITION_ESTIMATE(cur);
            fill(vicon_position_estimate);
            onVICON_POSITION_ESTIMATE(vicon_position_estimate);
            {
                var dst = CommunicationChannel.NEW.VICON_POSITION_ESTIMATE(cur_dst);
                vicon_position_estimate.push_(new VICON_POSITION_ESTIMATE_dst_adapter(dst));
                Debug.Assert(vicon_position_estimate.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.VICON_POSITION_ESTIMATE(cur_dst);
                dst.pull_(new VICON_POSITION_ESTIMATE_src_adapter(vicon_position_estimate));
                Debug.Assert(vicon_position_estimate.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(vicon_position_estimate)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIGHRES_IMU -------------------------");
            var highres_imu = CommunicationChannel.NEW.HIGHRES_IMU(cur);
            fill(highres_imu);
            onHIGHRES_IMU(highres_imu);
            {
                var dst = CommunicationChannel.NEW.HIGHRES_IMU(cur_dst);
                highres_imu.push_(new HIGHRES_IMU_dst_adapter(dst));
                Debug.Assert(highres_imu.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HIGHRES_IMU(cur_dst);
                dst.pull_(new HIGHRES_IMU_src_adapter(highres_imu));
                Debug.Assert(highres_imu.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(highres_imu)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- OPTICAL_FLOW_RAD -------------------------");
            var optical_flow_rad = CommunicationChannel.NEW.OPTICAL_FLOW_RAD(cur);
            fill(optical_flow_rad);
            onOPTICAL_FLOW_RAD(optical_flow_rad);
            {
                var dst = CommunicationChannel.NEW.OPTICAL_FLOW_RAD(cur_dst);
                optical_flow_rad.push_(new OPTICAL_FLOW_RAD_dst_adapter(dst));
                Debug.Assert(optical_flow_rad.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.OPTICAL_FLOW_RAD(cur_dst);
                dst.pull_(new OPTICAL_FLOW_RAD_src_adapter(optical_flow_rad));
                Debug.Assert(optical_flow_rad.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(optical_flow_rad)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_SENSOR -------------------------");
            var hil_sensor = CommunicationChannel.NEW.HIL_SENSOR(cur);
            fill(hil_sensor);
            onHIL_SENSOR(hil_sensor);
            {
                var dst = CommunicationChannel.NEW.HIL_SENSOR(cur_dst);
                hil_sensor.push_(new HIL_SENSOR_dst_adapter(dst));
                Debug.Assert(hil_sensor.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HIL_SENSOR(cur_dst);
                dst.pull_(new HIL_SENSOR_src_adapter(hil_sensor));
                Debug.Assert(hil_sensor.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(hil_sensor)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SIM_STATE -------------------------");
            var sim_state = CommunicationChannel.NEW.SIM_STATE(cur);
            fill(sim_state);
            onSIM_STATE(sim_state);
            {
                var dst = CommunicationChannel.NEW.SIM_STATE(cur_dst);
                sim_state.push_(new SIM_STATE_dst_adapter(dst));
                Debug.Assert(sim_state.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SIM_STATE(cur_dst);
                dst.pull_(new SIM_STATE_src_adapter(sim_state));
                Debug.Assert(sim_state.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(sim_state)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RADIO_STATUS -------------------------");
            var radio_status = CommunicationChannel.NEW.RADIO_STATUS(cur);
            fill(radio_status);
            onRADIO_STATUS(radio_status);
            {
                var dst = CommunicationChannel.NEW.RADIO_STATUS(cur_dst);
                radio_status.push_(new RADIO_STATUS_dst_adapter(dst));
                Debug.Assert(radio_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RADIO_STATUS(cur_dst);
                dst.pull_(new RADIO_STATUS_src_adapter(radio_status));
                Debug.Assert(radio_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(radio_status)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- FILE_TRANSFER_PROTOCOL -------------------------");
            var file_transfer_protocol = CommunicationChannel.NEW.FILE_TRANSFER_PROTOCOL(cur);
            fill(file_transfer_protocol);
            onFILE_TRANSFER_PROTOCOL(file_transfer_protocol);
            {
                var dst = CommunicationChannel.NEW.FILE_TRANSFER_PROTOCOL(cur_dst);
                file_transfer_protocol.push_(new FILE_TRANSFER_PROTOCOL_dst_adapter(dst));
                Debug.Assert(file_transfer_protocol.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.FILE_TRANSFER_PROTOCOL(cur_dst);
                dst.pull_(new FILE_TRANSFER_PROTOCOL_src_adapter(file_transfer_protocol));
                Debug.Assert(file_transfer_protocol.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(file_transfer_protocol)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- TIMESYNC -------------------------");
            var timesync = CommunicationChannel.NEW.TIMESYNC(cur);
            fill(timesync);
            onTIMESYNC(timesync);
            {
                var dst = CommunicationChannel.NEW.TIMESYNC(cur_dst);
                timesync.push_(new TIMESYNC_dst_adapter(dst));
                Debug.Assert(timesync.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.TIMESYNC(cur_dst);
                dst.pull_(new TIMESYNC_src_adapter(timesync));
                Debug.Assert(timesync.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(timesync)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_TRIGGER -------------------------");
            var camera_trigger = CommunicationChannel.NEW.CAMERA_TRIGGER(cur);
            fill(camera_trigger);
            onCAMERA_TRIGGER(camera_trigger);
            {
                var dst = CommunicationChannel.NEW.CAMERA_TRIGGER(cur_dst);
                camera_trigger.push_(new CAMERA_TRIGGER_dst_adapter(dst));
                Debug.Assert(camera_trigger.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_TRIGGER(cur_dst);
                dst.pull_(new CAMERA_TRIGGER_src_adapter(camera_trigger));
                Debug.Assert(camera_trigger.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_trigger)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_GPS -------------------------");
            var hil_gps = CommunicationChannel.NEW.HIL_GPS(cur);
            fill(hil_gps);
            onHIL_GPS(hil_gps);
            {
                var dst = CommunicationChannel.NEW.HIL_GPS(cur_dst);
                hil_gps.push_(new HIL_GPS_dst_adapter(dst));
                Debug.Assert(hil_gps.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HIL_GPS(cur_dst);
                dst.pull_(new HIL_GPS_src_adapter(hil_gps));
                Debug.Assert(hil_gps.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(hil_gps)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_OPTICAL_FLOW -------------------------");
            var hil_optical_flow = CommunicationChannel.NEW.HIL_OPTICAL_FLOW(cur);
            fill(hil_optical_flow);
            onHIL_OPTICAL_FLOW(hil_optical_flow);
            {
                var dst = CommunicationChannel.NEW.HIL_OPTICAL_FLOW(cur_dst);
                hil_optical_flow.push_(new HIL_OPTICAL_FLOW_dst_adapter(dst));
                Debug.Assert(hil_optical_flow.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HIL_OPTICAL_FLOW(cur_dst);
                dst.pull_(new HIL_OPTICAL_FLOW_src_adapter(hil_optical_flow));
                Debug.Assert(hil_optical_flow.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(hil_optical_flow)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIL_STATE_QUATERNION -------------------------");
            var hil_state_quaternion = CommunicationChannel.NEW.HIL_STATE_QUATERNION(cur);
            fill(hil_state_quaternion);
            onHIL_STATE_QUATERNION(hil_state_quaternion);
            {
                var dst = CommunicationChannel.NEW.HIL_STATE_QUATERNION(cur_dst);
                hil_state_quaternion.push_(new HIL_STATE_QUATERNION_dst_adapter(dst));
                Debug.Assert(hil_state_quaternion.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HIL_STATE_QUATERNION(cur_dst);
                dst.pull_(new HIL_STATE_QUATERNION_src_adapter(hil_state_quaternion));
                Debug.Assert(hil_state_quaternion.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(hil_state_quaternion)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SCALED_IMU2 -------------------------");
            var scaled_imu2 = CommunicationChannel.NEW.SCALED_IMU2(cur);
            fill(scaled_imu2);
            onSCALED_IMU2(scaled_imu2);
            {
                var dst = CommunicationChannel.NEW.SCALED_IMU2(cur_dst);
                scaled_imu2.push_(new SCALED_IMU2_dst_adapter(dst));
                Debug.Assert(scaled_imu2.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SCALED_IMU2(cur_dst);
                dst.pull_(new SCALED_IMU2_src_adapter(scaled_imu2));
                Debug.Assert(scaled_imu2.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(scaled_imu2)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOG_REQUEST_LIST -------------------------");
            var log_request_list = CommunicationChannel.NEW.LOG_REQUEST_LIST(cur);
            fill(log_request_list);
            onLOG_REQUEST_LIST(log_request_list);
            {
                var dst = CommunicationChannel.NEW.LOG_REQUEST_LIST(cur_dst);
                log_request_list.push_(new LOG_REQUEST_LIST_dst_adapter(dst));
                Debug.Assert(log_request_list.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOG_REQUEST_LIST(cur_dst);
                dst.pull_(new LOG_REQUEST_LIST_src_adapter(log_request_list));
                Debug.Assert(log_request_list.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(log_request_list)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOG_ENTRY -------------------------");
            var log_entry = CommunicationChannel.NEW.LOG_ENTRY(cur);
            fill(log_entry);
            onLOG_ENTRY(log_entry);
            {
                var dst = CommunicationChannel.NEW.LOG_ENTRY(cur_dst);
                log_entry.push_(new LOG_ENTRY_dst_adapter(dst));
                Debug.Assert(log_entry.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOG_ENTRY(cur_dst);
                dst.pull_(new LOG_ENTRY_src_adapter(log_entry));
                Debug.Assert(log_entry.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(log_entry)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOG_REQUEST_DATA -------------------------");
            var log_request_data = CommunicationChannel.NEW.LOG_REQUEST_DATA(cur);
            fill(log_request_data);
            onLOG_REQUEST_DATA(log_request_data);
            {
                var dst = CommunicationChannel.NEW.LOG_REQUEST_DATA(cur_dst);
                log_request_data.push_(new LOG_REQUEST_DATA_dst_adapter(dst));
                Debug.Assert(log_request_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOG_REQUEST_DATA(cur_dst);
                dst.pull_(new LOG_REQUEST_DATA_src_adapter(log_request_data));
                Debug.Assert(log_request_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(log_request_data)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOG_DATA -------------------------");
            var log_data = CommunicationChannel.NEW.LOG_DATA(cur);
            fill(log_data);
            onLOG_DATA(log_data);
            {
                var dst = CommunicationChannel.NEW.LOG_DATA(cur_dst);
                log_data.push_(new LOG_DATA_dst_adapter(dst));
                Debug.Assert(log_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOG_DATA(cur_dst);
                dst.pull_(new LOG_DATA_src_adapter(log_data));
                Debug.Assert(log_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(log_data)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOG_ERASE -------------------------");
            var log_erase = CommunicationChannel.NEW.LOG_ERASE(cur);
            fill(log_erase);
            onLOG_ERASE(log_erase);
            {
                var dst = CommunicationChannel.NEW.LOG_ERASE(cur_dst);
                log_erase.push_(new LOG_ERASE_dst_adapter(dst));
                Debug.Assert(log_erase.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOG_ERASE(cur_dst);
                dst.pull_(new LOG_ERASE_src_adapter(log_erase));
                Debug.Assert(log_erase.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(log_erase)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOG_REQUEST_END -------------------------");
            var log_request_end = CommunicationChannel.NEW.LOG_REQUEST_END(cur);
            fill(log_request_end);
            onLOG_REQUEST_END(log_request_end);
            {
                var dst = CommunicationChannel.NEW.LOG_REQUEST_END(cur_dst);
                log_request_end.push_(new LOG_REQUEST_END_dst_adapter(dst));
                Debug.Assert(log_request_end.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOG_REQUEST_END(cur_dst);
                dst.pull_(new LOG_REQUEST_END_src_adapter(log_request_end));
                Debug.Assert(log_request_end.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(log_request_end)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_INJECT_DATA -------------------------");
            var gps_inject_data = CommunicationChannel.NEW.GPS_INJECT_DATA(cur);
            fill(gps_inject_data);
            onGPS_INJECT_DATA(gps_inject_data);
            {
                var dst = CommunicationChannel.NEW.GPS_INJECT_DATA(cur_dst);
                gps_inject_data.push_(new GPS_INJECT_DATA_dst_adapter(dst));
                Debug.Assert(gps_inject_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GPS_INJECT_DATA(cur_dst);
                dst.pull_(new GPS_INJECT_DATA_src_adapter(gps_inject_data));
                Debug.Assert(gps_inject_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gps_inject_data)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS2_RAW -------------------------");
            var gps2_raw = CommunicationChannel.NEW.GPS2_RAW(cur);
            fill(gps2_raw);
            onGPS2_RAW(gps2_raw);
            {
                var dst = CommunicationChannel.NEW.GPS2_RAW(cur_dst);
                gps2_raw.push_(new GPS2_RAW_dst_adapter(dst));
                Debug.Assert(gps2_raw.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GPS2_RAW(cur_dst);
                dst.pull_(new GPS2_RAW_src_adapter(gps2_raw));
                Debug.Assert(gps2_raw.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gps2_raw)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- POWER_STATUS -------------------------");
            var power_status = CommunicationChannel.NEW.POWER_STATUS(cur);
            fill(power_status);
            onPOWER_STATUS(power_status);
            {
                var dst = CommunicationChannel.NEW.POWER_STATUS(cur_dst);
                power_status.push_(new POWER_STATUS_dst_adapter(dst));
                Debug.Assert(power_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.POWER_STATUS(cur_dst);
                dst.pull_(new POWER_STATUS_src_adapter(power_status));
                Debug.Assert(power_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(power_status)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SERIAL_CONTROL -------------------------");
            var serial_control = CommunicationChannel.NEW.SERIAL_CONTROL(cur);
            fill(serial_control);
            onSERIAL_CONTROL(serial_control);
            {
                var dst = CommunicationChannel.NEW.SERIAL_CONTROL(cur_dst);
                serial_control.push_(new SERIAL_CONTROL_dst_adapter(dst));
                Debug.Assert(serial_control.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SERIAL_CONTROL(cur_dst);
                dst.pull_(new SERIAL_CONTROL_src_adapter(serial_control));
                Debug.Assert(serial_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(serial_control)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_RTK -------------------------");
            var gps_rtk = CommunicationChannel.NEW.GPS_RTK(cur);
            fill(gps_rtk);
            onGPS_RTK(gps_rtk);
            {
                var dst = CommunicationChannel.NEW.GPS_RTK(cur_dst);
                gps_rtk.push_(new GPS_RTK_dst_adapter(dst));
                Debug.Assert(gps_rtk.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GPS_RTK(cur_dst);
                dst.pull_(new GPS_RTK_src_adapter(gps_rtk));
                Debug.Assert(gps_rtk.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gps_rtk)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS2_RTK -------------------------");
            var gps2_rtk = CommunicationChannel.NEW.GPS2_RTK(cur);
            fill(gps2_rtk);
            onGPS2_RTK(gps2_rtk);
            {
                var dst = CommunicationChannel.NEW.GPS2_RTK(cur_dst);
                gps2_rtk.push_(new GPS2_RTK_dst_adapter(dst));
                Debug.Assert(gps2_rtk.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GPS2_RTK(cur_dst);
                dst.pull_(new GPS2_RTK_src_adapter(gps2_rtk));
                Debug.Assert(gps2_rtk.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gps2_rtk)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SCALED_IMU3 -------------------------");
            var scaled_imu3 = CommunicationChannel.NEW.SCALED_IMU3(cur);
            fill(scaled_imu3);
            onSCALED_IMU3(scaled_imu3);
            {
                var dst = CommunicationChannel.NEW.SCALED_IMU3(cur_dst);
                scaled_imu3.push_(new SCALED_IMU3_dst_adapter(dst));
                Debug.Assert(scaled_imu3.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SCALED_IMU3(cur_dst);
                dst.pull_(new SCALED_IMU3_src_adapter(scaled_imu3));
                Debug.Assert(scaled_imu3.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(scaled_imu3)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DATA_TRANSMISSION_HANDSHAKE -------------------------");
            var data_transmission_handshake = CommunicationChannel.NEW.DATA_TRANSMISSION_HANDSHAKE(cur);
            fill(data_transmission_handshake);
            onDATA_TRANSMISSION_HANDSHAKE(data_transmission_handshake);
            {
                var dst = CommunicationChannel.NEW.DATA_TRANSMISSION_HANDSHAKE(cur_dst);
                data_transmission_handshake.push_(new DATA_TRANSMISSION_HANDSHAKE_dst_adapter(dst));
                Debug.Assert(data_transmission_handshake.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DATA_TRANSMISSION_HANDSHAKE(cur_dst);
                dst.pull_(new DATA_TRANSMISSION_HANDSHAKE_src_adapter(data_transmission_handshake));
                Debug.Assert(data_transmission_handshake.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(data_transmission_handshake)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ENCAPSULATED_DATA -------------------------");
            var encapsulated_data = CommunicationChannel.NEW.ENCAPSULATED_DATA(cur);
            fill(encapsulated_data);
            onENCAPSULATED_DATA(encapsulated_data);
            {
                var dst = CommunicationChannel.NEW.ENCAPSULATED_DATA(cur_dst);
                encapsulated_data.push_(new ENCAPSULATED_DATA_dst_adapter(dst));
                Debug.Assert(encapsulated_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ENCAPSULATED_DATA(cur_dst);
                dst.pull_(new ENCAPSULATED_DATA_src_adapter(encapsulated_data));
                Debug.Assert(encapsulated_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(encapsulated_data)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DISTANCE_SENSOR -------------------------");
            var distance_sensor = CommunicationChannel.NEW.DISTANCE_SENSOR(cur);
            fill(distance_sensor);
            onDISTANCE_SENSOR(distance_sensor);
            {
                var dst = CommunicationChannel.NEW.DISTANCE_SENSOR(cur_dst);
                distance_sensor.push_(new DISTANCE_SENSOR_dst_adapter(dst));
                Debug.Assert(distance_sensor.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DISTANCE_SENSOR(cur_dst);
                dst.pull_(new DISTANCE_SENSOR_src_adapter(distance_sensor));
                Debug.Assert(distance_sensor.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(distance_sensor)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- TERRAIN_REQUEST -------------------------");
            var terrain_request = CommunicationChannel.NEW.TERRAIN_REQUEST(cur);
            fill(terrain_request);
            onTERRAIN_REQUEST(terrain_request);
            {
                var dst = CommunicationChannel.NEW.TERRAIN_REQUEST(cur_dst);
                terrain_request.push_(new TERRAIN_REQUEST_dst_adapter(dst));
                Debug.Assert(terrain_request.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.TERRAIN_REQUEST(cur_dst);
                dst.pull_(new TERRAIN_REQUEST_src_adapter(terrain_request));
                Debug.Assert(terrain_request.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(terrain_request)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- TERRAIN_DATA -------------------------");
            var terrain_data = CommunicationChannel.NEW.TERRAIN_DATA(cur);
            fill(terrain_data);
            onTERRAIN_DATA(terrain_data);
            {
                var dst = CommunicationChannel.NEW.TERRAIN_DATA(cur_dst);
                terrain_data.push_(new TERRAIN_DATA_dst_adapter(dst));
                Debug.Assert(terrain_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.TERRAIN_DATA(cur_dst);
                dst.pull_(new TERRAIN_DATA_src_adapter(terrain_data));
                Debug.Assert(terrain_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(terrain_data)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- TERRAIN_CHECK -------------------------");
            var terrain_check = CommunicationChannel.NEW.TERRAIN_CHECK(cur);
            fill(terrain_check);
            onTERRAIN_CHECK(terrain_check);
            {
                var dst = CommunicationChannel.NEW.TERRAIN_CHECK(cur_dst);
                terrain_check.push_(new TERRAIN_CHECK_dst_adapter(dst));
                Debug.Assert(terrain_check.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.TERRAIN_CHECK(cur_dst);
                dst.pull_(new TERRAIN_CHECK_src_adapter(terrain_check));
                Debug.Assert(terrain_check.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(terrain_check)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- TERRAIN_REPORT -------------------------");
            var terrain_report = CommunicationChannel.NEW.TERRAIN_REPORT(cur);
            fill(terrain_report);
            onTERRAIN_REPORT(terrain_report);
            {
                var dst = CommunicationChannel.NEW.TERRAIN_REPORT(cur_dst);
                terrain_report.push_(new TERRAIN_REPORT_dst_adapter(dst));
                Debug.Assert(terrain_report.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.TERRAIN_REPORT(cur_dst);
                dst.pull_(new TERRAIN_REPORT_src_adapter(terrain_report));
                Debug.Assert(terrain_report.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(terrain_report)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SCALED_PRESSURE2 -------------------------");
            var scaled_pressure2 = CommunicationChannel.NEW.SCALED_PRESSURE2(cur);
            fill(scaled_pressure2);
            onSCALED_PRESSURE2(scaled_pressure2);
            {
                var dst = CommunicationChannel.NEW.SCALED_PRESSURE2(cur_dst);
                scaled_pressure2.push_(new SCALED_PRESSURE2_dst_adapter(dst));
                Debug.Assert(scaled_pressure2.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SCALED_PRESSURE2(cur_dst);
                dst.pull_(new SCALED_PRESSURE2_src_adapter(scaled_pressure2));
                Debug.Assert(scaled_pressure2.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(scaled_pressure2)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ATT_POS_MOCAP -------------------------");
            var att_pos_mocap = CommunicationChannel.NEW.ATT_POS_MOCAP(cur);
            fill(att_pos_mocap);
            onATT_POS_MOCAP(att_pos_mocap);
            {
                var dst = CommunicationChannel.NEW.ATT_POS_MOCAP(cur_dst);
                att_pos_mocap.push_(new ATT_POS_MOCAP_dst_adapter(dst));
                Debug.Assert(att_pos_mocap.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ATT_POS_MOCAP(cur_dst);
                dst.pull_(new ATT_POS_MOCAP_src_adapter(att_pos_mocap));
                Debug.Assert(att_pos_mocap.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(att_pos_mocap)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_ACTUATOR_CONTROL_TARGET -------------------------");
            var set_actuator_control_target = CommunicationChannel.NEW.SET_ACTUATOR_CONTROL_TARGET(cur);
            fill(set_actuator_control_target);
            onSET_ACTUATOR_CONTROL_TARGET(set_actuator_control_target);
            {
                var dst = CommunicationChannel.NEW.SET_ACTUATOR_CONTROL_TARGET(cur_dst);
                set_actuator_control_target.push_(new SET_ACTUATOR_CONTROL_TARGET_dst_adapter(dst));
                Debug.Assert(set_actuator_control_target.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SET_ACTUATOR_CONTROL_TARGET(cur_dst);
                dst.pull_(new SET_ACTUATOR_CONTROL_TARGET_src_adapter(set_actuator_control_target));
                Debug.Assert(set_actuator_control_target.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(set_actuator_control_target)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ACTUATOR_CONTROL_TARGET -------------------------");
            var actuator_control_target = CommunicationChannel.NEW.ACTUATOR_CONTROL_TARGET(cur);
            fill(actuator_control_target);
            onACTUATOR_CONTROL_TARGET(actuator_control_target);
            {
                var dst = CommunicationChannel.NEW.ACTUATOR_CONTROL_TARGET(cur_dst);
                actuator_control_target.push_(new ACTUATOR_CONTROL_TARGET_dst_adapter(dst));
                Debug.Assert(actuator_control_target.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ACTUATOR_CONTROL_TARGET(cur_dst);
                dst.pull_(new ACTUATOR_CONTROL_TARGET_src_adapter(actuator_control_target));
                Debug.Assert(actuator_control_target.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(actuator_control_target)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ALTITUDE -------------------------");
            var altitude = CommunicationChannel.NEW.ALTITUDE(cur);
            fill(altitude);
            onALTITUDE(altitude);
            {
                var dst = CommunicationChannel.NEW.ALTITUDE(cur_dst);
                altitude.push_(new ALTITUDE_dst_adapter(dst));
                Debug.Assert(altitude.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ALTITUDE(cur_dst);
                dst.pull_(new ALTITUDE_src_adapter(altitude));
                Debug.Assert(altitude.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(altitude)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RESOURCE_REQUEST -------------------------");
            var resource_request = CommunicationChannel.NEW.RESOURCE_REQUEST(cur);
            fill(resource_request);
            onRESOURCE_REQUEST(resource_request);
            {
                var dst = CommunicationChannel.NEW.RESOURCE_REQUEST(cur_dst);
                resource_request.push_(new RESOURCE_REQUEST_dst_adapter(dst));
                Debug.Assert(resource_request.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RESOURCE_REQUEST(cur_dst);
                dst.pull_(new RESOURCE_REQUEST_src_adapter(resource_request));
                Debug.Assert(resource_request.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(resource_request)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SCALED_PRESSURE3 -------------------------");
            var scaled_pressure3 = CommunicationChannel.NEW.SCALED_PRESSURE3(cur);
            fill(scaled_pressure3);
            onSCALED_PRESSURE3(scaled_pressure3);
            {
                var dst = CommunicationChannel.NEW.SCALED_PRESSURE3(cur_dst);
                scaled_pressure3.push_(new SCALED_PRESSURE3_dst_adapter(dst));
                Debug.Assert(scaled_pressure3.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SCALED_PRESSURE3(cur_dst);
                dst.pull_(new SCALED_PRESSURE3_src_adapter(scaled_pressure3));
                Debug.Assert(scaled_pressure3.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(scaled_pressure3)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- FOLLOW_TARGET -------------------------");
            var follow_target = CommunicationChannel.NEW.FOLLOW_TARGET(cur);
            fill(follow_target);
            onFOLLOW_TARGET(follow_target);
            {
                var dst = CommunicationChannel.NEW.FOLLOW_TARGET(cur_dst);
                follow_target.push_(new FOLLOW_TARGET_dst_adapter(dst));
                Debug.Assert(follow_target.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.FOLLOW_TARGET(cur_dst);
                dst.pull_(new FOLLOW_TARGET_src_adapter(follow_target));
                Debug.Assert(follow_target.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(follow_target)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CONTROL_SYSTEM_STATE -------------------------");
            var control_system_state = CommunicationChannel.NEW.CONTROL_SYSTEM_STATE(cur);
            fill(control_system_state);
            onCONTROL_SYSTEM_STATE(control_system_state);
            {
                var dst = CommunicationChannel.NEW.CONTROL_SYSTEM_STATE(cur_dst);
                control_system_state.push_(new CONTROL_SYSTEM_STATE_dst_adapter(dst));
                Debug.Assert(control_system_state.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CONTROL_SYSTEM_STATE(cur_dst);
                dst.pull_(new CONTROL_SYSTEM_STATE_src_adapter(control_system_state));
                Debug.Assert(control_system_state.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(control_system_state)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- BATTERY_STATUS -------------------------");
            var battery_status = CommunicationChannel.NEW.BATTERY_STATUS(cur);
            fill(battery_status);
            onBATTERY_STATUS(battery_status);
            {
                var dst = CommunicationChannel.NEW.BATTERY_STATUS(cur_dst);
                battery_status.push_(new BATTERY_STATUS_dst_adapter(dst));
                Debug.Assert(battery_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.BATTERY_STATUS(cur_dst);
                dst.pull_(new BATTERY_STATUS_src_adapter(battery_status));
                Debug.Assert(battery_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(battery_status)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AUTOPILOT_VERSION -------------------------");
            var autopilot_version = CommunicationChannel.NEW.AUTOPILOT_VERSION(cur);
            fill(autopilot_version);
            onAUTOPILOT_VERSION(autopilot_version);
            {
                var dst = CommunicationChannel.NEW.AUTOPILOT_VERSION(cur_dst);
                autopilot_version.push_(new AUTOPILOT_VERSION_dst_adapter(dst));
                Debug.Assert(autopilot_version.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AUTOPILOT_VERSION(cur_dst);
                dst.pull_(new AUTOPILOT_VERSION_src_adapter(autopilot_version));
                Debug.Assert(autopilot_version.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(autopilot_version)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LANDING_TARGET -------------------------");
            var landing_target = CommunicationChannel.NEW.LANDING_TARGET(cur);
            fill(landing_target);
            onLANDING_TARGET(landing_target);
            {
                var dst = CommunicationChannel.NEW.LANDING_TARGET(cur_dst);
                landing_target.push_(new LANDING_TARGET_dst_adapter(dst));
                Debug.Assert(landing_target.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LANDING_TARGET(cur_dst);
                dst.pull_(new LANDING_TARGET_src_adapter(landing_target));
                Debug.Assert(landing_target.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(landing_target)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ESTIMATOR_STATUS -------------------------");
            var estimator_status = CommunicationChannel.NEW.ESTIMATOR_STATUS(cur);
            fill(estimator_status);
            onESTIMATOR_STATUS(estimator_status);
            {
                var dst = CommunicationChannel.NEW.ESTIMATOR_STATUS(cur_dst);
                estimator_status.push_(new ESTIMATOR_STATUS_dst_adapter(dst));
                Debug.Assert(estimator_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ESTIMATOR_STATUS(cur_dst);
                dst.pull_(new ESTIMATOR_STATUS_src_adapter(estimator_status));
                Debug.Assert(estimator_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(estimator_status)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- WIND_COV -------------------------");
            var wind_cov = CommunicationChannel.NEW.WIND_COV(cur);
            fill(wind_cov);
            onWIND_COV(wind_cov);
            {
                var dst = CommunicationChannel.NEW.WIND_COV(cur_dst);
                wind_cov.push_(new WIND_COV_dst_adapter(dst));
                Debug.Assert(wind_cov.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.WIND_COV(cur_dst);
                dst.pull_(new WIND_COV_src_adapter(wind_cov));
                Debug.Assert(wind_cov.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(wind_cov)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_INPUT -------------------------");
            var gps_input = CommunicationChannel.NEW.GPS_INPUT(cur);
            fill(gps_input);
            onGPS_INPUT(gps_input);
            {
                var dst = CommunicationChannel.NEW.GPS_INPUT(cur_dst);
                gps_input.push_(new GPS_INPUT_dst_adapter(dst));
                Debug.Assert(gps_input.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GPS_INPUT(cur_dst);
                dst.pull_(new GPS_INPUT_src_adapter(gps_input));
                Debug.Assert(gps_input.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gps_input)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GPS_RTCM_DATA -------------------------");
            var gps_rtcm_data = CommunicationChannel.NEW.GPS_RTCM_DATA(cur);
            fill(gps_rtcm_data);
            onGPS_RTCM_DATA(gps_rtcm_data);
            {
                var dst = CommunicationChannel.NEW.GPS_RTCM_DATA(cur_dst);
                gps_rtcm_data.push_(new GPS_RTCM_DATA_dst_adapter(dst));
                Debug.Assert(gps_rtcm_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GPS_RTCM_DATA(cur_dst);
                dst.pull_(new GPS_RTCM_DATA_src_adapter(gps_rtcm_data));
                Debug.Assert(gps_rtcm_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gps_rtcm_data)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HIGH_LATENCY -------------------------");
            var high_latency = CommunicationChannel.NEW.HIGH_LATENCY(cur);
            fill(high_latency);
            onHIGH_LATENCY(high_latency);
            {
                var dst = CommunicationChannel.NEW.HIGH_LATENCY(cur_dst);
                high_latency.push_(new HIGH_LATENCY_dst_adapter(dst));
                Debug.Assert(high_latency.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HIGH_LATENCY(cur_dst);
                dst.pull_(new HIGH_LATENCY_src_adapter(high_latency));
                Debug.Assert(high_latency.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(high_latency)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VIBRATION -------------------------");
            var vibration = CommunicationChannel.NEW.VIBRATION(cur);
            fill(vibration);
            onVIBRATION(vibration);
            {
                var dst = CommunicationChannel.NEW.VIBRATION(cur_dst);
                vibration.push_(new VIBRATION_dst_adapter(dst));
                Debug.Assert(vibration.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.VIBRATION(cur_dst);
                dst.pull_(new VIBRATION_src_adapter(vibration));
                Debug.Assert(vibration.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(vibration)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HOME_POSITION -------------------------");
            var home_position = CommunicationChannel.NEW.HOME_POSITION(cur);
            fill(home_position);
            onHOME_POSITION(home_position);
            {
                var dst = CommunicationChannel.NEW.HOME_POSITION(cur_dst);
                home_position.push_(new HOME_POSITION_dst_adapter(dst));
                Debug.Assert(home_position.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HOME_POSITION(cur_dst);
                dst.pull_(new HOME_POSITION_src_adapter(home_position));
                Debug.Assert(home_position.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(home_position)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_HOME_POSITION -------------------------");
            var set_home_position = CommunicationChannel.NEW.SET_HOME_POSITION(cur);
            fill(set_home_position);
            onSET_HOME_POSITION(set_home_position);
            {
                var dst = CommunicationChannel.NEW.SET_HOME_POSITION(cur_dst);
                set_home_position.push_(new SET_HOME_POSITION_dst_adapter(dst));
                Debug.Assert(set_home_position.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SET_HOME_POSITION(cur_dst);
                dst.pull_(new SET_HOME_POSITION_src_adapter(set_home_position));
                Debug.Assert(set_home_position.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(set_home_position)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MESSAGE_INTERVAL -------------------------");
            var message_interval = CommunicationChannel.NEW.MESSAGE_INTERVAL(cur);
            fill(message_interval);
            onMESSAGE_INTERVAL(message_interval);
            {
                var dst = CommunicationChannel.NEW.MESSAGE_INTERVAL(cur_dst);
                message_interval.push_(new MESSAGE_INTERVAL_dst_adapter(dst));
                Debug.Assert(message_interval.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MESSAGE_INTERVAL(cur_dst);
                dst.pull_(new MESSAGE_INTERVAL_src_adapter(message_interval));
                Debug.Assert(message_interval.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(message_interval)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- EXTENDED_SYS_STATE -------------------------");
            var extended_sys_state = CommunicationChannel.NEW.EXTENDED_SYS_STATE(cur);
            fill(extended_sys_state);
            onEXTENDED_SYS_STATE(extended_sys_state);
            {
                var dst = CommunicationChannel.NEW.EXTENDED_SYS_STATE(cur_dst);
                extended_sys_state.push_(new EXTENDED_SYS_STATE_dst_adapter(dst));
                Debug.Assert(extended_sys_state.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.EXTENDED_SYS_STATE(cur_dst);
                dst.pull_(new EXTENDED_SYS_STATE_src_adapter(extended_sys_state));
                Debug.Assert(extended_sys_state.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(extended_sys_state)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ADSB_VEHICLE -------------------------");
            var adsb_vehicle = CommunicationChannel.NEW.ADSB_VEHICLE(cur);
            fill(adsb_vehicle);
            onADSB_VEHICLE(adsb_vehicle);
            {
                var dst = CommunicationChannel.NEW.ADSB_VEHICLE(cur_dst);
                adsb_vehicle.push_(new ADSB_VEHICLE_dst_adapter(dst));
                Debug.Assert(adsb_vehicle.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ADSB_VEHICLE(cur_dst);
                dst.pull_(new ADSB_VEHICLE_src_adapter(adsb_vehicle));
                Debug.Assert(adsb_vehicle.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(adsb_vehicle)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- COLLISION -------------------------");
            var collision = CommunicationChannel.NEW.COLLISION(cur);
            fill(collision);
            onCOLLISION(collision);
            {
                var dst = CommunicationChannel.NEW.COLLISION(cur_dst);
                collision.push_(new COLLISION_dst_adapter(dst));
                Debug.Assert(collision.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.COLLISION(cur_dst);
                dst.pull_(new COLLISION_src_adapter(collision));
                Debug.Assert(collision.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(collision)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- V2_EXTENSION -------------------------");
            var v2_extension = CommunicationChannel.NEW.V2_EXTENSION(cur);
            fill(v2_extension);
            onV2_EXTENSION(v2_extension);
            {
                var dst = CommunicationChannel.NEW.V2_EXTENSION(cur_dst);
                v2_extension.push_(new V2_EXTENSION_dst_adapter(dst));
                Debug.Assert(v2_extension.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.V2_EXTENSION(cur_dst);
                dst.pull_(new V2_EXTENSION_src_adapter(v2_extension));
                Debug.Assert(v2_extension.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(v2_extension)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MEMORY_VECT -------------------------");
            var memory_vect = CommunicationChannel.NEW.MEMORY_VECT(cur);
            fill(memory_vect);
            onMEMORY_VECT(memory_vect);
            {
                var dst = CommunicationChannel.NEW.MEMORY_VECT(cur_dst);
                memory_vect.push_(new MEMORY_VECT_dst_adapter(dst));
                Debug.Assert(memory_vect.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MEMORY_VECT(cur_dst);
                dst.pull_(new MEMORY_VECT_src_adapter(memory_vect));
                Debug.Assert(memory_vect.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(memory_vect)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DEBUG_VECT -------------------------");
            var debug_vect = CommunicationChannel.NEW.DEBUG_VECT(cur);
            fill(debug_vect);
            onDEBUG_VECT(debug_vect);
            {
                var dst = CommunicationChannel.NEW.DEBUG_VECT(cur_dst);
                debug_vect.push_(new DEBUG_VECT_dst_adapter(dst));
                Debug.Assert(debug_vect.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DEBUG_VECT(cur_dst);
                dst.pull_(new DEBUG_VECT_src_adapter(debug_vect));
                Debug.Assert(debug_vect.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(debug_vect)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- NAMED_VALUE_FLOAT -------------------------");
            var named_value_float = CommunicationChannel.NEW.NAMED_VALUE_FLOAT(cur);
            fill(named_value_float);
            onNAMED_VALUE_FLOAT(named_value_float);
            {
                var dst = CommunicationChannel.NEW.NAMED_VALUE_FLOAT(cur_dst);
                named_value_float.push_(new NAMED_VALUE_FLOAT_dst_adapter(dst));
                Debug.Assert(named_value_float.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.NAMED_VALUE_FLOAT(cur_dst);
                dst.pull_(new NAMED_VALUE_FLOAT_src_adapter(named_value_float));
                Debug.Assert(named_value_float.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(named_value_float)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- NAMED_VALUE_INT -------------------------");
            var named_value_int = CommunicationChannel.NEW.NAMED_VALUE_INT(cur);
            fill(named_value_int);
            onNAMED_VALUE_INT(named_value_int);
            {
                var dst = CommunicationChannel.NEW.NAMED_VALUE_INT(cur_dst);
                named_value_int.push_(new NAMED_VALUE_INT_dst_adapter(dst));
                Debug.Assert(named_value_int.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.NAMED_VALUE_INT(cur_dst);
                dst.pull_(new NAMED_VALUE_INT_src_adapter(named_value_int));
                Debug.Assert(named_value_int.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(named_value_int)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- STATUSTEXT -------------------------");
            var statustext = CommunicationChannel.NEW.STATUSTEXT(cur);
            fill(statustext);
            onSTATUSTEXT(statustext);
            {
                var dst = CommunicationChannel.NEW.STATUSTEXT(cur_dst);
                statustext.push_(new STATUSTEXT_dst_adapter(dst));
                Debug.Assert(statustext.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.STATUSTEXT(cur_dst);
                dst.pull_(new STATUSTEXT_src_adapter(statustext));
                Debug.Assert(statustext.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(statustext)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DEBUG -------------------------");
            var debug = CommunicationChannel.NEW.DEBUG(cur);
            fill(debug);
            onDEBUG(debug);
            {
                var dst = CommunicationChannel.NEW.DEBUG(cur_dst);
                debug.push_(new DEBUG_dst_adapter(dst));
                Debug.Assert(debug.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DEBUG(cur_dst);
                dst.pull_(new DEBUG_src_adapter(debug));
                Debug.Assert(debug.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(debug)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SETUP_SIGNING -------------------------");
            var setup_signing = CommunicationChannel.NEW.SETUP_SIGNING(cur);
            fill(setup_signing);
            onSETUP_SIGNING(setup_signing);
            {
                var dst = CommunicationChannel.NEW.SETUP_SIGNING(cur_dst);
                setup_signing.push_(new SETUP_SIGNING_dst_adapter(dst));
                Debug.Assert(setup_signing.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SETUP_SIGNING(cur_dst);
                dst.pull_(new SETUP_SIGNING_src_adapter(setup_signing));
                Debug.Assert(setup_signing.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(setup_signing)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- BUTTON_CHANGE -------------------------");
            var button_change = CommunicationChannel.NEW.BUTTON_CHANGE(cur);
            fill(button_change);
            onBUTTON_CHANGE(button_change);
            {
                var dst = CommunicationChannel.NEW.BUTTON_CHANGE(cur_dst);
                button_change.push_(new BUTTON_CHANGE_dst_adapter(dst));
                Debug.Assert(button_change.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.BUTTON_CHANGE(cur_dst);
                dst.pull_(new BUTTON_CHANGE_src_adapter(button_change));
                Debug.Assert(button_change.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(button_change)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PLAY_TUNE -------------------------");
            var play_tune = CommunicationChannel.NEW.PLAY_TUNE(cur);
            fill(play_tune);
            onPLAY_TUNE(play_tune);
            {
                var dst = CommunicationChannel.NEW.PLAY_TUNE(cur_dst);
                play_tune.push_(new PLAY_TUNE_dst_adapter(dst));
                Debug.Assert(play_tune.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PLAY_TUNE(cur_dst);
                dst.pull_(new PLAY_TUNE_src_adapter(play_tune));
                Debug.Assert(play_tune.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(play_tune)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_INFORMATION -------------------------");
            var camera_information = CommunicationChannel.NEW.CAMERA_INFORMATION(cur);
            fill(camera_information);
            onCAMERA_INFORMATION(camera_information);
            {
                var dst = CommunicationChannel.NEW.CAMERA_INFORMATION(cur_dst);
                camera_information.push_(new CAMERA_INFORMATION_dst_adapter(dst));
                Debug.Assert(camera_information.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_INFORMATION(cur_dst);
                dst.pull_(new CAMERA_INFORMATION_src_adapter(camera_information));
                Debug.Assert(camera_information.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_information)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_SETTINGS -------------------------");
            var camera_settings = CommunicationChannel.NEW.CAMERA_SETTINGS(cur);
            fill(camera_settings);
            onCAMERA_SETTINGS(camera_settings);
            {
                var dst = CommunicationChannel.NEW.CAMERA_SETTINGS(cur_dst);
                camera_settings.push_(new CAMERA_SETTINGS_dst_adapter(dst));
                Debug.Assert(camera_settings.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_SETTINGS(cur_dst);
                dst.pull_(new CAMERA_SETTINGS_src_adapter(camera_settings));
                Debug.Assert(camera_settings.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_settings)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- STORAGE_INFORMATION -------------------------");
            var storage_information = CommunicationChannel.NEW.STORAGE_INFORMATION(cur);
            fill(storage_information);
            onSTORAGE_INFORMATION(storage_information);
            {
                var dst = CommunicationChannel.NEW.STORAGE_INFORMATION(cur_dst);
                storage_information.push_(new STORAGE_INFORMATION_dst_adapter(dst));
                Debug.Assert(storage_information.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.STORAGE_INFORMATION(cur_dst);
                dst.pull_(new STORAGE_INFORMATION_src_adapter(storage_information));
                Debug.Assert(storage_information.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(storage_information)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_CAPTURE_STATUS -------------------------");
            var camera_capture_status = CommunicationChannel.NEW.CAMERA_CAPTURE_STATUS(cur);
            fill(camera_capture_status);
            onCAMERA_CAPTURE_STATUS(camera_capture_status);
            {
                var dst = CommunicationChannel.NEW.CAMERA_CAPTURE_STATUS(cur_dst);
                camera_capture_status.push_(new CAMERA_CAPTURE_STATUS_dst_adapter(dst));
                Debug.Assert(camera_capture_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_CAPTURE_STATUS(cur_dst);
                dst.pull_(new CAMERA_CAPTURE_STATUS_src_adapter(camera_capture_status));
                Debug.Assert(camera_capture_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_capture_status)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_IMAGE_CAPTURED -------------------------");
            var camera_image_captured = CommunicationChannel.NEW.CAMERA_IMAGE_CAPTURED(cur);
            fill(camera_image_captured);
            onCAMERA_IMAGE_CAPTURED(camera_image_captured);
            {
                var dst = CommunicationChannel.NEW.CAMERA_IMAGE_CAPTURED(cur_dst);
                camera_image_captured.push_(new CAMERA_IMAGE_CAPTURED_dst_adapter(dst));
                Debug.Assert(camera_image_captured.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_IMAGE_CAPTURED(cur_dst);
                dst.pull_(new CAMERA_IMAGE_CAPTURED_src_adapter(camera_image_captured));
                Debug.Assert(camera_image_captured.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_image_captured)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- FLIGHT_INFORMATION -------------------------");
            var flight_information = CommunicationChannel.NEW.FLIGHT_INFORMATION(cur);
            fill(flight_information);
            onFLIGHT_INFORMATION(flight_information);
            {
                var dst = CommunicationChannel.NEW.FLIGHT_INFORMATION(cur_dst);
                flight_information.push_(new FLIGHT_INFORMATION_dst_adapter(dst));
                Debug.Assert(flight_information.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.FLIGHT_INFORMATION(cur_dst);
                dst.pull_(new FLIGHT_INFORMATION_src_adapter(flight_information));
                Debug.Assert(flight_information.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(flight_information)) CommunicationChannel_instance.CopyTo(CommunicationChannel_instance);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MOUNT_ORIENTATION -------------------------");
            var mount_orientation = CommunicationChannel.NEW.MOUNT_ORIENTATION(cur);
            fill(mount_orientation);
            onMOUNT_ORIENTATION(mount_orientation);
            {
                var dst = CommunicationChannel.NEW.MOUNT_ORIENTATION(cur_dst);
                mount_orientation.push_(new MOUNT_ORIENTATION_dst_adapter(dst));
                Debug.Assert(mount_orientation.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MOUNT_ORIENTATION(cur_dst);
                dst.pull_(new MOUNT_ORIENTATION_src_adapter(mount_orientation));
                Debug.Assert(mount_orientation.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(mount_orientation)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOGGING_DATA -------------------------");
            var logging_data = CommunicationChannel.NEW.LOGGING_DATA(cur);
            fill(logging_data);
            onLOGGING_DATA(logging_data);
            {
                var dst = CommunicationChannel.NEW.LOGGING_DATA(cur_dst);
                logging_data.push_(new LOGGING_DATA_dst_adapter(dst));
                Debug.Assert(logging_data.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOGGING_DATA(cur_dst);
                dst.pull_(new LOGGING_DATA_src_adapter(logging_data));
                Debug.Assert(logging_data.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(logging_data)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOGGING_DATA_ACKED -------------------------");
            var logging_data_acked = CommunicationChannel.NEW.LOGGING_DATA_ACKED(cur);
            fill(logging_data_acked);
            onLOGGING_DATA_ACKED(logging_data_acked);
            {
                var dst = CommunicationChannel.NEW.LOGGING_DATA_ACKED(cur_dst);
                logging_data_acked.push_(new LOGGING_DATA_ACKED_dst_adapter(dst));
                Debug.Assert(logging_data_acked.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOGGING_DATA_ACKED(cur_dst);
                dst.pull_(new LOGGING_DATA_ACKED_src_adapter(logging_data_acked));
                Debug.Assert(logging_data_acked.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(logging_data_acked)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LOGGING_ACK -------------------------");
            var logging_ack = CommunicationChannel.NEW.LOGGING_ACK(cur);
            fill(logging_ack);
            onLOGGING_ACK(logging_ack);
            {
                var dst = CommunicationChannel.NEW.LOGGING_ACK(cur_dst);
                logging_ack.push_(new LOGGING_ACK_dst_adapter(dst));
                Debug.Assert(logging_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LOGGING_ACK(cur_dst);
                dst.pull_(new LOGGING_ACK_src_adapter(logging_ack));
                Debug.Assert(logging_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(logging_ack)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VIDEO_STREAM_INFORMATION -------------------------");
            var video_stream_information = CommunicationChannel.NEW.VIDEO_STREAM_INFORMATION(cur);
            fill(video_stream_information);
            onVIDEO_STREAM_INFORMATION(video_stream_information);
            {
                var dst = CommunicationChannel.NEW.VIDEO_STREAM_INFORMATION(cur_dst);
                video_stream_information.push_(new VIDEO_STREAM_INFORMATION_dst_adapter(dst));
                Debug.Assert(video_stream_information.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.VIDEO_STREAM_INFORMATION(cur_dst);
                dst.pull_(new VIDEO_STREAM_INFORMATION_src_adapter(video_stream_information));
                Debug.Assert(video_stream_information.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(video_stream_information)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_VIDEO_STREAM_SETTINGS -------------------------");
            var set_video_stream_settings = CommunicationChannel.NEW.SET_VIDEO_STREAM_SETTINGS(cur);
            fill(set_video_stream_settings);
            onSET_VIDEO_STREAM_SETTINGS(set_video_stream_settings);
            {
                var dst = CommunicationChannel.NEW.SET_VIDEO_STREAM_SETTINGS(cur_dst);
                set_video_stream_settings.push_(new SET_VIDEO_STREAM_SETTINGS_dst_adapter(dst));
                Debug.Assert(set_video_stream_settings.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SET_VIDEO_STREAM_SETTINGS(cur_dst);
                dst.pull_(new SET_VIDEO_STREAM_SETTINGS_src_adapter(set_video_stream_settings));
                Debug.Assert(set_video_stream_settings.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(set_video_stream_settings)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- WIFI_CONFIG_AP -------------------------");
            var wifi_config_ap = CommunicationChannel.NEW.WIFI_CONFIG_AP(cur);
            fill(wifi_config_ap);
            onWIFI_CONFIG_AP(wifi_config_ap);
            {
                var dst = CommunicationChannel.NEW.WIFI_CONFIG_AP(cur_dst);
                wifi_config_ap.push_(new WIFI_CONFIG_AP_dst_adapter(dst));
                Debug.Assert(wifi_config_ap.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.WIFI_CONFIG_AP(cur_dst);
                dst.pull_(new WIFI_CONFIG_AP_src_adapter(wifi_config_ap));
                Debug.Assert(wifi_config_ap.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(wifi_config_ap)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PROTOCOL_VERSION -------------------------");
            var protocol_version = CommunicationChannel.NEW.PROTOCOL_VERSION(cur);
            fill(protocol_version);
            onPROTOCOL_VERSION(protocol_version);
            {
                var dst = CommunicationChannel.NEW.PROTOCOL_VERSION(cur_dst);
                protocol_version.push_(new PROTOCOL_VERSION_dst_adapter(dst));
                Debug.Assert(protocol_version.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PROTOCOL_VERSION(cur_dst);
                dst.pull_(new PROTOCOL_VERSION_src_adapter(protocol_version));
                Debug.Assert(protocol_version.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(protocol_version)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- UAVCAN_NODE_STATUS -------------------------");
            var uavcan_node_status = CommunicationChannel.NEW.UAVCAN_NODE_STATUS(cur);
            fill(uavcan_node_status);
            onUAVCAN_NODE_STATUS(uavcan_node_status);
            {
                var dst = CommunicationChannel.NEW.UAVCAN_NODE_STATUS(cur_dst);
                uavcan_node_status.push_(new UAVCAN_NODE_STATUS_dst_adapter(dst));
                Debug.Assert(uavcan_node_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.UAVCAN_NODE_STATUS(cur_dst);
                dst.pull_(new UAVCAN_NODE_STATUS_src_adapter(uavcan_node_status));
                Debug.Assert(uavcan_node_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(uavcan_node_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- UAVCAN_NODE_INFO -------------------------");
            var uavcan_node_info = CommunicationChannel.NEW.UAVCAN_NODE_INFO(cur);
            fill(uavcan_node_info);
            onUAVCAN_NODE_INFO(uavcan_node_info);
            {
                var dst = CommunicationChannel.NEW.UAVCAN_NODE_INFO(cur_dst);
                uavcan_node_info.push_(new UAVCAN_NODE_INFO_dst_adapter(dst));
                Debug.Assert(uavcan_node_info.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.UAVCAN_NODE_INFO(cur_dst);
                dst.pull_(new UAVCAN_NODE_INFO_src_adapter(uavcan_node_info));
                Debug.Assert(uavcan_node_info.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(uavcan_node_info)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_EXT_REQUEST_READ -------------------------");
            var param_ext_request_read = CommunicationChannel.NEW.PARAM_EXT_REQUEST_READ(cur);
            fill(param_ext_request_read);
            onPARAM_EXT_REQUEST_READ(param_ext_request_read);
            {
                var dst = CommunicationChannel.NEW.PARAM_EXT_REQUEST_READ(cur_dst);
                param_ext_request_read.push_(new PARAM_EXT_REQUEST_READ_dst_adapter(dst));
                Debug.Assert(param_ext_request_read.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PARAM_EXT_REQUEST_READ(cur_dst);
                dst.pull_(new PARAM_EXT_REQUEST_READ_src_adapter(param_ext_request_read));
                Debug.Assert(param_ext_request_read.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(param_ext_request_read)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_EXT_REQUEST_LIST -------------------------");
            var param_ext_request_list = CommunicationChannel.NEW.PARAM_EXT_REQUEST_LIST(cur);
            fill(param_ext_request_list);
            onPARAM_EXT_REQUEST_LIST(param_ext_request_list);
            {
                var dst = CommunicationChannel.NEW.PARAM_EXT_REQUEST_LIST(cur_dst);
                param_ext_request_list.push_(new PARAM_EXT_REQUEST_LIST_dst_adapter(dst));
                Debug.Assert(param_ext_request_list.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PARAM_EXT_REQUEST_LIST(cur_dst);
                dst.pull_(new PARAM_EXT_REQUEST_LIST_src_adapter(param_ext_request_list));
                Debug.Assert(param_ext_request_list.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(param_ext_request_list)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_EXT_VALUE -------------------------");
            var param_ext_value = CommunicationChannel.NEW.PARAM_EXT_VALUE(cur);
            fill(param_ext_value);
            onPARAM_EXT_VALUE(param_ext_value);
            {
                var dst = CommunicationChannel.NEW.PARAM_EXT_VALUE(cur_dst);
                param_ext_value.push_(new PARAM_EXT_VALUE_dst_adapter(dst));
                Debug.Assert(param_ext_value.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PARAM_EXT_VALUE(cur_dst);
                dst.pull_(new PARAM_EXT_VALUE_src_adapter(param_ext_value));
                Debug.Assert(param_ext_value.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(param_ext_value)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_EXT_SET -------------------------");
            var param_ext_set = CommunicationChannel.NEW.PARAM_EXT_SET(cur);
            fill(param_ext_set);
            onPARAM_EXT_SET(param_ext_set);
            {
                var dst = CommunicationChannel.NEW.PARAM_EXT_SET(cur_dst);
                param_ext_set.push_(new PARAM_EXT_SET_dst_adapter(dst));
                Debug.Assert(param_ext_set.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PARAM_EXT_SET(cur_dst);
                dst.pull_(new PARAM_EXT_SET_src_adapter(param_ext_set));
                Debug.Assert(param_ext_set.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(param_ext_set)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PARAM_EXT_ACK -------------------------");
            var param_ext_ack = CommunicationChannel.NEW.PARAM_EXT_ACK(cur);
            fill(param_ext_ack);
            onPARAM_EXT_ACK(param_ext_ack);
            {
                var dst = CommunicationChannel.NEW.PARAM_EXT_ACK(cur_dst);
                param_ext_ack.push_(new PARAM_EXT_ACK_dst_adapter(dst));
                Debug.Assert(param_ext_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PARAM_EXT_ACK(cur_dst);
                dst.pull_(new PARAM_EXT_ACK_src_adapter(param_ext_ack));
                Debug.Assert(param_ext_ack.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(param_ext_ack)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- OBSTACLE_DISTANCE -------------------------");
            var obstacle_distance = CommunicationChannel.NEW.OBSTACLE_DISTANCE(cur);
            fill(obstacle_distance);
            onOBSTACLE_DISTANCE(obstacle_distance);
            {
                var dst = CommunicationChannel.NEW.OBSTACLE_DISTANCE(cur_dst);
                obstacle_distance.push_(new OBSTACLE_DISTANCE_dst_adapter(dst));
                Debug.Assert(obstacle_distance.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.OBSTACLE_DISTANCE(cur_dst);
                dst.pull_(new OBSTACLE_DISTANCE_src_adapter(obstacle_distance));
                Debug.Assert(obstacle_distance.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(obstacle_distance)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- UAVIONIX_ADSB_OUT_CFG -------------------------");
            var uavionix_adsb_out_cfg = CommunicationChannel.NEW.UAVIONIX_ADSB_OUT_CFG(cur);
            fill(uavionix_adsb_out_cfg);
            onUAVIONIX_ADSB_OUT_CFG(uavionix_adsb_out_cfg);
            {
                var dst = CommunicationChannel.NEW.UAVIONIX_ADSB_OUT_CFG(cur_dst);
                uavionix_adsb_out_cfg.push_(new UAVIONIX_ADSB_OUT_CFG_dst_adapter(dst));
                Debug.Assert(uavionix_adsb_out_cfg.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.UAVIONIX_ADSB_OUT_CFG(cur_dst);
                dst.pull_(new UAVIONIX_ADSB_OUT_CFG_src_adapter(uavionix_adsb_out_cfg));
                Debug.Assert(uavionix_adsb_out_cfg.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(uavionix_adsb_out_cfg)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- UAVIONIX_ADSB_OUT_DYNAMIC -------------------------");
            var uavionix_adsb_out_dynamic = CommunicationChannel.NEW.UAVIONIX_ADSB_OUT_DYNAMIC(cur);
            fill(uavionix_adsb_out_dynamic);
            onUAVIONIX_ADSB_OUT_DYNAMIC(uavionix_adsb_out_dynamic);
            {
                var dst = CommunicationChannel.NEW.UAVIONIX_ADSB_OUT_DYNAMIC(cur_dst);
                uavionix_adsb_out_dynamic.push_(new UAVIONIX_ADSB_OUT_DYNAMIC_dst_adapter(dst));
                Debug.Assert(uavionix_adsb_out_dynamic.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.UAVIONIX_ADSB_OUT_DYNAMIC(cur_dst);
                dst.pull_(new UAVIONIX_ADSB_OUT_DYNAMIC_src_adapter(uavionix_adsb_out_dynamic));
                Debug.Assert(uavionix_adsb_out_dynamic.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(uavionix_adsb_out_dynamic)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT -------------------------");
            var uavionix_adsb_transceiver_health_report = CommunicationChannel.NEW.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(cur);
            fill(uavionix_adsb_transceiver_health_report);
            onUAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(uavionix_adsb_transceiver_health_report);
            {
                var dst = CommunicationChannel.NEW.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(cur_dst);
                uavionix_adsb_transceiver_health_report.push_(new UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_dst_adapter(dst));
                Debug.Assert(uavionix_adsb_transceiver_health_report.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT(cur_dst);
                dst.pull_(new UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_src_adapter(uavionix_adsb_transceiver_health_report));
                Debug.Assert(uavionix_adsb_transceiver_health_report.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(uavionix_adsb_transceiver_health_report)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SENSOR_OFFSETS -------------------------");
            var sensor_offsets = CommunicationChannel.NEW.SENSOR_OFFSETS(cur);
            fill(sensor_offsets);
            onSENSOR_OFFSETS(sensor_offsets);
            {
                var dst = CommunicationChannel.NEW.SENSOR_OFFSETS(cur_dst);
                sensor_offsets.push_(new SENSOR_OFFSETS_dst_adapter(dst));
                Debug.Assert(sensor_offsets.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SENSOR_OFFSETS(cur_dst);
                dst.pull_(new SENSOR_OFFSETS_src_adapter(sensor_offsets));
                Debug.Assert(sensor_offsets.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(sensor_offsets)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SET_MAG_OFFSETS -------------------------");
            var set_mag_offsets = CommunicationChannel.NEW.SET_MAG_OFFSETS(cur);
            fill(set_mag_offsets);
            onSET_MAG_OFFSETS(set_mag_offsets);
            {
                var dst = CommunicationChannel.NEW.SET_MAG_OFFSETS(cur_dst);
                set_mag_offsets.push_(new SET_MAG_OFFSETS_dst_adapter(dst));
                Debug.Assert(set_mag_offsets.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SET_MAG_OFFSETS(cur_dst);
                dst.pull_(new SET_MAG_OFFSETS_src_adapter(set_mag_offsets));
                Debug.Assert(set_mag_offsets.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(set_mag_offsets)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MEMINFO -------------------------");
            var meminfo = CommunicationChannel.NEW.MEMINFO(cur);
            fill(meminfo);
            onMEMINFO(meminfo);
            {
                var dst = CommunicationChannel.NEW.MEMINFO(cur_dst);
                meminfo.push_(new MEMINFO_dst_adapter(dst));
                Debug.Assert(meminfo.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MEMINFO(cur_dst);
                dst.pull_(new MEMINFO_src_adapter(meminfo));
                Debug.Assert(meminfo.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(meminfo)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AP_ADC -------------------------");
            var ap_adc = CommunicationChannel.NEW.AP_ADC(cur);
            fill(ap_adc);
            onAP_ADC(ap_adc);
            {
                var dst = CommunicationChannel.NEW.AP_ADC(cur_dst);
                ap_adc.push_(new AP_ADC_dst_adapter(dst));
                Debug.Assert(ap_adc.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AP_ADC(cur_dst);
                dst.pull_(new AP_ADC_src_adapter(ap_adc));
                Debug.Assert(ap_adc.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(ap_adc)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DIGICAM_CONFIGURE -------------------------");
            var digicam_configure = CommunicationChannel.NEW.DIGICAM_CONFIGURE(cur);
            fill(digicam_configure);
            onDIGICAM_CONFIGURE(digicam_configure);
            {
                var dst = CommunicationChannel.NEW.DIGICAM_CONFIGURE(cur_dst);
                digicam_configure.push_(new DIGICAM_CONFIGURE_dst_adapter(dst));
                Debug.Assert(digicam_configure.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DIGICAM_CONFIGURE(cur_dst);
                dst.pull_(new DIGICAM_CONFIGURE_src_adapter(digicam_configure));
                Debug.Assert(digicam_configure.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(digicam_configure)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DIGICAM_CONTROL -------------------------");
            var digicam_control = CommunicationChannel.NEW.DIGICAM_CONTROL(cur);
            fill(digicam_control);
            onDIGICAM_CONTROL(digicam_control);
            {
                var dst = CommunicationChannel.NEW.DIGICAM_CONTROL(cur_dst);
                digicam_control.push_(new DIGICAM_CONTROL_dst_adapter(dst));
                Debug.Assert(digicam_control.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DIGICAM_CONTROL(cur_dst);
                dst.pull_(new DIGICAM_CONTROL_src_adapter(digicam_control));
                Debug.Assert(digicam_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(digicam_control)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MOUNT_CONFIGURE -------------------------");
            var mount_configure = CommunicationChannel.NEW.MOUNT_CONFIGURE(cur);
            fill(mount_configure);
            onMOUNT_CONFIGURE(mount_configure);
            {
                var dst = CommunicationChannel.NEW.MOUNT_CONFIGURE(cur_dst);
                mount_configure.push_(new MOUNT_CONFIGURE_dst_adapter(dst));
                Debug.Assert(mount_configure.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MOUNT_CONFIGURE(cur_dst);
                dst.pull_(new MOUNT_CONFIGURE_src_adapter(mount_configure));
                Debug.Assert(mount_configure.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(mount_configure)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MOUNT_CONTROL -------------------------");
            var mount_control = CommunicationChannel.NEW.MOUNT_CONTROL(cur);
            fill(mount_control);
            onMOUNT_CONTROL(mount_control);
            {
                var dst = CommunicationChannel.NEW.MOUNT_CONTROL(cur_dst);
                mount_control.push_(new MOUNT_CONTROL_dst_adapter(dst));
                Debug.Assert(mount_control.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MOUNT_CONTROL(cur_dst);
                dst.pull_(new MOUNT_CONTROL_src_adapter(mount_control));
                Debug.Assert(mount_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(mount_control)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MOUNT_STATUS -------------------------");
            var mount_status = CommunicationChannel.NEW.MOUNT_STATUS(cur);
            fill(mount_status);
            onMOUNT_STATUS(mount_status);
            {
                var dst = CommunicationChannel.NEW.MOUNT_STATUS(cur_dst);
                mount_status.push_(new MOUNT_STATUS_dst_adapter(dst));
                Debug.Assert(mount_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MOUNT_STATUS(cur_dst);
                dst.pull_(new MOUNT_STATUS_src_adapter(mount_status));
                Debug.Assert(mount_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(mount_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- FENCE_POINT -------------------------");
            var fence_point = CommunicationChannel.NEW.FENCE_POINT(cur);
            fill(fence_point);
            onFENCE_POINT(fence_point);
            {
                var dst = CommunicationChannel.NEW.FENCE_POINT(cur_dst);
                fence_point.push_(new FENCE_POINT_dst_adapter(dst));
                Debug.Assert(fence_point.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.FENCE_POINT(cur_dst);
                dst.pull_(new FENCE_POINT_src_adapter(fence_point));
                Debug.Assert(fence_point.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(fence_point)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- FENCE_FETCH_POINT -------------------------");
            var fence_fetch_point = CommunicationChannel.NEW.FENCE_FETCH_POINT(cur);
            fill(fence_fetch_point);
            onFENCE_FETCH_POINT(fence_fetch_point);
            {
                var dst = CommunicationChannel.NEW.FENCE_FETCH_POINT(cur_dst);
                fence_fetch_point.push_(new FENCE_FETCH_POINT_dst_adapter(dst));
                Debug.Assert(fence_fetch_point.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.FENCE_FETCH_POINT(cur_dst);
                dst.pull_(new FENCE_FETCH_POINT_src_adapter(fence_fetch_point));
                Debug.Assert(fence_fetch_point.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(fence_fetch_point)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- FENCE_STATUS -------------------------");
            var fence_status = CommunicationChannel.NEW.FENCE_STATUS(cur);
            fill(fence_status);
            onFENCE_STATUS(fence_status);
            {
                var dst = CommunicationChannel.NEW.FENCE_STATUS(cur_dst);
                fence_status.push_(new FENCE_STATUS_dst_adapter(dst));
                Debug.Assert(fence_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.FENCE_STATUS(cur_dst);
                dst.pull_(new FENCE_STATUS_src_adapter(fence_status));
                Debug.Assert(fence_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(fence_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AHRS -------------------------");
            var ahrs = CommunicationChannel.NEW.AHRS(cur);
            fill(ahrs);
            onAHRS(ahrs);
            {
                var dst = CommunicationChannel.NEW.AHRS(cur_dst);
                ahrs.push_(new AHRS_dst_adapter(dst));
                Debug.Assert(ahrs.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AHRS(cur_dst);
                dst.pull_(new AHRS_src_adapter(ahrs));
                Debug.Assert(ahrs.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(ahrs)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- SIMSTATE -------------------------");
            var simstate = CommunicationChannel.NEW.SIMSTATE(cur);
            fill(simstate);
            onSIMSTATE(simstate);
            {
                var dst = CommunicationChannel.NEW.SIMSTATE(cur_dst);
                simstate.push_(new SIMSTATE_dst_adapter(dst));
                Debug.Assert(simstate.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.SIMSTATE(cur_dst);
                dst.pull_(new SIMSTATE_src_adapter(simstate));
                Debug.Assert(simstate.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(simstate)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- HWSTATUS -------------------------");
            var hwstatus = CommunicationChannel.NEW.HWSTATUS(cur);
            fill(hwstatus);
            onHWSTATUS(hwstatus);
            {
                var dst = CommunicationChannel.NEW.HWSTATUS(cur_dst);
                hwstatus.push_(new HWSTATUS_dst_adapter(dst));
                Debug.Assert(hwstatus.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.HWSTATUS(cur_dst);
                dst.pull_(new HWSTATUS_src_adapter(hwstatus));
                Debug.Assert(hwstatus.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(hwstatus)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RADIO -------------------------");
            var radio = CommunicationChannel.NEW.RADIO(cur);
            fill(radio);
            onRADIO(radio);
            {
                var dst = CommunicationChannel.NEW.RADIO(cur_dst);
                radio.push_(new RADIO_dst_adapter(dst));
                Debug.Assert(radio.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RADIO(cur_dst);
                dst.pull_(new RADIO_src_adapter(radio));
                Debug.Assert(radio.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(radio)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LIMITS_STATUS -------------------------");
            var limits_status = CommunicationChannel.NEW.LIMITS_STATUS(cur);
            fill(limits_status);
            onLIMITS_STATUS(limits_status);
            {
                var dst = CommunicationChannel.NEW.LIMITS_STATUS(cur_dst);
                limits_status.push_(new LIMITS_STATUS_dst_adapter(dst));
                Debug.Assert(limits_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LIMITS_STATUS(cur_dst);
                dst.pull_(new LIMITS_STATUS_src_adapter(limits_status));
                Debug.Assert(limits_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(limits_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- WIND -------------------------");
            var wind = CommunicationChannel.NEW.WIND(cur);
            fill(wind);
            onWIND(wind);
            {
                var dst = CommunicationChannel.NEW.WIND(cur_dst);
                wind.push_(new WIND_dst_adapter(dst));
                Debug.Assert(wind.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.WIND(cur_dst);
                dst.pull_(new WIND_src_adapter(wind));
                Debug.Assert(wind.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(wind)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DATA16 -------------------------");
            var data16 = CommunicationChannel.NEW.DATA16(cur);
            fill(data16);
            onDATA16(data16);
            {
                var dst = CommunicationChannel.NEW.DATA16(cur_dst);
                data16.push_(new DATA16_dst_adapter(dst));
                Debug.Assert(data16.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DATA16(cur_dst);
                dst.pull_(new DATA16_src_adapter(data16));
                Debug.Assert(data16.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(data16)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DATA32 -------------------------");
            var data32 = CommunicationChannel.NEW.DATA32(cur);
            fill(data32);
            onDATA32(data32);
            {
                var dst = CommunicationChannel.NEW.DATA32(cur_dst);
                data32.push_(new DATA32_dst_adapter(dst));
                Debug.Assert(data32.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DATA32(cur_dst);
                dst.pull_(new DATA32_src_adapter(data32));
                Debug.Assert(data32.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(data32)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DATA64 -------------------------");
            var data64 = CommunicationChannel.NEW.DATA64(cur);
            fill(data64);
            onDATA64(data64);
            {
                var dst = CommunicationChannel.NEW.DATA64(cur_dst);
                data64.push_(new DATA64_dst_adapter(dst));
                Debug.Assert(data64.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DATA64(cur_dst);
                dst.pull_(new DATA64_src_adapter(data64));
                Debug.Assert(data64.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(data64)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DATA96 -------------------------");
            var data96 = CommunicationChannel.NEW.DATA96(cur);
            fill(data96);
            onDATA96(data96);
            {
                var dst = CommunicationChannel.NEW.DATA96(cur_dst);
                data96.push_(new DATA96_dst_adapter(dst));
                Debug.Assert(data96.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DATA96(cur_dst);
                dst.pull_(new DATA96_src_adapter(data96));
                Debug.Assert(data96.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(data96)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RANGEFINDER -------------------------");
            var rangefinder = CommunicationChannel.NEW.RANGEFINDER(cur);
            fill(rangefinder);
            onRANGEFINDER(rangefinder);
            {
                var dst = CommunicationChannel.NEW.RANGEFINDER(cur_dst);
                rangefinder.push_(new RANGEFINDER_dst_adapter(dst));
                Debug.Assert(rangefinder.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RANGEFINDER(cur_dst);
                dst.pull_(new RANGEFINDER_src_adapter(rangefinder));
                Debug.Assert(rangefinder.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(rangefinder)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AIRSPEED_AUTOCAL -------------------------");
            var airspeed_autocal = CommunicationChannel.NEW.AIRSPEED_AUTOCAL(cur);
            fill(airspeed_autocal);
            onAIRSPEED_AUTOCAL(airspeed_autocal);
            {
                var dst = CommunicationChannel.NEW.AIRSPEED_AUTOCAL(cur_dst);
                airspeed_autocal.push_(new AIRSPEED_AUTOCAL_dst_adapter(dst));
                Debug.Assert(airspeed_autocal.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AIRSPEED_AUTOCAL(cur_dst);
                dst.pull_(new AIRSPEED_AUTOCAL_src_adapter(airspeed_autocal));
                Debug.Assert(airspeed_autocal.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(airspeed_autocal)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RALLY_POINT -------------------------");
            var rally_point = CommunicationChannel.NEW.RALLY_POINT(cur);
            fill(rally_point);
            onRALLY_POINT(rally_point);
            {
                var dst = CommunicationChannel.NEW.RALLY_POINT(cur_dst);
                rally_point.push_(new RALLY_POINT_dst_adapter(dst));
                Debug.Assert(rally_point.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RALLY_POINT(cur_dst);
                dst.pull_(new RALLY_POINT_src_adapter(rally_point));
                Debug.Assert(rally_point.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(rally_point)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RALLY_FETCH_POINT -------------------------");
            var rally_fetch_point = CommunicationChannel.NEW.RALLY_FETCH_POINT(cur);
            fill(rally_fetch_point);
            onRALLY_FETCH_POINT(rally_fetch_point);
            {
                var dst = CommunicationChannel.NEW.RALLY_FETCH_POINT(cur_dst);
                rally_fetch_point.push_(new RALLY_FETCH_POINT_dst_adapter(dst));
                Debug.Assert(rally_fetch_point.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RALLY_FETCH_POINT(cur_dst);
                dst.pull_(new RALLY_FETCH_POINT_src_adapter(rally_fetch_point));
                Debug.Assert(rally_fetch_point.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(rally_fetch_point)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- COMPASSMOT_STATUS -------------------------");
            var compassmot_status = CommunicationChannel.NEW.COMPASSMOT_STATUS(cur);
            fill(compassmot_status);
            onCOMPASSMOT_STATUS(compassmot_status);
            {
                var dst = CommunicationChannel.NEW.COMPASSMOT_STATUS(cur_dst);
                compassmot_status.push_(new COMPASSMOT_STATUS_dst_adapter(dst));
                Debug.Assert(compassmot_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.COMPASSMOT_STATUS(cur_dst);
                dst.pull_(new COMPASSMOT_STATUS_src_adapter(compassmot_status));
                Debug.Assert(compassmot_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(compassmot_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AHRS2 -------------------------");
            var ahrs2 = CommunicationChannel.NEW.AHRS2(cur);
            fill(ahrs2);
            onAHRS2(ahrs2);
            {
                var dst = CommunicationChannel.NEW.AHRS2(cur_dst);
                ahrs2.push_(new AHRS2_dst_adapter(dst));
                Debug.Assert(ahrs2.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AHRS2(cur_dst);
                dst.pull_(new AHRS2_src_adapter(ahrs2));
                Debug.Assert(ahrs2.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(ahrs2)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_STATUS -------------------------");
            var camera_status = CommunicationChannel.NEW.CAMERA_STATUS(cur);
            fill(camera_status);
            onCAMERA_STATUS(camera_status);
            {
                var dst = CommunicationChannel.NEW.CAMERA_STATUS(cur_dst);
                camera_status.push_(new CAMERA_STATUS_dst_adapter(dst));
                Debug.Assert(camera_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_STATUS(cur_dst);
                dst.pull_(new CAMERA_STATUS_src_adapter(camera_status));
                Debug.Assert(camera_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- CAMERA_FEEDBACK -------------------------");
            var camera_feedback = CommunicationChannel.NEW.CAMERA_FEEDBACK(cur);
            fill(camera_feedback);
            onCAMERA_FEEDBACK(camera_feedback);
            {
                var dst = CommunicationChannel.NEW.CAMERA_FEEDBACK(cur_dst);
                camera_feedback.push_(new CAMERA_FEEDBACK_dst_adapter(dst));
                Debug.Assert(camera_feedback.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.CAMERA_FEEDBACK(cur_dst);
                dst.pull_(new CAMERA_FEEDBACK_src_adapter(camera_feedback));
                Debug.Assert(camera_feedback.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(camera_feedback)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- BATTERY2 -------------------------");
            var battery2 = CommunicationChannel.NEW.BATTERY2(cur);
            fill(battery2);
            onBATTERY2(battery2);
            {
                var dst = CommunicationChannel.NEW.BATTERY2(cur_dst);
                battery2.push_(new BATTERY2_dst_adapter(dst));
                Debug.Assert(battery2.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.BATTERY2(cur_dst);
                dst.pull_(new BATTERY2_src_adapter(battery2));
                Debug.Assert(battery2.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(battery2)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AHRS3 -------------------------");
            var ahrs3 = CommunicationChannel.NEW.AHRS3(cur);
            fill(ahrs3);
            onAHRS3(ahrs3);
            {
                var dst = CommunicationChannel.NEW.AHRS3(cur_dst);
                ahrs3.push_(new AHRS3_dst_adapter(dst));
                Debug.Assert(ahrs3.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AHRS3(cur_dst);
                dst.pull_(new AHRS3_src_adapter(ahrs3));
                Debug.Assert(ahrs3.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(ahrs3)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- AUTOPILOT_VERSION_REQUEST -------------------------");
            var autopilot_version_request = CommunicationChannel.NEW.AUTOPILOT_VERSION_REQUEST(cur);
            fill(autopilot_version_request);
            onAUTOPILOT_VERSION_REQUEST(autopilot_version_request);
            {
                var dst = CommunicationChannel.NEW.AUTOPILOT_VERSION_REQUEST(cur_dst);
                autopilot_version_request.push_(new AUTOPILOT_VERSION_REQUEST_dst_adapter(dst));
                Debug.Assert(autopilot_version_request.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.AUTOPILOT_VERSION_REQUEST(cur_dst);
                dst.pull_(new AUTOPILOT_VERSION_REQUEST_src_adapter(autopilot_version_request));
                Debug.Assert(autopilot_version_request.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(autopilot_version_request)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- REMOTE_LOG_DATA_BLOCK -------------------------");
            var remote_log_data_block = CommunicationChannel.NEW.REMOTE_LOG_DATA_BLOCK(cur);
            fill(remote_log_data_block);
            onREMOTE_LOG_DATA_BLOCK(remote_log_data_block);
            {
                var dst = CommunicationChannel.NEW.REMOTE_LOG_DATA_BLOCK(cur_dst);
                remote_log_data_block.push_(new REMOTE_LOG_DATA_BLOCK_dst_adapter(dst));
                Debug.Assert(remote_log_data_block.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.REMOTE_LOG_DATA_BLOCK(cur_dst);
                dst.pull_(new REMOTE_LOG_DATA_BLOCK_src_adapter(remote_log_data_block));
                Debug.Assert(remote_log_data_block.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(remote_log_data_block)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- REMOTE_LOG_BLOCK_STATUS -------------------------");
            var remote_log_block_status = CommunicationChannel.NEW.REMOTE_LOG_BLOCK_STATUS(cur);
            fill(remote_log_block_status);
            onREMOTE_LOG_BLOCK_STATUS(remote_log_block_status);
            {
                var dst = CommunicationChannel.NEW.REMOTE_LOG_BLOCK_STATUS(cur_dst);
                remote_log_block_status.push_(new REMOTE_LOG_BLOCK_STATUS_dst_adapter(dst));
                Debug.Assert(remote_log_block_status.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.REMOTE_LOG_BLOCK_STATUS(cur_dst);
                dst.pull_(new REMOTE_LOG_BLOCK_STATUS_src_adapter(remote_log_block_status));
                Debug.Assert(remote_log_block_status.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(remote_log_block_status)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- LED_CONTROL -------------------------");
            var led_control = CommunicationChannel.NEW.LED_CONTROL(cur);
            fill(led_control);
            onLED_CONTROL(led_control);
            {
                var dst = CommunicationChannel.NEW.LED_CONTROL(cur_dst);
                led_control.push_(new LED_CONTROL_dst_adapter(dst));
                Debug.Assert(led_control.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.LED_CONTROL(cur_dst);
                dst.pull_(new LED_CONTROL_src_adapter(led_control));
                Debug.Assert(led_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(led_control)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MAG_CAL_PROGRESS -------------------------");
            var mag_cal_progress = CommunicationChannel.NEW.MAG_CAL_PROGRESS(cur);
            fill(mag_cal_progress);
            onMAG_CAL_PROGRESS(mag_cal_progress);
            {
                var dst = CommunicationChannel.NEW.MAG_CAL_PROGRESS(cur_dst);
                mag_cal_progress.push_(new MAG_CAL_PROGRESS_dst_adapter(dst));
                Debug.Assert(mag_cal_progress.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MAG_CAL_PROGRESS(cur_dst);
                dst.pull_(new MAG_CAL_PROGRESS_src_adapter(mag_cal_progress));
                Debug.Assert(mag_cal_progress.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(mag_cal_progress)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- MAG_CAL_REPORT -------------------------");
            var mag_cal_report = CommunicationChannel.NEW.MAG_CAL_REPORT(cur);
            fill(mag_cal_report);
            onMAG_CAL_REPORT(mag_cal_report);
            {
                var dst = CommunicationChannel.NEW.MAG_CAL_REPORT(cur_dst);
                mag_cal_report.push_(new MAG_CAL_REPORT_dst_adapter(dst));
                Debug.Assert(mag_cal_report.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.MAG_CAL_REPORT(cur_dst);
                dst.pull_(new MAG_CAL_REPORT_src_adapter(mag_cal_report));
                Debug.Assert(mag_cal_report.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(mag_cal_report)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- EKF_STATUS_REPORT -------------------------");
            var ekf_status_report = CommunicationChannel.NEW.EKF_STATUS_REPORT(cur);
            fill(ekf_status_report);
            onEKF_STATUS_REPORT(ekf_status_report);
            {
                var dst = CommunicationChannel.NEW.EKF_STATUS_REPORT(cur_dst);
                ekf_status_report.push_(new EKF_STATUS_REPORT_dst_adapter(dst));
                Debug.Assert(ekf_status_report.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.EKF_STATUS_REPORT(cur_dst);
                dst.pull_(new EKF_STATUS_REPORT_src_adapter(ekf_status_report));
                Debug.Assert(ekf_status_report.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(ekf_status_report)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- PID_TUNING -------------------------");
            var pid_tuning = CommunicationChannel.NEW.PID_TUNING(cur);
            fill(pid_tuning);
            onPID_TUNING(pid_tuning);
            {
                var dst = CommunicationChannel.NEW.PID_TUNING(cur_dst);
                pid_tuning.push_(new PID_TUNING_dst_adapter(dst));
                Debug.Assert(pid_tuning.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.PID_TUNING(cur_dst);
                dst.pull_(new PID_TUNING_src_adapter(pid_tuning));
                Debug.Assert(pid_tuning.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(pid_tuning)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GIMBAL_REPORT -------------------------");
            var gimbal_report = CommunicationChannel.NEW.GIMBAL_REPORT(cur);
            fill(gimbal_report);
            onGIMBAL_REPORT(gimbal_report);
            {
                var dst = CommunicationChannel.NEW.GIMBAL_REPORT(cur_dst);
                gimbal_report.push_(new GIMBAL_REPORT_dst_adapter(dst));
                Debug.Assert(gimbal_report.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GIMBAL_REPORT(cur_dst);
                dst.pull_(new GIMBAL_REPORT_src_adapter(gimbal_report));
                Debug.Assert(gimbal_report.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gimbal_report)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GIMBAL_CONTROL -------------------------");
            var gimbal_control = CommunicationChannel.NEW.GIMBAL_CONTROL(cur);
            fill(gimbal_control);
            onGIMBAL_CONTROL(gimbal_control);
            {
                var dst = CommunicationChannel.NEW.GIMBAL_CONTROL(cur_dst);
                gimbal_control.push_(new GIMBAL_CONTROL_dst_adapter(dst));
                Debug.Assert(gimbal_control.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GIMBAL_CONTROL(cur_dst);
                dst.pull_(new GIMBAL_CONTROL_src_adapter(gimbal_control));
                Debug.Assert(gimbal_control.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gimbal_control)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GIMBAL_TORQUE_CMD_REPORT -------------------------");
            var gimbal_torque_cmd_report = CommunicationChannel.NEW.GIMBAL_TORQUE_CMD_REPORT(cur);
            fill(gimbal_torque_cmd_report);
            onGIMBAL_TORQUE_CMD_REPORT(gimbal_torque_cmd_report);
            {
                var dst = CommunicationChannel.NEW.GIMBAL_TORQUE_CMD_REPORT(cur_dst);
                gimbal_torque_cmd_report.push_(new GIMBAL_TORQUE_CMD_REPORT_dst_adapter(dst));
                Debug.Assert(gimbal_torque_cmd_report.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GIMBAL_TORQUE_CMD_REPORT(cur_dst);
                dst.pull_(new GIMBAL_TORQUE_CMD_REPORT_src_adapter(gimbal_torque_cmd_report));
                Debug.Assert(gimbal_torque_cmd_report.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gimbal_torque_cmd_report)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GOPRO_HEARTBEAT -------------------------");
            var gopro_heartbeat = CommunicationChannel.NEW.GOPRO_HEARTBEAT(cur);
            fill(gopro_heartbeat);
            onGOPRO_HEARTBEAT(gopro_heartbeat);
            {
                var dst = CommunicationChannel.NEW.GOPRO_HEARTBEAT(cur_dst);
                gopro_heartbeat.push_(new GOPRO_HEARTBEAT_dst_adapter(dst));
                Debug.Assert(gopro_heartbeat.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GOPRO_HEARTBEAT(cur_dst);
                dst.pull_(new GOPRO_HEARTBEAT_src_adapter(gopro_heartbeat));
                Debug.Assert(gopro_heartbeat.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gopro_heartbeat)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GOPRO_GET_REQUEST -------------------------");
            var gopro_get_request = CommunicationChannel.NEW.GOPRO_GET_REQUEST(cur);
            fill(gopro_get_request);
            onGOPRO_GET_REQUEST(gopro_get_request);
            {
                var dst = CommunicationChannel.NEW.GOPRO_GET_REQUEST(cur_dst);
                gopro_get_request.push_(new GOPRO_GET_REQUEST_dst_adapter(dst));
                Debug.Assert(gopro_get_request.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GOPRO_GET_REQUEST(cur_dst);
                dst.pull_(new GOPRO_GET_REQUEST_src_adapter(gopro_get_request));
                Debug.Assert(gopro_get_request.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gopro_get_request)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GOPRO_GET_RESPONSE -------------------------");
            var gopro_get_response = CommunicationChannel.NEW.GOPRO_GET_RESPONSE(cur);
            fill(gopro_get_response);
            onGOPRO_GET_RESPONSE(gopro_get_response);
            {
                var dst = CommunicationChannel.NEW.GOPRO_GET_RESPONSE(cur_dst);
                gopro_get_response.push_(new GOPRO_GET_RESPONSE_dst_adapter(dst));
                Debug.Assert(gopro_get_response.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GOPRO_GET_RESPONSE(cur_dst);
                dst.pull_(new GOPRO_GET_RESPONSE_src_adapter(gopro_get_response));
                Debug.Assert(gopro_get_response.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gopro_get_response)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GOPRO_SET_REQUEST -------------------------");
            var gopro_set_request = CommunicationChannel.NEW.GOPRO_SET_REQUEST(cur);
            fill(gopro_set_request);
            onGOPRO_SET_REQUEST(gopro_set_request);
            {
                var dst = CommunicationChannel.NEW.GOPRO_SET_REQUEST(cur_dst);
                gopro_set_request.push_(new GOPRO_SET_REQUEST_dst_adapter(dst));
                Debug.Assert(gopro_set_request.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GOPRO_SET_REQUEST(cur_dst);
                dst.pull_(new GOPRO_SET_REQUEST_src_adapter(gopro_set_request));
                Debug.Assert(gopro_set_request.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gopro_set_request)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- GOPRO_SET_RESPONSE -------------------------");
            var gopro_set_response = CommunicationChannel.NEW.GOPRO_SET_RESPONSE(cur);
            fill(gopro_set_response);
            onGOPRO_SET_RESPONSE(gopro_set_response);
            {
                var dst = CommunicationChannel.NEW.GOPRO_SET_RESPONSE(cur_dst);
                gopro_set_response.push_(new GOPRO_SET_RESPONSE_dst_adapter(dst));
                Debug.Assert(gopro_set_response.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.GOPRO_SET_RESPONSE(cur_dst);
                dst.pull_(new GOPRO_SET_RESPONSE_src_adapter(gopro_set_response));
                Debug.Assert(gopro_set_response.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(gopro_set_response)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- RPM -------------------------");
            var rpm = CommunicationChannel.NEW.RPM(cur);
            fill(rpm);
            onRPM(rpm);
            {
                var dst = CommunicationChannel.NEW.RPM(cur_dst);
                rpm.push_(new RPM_dst_adapter(dst));
                Debug.Assert(rpm.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.RPM(cur_dst);
                dst.pull_(new RPM_src_adapter(rpm));
                Debug.Assert(rpm.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(rpm)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DEVICE_OP_READ -------------------------");
            var device_op_read = CommunicationChannel.NEW.DEVICE_OP_READ(cur);
            fill(device_op_read);
            onDEVICE_OP_READ(device_op_read);
            {
                var dst = CommunicationChannel.NEW.DEVICE_OP_READ(cur_dst);
                device_op_read.push_(new DEVICE_OP_READ_dst_adapter(dst));
                Debug.Assert(device_op_read.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DEVICE_OP_READ(cur_dst);
                dst.pull_(new DEVICE_OP_READ_src_adapter(device_op_read));
                Debug.Assert(device_op_read.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(device_op_read)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DEVICE_OP_READ_REPLY -------------------------");
            var device_op_read_reply = CommunicationChannel.NEW.DEVICE_OP_READ_REPLY(cur);
            fill(device_op_read_reply);
            onDEVICE_OP_READ_REPLY(device_op_read_reply);
            {
                var dst = CommunicationChannel.NEW.DEVICE_OP_READ_REPLY(cur_dst);
                device_op_read_reply.push_(new DEVICE_OP_READ_REPLY_dst_adapter(dst));
                Debug.Assert(device_op_read_reply.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DEVICE_OP_READ_REPLY(cur_dst);
                dst.pull_(new DEVICE_OP_READ_REPLY_src_adapter(device_op_read_reply));
                Debug.Assert(device_op_read_reply.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(device_op_read_reply)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DEVICE_OP_WRITE -------------------------");
            var device_op_write = CommunicationChannel.NEW.DEVICE_OP_WRITE(cur);
            fill(device_op_write);
            onDEVICE_OP_WRITE(device_op_write);
            {
                var dst = CommunicationChannel.NEW.DEVICE_OP_WRITE(cur_dst);
                device_op_write.push_(new DEVICE_OP_WRITE_dst_adapter(dst));
                Debug.Assert(device_op_write.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DEVICE_OP_WRITE(cur_dst);
                dst.pull_(new DEVICE_OP_WRITE_src_adapter(device_op_write));
                Debug.Assert(device_op_write.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(device_op_write)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- DEVICE_OP_WRITE_REPLY -------------------------");
            var device_op_write_reply = CommunicationChannel.NEW.DEVICE_OP_WRITE_REPLY(cur);
            fill(device_op_write_reply);
            onDEVICE_OP_WRITE_REPLY(device_op_write_reply);
            {
                var dst = CommunicationChannel.NEW.DEVICE_OP_WRITE_REPLY(cur_dst);
                device_op_write_reply.push_(new DEVICE_OP_WRITE_REPLY_dst_adapter(dst));
                Debug.Assert(device_op_write_reply.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.DEVICE_OP_WRITE_REPLY(cur_dst);
                dst.pull_(new DEVICE_OP_WRITE_REPLY_src_adapter(device_op_write_reply));
                Debug.Assert(device_op_write_reply.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(device_op_write_reply)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- ADAP_TUNING -------------------------");
            var adap_tuning = CommunicationChannel.NEW.ADAP_TUNING(cur);
            fill(adap_tuning);
            onADAP_TUNING(adap_tuning);
            {
                var dst = CommunicationChannel.NEW.ADAP_TUNING(cur_dst);
                adap_tuning.push_(new ADAP_TUNING_dst_adapter(dst));
                Debug.Assert(adap_tuning.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.ADAP_TUNING(cur_dst);
                dst.pull_(new ADAP_TUNING_src_adapter(adap_tuning));
                Debug.Assert(adap_tuning.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(adap_tuning)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
            Debug.Print("-------------------- VISION_POSITION_DELTA -------------------------");
            var vision_position_delta = CommunicationChannel.NEW.VISION_POSITION_DELTA(cur);
            fill(vision_position_delta);
            onVISION_POSITION_DELTA(vision_position_delta);
            {
                var dst = CommunicationChannel.NEW.VISION_POSITION_DELTA(cur_dst);
                vision_position_delta.push_(new VISION_POSITION_DELTA_dst_adapter(dst));
                Debug.Assert(vision_position_delta.data_.bytes.SequenceEqual(dst.data_.bytes));
                dst = CommunicationChannel.NEW.VISION_POSITION_DELTA(cur_dst);
                dst.pull_(new VISION_POSITION_DELTA_src_adapter(vision_position_delta));
                Debug.Assert(vision_position_delta.data_.bytes.SequenceEqual(dst.data_.bytes));
            }
            if(CommunicationChannel_instance.send(vision_position_delta)) CommunicationChannel_instance.CopyTo(TestChannel_instance.Std);
            else throw new SystemException("error AD_HOC_FAILURE_SENDING_QUEUE_OVERFLOW");
        }
    }
}
